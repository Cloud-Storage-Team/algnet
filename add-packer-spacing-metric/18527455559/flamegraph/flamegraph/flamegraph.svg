<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1174.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1157" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1157" > </text>
<g id="frames">
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="114.6" y="965" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="117.63" y="975.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (80,808,080 samples, 3.94%)</title><rect x="748.2" y="901" width="46.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="751.23" y="911.5" >sim:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="677" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1097.0" y="661" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1100.00" y="671.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (121,212,120 samples, 5.91%)</title><rect x="725.0" y="933" width="69.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="727.98" y="943.5" >sim::Co..</text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.48%)</title><rect x="1009.8" y="773" width="17.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1012.80" y="783.5" ></text>
</g>
<g >
<title>sim::TcpCCParser::parse_i_tcp_cc (50,505,050 samples, 2.46%)</title><rect x="765.7" y="869" width="29.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="768.67" y="879.5" >si..</text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.49%)</title><rect x="1108.6" y="693" width="5.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1111.62" y="703.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse_send_data (10,101,010 samples, 0.49%)</title><rect x="719.2" y="933" width="5.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="722.16" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="837" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="847.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (343,434,340 samples, 16.75%)</title><rect x="986.6" y="821" width="197.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="989.55" y="831.5" >YAML::SingleDocParser::Ha..</text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 11.82%)</title><rect x="166.9" y="885" width="139.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="169.95" y="895.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (30,303,030 samples, 1.48%)</title><rect x="1166.7" y="741" width="17.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1169.75" y="751.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.48%)</title><rect x="422.7" y="949" width="17.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="425.71" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="597" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="607.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.49%)</title><rect x="876.1" y="709" width="5.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="879.11" y="719.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.99%)</title><rect x="579.7" y="933" width="11.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="582.66" y="943.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="1038.9" y="709" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1041.87" y="719.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (393,939,390 samples, 19.21%)</title><rect x="393.6" y="1013" width="226.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="396.65" y="1023.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.49%)</title><rect x="306.5" y="949" width="5.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="309.45" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="197" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.48%)</title><rect x="992.4" y="789" width="17.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="995.36" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="986.6" y="661" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="989.55" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.49%)</title><rect x="812.2" y="837" width="5.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="815.17" y="847.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.99%)</title><rect x="666.8" y="949" width="11.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="669.85" y="959.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="672.7" y="933" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="675.66" y="943.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.49%)</title><rect x="103.0" y="917" width="5.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="106.00" y="927.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 1.97%)</title><rect x="457.6" y="949" width="23.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="460.59" y="959.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="277" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="725" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="735.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.49%)</title><rect x="15.8" y="933" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.81" y="943.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.49%)</title><rect x="480.8" y="933" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="483.84" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="15.8" y="917" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="927.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 2.46%)</title><rect x="620.3" y="1013" width="29.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="623.34" y="1023.5" >si..</text>
</g>
<g >
<title>__libc_start_main (2,040,404,020 samples, 99.51%)</title><rect x="15.8" y="1077" width="1174.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="18.81" y="1087.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="741" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (131,313,130 samples, 6.40%)</title><rect x="911.0" y="789" width="75.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="913.99" y="799.5" >YAML::Sc..</text>
</g>
<g >
<title>YAML::detail::node_data::set_scalar (10,101,010 samples, 0.49%)</title><rect x="1044.7" y="741" width="5.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1047.68" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="789" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="799.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.99%)</title><rect x="73.9" y="965" width="11.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="76.94" y="975.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 3.45%)</title><rect x="934.2" y="725" width="40.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="937.24" y="735.5" >int..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="905.2" y="741" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="908.17" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="549" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="559.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.49%)</title><rect x="1108.6" y="709" width="5.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1111.62" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="853" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="863.5" ></text>
</g>
<g >
<title>sim::Switch::process (131,313,130 samples, 6.40%)</title><rect x="515.7" y="981" width="75.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="518.71" y="991.5" >sim::Swi..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (373,737,370 samples, 18.23%)</title><rect x="114.6" y="981" width="215.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="117.63" y="991.5" >std::ostream&amp; std::ostream::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="981" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.99%)</title><rect x="870.3" y="757" width="11.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="873.30" y="767.5" ></text>
</g>
<g >
<title>sim::load_file (676,767,670 samples, 33.00%)</title><rect x="794.7" y="1013" width="389.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="797.73" y="1023.5" >sim::load_file</text>
</g>
<g >
<title>sim::SimplePacketReordering::add_record (10,101,010 samples, 0.49%)</title><rect x="504.1" y="949" width="5.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="507.09" y="959.5" ></text>
</g>
<g >
<title>__dynamic_cast (10,101,010 samples, 0.49%)</title><rect x="742.4" y="901" width="5.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="745.41" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="757" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (70,707,070 samples, 3.45%)</title><rect x="678.5" y="917" width="40.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="681.47" y="927.5" >std..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="629" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="901" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="885" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1029" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="437" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 3.45%)</title><rect x="1062.1" y="693" width="40.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1065.12" y="703.5" >int..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.46%)</title><rect x="1131.9" y="677" width="29.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1134.87" y="687.5" >in..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (111,111,110 samples, 5.42%)</title><rect x="655.2" y="965" width="64.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="658.22" y="975.5" >std::_R..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (101,010,100 samples, 4.93%)</title><rect x="916.8" y="757" width="58.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="919.80" y="767.5" >int YA..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="693" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="581" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="591.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (50,505,050 samples, 2.46%)</title><rect x="416.9" y="997" width="29.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="419.90" y="1007.5" >si..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.49%)</title><rect x="800.5" y="821" width="5.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="803.54" y="831.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.99%)</title><rect x="85.6" y="965" width="11.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="88.57" y="975.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.49%)</title><rect x="858.7" y="805" width="5.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="861.67" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="789" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.48%)</title><rect x="1009.8" y="757" width="17.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1012.80" y="767.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (121,212,120 samples, 5.91%)</title><rect x="725.0" y="917" width="69.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="727.98" y="927.5" >sim::Co..</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (919,191,910 samples, 44.83%)</title><rect x="655.2" y="1029" width="529.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="658.22" y="1039.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 13.30%)</title><rect x="149.5" y="917" width="157.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="152.51" y="927.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::Link::Transmit::operator (70,707,070 samples, 3.45%)</title><rect x="446.0" y="997" width="40.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="448.96" y="1007.5" >sim..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="91.4" y="949" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="94.38" y="959.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.46%)</title><rect x="829.6" y="741" width="29.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="832.61" y="751.5" >in..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="986.6" y="693" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="989.55" y="703.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (40,404,040 samples, 1.97%)</title><rect x="422.7" y="965" width="23.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="425.71" y="975.5" >s..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (676,767,670 samples, 33.00%)</title><rect x="794.7" y="949" width="389.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="797.73" y="959.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>sim::TcpFlow::send_data (10,101,010 samples, 0.49%)</title><rect x="411.1" y="965" width="5.8" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="414.08" y="975.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.96%)</title><rect x="684.3" y="869" width="34.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="687.29" y="879.5" >[l..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="53" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="63.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="905.2" y="725" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="908.17" y="735.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.49%)</title><rect x="370.4" y="1013" width="5.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="373.39" y="1023.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (10,101,010 samples, 0.49%)</title><rect x="777.3" y="789" width="5.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="780.29" y="799.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.49%)</title><rect x="475.0" y="933" width="5.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="478.02" y="943.5" ></text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.49%)</title><rect x="1108.6" y="677" width="5.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1111.62" y="687.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.49%)</title><rect x="858.7" y="821" width="5.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="861.67" y="831.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.49%)</title><rect x="486.7" y="981" width="5.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="489.65" y="991.5" ></text>
</g>
<g >
<title>all (2,050,505,030 samples, 100%)</title><rect x="10.0" y="1125" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 1.48%)</title><rect x="597.1" y="949" width="17.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="600.09" y="959.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 2.96%)</title><rect x="335.5" y="949" width="34.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="338.52" y="959.5" >[l..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (30,303,030 samples, 1.48%)</title><rect x="1079.6" y="661" width="17.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1082.56" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="709" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="421" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="15.8" y="885" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="27.4" y="965" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.44" y="975.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.99%)</title><rect x="998.2" y="757" width="11.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1001.18" y="767.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.49%)</title><rect x="992.4" y="693" width="5.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="995.36" y="703.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (141,414,140 samples, 6.90%)</title><rect x="905.2" y="805" width="81.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="908.17" y="815.5" >YAML::Sca..</text>
</g>
<g >
<title>_start (2,040,404,020 samples, 99.51%)</title><rect x="15.8" y="1093" width="1174.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="18.81" y="1103.5" >_start</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="905.2" y="757" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="908.17" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="85" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="725" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="735.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (60,606,060 samples, 2.96%)</title><rect x="539.0" y="965" width="34.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="541.97" y="975.5" >si..</text>
</g>
<g >
<title>sim::TahoeCCParser::parse_tahoe_cc (50,505,050 samples, 2.46%)</title><rect x="765.7" y="853" width="29.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="768.67" y="863.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="852.9" y="709" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="855.86" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="693" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="703.5" ></text>
</g>
<g >
<title>sim::TcpFlowParser::parse_tcp_flow (60,606,060 samples, 2.96%)</title><rect x="759.9" y="885" width="34.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="762.85" y="895.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.96%)</title><rect x="1067.9" y="677" width="34.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1070.93" y="687.5" >in..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (111,111,110 samples, 5.42%)</title><rect x="655.2" y="997" width="64.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="658.22" y="1007.5" >std::_S..</text>
</g>
<g >
<title>sim::AddDataToConnection::operator (10,101,010 samples, 0.49%)</title><rect x="411.1" y="997" width="5.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="414.08" y="1007.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.49%)</title><rect x="1178.4" y="677" width="5.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1181.37" y="687.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 2.96%)</title><rect x="335.5" y="933" width="34.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="338.52" y="943.5" >vs..</text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.49%)</title><rect x="323.9" y="949" width="5.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="326.89" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="709" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="422.7" y="933" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="425.71" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 3.45%)</title><rect x="265.8" y="869" width="40.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="268.76" y="879.5" >[li..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.99%)</title><rect x="1149.3" y="629" width="11.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1152.31" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1013" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="27.4" y="997" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="30.44" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="509.9" y="917" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="512.90" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="133" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="143.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.49%)</title><rect x="1126.1" y="661" width="5.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1129.06" y="671.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (131,313,130 samples, 6.40%)</title><rect x="1108.6" y="757" width="75.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1111.62" y="767.5" >YAML::Si..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.49%)</title><rect x="411.1" y="933" width="5.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="414.08" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="869" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="879.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.49%)</title><rect x="992.4" y="725" width="5.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="995.36" y="735.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.49%)</title><rect x="986.6" y="789" width="5.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="989.55" y="799.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.49%)</title><rect x="103.0" y="981" width="5.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="106.00" y="991.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.49%)</title><rect x="440.1" y="949" width="5.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="443.15" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="885" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>void std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::_M_push_back_aux&lt;YAML::Token&gt; (10,101,010 samples, 0.49%)</title><rect x="1004.0" y="709" width="5.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1006.99" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (111,111,110 samples, 5.42%)</title><rect x="655.2" y="981" width="64.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="658.22" y="991.5" >std::_S..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.49%)</title><rect x="533.2" y="917" width="5.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="536.15" y="927.5" ></text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.49%)</title><rect x="103.0" y="901" width="5.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="106.00" y="911.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="748.2" y="885" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="751.23" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="581" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="661" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="757" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="997" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="1007.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.48%)</title><rect x="957.5" y="677" width="17.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="960.49" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="645" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.94" y="655.5" ></text>
</g>
<g >
<title>main (2,030,303,010 samples, 99.01%)</title><rect x="21.6" y="1045" width="1168.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.63" y="1055.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="533" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.49%)</title><rect x="783.1" y="773" width="5.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="786.10" y="783.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (10,101,010 samples, 0.49%)</title><rect x="643.6" y="997" width="5.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="646.60" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 12.32%)</title><rect x="161.1" y="901" width="145.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="164.13" y="911.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="677" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1077" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="869" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="879.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.49%)</title><rect x="108.8" y="981" width="5.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="111.82" y="991.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.48%)</title><rect x="521.5" y="933" width="17.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="524.53" y="943.5" ></text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.49%)</title><rect x="1102.8" y="709" width="5.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1105.81" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="629" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="639.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.49%)</title><rect x="759.9" y="869" width="5.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="762.85" y="879.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.49%)</title><rect x="120.4" y="965" width="5.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="123.44" y="975.5" ></text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.49%)</title><rect x="649.4" y="1029" width="5.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="652.41" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="1038.9" y="677" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1041.87" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.96%)</title><rect x="823.8" y="757" width="34.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="826.79" y="767.5" >in..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.49%)</title><rect x="794.7" y="837" width="5.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="797.73" y="847.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.49%)</title><rect x="812.2" y="805" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="815.17" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="69" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="79.5" ></text>
</g>
<g >
<title>cfree (60,606,060 samples, 2.96%)</title><rect x="684.3" y="901" width="34.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="687.29" y="911.5" >cf..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (90,909,090 samples, 4.43%)</title><rect x="1114.4" y="709" width="52.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1117.43" y="719.5" >YAML:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="949" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>sim::SendData::operator (40,404,040 samples, 1.97%)</title><rect x="597.1" y="997" width="23.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="600.09" y="1007.5" >s..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="27.4" y="981" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="30.44" y="991.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.49%)</title><rect x="608.7" y="901" width="5.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="611.72" y="911.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (40,404,040 samples, 1.97%)</title><rect x="771.5" y="821" width="23.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="774.48" y="831.5" >s..</text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.49%)</title><rect x="492.5" y="949" width="5.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="495.46" y="959.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="677" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.94" y="687.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.49%)</title><rect x="585.5" y="917" width="5.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="588.47" y="927.5" ></text>
</g>
<g >
<title>sim::Process::~Process (30,303,030 samples, 1.48%)</title><rect x="376.2" y="1013" width="17.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="379.21" y="1023.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.49%)</title><rect x="911.0" y="757" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="913.99" y="767.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.99%)</title><rect x="1033.1" y="741" width="11.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1036.05" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="741" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="751.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (90,909,090 samples, 4.43%)</title><rect x="1114.4" y="693" width="52.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1117.43" y="703.5" >YAML:..</text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (20,202,020 samples, 0.99%)</title><rect x="998.2" y="741" width="11.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1001.18" y="751.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 32.51%)</title><rect x="800.5" y="869" width="383.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="803.54" y="879.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (10,101,010 samples, 0.49%)</title><rect x="15.8" y="1013" width="5.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="18.81" y="1023.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="661" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="620.3" y="997" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="623.34" y="1007.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (121,212,120 samples, 5.91%)</title><rect x="725.0" y="965" width="69.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="727.98" y="975.5" >sim::Ya..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (565,656,560 samples, 27.59%)</title><rect x="858.7" y="837" width="325.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="861.67" y="847.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[libc.so.6] (2,040,404,020 samples, 99.51%)</title><rect x="15.8" y="1061" width="1174.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="1071.5" >[libc.so.6]</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="15.8" y="997" width="5.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.81" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="853" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (353,535,350 samples, 17.24%)</title><rect x="126.3" y="965" width="203.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="129.26" y="975.5" >std::ostreambuf_iterator&lt;c..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (40,404,040 samples, 1.97%)</title><rect x="870.3" y="805" width="23.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="873.30" y="815.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="364.6" y="853" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="367.58" y="863.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.49%)</title><rect x="992.4" y="709" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="995.36" y="719.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (60,606,060 samples, 2.96%)</title><rect x="335.5" y="981" width="34.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="338.52" y="991.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="501" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="661" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="725" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="735.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (30,303,030 samples, 1.48%)</title><rect x="521.5" y="949" width="17.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="524.53" y="959.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.49%)</title><rect x="103.0" y="965" width="5.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="106.00" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="453" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="463.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (545,454,540 samples, 26.60%)</title><rect x="21.6" y="1013" width="313.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="24.63" y="1023.5" >sim::LinksQueueSizeStorage::export_to_files</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (676,767,670 samples, 33.00%)</title><rect x="794.7" y="917" width="389.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="797.73" y="927.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.49%)</title><rect x="15.8" y="949" width="5.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="18.81" y="959.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.49%)</title><rect x="905.2" y="789" width="5.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="908.17" y="799.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.49%)</title><rect x="492.5" y="933" width="5.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="495.46" y="943.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.48%)</title><rect x="992.4" y="773" width="17.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="995.36" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="597" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="607.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 4.93%)</title><rect x="1050.5" y="741" width="58.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1053.49" y="751.5" >YAML::..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.49%)</title><rect x="742.4" y="885" width="5.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="745.41" y="895.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (30,303,030 samples, 1.48%)</title><rect x="521.5" y="965" width="17.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="524.53" y="975.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.49%)</title><rect x="329.7" y="981" width="5.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="332.70" y="991.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (606,060,600 samples, 29.56%)</title><rect x="21.6" y="1029" width="348.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="24.63" y="1039.5" >sim::MetricsCollector::export_metrics_to_files</text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.48%)</title><rect x="597.1" y="965" width="17.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="600.09" y="975.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.99%)</title><rect x="870.3" y="789" width="11.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="873.30" y="799.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_ack (10,101,010 samples, 0.49%)</title><rect x="509.9" y="949" width="5.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="512.90" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="693" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="213" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="223.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.49%)</title><rect x="986.6" y="773" width="5.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="989.55" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="581" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="15.8" y="901" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="911.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1097.0" y="645" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1100.00" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="373" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="383.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_tag (10,101,010 samples, 0.49%)</title><rect x="893.5" y="805" width="5.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="896.55" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="773" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.93%)</title><rect x="1108.6" y="741" width="58.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1111.62" y="751.5" >YAML::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="869" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="245" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="757" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.49%)</title><rect x="568.0" y="933" width="5.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="571.03" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="661" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10,101,010 samples, 0.49%)</title><rect x="719.2" y="37" width="5.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="722.16" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="917" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>sim::Process::operator (191,919,190 samples, 9.36%)</title><rect x="486.7" y="997" width="110.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="489.65" y="1007.5" >sim::Process:..</text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.49%)</title><rect x="905.2" y="773" width="5.8" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="908.17" y="783.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="806.4" y="805" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="809.35" y="815.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.99%)</title><rect x="428.5" y="933" width="11.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="431.52" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="597.1" y="837" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.09" y="847.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.49%)</title><rect x="649.4" y="997" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="652.41" y="1007.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.49%)</title><rect x="15.8" y="965" width="5.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="18.81" y="975.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="97.2" y="965" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="100.19" y="975.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.99%)</title><rect x="597.1" y="885" width="11.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="600.09" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="613" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1172.6" y="661" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1175.56" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="405" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="645" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="655.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (676,767,670 samples, 33.00%)</title><rect x="794.7" y="885" width="389.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="797.73" y="895.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 4.93%)</title><rect x="1108.6" y="725" width="58.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1111.62" y="735.5" >YAML::..</text>
</g>
<g >
<title>sim::get_target_connections (10,101,010 samples, 0.49%)</title><rect x="719.2" y="917" width="5.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="722.16" y="927.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="629" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.94" y="639.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::send_data (10,101,010 samples, 0.49%)</title><rect x="411.1" y="981" width="5.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="414.08" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="15.8" y="981" width="5.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.81" y="991.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (272,727,270 samples, 13.30%)</title><rect x="1027.2" y="773" width="157.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1030.24" y="783.5" >YAML::SingleDocParse..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="876.1" y="677" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="879.11" y="687.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (70,707,070 samples, 3.45%)</title><rect x="818.0" y="821" width="40.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="820.98" y="831.5" >YAM..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="229" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="645" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="965" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="27.4" y="949" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.44" y="959.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (676,767,670 samples, 33.00%)</title><rect x="794.7" y="901" width="389.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="797.73" y="911.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.49%)</title><rect x="783.1" y="805" width="5.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="786.10" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.99%)</title><rect x="1149.3" y="597" width="11.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1152.31" y="607.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (60,606,060 samples, 2.96%)</title><rect x="335.5" y="997" width="34.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="338.52" y="1007.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="15.8" y="1045" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="1055.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (60,606,060 samples, 2.96%)</title><rect x="864.5" y="821" width="34.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="867.48" y="831.5" >YA..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="597" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="607.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.49%)</title><rect x="440.1" y="933" width="5.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="443.15" y="943.5" ></text>
</g>
<g >
<title>sim::write_to_csv (525,252,520 samples, 25.62%)</title><rect x="33.3" y="997" width="302.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="36.25" y="1007.5" >sim::write_to_csv</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="440.1" y="917" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="443.15" y="927.5" ></text>
</g>
<g >
<title>sim::Simulator::start (484,848,480 samples, 23.65%)</title><rect x="370.4" y="1029" width="279.0" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="373.39" y="1039.5" >sim::Simulator::start</text>
</g>
<g >
<title>nons (2,050,505,030 samples, 100.00%)</title><rect x="10.0" y="1109" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" >nons</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (121,212,120 samples, 5.91%)</title><rect x="725.0" y="949" width="69.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="727.98" y="959.5" >std::_F..</text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.49%)</title><rect x="626.2" y="997" width="5.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="629.16" y="1007.5" ></text>
</g>
<g >
<title>double sim::simple_parse_with_default&lt;double&gt; (50,505,050 samples, 2.46%)</title><rect x="765.7" y="837" width="29.0" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="768.67" y="847.5" >do..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.49%)</title><rect x="97.2" y="981" width="5.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="100.19" y="991.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 2.46%)</title><rect x="341.3" y="885" width="29.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.33" y="895.5" >[l..</text>
</g>
<g >
<title>sim::ActionParser::parse (10,101,010 samples, 0.49%)</title><rect x="719.2" y="949" width="5.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="722.16" y="959.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (121,212,120 samples, 5.91%)</title><rect x="911.0" y="773" width="69.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="913.99" y="783.5" >YAML::S..</text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.49%)</title><rect x="876.1" y="725" width="5.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="879.11" y="735.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.96%)</title><rect x="823.8" y="773" width="34.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="826.79" y="783.5" >in..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.49%)</title><rect x="794.7" y="853" width="5.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="797.73" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.49%)</title><rect x="858.7" y="789" width="5.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="861.67" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="805" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="815.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.49%)</title><rect x="806.4" y="837" width="5.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="809.35" y="847.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.49%)</title><rect x="812.2" y="853" width="5.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="815.17" y="863.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.49%)</title><rect x="806.4" y="821" width="5.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="809.35" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="645" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.45%)</title><rect x="818.0" y="805" width="40.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="820.98" y="815.5" >YAM..</text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 1.48%)</title><rect x="573.8" y="965" width="17.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="576.84" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="181" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.49%)</title><rect x="614.5" y="965" width="5.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="617.53" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="949" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="959.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.49%)</title><rect x="992.4" y="677" width="5.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="995.36" y="687.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (636,363,630 samples, 31.03%)</title><rect x="818.0" y="853" width="366.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="820.98" y="863.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.49%)</title><rect x="980.7" y="773" width="5.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="983.74" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="565" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.45%)</title><rect x="1062.1" y="725" width="40.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1065.12" y="735.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="677" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="687.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (303,030,300 samples, 14.78%)</title><rect x="1009.8" y="789" width="174.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1012.80" y="799.5" >YAML::SingleDocParser:..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.49%)</title><rect x="986.6" y="757" width="5.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="989.55" y="767.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.49%)</title><rect x="1126.1" y="677" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1129.06" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="870.3" y="741" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="873.30" y="751.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.99%)</title><rect x="1033.1" y="725" width="11.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1036.05" y="735.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.99%)</title><rect x="1149.3" y="613" width="11.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1152.31" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="533" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.96%)</title><rect x="684.3" y="885" width="34.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="687.29" y="895.5" >[l..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="469" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="805" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="815.5" ></text>
</g>
<g >
<title>vsnprintf (272,727,270 samples, 13.30%)</title><rect x="149.5" y="933" width="157.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="152.51" y="943.5" >vsnprintf</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="1038.9" y="693" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1041.87" y="703.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="986.6" y="741" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="989.55" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="853" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="863.5" ></text>
</g>
<g >
<title>sim::Host::process (40,404,040 samples, 1.97%)</title><rect x="492.5" y="981" width="23.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="495.46" y="991.5" >s..</text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (676,767,670 samples, 33.00%)</title><rect x="794.7" y="965" width="389.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="797.73" y="975.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (90,909,090 samples, 4.43%)</title><rect x="922.6" y="741" width="52.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="925.61" y="751.5" >int Y..</text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.49%)</title><rect x="992.4" y="741" width="5.8" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="995.36" y="751.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.49%)</title><rect x="759.9" y="853" width="5.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="762.85" y="863.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.49%)</title><rect x="1172.6" y="677" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.56" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1172.6" y="645" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1175.56" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.48%)</title><rect x="1143.5" y="645" width="17.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1146.50" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="549" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="736.6" y="901" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="739.60" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="517" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.49%)</title><rect x="992.4" y="757" width="5.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="995.36" y="767.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="806.4" y="789" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="809.35" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.96%)</title><rect x="335.5" y="917" width="34.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.52" y="927.5" >[l..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="876.1" y="693" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="879.11" y="703.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::begin (10,101,010 samples, 0.49%)</title><rect x="730.8" y="901" width="5.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="733.79" y="911.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="661" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.94" y="671.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.49%)</title><rect x="1091.2" y="645" width="5.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1094.18" y="655.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (343,434,340 samples, 16.75%)</title><rect x="986.6" y="805" width="197.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="989.55" y="815.5" >YAML::SingleDocParser::Ha..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="261" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="521.5" y="917" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="524.53" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="777.3" y="757" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="780.29" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (70,707,070 samples, 3.45%)</title><rect x="678.5" y="949" width="40.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="681.47" y="959.5" >std..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="1013" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="773" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="809.35" y="783.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (282,828,280 samples, 13.79%)</title><rect x="143.7" y="949" width="162.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="146.69" y="959.5" >[libstdc++.so.6.0.33]</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="649.4" y="981" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="652.41" y="991.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.49%)</title><rect x="800.5" y="837" width="5.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="803.54" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="549" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="559.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.49%)</title><rect x="754.0" y="869" width="5.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="757.04" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="492.5" y="917" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="495.46" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="613" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="597.1" y="853" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.09" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="117" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="127.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (60,606,060 samples, 2.96%)</title><rect x="335.5" y="1013" width="34.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="338.52" y="1023.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="933" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.48%)</title><rect x="841.2" y="725" width="17.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="844.23" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="629" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="639.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.99%)</title><rect x="597.1" y="901" width="11.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="600.09" y="911.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.99%)</title><rect x="870.3" y="773" width="11.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="873.30" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (70,707,070 samples, 3.45%)</title><rect x="678.5" y="933" width="40.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="681.47" y="943.5" >std..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="613" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.94" y="623.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (20,202,020 samples, 0.99%)</title><rect x="632.0" y="997" width="11.6" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="634.97" y="1007.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.49%)</title><rect x="783.1" y="789" width="5.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="786.10" y="799.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.48%)</title><rect x="68.1" y="981" width="17.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="71.13" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="325" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="97.2" y="949" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="100.19" y="959.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (676,767,670 samples, 33.00%)</title><rect x="794.7" y="933" width="389.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="797.73" y="943.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (30,303,030 samples, 1.48%)</title><rect x="573.8" y="949" width="17.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="576.84" y="959.5" ></text>
</g>
<g >
<title>sim::ConfigNode::~ConfigNode (111,111,110 samples, 5.42%)</title><rect x="655.2" y="1013" width="64.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="658.22" y="1023.5" >sim::Co..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="358.8" y="869" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="361.77" y="879.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.48%)</title><rect x="1166.7" y="709" width="17.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1169.75" y="719.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.45%)</title><rect x="1062.1" y="709" width="40.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1065.12" y="719.5" >YAM..</text>
</g>
<g >
<title>YAML::Scanner::empty (141,414,140 samples, 6.90%)</title><rect x="905.2" y="821" width="81.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="908.17" y="831.5" >YAML::Sca..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="73.9" y="949" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.94" y="959.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.49%)</title><rect x="742.4" y="869" width="5.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="745.41" y="879.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="440.1" y="901" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="443.15" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="741" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="751.5" ></text>
</g>
<g >
<title>sim::Link::arrive (40,404,040 samples, 1.97%)</title><rect x="422.7" y="981" width="23.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="425.71" y="991.5" >s..</text>
</g>
<g >
<title>sim::Link::transmit (70,707,070 samples, 3.45%)</title><rect x="446.0" y="981" width="40.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="448.96" y="991.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="773" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="783.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (60,606,060 samples, 2.96%)</title><rect x="451.8" y="965" width="34.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="454.77" y="975.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="852.9" y="693" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="855.86" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="15.8" y="1029" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="565" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="575.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long&gt;::set_flag (10,101,010 samples, 0.49%)</title><rect x="509.9" y="933" width="5.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="512.90" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="885" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="565" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="309" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 2.46%)</title><rect x="341.3" y="901" width="29.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.33" y="911.5" >[l..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="613" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="837" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="847.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.49%)</title><rect x="103.0" y="949" width="5.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="106.00" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="165" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="175.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.49%)</title><rect x="754.0" y="885" width="5.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="757.04" y="895.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.49%)</title><rect x="1102.8" y="725" width="5.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1105.81" y="735.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.49%)</title><rect x="911.0" y="741" width="5.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="913.99" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="293" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.49%)</title><rect x="800.5" y="853" width="5.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="803.54" y="863.5" ></text>
</g>
<g >
<title>YAML::Load (676,767,670 samples, 33.00%)</title><rect x="794.7" y="981" width="389.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="797.73" y="991.5" >YAML::Load</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.45%)</title><rect x="818.0" y="789" width="40.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="820.98" y="799.5" >YAM..</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (131,313,130 samples, 6.40%)</title><rect x="719.2" y="1013" width="75.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="722.16" y="1023.5" >sim::Yam..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (10,101,010 samples, 0.49%)</title><rect x="777.3" y="773" width="5.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="780.29" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="812.2" y="789" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="815.17" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.99%)</title><rect x="1009.8" y="741" width="11.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1012.80" y="751.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.49%)</title><rect x="1021.4" y="725" width="5.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1024.43" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,202,020 samples, 0.99%)</title><rect x="632.0" y="981" width="11.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="634.97" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="101" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1056.3" y="709" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.31" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="997" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="573.8" y="917" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="576.84" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="149" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="159.5" ></text>
</g>
<g >
<title>sim::operator&lt;&lt; (10,101,010 samples, 0.49%)</title><rect x="777.3" y="805" width="5.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="780.29" y="815.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.99%)</title><rect x="556.4" y="917" width="11.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="559.40" y="927.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.49%)</title><rect x="806.4" y="853" width="5.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="809.35" y="863.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.48%)</title><rect x="1166.7" y="725" width="17.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1169.75" y="735.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.49%)</title><rect x="411.1" y="949" width="5.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="414.08" y="959.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::node_data (10,101,010 samples, 0.49%)</title><rect x="881.9" y="789" width="5.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="884.92" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.97%)</title><rect x="1137.7" y="661" width="23.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1140.68" y="671.5" >i..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 1.48%)</title><rect x="597.1" y="917" width="17.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="600.09" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="677" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="1029" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1093" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1155.1" y="581" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1158.12" y="591.5" ></text>
</g>
<g >
<title>YAML::LoadFile (676,767,670 samples, 33.00%)</title><rect x="794.7" y="997" width="389.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="797.73" y="1007.5" >YAML::LoadFile</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="986.6" y="709" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="989.55" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.99%)</title><rect x="85.6" y="981" width="11.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="88.57" y="991.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.97%)</title><rect x="695.9" y="853" width="23.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="698.91" y="863.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="485" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="517" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (30,303,030 samples, 1.48%)</title><rect x="597.1" y="933" width="17.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="600.09" y="943.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (50,505,050 samples, 2.46%)</title><rect x="544.8" y="949" width="29.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="547.78" y="959.5" >si..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.48%)</title><rect x="1166.7" y="693" width="17.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1169.75" y="703.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (10,101,010 samples, 0.49%)</title><rect x="591.3" y="981" width="5.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="594.28" y="991.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.49%)</title><rect x="1021.4" y="741" width="5.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1024.43" y="751.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (10,101,010 samples, 0.49%)</title><rect x="788.9" y="805" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="791.92" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="1015.6" y="709" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1018.62" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="765.7" y="821" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="768.67" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="725" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (10,101,010 samples, 0.49%)</title><rect x="974.9" y="757" width="5.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="977.93" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.49%)</title><rect x="887.7" y="789" width="5.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="890.73" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (131,313,130 samples, 6.40%)</title><rect x="719.2" y="997" width="75.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="722.16" y="1007.5" >std::_Fu..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.49%)</title><rect x="812.2" y="821" width="5.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="815.17" y="831.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 0.99%)</title><rect x="1009.8" y="725" width="11.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1012.80" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="357" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="544.8" y="917" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="547.78" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="693" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="1160.9" y="597" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.94" y="607.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.93%)</title><rect x="1050.5" y="757" width="58.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1053.49" y="767.5" >YAML::..</text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.49%)</title><rect x="899.4" y="821" width="5.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="902.36" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="821" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="831.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.46%)</title><rect x="945.9" y="693" width="29.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="948.86" y="703.5" >in..</text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.49%)</title><rect x="103.0" y="933" width="5.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="106.00" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="649.4" y="1013" width="5.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="652.41" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="806.4" y="709" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="809.35" y="719.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.49%)</title><rect x="1004.0" y="725" width="5.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1006.99" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="389" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="965" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="103.0" y="821" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.00" y="831.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.49%)</title><rect x="794.7" y="821" width="5.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="797.73" y="831.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.49%)</title><rect x="97.2" y="933" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.19" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="986.6" y="677" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="989.55" y="687.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (30,303,030 samples, 1.48%)</title><rect x="498.3" y="965" width="17.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="501.28" y="975.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.46%)</title><rect x="945.9" y="709" width="29.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="948.86" y="719.5" >in..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.49%)</title><rect x="905.2" y="709" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="908.17" y="719.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.49%)</title><rect x="986.6" y="725" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="989.55" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.49%)</title><rect x="719.2" y="901" width="5.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="722.16" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (131,313,130 samples, 6.40%)</title><rect x="719.2" y="981" width="75.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="722.16" y="991.5" >std::_Fu..</text>
</g>
<g >
<title>YAML::Scanner::empty (70,707,070 samples, 3.45%)</title><rect x="818.0" y="837" width="40.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="820.98" y="847.5" >YAM..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.49%)</title><rect x="573.8" y="933" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="576.84" y="943.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (60,606,060 samples, 2.96%)</title><rect x="335.5" y="965" width="34.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="338.52" y="975.5" >st..</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 1.97%)</title><rect x="544.8" y="933" width="23.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="547.78" y="943.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.49%)</title><rect x="719.2" y="341" width="5.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="722.16" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1045" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>sim::ScenarioParser::parse (10,101,010 samples, 0.49%)</title><rect x="719.2" y="965" width="5.8" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="722.16" y="975.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.49%)</title><rect x="480.8" y="949" width="5.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="483.84" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.49%)</title><rect x="1184.2" y="981" width="5.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.19" y="991.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (40,404,040 samples, 1.97%)</title><rect x="597.1" y="981" width="23.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="600.09" y="991.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="629" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="10.0" y="1061" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.49%)</title><rect x="492.5" y="965" width="5.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="495.46" y="975.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.99%)</title><rect x="1050.5" y="725" width="11.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1053.49" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.49%)</title><rect x="870.3" y="645" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="873.30" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.99%)</title><rect x="597.1" y="869" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.09" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.48%)</title><rect x="457.6" y="933" width="17.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="460.59" y="943.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.99%)</title><rect x="312.3" y="949" width="11.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="315.27" y="959.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.49%)</title><rect x="794.7" y="869" width="5.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="797.73" y="879.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 1.48%)</title><rect x="1033.1" y="757" width="17.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1036.05" y="767.5" ></text>
</g>
</g>
</svg>
