<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1254.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1237" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1237" > </text>
<g id="frames">
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="805" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1016.55" y="815.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.93%)</title><rect x="164.4" y="1061" width="11.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="167.39" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="293" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="820.6" y="885" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="823.56" y="895.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 4.21%)</title><rect x="759.9" y="1029" width="49.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="762.91" y="1039.5" >std::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="820.6" y="869" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="823.56" y="879.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.47%)</title><rect x="809.5" y="1029" width="5.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="812.53" y="1039.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (111,111,110 samples, 5.14%)</title><rect x="666.2" y="1045" width="60.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="669.17" y="1055.5" >std::_..</text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.47%)</title><rect x="809.5" y="1045" width="5.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="812.53" y="1055.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1002.5" y="741" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1005.52" y="751.5" ></text>
</g>
<g >
<title>main (2,121,212,100 samples, 98.13%)</title><rect x="32.1" y="1125" width="1157.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="35.06" y="1135.5" >main</text>
</g>
<g >
<title>sim::Link::Arrive::operator (40,404,040 samples, 1.87%)</title><rect x="429.1" y="1077" width="22.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="432.07" y="1087.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="180.9" y="741" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="183.93" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="613" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="165" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="175.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.47%)</title><rect x="484.2" y="1013" width="5.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="487.21" y="1023.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="572.4" y="1013" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="575.43" y="1023.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (151,515,150 samples, 7.01%)</title><rect x="732.3" y="1077" width="82.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="735.34" y="1087.5" >std::_Fun..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="142.3" y="1045" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="145.34" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="501" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="511.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.47%)</title><rect x="644.1" y="1061" width="5.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="647.11" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="53" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="805" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="815.5" ></text>
</g>
<g >
<title>sim::Switch::~Switch (10,101,010 samples, 0.47%)</title><rect x="26.5" y="1029" width="5.6" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="29.54" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1167.9" y="741" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1170.94" y="751.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.47%)</title><rect x="914.3" y="885" width="5.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="917.30" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="917" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="133" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="661" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="693" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="965" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="975.5" ></text>
</g>
<g >
<title>_IO_file_open (20,202,020 samples, 0.93%)</title><rect x="175.4" y="997" width="11.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="178.42" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 10.28%)</title><rect x="225.0" y="997" width="121.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="228.05" y="1007.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::TcpFlow::update (40,404,040 samples, 1.87%)</title><rect x="506.3" y="1045" width="22.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="509.26" y="1055.5" >s..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (80,808,080 samples, 3.74%)</title><rect x="1118.3" y="789" width="44.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1121.32" y="799.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="805" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1045" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="341" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.47%)</title><rect x="495.2" y="1045" width="5.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="498.23" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="597" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="607.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.47%)</title><rect x="577.9" y="1013" width="5.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="580.94" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1061" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="69" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="181" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="613" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="623.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (30,303,030 samples, 1.40%)</title><rect x="787.5" y="981" width="16.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="790.48" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="821" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="831.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="789" width="16.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1060.66" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1157" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1167.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="1029" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.97" y="1039.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="600.0" y="1045" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="603.00" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="451.1" y="1061" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="454.12" y="1071.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1107.3" y="741" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1110.29" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (70,707,070 samples, 3.27%)</title><rect x="1074.2" y="837" width="38.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1077.21" y="847.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="725" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="735.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="837" width="5.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1016.55" y="847.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.87%)</title><rect x="1140.4" y="725" width="22.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1143.37" y="735.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1024.6" y="773" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1027.58" y="783.5" ></text>
</g>
<g >
<title>sim::SimplePacketReordering::add_record (20,202,020 samples, 0.93%)</title><rect x="517.3" y="1029" width="11.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="520.29" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="821" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="831.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (20,202,020 samples, 0.93%)</title><rect x="1162.4" y="821" width="11.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1165.43" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="837" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="917" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="693" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="703.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.47%)</title><rect x="1024.6" y="837" width="5.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1027.58" y="847.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.47%)</title><rect x="357.4" y="1029" width="5.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="360.38" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="901" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="565" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="629" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="709" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="719.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1002.5" y="757" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1005.52" y="767.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.93%)</title><rect x="37.6" y="1077" width="11.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="40.57" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="789" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="805" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="815.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 3.27%)</title><rect x="98.2" y="1061" width="38.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="101.22" y="1071.5" >ope..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="821" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="831.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="914.3" y="869" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="917.30" y="879.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1041.1" y="789" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1044.12" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="757" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="767.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.93%)</title><rect x="164.4" y="1045" width="11.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="167.39" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,141,414,120 samples, 99.07%)</title><rect x="21.0" y="1141" width="1169.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="1151.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1093" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.40%)</title><rect x="368.4" y="965" width="16.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="371.41" y="975.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.47%)</title><rect x="1162.4" y="773" width="5.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1165.43" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="787.5" y="885" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="790.48" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="917" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="927.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.47%)</title><rect x="577.9" y="997" width="5.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="580.94" y="1007.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="1096.3" y="757" width="16.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1099.26" y="767.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.47%)</title><rect x="809.5" y="1013" width="5.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="812.53" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="885" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="853" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="863.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 30.84%)</title><rect x="815.0" y="981" width="364.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="818.05" y="991.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.47%)</title><rect x="26.5" y="1045" width="5.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="29.54" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 3.27%)</title><rect x="688.2" y="949" width="38.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="691.22" y="959.5" >[li..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="965" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="933" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="943.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.47%)</title><rect x="478.7" y="1061" width="5.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="481.69" y="1071.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="837.1" y="853" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="840.10" y="863.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (40,404,040 samples, 1.87%)</title><rect x="429.1" y="1045" width="22.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="432.07" y="1055.5" >s..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="677.2" y="997" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="680.20" y="1007.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (111,111,110 samples, 5.14%)</title><rect x="1112.8" y="837" width="60.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="847.5" >YAML::..</text>
</g>
<g >
<title>operator new (40,404,040 samples, 1.87%)</title><rect x="881.2" y="853" width="22.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="884.21" y="863.5" >o..</text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 1.40%)</title><rect x="566.9" y="1045" width="16.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="569.92" y="1055.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.40%)</title><rect x="1096.3" y="789" width="16.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1099.26" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="949" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="837" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="847.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.47%)</title><rect x="561.4" y="1029" width="5.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="564.40" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="53" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="901" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="911.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.47%)</title><rect x="826.1" y="869" width="5.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="829.07" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="341" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="351.5" ></text>
</g>
<g >
<title>sim::ConfigNode::Iterator::operator* (10,101,010 samples, 0.47%)</title><rect x="748.9" y="1029" width="5.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="751.88" y="1039.5" ></text>
</g>
<g >
<title>YAML::LoadFile (676,767,670 samples, 31.31%)</title><rect x="815.0" y="1077" width="369.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="818.05" y="1087.5" >YAML::LoadFile</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (121,212,120 samples, 5.61%)</title><rect x="666.2" y="1061" width="66.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="669.17" y="1071.5" >std::_S..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="181" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.93%)</title><rect x="164.4" y="1013" width="11.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="167.39" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="1063.2" y="613" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1066.18" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="693" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="309" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.47%)</title><rect x="1167.9" y="805" width="5.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1170.94" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="229" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.47%)</title><rect x="820.6" y="949" width="5.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="823.56" y="959.5" ></text>
</g>
<g >
<title>YAML::Scanner::GetValueRegex (10,101,010 samples, 0.47%)</title><rect x="831.6" y="885" width="5.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="834.59" y="895.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::begin (20,202,020 samples, 0.93%)</title><rect x="759.9" y="981" width="11.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="762.91" y="991.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::add_object (10,101,010 samples, 0.47%)</title><rect x="804.0" y="981" width="5.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="807.02" y="991.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.47%)</title><rect x="726.8" y="1045" width="5.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="729.82" y="1055.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (80,808,080 samples, 3.74%)</title><rect x="1118.3" y="773" width="44.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1121.32" y="783.5" >YAML..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.47%)</title><rect x="1167.9" y="789" width="5.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1170.94" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 7.48%)</title><rect x="258.1" y="981" width="88.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="261.13" y="991.5" >[libc.so.6]</text>
</g>
<g >
<title>fopen (20,202,020 samples, 0.93%)</title><rect x="175.4" y="1029" width="11.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="178.42" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="485" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="495.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.47%)</title><rect x="561.4" y="1045" width="5.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="564.40" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="197" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="207.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (20,202,020 samples, 0.93%)</title><rect x="467.7" y="1045" width="11.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="470.66" y="1055.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.47%)</title><rect x="1167.9" y="773" width="5.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1170.94" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="85" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="95.5" ></text>
</g>
<g >
<title>sim::Host::process (80,808,080 samples, 3.74%)</title><rect x="484.2" y="1061" width="44.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="487.21" y="1071.5" >sim:..</text>
</g>
<g >
<title>sim::ScenarioParser::parse (20,202,020 samples, 0.93%)</title><rect x="737.9" y="1045" width="11.0" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="740.85" y="1055.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 1.40%)</title><rect x="605.5" y="997" width="16.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="608.51" y="1007.5" ></text>
</g>
<g >
<title>sim::Switch::process (111,111,110 samples, 5.14%)</title><rect x="528.3" y="1061" width="60.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="531.32" y="1071.5" >sim::S..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="645" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="661" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.47%)</title><rect x="655.1" y="1077" width="5.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="658.14" y="1087.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.47%)</title><rect x="1019.1" y="837" width="5.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1022.07" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1029" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="853" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="741" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="741" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="837" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="847.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1030.1" y="773" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1033.09" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="853" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="741" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="757" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.40%)</title><rect x="842.6" y="885" width="16.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="845.62" y="895.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.47%)</title><rect x="1134.9" y="725" width="5.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1137.86" y="735.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1167.9" y="757" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1170.94" y="767.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 0.93%)</title><rect x="622.1" y="1045" width="11.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="625.06" y="1055.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 30.84%)</title><rect x="815.0" y="1013" width="364.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="818.05" y="1023.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.47%)</title><rect x="1046.6" y="805" width="5.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1049.64" y="815.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 2.34%)</title><rect x="831.6" y="917" width="27.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="834.59" y="927.5" >Y..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="853" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="837" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="847.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.87%)</title><rect x="1140.4" y="709" width="22.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1143.37" y="719.5" >i..</text>
</g>
<g >
<title>open64 (20,202,020 samples, 0.93%)</title><rect x="175.4" y="981" width="11.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="178.42" y="991.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="936.4" y="821" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="939.36" y="831.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.47%)</title><rect x="462.1" y="1045" width="5.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="465.15" y="1055.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (80,808,080 samples, 3.74%)</title><rect x="1118.3" y="805" width="44.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1121.32" y="815.5" >YAML..</text>
</g>
<g >
<title>write (20,202,020 samples, 0.93%)</title><rect x="164.4" y="997" width="11.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="167.39" y="1007.5" ></text>
</g>
<g >
<title>_IO_file_fopen (20,202,020 samples, 0.93%)</title><rect x="175.4" y="1013" width="11.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="178.42" y="1023.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.47%)</title><rect x="1041.1" y="805" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1044.12" y="815.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.47%)</title><rect x="826.1" y="853" width="5.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="829.07" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="677" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="687.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="1013" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.97" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="725" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="735.5" ></text>
</g>
<g >
<title>YAML::detail::iterator_base&lt;YAML::detail::iterator_value const&gt;::operator* (10,101,010 samples, 0.47%)</title><rect x="748.9" y="1013" width="5.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="751.88" y="1023.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.47%)</title><rect x="346.4" y="1029" width="5.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="349.36" y="1039.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="186.4" y="1029" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="189.45" y="1039.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (50,505,050 samples, 2.34%)</title><rect x="357.4" y="1093" width="27.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="360.38" y="1103.5" >s..</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.47%)</title><rect x="583.5" y="1045" width="5.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="586.46" y="1055.5" ></text>
</g>
<g >
<title>all (2,161,616,140 samples, 100%)</title><rect x="10.0" y="1205" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1215.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.87%)</title><rect x="991.5" y="773" width="22.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="994.50" y="783.5" >i..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="533.8" y="1013" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="536.83" y="1023.5" ></text>
</g>
<g >
<title>YAML::Exp::PlainScalar (10,101,010 samples, 0.47%)</title><rect x="1074.2" y="789" width="5.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1077.21" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="677" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="613" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="757" width="16.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1060.66" y="767.5" ></text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.47%)</title><rect x="660.7" y="1109" width="5.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="663.65" y="1119.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1019.1" y="821" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.07" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="677" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="1096.3" y="773" width="16.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1099.26" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (80,808,080 samples, 3.74%)</title><rect x="682.7" y="1029" width="44.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="685.71" y="1039.5" >std:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="629" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="639.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.47%)</title><rect x="820.6" y="901" width="5.5" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="823.56" y="911.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 1.40%)</title><rect x="368.4" y="1013" width="16.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="371.41" y="1023.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 2.34%)</title><rect x="633.1" y="1093" width="27.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="636.08" y="1103.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="941.9" y="805" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="944.87" y="815.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.93%)</title><rect x="440.1" y="1013" width="11.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="443.09" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="815.0" y="885" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="818.05" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="357" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="629" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="277" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="947.4" y="789" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="950.38" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.80%)</title><rect x="1129.3" y="757" width="33.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1132.35" y="767.5" >in..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1151.4" y="661" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1154.40" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="869" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="879.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.47%)</title><rect x="473.2" y="1013" width="5.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="476.18" y="1023.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="511.8" y="1013" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="514.78" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="773" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="725" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.93%)</title><rect x="153.4" y="1061" width="11.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="156.36" y="1071.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10,101,010 samples, 0.47%)</title><rect x="754.4" y="1029" width="5.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="757.39" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="565" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="661" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="677" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="54.1" y="1013" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.11" y="1023.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.93%)</title><rect x="1030.1" y="821" width="11.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1033.09" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="789" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="799.5" ></text>
</g>
<g >
<title>nons (2,161,616,140 samples, 100.00%)</title><rect x="10.0" y="1189" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="1199.5" >nons</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="357" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="661" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="963.9" y="837" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="966.93" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="837" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="661" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="26.5" y="1013" width="5.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="29.54" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="379.4" y="949" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="382.44" y="959.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="561.4" y="1013" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="564.40" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="101" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="111.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.47%)</title><rect x="611.0" y="981" width="5.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="614.03" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="901" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="805" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="261" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="469" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="965" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="975.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="837.1" y="869" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="840.10" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 3.27%)</title><rect x="688.2" y="965" width="38.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="691.22" y="975.5" >[li..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="467.7" y="1013" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="470.66" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="997" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.97" y="1007.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="947.4" y="805" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="950.38" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="837" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="917.30" y="847.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="773" width="16.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1060.66" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1045" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="981" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="991.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.47%)</title><rect x="1041.1" y="821" width="5.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1044.12" y="831.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (646,464,640 samples, 29.91%)</title><rect x="826.1" y="949" width="352.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="829.07" y="959.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="965" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="975.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.47%)</title><rect x="826.1" y="917" width="5.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="829.07" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="37.6" y="1045" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.57" y="1055.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (151,515,150 samples, 7.01%)</title><rect x="732.3" y="1093" width="82.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="735.34" y="1103.5" >sim::Yaml..</text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.47%)</title><rect x="793.0" y="933" width="5.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="795.99" y="943.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (30,303,030 samples, 1.40%)</title><rect x="930.8" y="853" width="16.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="933.84" y="863.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.40%)</title><rect x="605.5" y="1013" width="16.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="608.51" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="885" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="895.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.47%)</title><rect x="793.0" y="949" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="795.99" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="709" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="719.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (222,222,220 samples, 10.28%)</title><rect x="225.0" y="1029" width="121.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="228.05" y="1039.5" >[libstdc++.so.6..</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (70,707,070 samples, 3.27%)</title><rect x="864.7" y="901" width="38.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="867.67" y="911.5" >YAM..</text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.47%)</title><rect x="616.5" y="981" width="5.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="619.54" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="869" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="879.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (60,606,060 samples, 2.80%)</title><rect x="600.0" y="1061" width="33.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="603.00" y="1071.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (292,929,290 samples, 13.55%)</title><rect x="1013.6" y="901" width="159.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1016.55" y="911.5" >YAML::SingleDocParse..</text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.47%)</title><rect x="500.7" y="1045" width="5.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="503.75" y="1055.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1030.1" y="757" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1033.09" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="848.1" y="805" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="851.13" y="815.5" ></text>
</g>
<g >
<title>sim::Simulator::start (494,949,490 samples, 22.90%)</title><rect x="390.5" y="1109" width="270.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="393.47" y="1119.5" >sim::Simulator::start</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="229" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="21.0" y="1109" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="1119.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="572.4" y="997" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="575.43" y="1007.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.47%)</title><rect x="1024.6" y="821" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1027.58" y="831.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 1.87%)</title><rect x="429.1" y="1029" width="22.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="432.07" y="1039.5" >s..</text>
</g>
<g >
<title>cfree (70,707,070 samples, 3.27%)</title><rect x="688.2" y="981" width="38.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="691.22" y="991.5" >cfree</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="725" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="735.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.47%)</title><rect x="555.9" y="1029" width="5.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="558.89" y="1039.5" ></text>
</g>
<g >
<title>_start (2,141,414,120 samples, 99.07%)</title><rect x="21.0" y="1173" width="1169.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="24.03" y="1183.5" >_start</text>
</g>
<g >
<title>double sim::simple_parse_with_default&lt;double&gt; (10,101,010 samples, 0.47%)</title><rect x="798.5" y="917" width="5.5" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="801.50" y="927.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.47%)</title><rect x="506.3" y="1029" width="5.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="509.26" y="1039.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (101,010,100 samples, 4.67%)</title><rect x="958.4" y="853" width="55.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="961.41" y="863.5" >YAML:..</text>
</g>
<g >
<title>sim::get_target_connections (10,101,010 samples, 0.47%)</title><rect x="737.9" y="997" width="5.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="740.85" y="1007.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.47%)</title><rect x="1162.4" y="789" width="5.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1165.43" y="799.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.47%)</title><rect x="484.2" y="1045" width="5.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="487.21" y="1055.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 1.40%)</title><rect x="136.8" y="1061" width="16.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="139.82" y="1071.5" ></text>
</g>
<g >
<title>sim::load_file (676,767,670 samples, 31.31%)</title><rect x="815.0" y="1093" width="369.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="818.05" y="1103.5" >sim::load_file</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.93%)</title><rect x="48.6" y="1077" width="11.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="51.60" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="69" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="79.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="1045" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1181.97" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="773" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="682.7" y="981" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="685.71" y="991.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="770.9" y="981" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="773.93" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="693" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="703.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.47%)</title><rect x="820.6" y="917" width="5.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="823.56" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="43.1" y="1029" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.08" y="1039.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.47%)</title><rect x="357.4" y="1045" width="5.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="360.38" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="981" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.80%)</title><rect x="103.7" y="1029" width="33.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="106.74" y="1039.5" >[l..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="613" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="623.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.93%)</title><rect x="528.3" y="1045" width="11.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="531.32" y="1055.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.47%)</title><rect x="489.7" y="1045" width="5.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="492.72" y="1055.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="741" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="773" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="783.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (30,303,030 samples, 1.40%)</title><rect x="903.3" y="901" width="16.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="906.27" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.47%)</title><rect x="644.1" y="1045" width="5.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="647.11" y="1055.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="815.0" y="917" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="818.05" y="927.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.80%)</title><rect x="1129.3" y="741" width="33.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1132.35" y="751.5" >in..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.47%)</title><rect x="550.4" y="997" width="5.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="553.37" y="1007.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.47%)</title><rect x="484.2" y="997" width="5.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="487.21" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="421" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="431.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (424,242,420 samples, 19.63%)</title><rect x="401.5" y="1093" width="231.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="404.50" y="1103.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="389" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="399.5" ></text>
</g>
<g >
<title>sim::Process::operator (10,101,010 samples, 0.47%)</title><rect x="396.0" y="1093" width="5.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="398.98" y="1103.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.47%)</title><rect x="820.6" y="933" width="5.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="823.56" y="943.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="947.4" y="837" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="950.38" y="847.5" ></text>
</g>
<g >
<title>YAML::Load (666,666,660 samples, 30.84%)</title><rect x="815.0" y="1061" width="364.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="818.05" y="1071.5" >YAML::Load</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="997" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (50,505,050 samples, 2.34%)</title><rect x="1046.6" y="821" width="27.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1049.64" y="831.5" >Y..</text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (90,909,090 samples, 4.21%)</title><rect x="759.9" y="997" width="49.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="762.91" y="1007.5" >sim::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1019.1" y="773" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.07" y="783.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (595,959,590 samples, 27.57%)</title><rect x="32.1" y="1093" width="325.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="35.06" y="1103.5" >sim::LinksQueueSizeStorage::export_to_files</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="773" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="783.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.47%)</title><rect x="809.5" y="965" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="812.53" y="975.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.40%)</title><rect x="605.5" y="1045" width="16.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="608.51" y="1055.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.47%)</title><rect x="555.9" y="997" width="5.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="558.89" y="1007.5" ></text>
</g>
<g >
<title>__libc_start_main (2,141,414,120 samples, 99.07%)</title><rect x="21.0" y="1157" width="1169.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="24.03" y="1167.5" >__libc_start_main</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.47%)</title><rect x="186.4" y="1045" width="5.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="189.45" y="1055.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 1.40%)</title><rect x="368.4" y="1029" width="16.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="371.41" y="1039.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse (20,202,020 samples, 0.93%)</title><rect x="737.9" y="1029" width="11.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="740.85" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.87%)</title><rect x="313.3" y="949" width="22.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="316.27" y="959.5" >[..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.47%)</title><rect x="555.9" y="1013" width="5.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="558.89" y="1023.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (262,626,260 samples, 12.15%)</title><rect x="208.5" y="1045" width="143.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="211.50" y="1055.5" >std::ostreambuf_it..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="885" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="147.9" y="1045" width="5.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="150.85" y="1055.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.47%)</title><rect x="815.0" y="965" width="5.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="818.05" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="101" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="533" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="543.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.93%)</title><rect x="48.6" y="1061" width="11.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="51.60" y="1071.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (636,363,630 samples, 29.44%)</title><rect x="831.6" y="933" width="347.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="834.59" y="943.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="437" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (171,717,170 samples, 7.94%)</title><rect x="919.8" y="885" width="93.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="922.81" y="895.5" >YAML::Scann..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1019.1" y="789" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.07" y="799.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="914.3" y="853" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="917.30" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="773" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="783.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 1.87%)</title><rect x="456.6" y="1061" width="22.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="459.64" y="1071.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.93%)</title><rect x="21.0" y="1077" width="11.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="24.03" y="1087.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="848.1" y="789" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="851.13" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="645" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="655.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 3.27%)</title><rect x="98.2" y="1045" width="38.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="101.22" y="1055.5" >mal..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="693" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="581" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="165" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="175.5" ></text>
</g>
<g >
<title>vsnprintf (222,222,220 samples, 10.28%)</title><rect x="225.0" y="1013" width="121.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="228.05" y="1023.5" >vsnprintf</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="389" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.40%)</title><rect x="368.4" y="997" width="16.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="371.41" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="629" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="917" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="892.2" y="821" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="895.24" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="117" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="517" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="527.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="815.0" y="901" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="818.05" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="965" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1093" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1103.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.47%)</title><rect x="826.1" y="885" width="5.5" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="829.07" y="895.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (585,858,580 samples, 27.10%)</title><rect x="859.2" y="917" width="319.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="862.16" y="927.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1068.7" y="597" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1071.69" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="293" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="303.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.47%)</title><rect x="351.9" y="1061" width="5.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="354.87" y="1071.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="837.1" y="837" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="840.10" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1061" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="949" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="959.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="671.7" y="997" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="674.68" y="1007.5" ></text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.47%)</title><rect x="357.4" y="981" width="5.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="360.38" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="213" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="757" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="773" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="981" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.97" y="991.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1030.1" y="805" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1033.09" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="949" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.47%)</title><rect x="484.2" y="1029" width="5.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="487.21" y="1039.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (80,808,080 samples, 3.74%)</title><rect x="1118.3" y="821" width="44.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1121.32" y="831.5" >YAML..</text>
</g>
<g >
<title>sim::ActionParser::parse_send_data (20,202,020 samples, 0.93%)</title><rect x="737.9" y="1013" width="11.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="740.85" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="373" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.93%)</title><rect x="164.4" y="1029" width="11.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="167.39" y="1039.5" ></text>
</g>
<g >
<title>sim::Process::operator (202,020,200 samples, 9.35%)</title><rect x="484.2" y="1077" width="110.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="487.21" y="1087.5" >sim::Process:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="837.1" y="821" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="840.10" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.47%)</title><rect x="743.4" y="997" width="5.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="746.36" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="549" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="869" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="879.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1041.1" y="773" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1044.12" y="783.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.47%)</title><rect x="815.0" y="933" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="818.05" y="943.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="671.7" y="1013" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="674.68" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="600.0" y="1029" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="603.00" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="848.1" y="821" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="851.13" y="831.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (121,212,120 samples, 5.61%)</title><rect x="666.2" y="1077" width="66.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="669.17" y="1087.5" >std::_S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="1145.9" y="693" width="16.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1148.89" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="261" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="15.5" y="917" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.51" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="539.3" y="997" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="542.35" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="245" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="309" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.93%)</title><rect x="1019.1" y="853" width="11.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1022.07" y="863.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="869" width="5.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1016.55" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="677.2" y="981" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="680.20" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.47%)</title><rect x="649.6" y="1061" width="5.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="652.63" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1109" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1119.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.40%)</title><rect x="842.6" y="869" width="16.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="845.62" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="54.1" y="1029" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.11" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.40%)</title><rect x="368.4" y="981" width="16.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="371.41" y="991.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (30,303,030 samples, 1.40%)</title><rect x="605.5" y="1029" width="16.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="608.51" y="1039.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (20,202,020 samples, 0.93%)</title><rect x="175.4" y="1045" width="11.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="178.42" y="1055.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.47%)</title><rect x="798.5" y="901" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="801.50" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="933" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="213" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="842.6" y="837" width="16.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="845.62" y="847.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="821" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1016.55" y="831.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (40,404,040 samples, 1.87%)</title><rect x="539.3" y="1045" width="22.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="542.35" y="1055.5" >s..</text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.47%)</title><rect x="203.0" y="1045" width="5.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="205.99" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="645" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="655.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (30,303,030 samples, 1.40%)</title><rect x="638.6" y="1077" width="16.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="641.60" y="1087.5" ></text>
</g>
<g >
<title>memcmp@plt (10,101,010 samples, 0.47%)</title><rect x="434.6" y="1013" width="5.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="437.58" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="821" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="805" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="54.1" y="1045" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.11" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="709" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="725" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="853" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="863.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="787.5" y="933" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="790.48" y="943.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (70,707,070 samples, 3.27%)</title><rect x="864.7" y="885" width="38.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="867.67" y="895.5" >YAM..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="186.4" y="1013" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="189.45" y="1023.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.47%)</title><rect x="511.8" y="997" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="514.78" y="1007.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (30,303,030 samples, 1.40%)</title><rect x="539.3" y="1029" width="16.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="542.35" y="1039.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (50,505,050 samples, 2.34%)</title><rect x="357.4" y="1077" width="27.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="360.38" y="1087.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="757" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="581" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="549" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="149" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.47%)</title><rect x="357.4" y="1061" width="5.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="360.38" y="1071.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 30.84%)</title><rect x="815.0" y="997" width="364.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="818.05" y="1007.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1024.6" y="789" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1027.58" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="709" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="933" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="943.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.47%)</title><rect x="1179.0" y="1061" width="5.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1181.97" y="1071.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (20,202,020 samples, 0.93%)</title><rect x="21.0" y="1093" width="11.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="24.03" y="1103.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.40%)</title><rect x="1030.1" y="853" width="16.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1033.09" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="501" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.93%)</title><rect x="671.7" y="1029" width="11.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="674.68" y="1039.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 4.21%)</title><rect x="759.9" y="1013" width="49.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="762.91" y="1023.5" >sim::..</text>
</g>
<g >
<title>sim::write_to_csv (545,454,540 samples, 25.23%)</title><rect x="59.6" y="1077" width="297.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="62.63" y="1087.5" >sim::write_to_csv</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="848.1" y="773" width="11.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="851.13" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="429.1" y="1013" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="432.07" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1013" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="26.5" y="997" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="29.54" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="245" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="180.9" y="757" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="183.93" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.40%)</title><rect x="1030.1" y="837" width="16.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1033.09" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="469" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (666,666,660 samples, 30.84%)</title><rect x="815.0" y="1045" width="364.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="818.05" y="1055.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (262,626,260 samples, 12.15%)</title><rect x="1030.1" y="869" width="143.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1033.09" y="879.5" >YAML::SingleDocPar..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="901" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="911.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_to_args (10,101,010 samples, 0.47%)</title><rect x="809.5" y="981" width="5.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="812.53" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="597" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="607.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (666,666,660 samples, 30.84%)</title><rect x="815.0" y="1029" width="364.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="818.05" y="1039.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="445.6" y="997" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="448.61" y="1007.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.47%)</title><rect x="594.5" y="1061" width="5.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="597.49" y="1071.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (50,505,050 samples, 2.34%)</title><rect x="1085.2" y="805" width="27.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1088.23" y="815.5" >Y..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="773" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (70,707,070 samples, 3.27%)</title><rect x="1074.2" y="821" width="38.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1077.21" y="831.5" >YAM..</text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.93%)</title><rect x="1019.1" y="869" width="11.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1022.07" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="405" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="693" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="703.5" ></text>
</g>
<g >
<title>sim::SendData::operator (70,707,070 samples, 3.27%)</title><rect x="594.5" y="1077" width="38.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="597.49" y="1087.5" >sim..</text>
</g>
<g >
<title>sim::Simulator::get_connections (10,101,010 samples, 0.47%)</title><rect x="385.0" y="1109" width="5.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="387.95" y="1119.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="682.7" y="997" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="685.71" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="885" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="949" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="959.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.40%)</title><rect x="539.3" y="1013" width="16.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="542.35" y="1023.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="725" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="735.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="853" width="5.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1016.55" y="863.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (949,494,940 samples, 43.93%)</title><rect x="666.2" y="1109" width="518.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="669.17" y="1119.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="373" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (292,929,290 samples, 13.55%)</title><rect x="192.0" y="1061" width="159.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="194.96" y="1071.5" >std::ostream&amp; std::o..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="85" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="95.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (80,808,080 samples, 3.74%)</title><rect x="969.4" y="837" width="44.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.44" y="847.5" >int ..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.47%)</title><rect x="837.1" y="885" width="5.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="840.10" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="186.4" y="997" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="189.45" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="787.5" y="869" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="790.48" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.40%)</title><rect x="710.3" y="933" width="16.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="713.28" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="757" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="767.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (292,929,290 samples, 13.55%)</title><rect x="1013.6" y="885" width="159.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1016.55" y="895.5" >YAML::SingleDocParse..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="709" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="719.5" ></text>
</g>
<g >
<title>sim::ConfigNode::~ConfigNode (121,212,120 samples, 5.61%)</title><rect x="666.2" y="1093" width="66.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="669.17" y="1103.5" >sim::Co..</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (50,505,050 samples, 2.34%)</title><rect x="1046.6" y="837" width="27.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1049.64" y="847.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="947.4" y="853" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="950.38" y="863.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.47%)</title><rect x="423.6" y="1077" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="426.55" y="1087.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.34%)</title><rect x="986.0" y="789" width="27.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="988.98" y="799.5" >i..</text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.47%)</title><rect x="197.5" y="1045" width="5.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="200.48" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="885" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="895.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.47%)</title><rect x="357.4" y="1013" width="5.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="360.38" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="677" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="687.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (40,404,040 samples, 1.87%)</title><rect x="362.9" y="1045" width="22.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="365.90" y="1055.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="133" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="143.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (70,707,070 samples, 3.27%)</title><rect x="864.7" y="869" width="38.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="867.67" y="879.5" >YAM..</text>
</g>
<g >
<title>malloc (40,404,040 samples, 1.87%)</title><rect x="881.2" y="837" width="22.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="884.21" y="847.5" >m..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="453" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="709" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="37" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="47.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="1145.9" y="677" width="16.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1148.89" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.47%)</title><rect x="1184.5" y="1077" width="5.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.49" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="581" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="591.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1079.7" y="789" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1082.72" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="789" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="933" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="943.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1019.1" y="805" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.07" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="842.6" y="853" width="16.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="845.62" y="863.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.47%)</title><rect x="787.5" y="949" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="790.48" y="959.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (656,565,650 samples, 30.37%)</title><rect x="820.6" y="965" width="358.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="823.56" y="975.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.40%)</title><rect x="1057.7" y="741" width="16.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1060.66" y="751.5" ></text>
</g>
<g >
<title>sim::ConfigNode::Iterator::operator* (10,101,010 samples, 0.47%)</title><rect x="776.4" y="981" width="5.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="779.45" y="991.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (80,808,080 samples, 3.74%)</title><rect x="682.7" y="1013" width="44.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="685.71" y="1023.5" >std:..</text>
</g>
<g >
<title>sim::TcpCCParser::parse_i_tcp_cc (10,101,010 samples, 0.47%)</title><rect x="798.5" y="949" width="5.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="801.50" y="959.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="37.6" y="1061" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.57" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="645" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="655.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.47%)</title><rect x="357.4" y="997" width="5.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="360.38" y="1007.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (646,464,640 samples, 29.91%)</title><rect x="32.1" y="1109" width="352.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="35.06" y="1119.5" >sim::MetricsCollector::export_metrics_to_files</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="787.5" y="917" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="790.48" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="869" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="789" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="799.5" ></text>
</g>
<g >
<title>sim::Simulator::add_connection (10,101,010 samples, 0.47%)</title><rect x="754.4" y="1013" width="5.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="757.39" y="1023.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.40%)</title><rect x="930.8" y="837" width="16.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="933.84" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="437" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="949" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="789" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1109" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 0.93%)</title><rect x="572.4" y="1029" width="11.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="575.43" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1077" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="15.5" y="901" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.51" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="117" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="127.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.47%)</title><rect x="798.5" y="885" width="5.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="801.50" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="26.5" y="981" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.54" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="789" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1029" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.93%)</title><rect x="1030.1" y="789" width="11.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1033.09" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="197" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.80%)</title><rect x="980.5" y="805" width="33.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="983.47" y="815.5" >in..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="453" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1125" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="277" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="325" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="485" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="1024.6" y="805" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1027.58" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (151,515,150 samples, 7.01%)</title><rect x="732.3" y="1061" width="82.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="735.34" y="1071.5" >std::_Fun..</text>
</g>
<g >
<title>sim::Link::arrive (40,404,040 samples, 1.87%)</title><rect x="429.1" y="1061" width="22.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="432.07" y="1071.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="821" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="741" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="751.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (30,303,030 samples, 1.40%)</title><rect x="175.4" y="1061" width="16.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="178.42" y="1071.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (111,111,110 samples, 5.14%)</title><rect x="952.9" y="869" width="60.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="955.90" y="879.5" >YAML::..</text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.47%)</title><rect x="390.5" y="1093" width="5.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="393.47" y="1103.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (232,323,230 samples, 10.75%)</title><rect x="1046.6" y="853" width="126.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1049.64" y="863.5" >YAML::SingleDoc..</text>
</g>
<g >
<title>sim::TcpFlowParser::parse_tcp_flow (30,303,030 samples, 1.40%)</title><rect x="787.5" y="965" width="16.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="790.48" y="975.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (20,202,020 samples, 0.93%)</title><rect x="335.3" y="965" width="11.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="338.33" y="975.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.47%)</title><rect x="533.8" y="1029" width="5.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="536.83" y="1039.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.47%)</title><rect x="826.1" y="901" width="5.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="829.07" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="917" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="927.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="787.5" y="901" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="790.48" y="911.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.47%)</title><rect x="627.6" y="1029" width="5.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="630.57" y="1039.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (70,707,070 samples, 3.27%)</title><rect x="688.2" y="997" width="38.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="691.22" y="1007.5" >std..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="325" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1141" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="517" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.47%)</title><rect x="589.0" y="1061" width="5.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="591.97" y="1071.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (60,606,060 samples, 2.80%)</title><rect x="451.1" y="1077" width="33.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="454.12" y="1087.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="981" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="565" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="575.5" ></text>
</g>
<g >
<title>YAML::detail::node::mark_defined (10,101,010 samples, 0.47%)</title><rect x="1173.5" y="901" width="5.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1176.46" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="737.9" y="421" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="740.85" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.93%)</title><rect x="21.0" y="1125" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="1135.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (171,717,170 samples, 7.94%)</title><rect x="919.8" y="901" width="93.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="922.81" y="911.5" >YAML::Scann..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.47%)</title><rect x="677.2" y="1013" width="5.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="680.20" y="1023.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.47%)</title><rect x="826.1" y="837" width="5.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="829.07" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.47%)</title><rect x="611.0" y="597" width="5.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="614.03" y="607.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (111,111,110 samples, 5.14%)</title><rect x="748.9" y="1045" width="60.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="751.88" y="1055.5" >sim::Y..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.47%)</title><rect x="815.0" y="949" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="818.05" y="959.5" ></text>
</g>
<g >
<title>sim::ConfigNode::operator[] (10,101,010 samples, 0.47%)</title><rect x="782.0" y="981" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="784.96" y="991.5" ></text>
</g>
<g >
<title>sim::ConfigNode::Iterator::operator++ (10,101,010 samples, 0.47%)</title><rect x="732.3" y="1045" width="5.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="735.34" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="805" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="933" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="186.4" y="981" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="189.45" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="821" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="831.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="789" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1016.55" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.47%)</title><rect x="826.1" y="933" width="5.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="829.07" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.47%)</title><rect x="633.1" y="1077" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="636.08" y="1087.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 2.34%)</title><rect x="831.6" y="901" width="27.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="834.59" y="911.5" >Y..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (60,606,060 samples, 2.80%)</title><rect x="919.8" y="869" width="33.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="922.81" y="879.5" >YA..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (40,404,040 samples, 1.87%)</title><rect x="1052.1" y="805" width="22.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1055.15" y="815.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="914.3" y="629" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="917.30" y="639.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (40,404,040 samples, 1.87%)</title><rect x="362.9" y="1061" width="22.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="365.90" y="1071.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.93%)</title><rect x="21.0" y="1061" width="11.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="24.03" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="901" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="911.5" ></text>
</g>
<g >
<title>sim::TahoeCCParser::parse_tahoe_cc (10,101,010 samples, 0.47%)</title><rect x="798.5" y="933" width="5.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="801.50" y="943.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_packet_reordering (10,101,010 samples, 0.47%)</title><rect x="511.8" y="1029" width="5.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="514.78" y="1039.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.93%)</title><rect x="1074.2" y="805" width="11.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1077.21" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="1013.6" y="645" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1016.55" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="611.0" y="533" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="614.03" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="405" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="357.4" y="949" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="360.38" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="149" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.47%)</title><rect x="737.9" y="965" width="5.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="740.85" y="975.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.93%)</title><rect x="467.7" y="1029" width="11.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="470.66" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.47%)</title><rect x="947.4" y="821" width="5.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="950.38" y="831.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 5.61%)</title><rect x="269.2" y="965" width="66.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="272.16" y="975.5" >[libc.s..</text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.47%)</title><rect x="809.5" y="997" width="5.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="812.53" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="175.4" y="869" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="178.42" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.47%)</title><rect x="169.9" y="933" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.91" y="943.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (80,808,080 samples, 3.74%)</title><rect x="969.4" y="821" width="44.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.44" y="831.5" >int ..</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.47%)</title><rect x="1162.4" y="805" width="5.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1165.43" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.93%)</title><rect x="10.0" y="1173" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1183.5" ></text>
</g>
</g>
</svg>
