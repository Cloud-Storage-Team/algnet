<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 0.06%)</title><rect x="1145.7" y="357" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1148.70" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.12%)</title><rect x="868.0" y="325" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="870.99" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="568.3" y="341" width="3.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="571.30" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1159.0" y="341" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.02" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1169.5" y="341" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.47" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="869.1" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="872.07" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="579.8" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="582.83" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="197" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.12" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="338.1" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="341.14" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.15%)</title><rect x="916.3" y="373" width="1.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="919.25" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="19.0" y="373" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.00" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.55" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.12%)</title><rect x="870.1" y="373" width="1.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="873.15" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="575.9" y="245" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.87" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="373" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1192.64" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="239.5" ></text>
</g>
<g >
<title>main (32,868,686,540 samples, 99.33%)</title><rect x="17.9" y="453" width="1172.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="20.92" y="463.5" >main</text>
</g>
<g >
<title>sim::Link::get_packet (40,404,040 samples, 0.12%)</title><rect x="586.0" y="389" width="1.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="588.95" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="175.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="405" width="3.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.04" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="181" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.06%)</title><rect x="65.8" y="341" width="0.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="68.83" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="568.7" y="277" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="571.66" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="343.2" y="293" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="346.18" y="303.5" ></text>
</g>
<g >
<title>strlen@plt (60,606,060 samples, 0.18%)</title><rect x="1006.7" y="373" width="2.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1009.66" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="34.5" y="357" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="37.49" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="143.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="421" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.28" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="860.1" y="245" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="863.06" y="255.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="337.1" y="357" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="340.06" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="165" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="175.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="309" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.28" y="319.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.03%)</title><rect x="574.1" y="261" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="577.07" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="303.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1192.64" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="245" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.3" y="69" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.27" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.15%)</title><rect x="589.6" y="389" width="1.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="592.55" y="399.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (131,313,130 samples, 0.40%)</title><rect x="857.5" y="373" width="4.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="860.54" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (303,030,300 samples, 0.92%)</title><rect x="798.1" y="341" width="10.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="801.11" y="351.5" ></text>
</g>
<g >
<title>Logger::info (60,606,060 samples, 0.18%)</title><rect x="610.8" y="373" width="2.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="613.81" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (50,505,050 samples, 0.15%)</title><rect x="577.3" y="357" width="1.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="580.31" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="865.8" y="341" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="868.82" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="348.6" y="325" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="351.58" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.3" y="101" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.27" y="111.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packets (70,707,070 samples, 0.21%)</title><rect x="572.3" y="373" width="2.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="575.26" y="383.5" ></text>
</g>
<g >
<title>fstatat64 (20,202,020 samples, 0.06%)</title><rect x="76.3" y="357" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="79.28" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="563.3" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="566.26" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::status (20,202,020 samples, 0.06%)</title><rect x="76.3" y="373" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="79.28" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="213" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.40" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="405" width="0.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1183.27" y="415.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="18.3" y="405" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.28" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="229" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1189.76" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="1173.8" y="389" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1176.79" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (131,313,130 samples, 0.40%)</title><rect x="857.5" y="357" width="4.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="860.54" y="367.5" ></text>
</g>
<g >
<title>sim::Simulator::start (31,070,706,760 samples, 93.89%)</title><rect x="78.1" y="437" width="1107.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="81.08" y="447.5" >sim::Simulator::start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1172.7" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.71" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="850.7" y="325" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="853.70" y="335.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.03%)</title><rect x="36.3" y="389" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="39.29" y="399.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1159.0" y="357" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.02" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="335.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.06%)</title><rect x="65.8" y="325" width="0.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="68.83" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="579.8" y="341" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="582.83" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="35.2" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.21" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="20.8" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="23.81" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="213" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.48" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt;, std::less&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.4" y="389" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="67.39" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="197" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.40" y="207.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="19.0" y="389" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="22.00" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="70.2" y="309" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.15" y="319.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1177.8" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.75" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1139.2" y="341" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1142.21" y="351.5" ></text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 0.09%)</title><rect x="1157.6" y="389" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1160.58" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="277" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="14.0" y="341" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="16.96" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.06%)</title><rect x="1135.3" y="357" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1138.25" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="175.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="229" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.56" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="574.1" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.07" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.6" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.62" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="277" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="287.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (70,707,070 samples, 0.21%)</title><rect x="1130.9" y="373" width="2.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1133.93" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="165" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.40" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="293" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="35.6" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.57" y="223.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="331.7" y="373" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="334.65" y="383.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.06%)</title><rect x="856.8" y="357" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="859.82" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="325" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.85" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="833.0" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="836.05" y="367.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.03%)</title><rect x="336.3" y="341" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="339.34" y="351.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="870.9" y="341" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="873.87" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="579.1" y="341" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="582.11" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="853.9" y="341" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="856.94" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1138.5" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.49" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1161.9" y="293" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.90" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 0.76%)</title><rect x="52.1" y="325" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="55.14" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.9" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.93" y="143.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (181,818,180 samples, 0.55%)</title><rect x="682.5" y="357" width="6.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="685.48" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="325" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.04" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.52%)</title><rect x="864.0" y="373" width="6.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="867.02" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="255.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (70,707,070 samples, 0.21%)</title><rect x="859.0" y="325" width="2.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="861.98" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="857.9" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="860.90" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.27%)</title><rect x="568.7" y="309" width="3.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="571.66" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="197" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.20" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="35.6" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.57" y="175.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,676,767,640 samples, 11.11%)</title><rect x="726.4" y="373" width="131.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="729.43" y="383.5" >sim::Link::get_p..</text>
</g>
<g >
<title>sim::Process::operator (111,111,110 samples, 0.34%)</title><rect x="243.4" y="421" width="4.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="246.41" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="271.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="580.5" y="341" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="583.55" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="350.7" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="353.74" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="74.8" y="277" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="77.84" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="10.7" y="389" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="572.3" y="341" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="575.26" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (212,121,210 samples, 0.64%)</title><rect x="574.8" y="373" width="7.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="577.79" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main (33,070,706,740 samples, 99.94%)</title><rect x="10.7" y="485" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.72" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1167.7" y="357" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="207.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (30,303,030 samples, 0.09%)</title><rect x="1148.2" y="373" width="1.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1151.22" y="383.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="33.8" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="36.77" y="383.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="564.0" y="357" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="566.98" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="859.7" y="261" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="862.70" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.21%)</title><rect x="1176.0" y="389" width="2.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1178.95" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::Timeout::operator (40,404,040 samples, 0.12%)</title><rect x="1147.9" y="405" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1150.86" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="287.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (121,212,120 samples, 0.37%)</title><rect x="1149.3" y="405" width="4.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1152.30" y="415.5" ></text>
</g>
<g >
<title>nons (33,090,908,760 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="245" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.56" y="255.5" ></text>
</g>
<g >
<title>void sim::YamlParser::process_identifiables&lt;sim::ILink&gt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1192.64" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (313,131,310 samples, 0.95%)</title><rect x="65.8" y="405" width="11.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="68.83" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="71.6" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.59" y="271.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="579.8" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="582.83" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="854.3" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="857.30" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="575.5" y="325" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="578.51" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="149" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="76.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.28" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="340.3" y="341" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="343.30" y="351.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.03%)</title><rect x="77.0" y="405" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="80.00" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.03%)</title><rect x="243.0" y="421" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="246.05" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1148.6" y="341" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1151.58" y="351.5" ></text>
</g>
<g >
<title>sim::Process::~Process (50,505,050 samples, 0.15%)</title><rect x="1126.6" y="405" width="1.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1129.61" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="373" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="574.1" y="213" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.07" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="143.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="568.3" y="357" width="3.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="571.30" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="63.7" y="389" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="66.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="67.6" y="53" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.63" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.18%)</title><rect x="1160.1" y="373" width="2.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.10" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="575.9" y="229" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.87" y="239.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1159.0" y="373" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.02" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.03%)</title><rect x="34.5" y="341" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="37.49" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,474,747,450 samples, 7.48%)</title><rect x="918.4" y="373" width="88.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="921.41" y="383.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (50,505,050 samples, 0.15%)</title><rect x="66.6" y="389" width="1.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="69.55" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.62" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="575.9" y="261" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.87" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="797.7" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="800.75" y="351.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 0.06%)</title><rect x="870.9" y="357" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="873.87" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.1" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.11" y="159.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="565.4" y="373" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="568.42" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="575.9" y="309" width="1.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="578.87" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="580.2" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.19" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketReordering::add_record (20,202,020 samples, 0.06%)</title><rect x="581.3" y="357" width="0.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="584.27" y="367.5" ></text>
</g>
<g >
<title>malloc (545,454,540 samples, 1.65%)</title><rect x="834.5" y="341" width="19.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="837.49" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt;, std::less&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.4" y="405" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="67.39" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1173.4" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.43" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.12%)</title><rect x="1187.8" y="261" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.84" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="346.4" y="229" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.42" y="239.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.15%)</title><rect x="575.5" y="341" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="578.51" y="351.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="341" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1192.64" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.18%)</title><rect x="1131.3" y="341" width="2.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1134.29" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="223.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1155.4" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.42" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.7" y="437" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="447.5" ></text>
</g>
<g >
<title>sim::Event::get_time (80,808,080 samples, 0.24%)</title><rect x="83.1" y="421" width="2.9" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="86.12" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (40,404,040 samples, 0.12%)</title><rect x="579.5" y="357" width="1.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="582.47" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="1135.6" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1138.61" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.37%)</title><rect x="342.8" y="341" width="4.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="345.82" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="72.7" y="309" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.67" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="852.1" y="309" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="855.14" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="572.6" y="325" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="575.63" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="339.6" y="357" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="342.58" y="367.5" ></text>
</g>
<g >
<title>_IO_file_open (50,505,050 samples, 0.15%)</title><rect x="66.6" y="325" width="1.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="69.55" y="335.5" ></text>
</g>
<g >
<title>std::ostream::put (20,202,020 samples, 0.06%)</title><rect x="62.9" y="389" width="0.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="65.95" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="197" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="207.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="349.7" y="373" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="352.66" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.06%)</title><rect x="1179.6" y="405" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.55" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="255.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="1138.9" y="341" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1141.85" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::retransmit_packet (30,303,030 samples, 0.09%)</title><rect x="1148.2" y="389" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1151.22" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="197" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1128.4" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="1173.1" y="389" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1176.07" y="399.5" ></text>
</g>
<g >
<title>_start (33,070,706,740 samples, 99.94%)</title><rect x="10.7" y="501" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.72" y="511.5" >_start</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1134.2" y="357" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1137.17" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.2" y="69" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.19" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="343.5" y="277" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="346.54" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (40,404,040 samples, 0.12%)</title><rect x="34.9" y="389" width="1.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="37.85" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="571.9" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="574.90" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 0.70%)</title><rect x="52.9" y="309" width="8.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="55.86" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1155.8" y="405" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1158.78" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1130.6" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.57" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="213" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.03%)</title><rect x="574.1" y="309" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="577.07" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.24%)</title><rect x="1139.9" y="357" width="2.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1142.93" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="563.3" y="373" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="566.26" y="383.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 0.61%)</title><rect x="10.7" y="421" width="7.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.72" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1143.5" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.53" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="33.8" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.77" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="321.2" y="389" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="324.21" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.03%)</title><rect x="574.1" y="293" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="577.07" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1178.8" y="373" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.83" y="383.5" ></text>
</g>
<g >
<title>sim::Switch::process (11,707,070,590 samples, 35.38%)</title><rect x="591.4" y="389" width="417.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="594.36" y="399.5" >sim::Switch::process</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.06%)</title><rect x="1187.1" y="245" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.12" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="223.5" ></text>
</g>
<g >
<title>sim::Host::process (545,454,540 samples, 1.65%)</title><rect x="562.9" y="389" width="19.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="565.90" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (313,131,310 samples, 0.95%)</title><rect x="38.5" y="357" width="11.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="41.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="797.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="800.75" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (353,535,350 samples, 1.07%)</title><rect x="336.7" y="373" width="12.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="339.70" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.0" y="405" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.03" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1130.2" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1133.21" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="149" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="159.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="357" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1192.64" y="367.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.21%)</title><rect x="15.0" y="357" width="2.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.04" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="349.3" y="373" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="352.30" y="383.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.15%)</title><rect x="713.8" y="373" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="716.82" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="575.9" y="325" width="1.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="578.87" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1128.8" y="373" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.77" y="383.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 1.07%)</title><rect x="820.4" y="357" width="12.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="823.44" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="293" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="31.6" y="373" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="34.61" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="351.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="337.1" y="341" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="340.06" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="197" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="207.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="859.7" y="293" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="862.70" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1157.2" y="389" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1160.22" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="69.1" y="325" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="72.07" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="566.9" y="357" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="569.86" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="568.7" y="293" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="571.66" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="576.2" y="213" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="579.23" y="223.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1147.1" y="373" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1150.14" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="1132.4" y="309" width="1.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1135.37" y="319.5" ></text>
</g>
<g >
<title>utils::create_all_directories (20,202,020 samples, 0.06%)</title><rect x="76.3" y="389" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="79.28" y="399.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="62.6" y="357" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="65.59" y="367.5" ></text>
</g>
<g >
<title>fopen (40,404,040 samples, 0.12%)</title><rect x="34.9" y="357" width="1.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="37.85" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="868.3" y="261" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="871.35" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.06%)</title><rect x="65.8" y="389" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="68.83" y="399.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.31%)</title><rect x="343.2" y="309" width="3.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="346.18" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="1185.0" y="405" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1187.96" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.21%)</title><rect x="1140.3" y="341" width="2.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1143.29" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="335.6" y="309" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="338.62" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="346.1" y="245" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.06" y="255.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 0.73%)</title><rect x="1103.9" y="373" width="8.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1106.91" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (90,909,090 samples, 0.27%)</title><rect x="332.7" y="357" width="3.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="335.74" y="367.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="1139.9" y="341" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1142.93" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,666,666,650 samples, 5.04%)</title><rect x="17.9" y="437" width="59.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="20.92" y="447.5" >sim::M..</text>
</g>
<g >
<title>malloc (90,909,090 samples, 0.27%)</title><rect x="1100.7" y="373" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1103.67" y="383.5" ></text>
</g>
<g >
<title>operator new (101,010,100 samples, 0.31%)</title><rect x="387.8" y="389" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="390.84" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.09%)</title><rect x="1186.0" y="261" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.04" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="338.5" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="341.50" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="868.3" y="277" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="871.35" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="293" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.04" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (111,111,110 samples, 0.34%)</title><rect x="1136.0" y="357" width="3.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1138.97" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="48.9" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.90" y="271.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="566.5" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="569.50" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1177.4" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.39" y="351.5" ></text>
</g>
<g >
<title>all (33,090,908,760 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="562.9" y="373" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="565.90" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.52%)</title><rect x="707.7" y="357" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="710.70" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.09%)</title><rect x="30.9" y="389" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="33.89" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="15.0" y="341" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.04" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="580.9" y="325" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="583.91" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (20,202,020 samples, 0.06%)</title><rect x="1012.4" y="389" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1015.42" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="229" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 0.70%)</title><rect x="41.3" y="309" width="8.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.34" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_packet_reordering (10,101,010 samples, 0.03%)</title><rect x="580.9" y="357" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="583.91" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="80.6" y="421" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="83.60" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="213" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.12" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="133" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="353.3" y="325" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="356.27" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="287.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.15%)</title><rect x="386.0" y="389" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="389.04" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="578.7" y="341" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="581.75" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="869.4" y="357" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="872.43" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.06%)</title><rect x="1186.0" y="245" width="0.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.04" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.12%)</title><rect x="868.0" y="309" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="870.99" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="175.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,404,040,360 samples, 13.31%)</title><rect x="86.0" y="421" width="157.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="89.00" y="431.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="20.1" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.09" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.12%)</title><rect x="575.9" y="277" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="578.87" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="574.4" y="309" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="577.43" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="33.8" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="36.77" y="367.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.58%)</title><rect x="1105.7" y="357" width="6.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1108.71" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (40,404,040 samples, 0.12%)</title><rect x="1183.5" y="405" width="1.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1186.52" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="58.3" y="277" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="61.27" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="1171.6" y="389" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1174.63" y="399.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="346.8" y="325" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="349.78" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (60,606,060 samples, 0.18%)</title><rect x="1144.3" y="373" width="2.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1147.26" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="726.1" y="373" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="729.07" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt;, std::less&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, sim::MetricsStorage&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.4" y="373" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="67.39" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.18%)</title><rect x="733.3" y="357" width="2.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="736.27" y="367.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.49%)</title><rect x="720.3" y="357" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="723.31" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.9" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.93" y="159.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="30.9" y="373" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="33.89" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="309" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.04" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="574.1" y="229" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.07" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="29.8" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.81" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="405" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="70.2" y="293" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.15" y="303.5" ></text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.34%)</title><rect x="11.1" y="373" width="3.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.08" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="580.2" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.19" y="287.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="1132.0" y="325" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1135.01" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="223.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.06%)</title><rect x="330.2" y="373" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="333.21" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,252,525,240 samples, 3.79%)</title><rect x="871.6" y="373" width="44.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="874.59" y="383.5" >sim:..</text>
</g>
<g >
<title>sim::LinkQueue::push (121,212,120 samples, 0.37%)</title><rect x="332.4" y="373" width="4.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="335.37" y="383.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="859.7" y="277" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="862.70" y="287.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (20,202,020 samples, 0.06%)</title><rect x="50.0" y="357" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="52.98" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="35.6" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.57" y="191.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.03%)</title><rect x="567.9" y="357" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="570.94" y="367.5" ></text>
</g>
<g >
<title>__uselocale (20,202,020 samples, 0.06%)</title><rect x="61.1" y="357" width="0.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="64.15" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.06%)</title><rect x="1156.1" y="405" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.14" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (111,111,110 samples, 0.34%)</title><rect x="68.7" y="389" width="4.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="71.71" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="567.2" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="570.22" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (252,525,250 samples, 0.76%)</title><rect x="52.1" y="341" width="9.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="55.14" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1141.0" y="261" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.01" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.12%)</title><rect x="338.1" y="357" width="1.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="341.14" y="367.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 0.73%)</title><rect x="717.4" y="373" width="8.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="720.42" y="383.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (30,303,030 samples, 0.09%)</title><rect x="561.8" y="389" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="564.82" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (60,606,060 samples, 0.18%)</title><rect x="867.3" y="357" width="2.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="870.26" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="582.0" y="341" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="584.99" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="319.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.03%)</title><rect x="34.5" y="325" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="37.49" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="37.0" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.01" y="383.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1129.8" y="373" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1132.85" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1172.7" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1175.71" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="866.2" y="309" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="869.18" y="319.5" ></text>
</g>
<g >
<title>open64 (30,303,030 samples, 0.09%)</title><rect x="35.2" y="309" width="1.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="38.21" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="351.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.47" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="342.5" y="357" width="4.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="345.46" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="64.0" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="67.03" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="856.5" y="357" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="859.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="35.2" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.21" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1131.3" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1134.29" y="335.5" ></text>
</g>
<g >
<title>_IO_file_fopen (40,404,040 samples, 0.12%)</title><rect x="34.9" y="341" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="37.85" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="68.4" y="389" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="71.35" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.18%)</title><rect x="572.6" y="341" width="2.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="575.63" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="14.3" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.32" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.18%)</title><rect x="347.1" y="357" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="350.14" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (40,404,040 samples, 0.12%)</title><rect x="347.9" y="341" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="350.86" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="574.4" y="293" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="577.43" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="332.7" y="341" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="335.74" y="351.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="565.1" y="325" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="568.06" y="335.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (40,404,040 samples, 0.12%)</title><rect x="862.2" y="373" width="1.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="865.22" y="383.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.18%)</title><rect x="81.0" y="421" width="2.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="83.96" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="335.6" y="293" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="338.62" y="303.5" ></text>
</g>
<g >
<title>__gnu_pbds::detail::bin_search_tree_set&lt;unsigned int, __gnu_pbds::null_type, std::less&lt;unsigned int&gt;, __gnu_pbds::detail::tree_traits&lt;unsigned int, __gnu_pbds::null_type, std::less&lt;unsigned int&gt;, __gnu_pbds::tree_order_statistics_node_update, __gnu_pbds::rb_tree_tag, std::allocator&lt;char&gt; &gt;, std::allocator&lt;char&gt; &gt;::clear_imp (10,101,010 samples, 0.03%)</title><rect x="17.6" y="341" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="20.56" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="859.7" y="309" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="862.70" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.21%)</title><rect x="1140.3" y="325" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.29" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="864.7" y="357" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="867.74" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1160.1" y="325" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.10" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="229" width="0.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.04" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="341.7" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="344.74" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="48.5" y="277" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.54" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="325" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (313,131,310 samples, 0.95%)</title><rect x="51.8" y="373" width="11.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="54.78" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.18%)</title><rect x="854.3" y="341" width="2.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="857.30" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="341" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.04" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="570.5" y="245" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="573.46" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="32.0" y="389" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="34.97" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.4" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.39" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (20,202,020 samples, 0.06%)</title><rect x="1148.6" y="357" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1151.58" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1140.7" y="293" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.65" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (33,070,706,740 samples, 99.94%)</title><rect x="10.7" y="469" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.21%)</title><rect x="574.8" y="357" width="2.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="577.79" y="367.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1153.6" y="405" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1156.62" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1142.5" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.45" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1134.2" y="341" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.17" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1134.5" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1137.53" y="351.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="577.3" y="325" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="580.31" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.11" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="229" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="207.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="866.5" y="341" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="869.54" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="10.7" y="373" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.72" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="571.9" y="357" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="574.90" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.2" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.19" y="111.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (10,101,010 samples, 0.03%)</title><rect x="17.6" y="373" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="20.56" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="64.4" y="357" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="67.39" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="66.9" y="133" width="1.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.91" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.4" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.39" y="319.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="342.5" y="341" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="345.46" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="223.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (60,606,060 samples, 0.18%)</title><rect x="1131.3" y="357" width="2.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1134.29" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="181" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.4" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.39" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.03%)</title><rect x="34.5" y="373" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="37.49" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1178.8" y="357" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.83" y="367.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.15%)</title><rect x="715.6" y="373" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="718.62" y="383.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="389" width="3.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1189.04" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="35.2" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.21" y="271.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.03%)</title><rect x="10.7" y="357" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.72" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.1" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.11" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="367.5" ></text>
</g>
<g >
<title>__uselocale (20,202,020 samples, 0.06%)</title><rect x="72.0" y="357" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="74.95" y="367.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="853.9" y="357" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="856.94" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="255.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (50,505,050 samples, 0.15%)</title><rect x="66.6" y="373" width="1.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="69.55" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.27%)</title><rect x="72.7" y="357" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="75.67" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1185.7" y="421" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1188.68" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="868.0" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="870.99" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (111,111,110 samples, 0.34%)</title><rect x="68.7" y="373" width="4.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="71.71" y="383.5" ></text>
</g>
<g >
<title>_IO_file_fopen (50,505,050 samples, 0.15%)</title><rect x="66.6" y="341" width="1.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="69.55" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1145.7" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1148.70" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.06%)</title><rect x="340.7" y="325" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="343.66" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="328.8" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="331.77" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="357" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.04" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (2,131,313,110 samples, 6.44%)</title><rect x="613.0" y="373" width="76.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="615.97" y="383.5" >Logger::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="865.8" y="309" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="868.82" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.06%)</title><rect x="865.8" y="325" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="868.82" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (181,818,180 samples, 0.55%)</title><rect x="565.8" y="373" width="6.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="568.78" y="383.5" ></text>
</g>
<g >
<title>_IO_file_open (30,303,030 samples, 0.09%)</title><rect x="35.2" y="325" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="38.21" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="261" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="271.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.09%)</title><rect x="385.0" y="389" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="387.96" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1148.9" y="325" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1151.94" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.24%)</title><rect x="69.1" y="341" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="72.07" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="574.1" y="277" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="577.07" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="223.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (484,848,480 samples, 1.47%)</title><rect x="1162.3" y="405" width="17.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1165.26" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 0.98%)</title><rect x="808.9" y="357" width="11.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="811.91" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1177.8" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.75" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="337.8" y="325" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.78" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1139.6" y="341" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1142.57" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="30.5" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="117" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1154.3" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.34" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (60,606,060 samples, 0.18%)</title><rect x="587.4" y="389" width="2.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="590.39" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="229" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.12" y="239.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="338.9" y="341" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="341.86" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="197" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="207.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="29.8" y="373" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="32.81" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="239.5" ></text>
</g>
<g >
<title>sim::Event::Event (393,939,390 samples, 1.19%)</title><rect x="1112.6" y="373" width="14.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1115.56" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1146.1" y="341" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1149.06" y="351.5" ></text>
</g>
<g >
<title>sim::SendData::operator (545,454,540 samples, 1.65%)</title><rect x="1128.4" y="405" width="19.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1131.41" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1132.7" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1135.73" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="181" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.40" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (40,404,040 samples, 0.12%)</title><rect x="1174.5" y="389" width="1.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1177.51" y="399.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 0.98%)</title><rect x="702.3" y="373" width="11.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="705.30" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.31%)</title><rect x="1158.7" y="389" width="3.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1161.66" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="866.9" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="869.90" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.64" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="344.3" y="261" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="347.26" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="580.5" y="325" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="583.55" y="335.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="580.9" y="341" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="583.91" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (101,010,100 samples, 0.31%)</title><rect x="857.9" y="341" width="3.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="860.90" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (10,101,010 samples, 0.03%)</title><rect x="353.6" y="373" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="356.63" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (101,010,100 samples, 0.31%)</title><rect x="1008.8" y="389" width="3.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1011.82" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="29.8" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="32.81" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1161.2" y="309" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.18" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.06%)</title><rect x="861.5" y="341" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="864.50" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="76.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.28" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.0" y="357" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.03" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="350.4" y="389" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="353.38" y="399.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.27%)</title><rect x="72.7" y="341" width="3.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="75.67" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="335.5" ></text>
</g>
<g >
<title>malloc (90,909,090 samples, 0.27%)</title><rect x="1166.6" y="373" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.59" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1177.4" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.39" y="367.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="213" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.20" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="389" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1132.7" y="245" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.73" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.06%)</title><rect x="1187.1" y="261" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.12" y="271.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1170.2" y="389" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1173.19" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="347.5" y="341" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="350.50" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="864.4" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="867.38" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="245" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="287.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (878,787,870 samples, 2.66%)</title><rect x="1154.0" y="421" width="31.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1156.98" y="431.5" >si..</text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.46%)</title><rect x="1156.9" y="405" width="5.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1159.86" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.0" y="37" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.99" y="47.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="573.3" y="309" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="576.35" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="577.3" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="580.31" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="1135.3" y="341" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1138.25" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (282,828,280 samples, 0.85%)</title><rect x="1134.2" y="373" width="10.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1137.17" y="383.5" ></text>
</g>
<g >
<title>sim::Link::transmit (90,909,090 samples, 0.27%)</title><rect x="350.7" y="389" width="3.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="353.74" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="165" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.20" y="175.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_cwnd (10,101,010 samples, 0.03%)</title><rect x="579.1" y="357" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="582.11" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (30,303,030 samples, 0.09%)</title><rect x="1178.5" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.47" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="207.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1134.5" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.53" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 0.61%)</title><rect x="10.7" y="405" width="7.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="61.9" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="64.87" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.62" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.49%)</title><rect x="43.5" y="293" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.50" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="229" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.3" y="117" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.27" y="127.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (3,181,818,150 samples, 9.62%)</title><rect x="1013.1" y="389" width="113.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1016.14" y="399.5" >void sim::Sche..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.12%)</title><rect x="575.9" y="293" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="578.87" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.9" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.93" y="127.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (40,404,040 samples, 0.12%)</title><rect x="34.9" y="373" width="1.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="37.85" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="293" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1192.28" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="421" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.64" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="271.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (60,606,060 samples, 0.18%)</title><rect x="333.8" y="341" width="2.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="336.82" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="564.3" y="325" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="567.34" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (363,636,360 samples, 1.10%)</title><rect x="37.7" y="373" width="13.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="40.74" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.7" y="453" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="1146.4" y="373" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1149.42" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="341.0" y="309" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="344.02" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (292,929,290 samples, 0.89%)</title><rect x="39.2" y="325" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.18" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="159.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="213" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.56" y="223.5" ></text>
</g>
<g >
<title>operator new (101,010,100 samples, 0.31%)</title><rect x="1166.2" y="389" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.23" y="399.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="49.3" y="293" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="52.26" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="1170.9" y="373" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1173.91" y="383.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.06%)</title><rect x="20.4" y="405" width="0.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="23.45" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="277" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.18%)</title><rect x="351.5" y="357" width="2.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="354.47" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.24%)</title><rect x="69.1" y="357" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="72.07" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="32.3" y="389" width="2.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="35.33" y="399.5" ></text>
</g>
<g >
<title>open64 (50,505,050 samples, 0.15%)</title><rect x="66.6" y="309" width="1.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="69.55" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (323,232,320 samples, 0.98%)</title><rect x="65.8" y="421" width="11.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="68.83" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="75.9" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="78.92" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="341" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 0.58%)</title><rect x="11.1" y="389" width="6.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.08" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="165" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="175.5" ></text>
</g>
<g >
<title>cfree (333,333,330 samples, 1.01%)</title><rect x="316.5" y="405" width="11.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="319.53" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="223.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="181" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.20" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="207.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.06%)</title><rect x="610.1" y="373" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="613.09" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="1139.2" y="325" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1142.21" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="1143.9" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.89" y="335.5" ></text>
</g>
<g >
<title>sim::Event::Event (141,414,140 samples, 0.43%)</title><rect x="391.4" y="389" width="5.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="394.45" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1143.2" y="341" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1146.17" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="245" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1191.20" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.81" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.34%)</title><rect x="1186.0" y="437" width="4.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1189.04" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="72.7" y="293" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.67" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.28" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (25,313,131,060 samples, 76.50%)</title><rect x="251.3" y="421" width="902.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="254.33" y="431.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="66.9" y="149" width="1.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.91" y="159.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="181" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.2" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.19" y="95.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1173.4" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1176.43" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.55" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="229" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.40" y="239.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="577.3" y="309" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="580.31" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1148.9" y="293" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.94" y="303.5" ></text>
</g>
<g >
<title>sim::Process::~Process (111,111,110 samples, 0.34%)</title><rect x="247.4" y="421" width="3.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="250.37" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (616,161,610 samples, 1.86%)</title><rect x="328.4" y="405" width="22.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="331.41" y="415.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="159.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="72.7" y="389" width="3.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="75.67" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="566.1" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="569.14" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="35.2" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.21" y="303.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.12%)</title><rect x="13.6" y="357" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.60" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="261" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.9" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.93" y="111.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1177.4" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.39" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1148.9" y="341" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1151.94" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_ack (10,101,010 samples, 0.03%)</title><rect x="582.0" y="357" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="584.99" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="49.6" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="52.62" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="191.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="867.3" y="341" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="870.26" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.37" y="239.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="72.7" y="373" width="3.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="75.67" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="197" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1191.56" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="335.3" y="325" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="338.26" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="35.6" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.57" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="20.8" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="23.81" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (373,737,370 samples, 1.13%)</title><rect x="689.0" y="373" width="13.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="691.97" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1178.8" y="341" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.83" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (393,939,390 samples, 1.19%)</title><rect x="36.7" y="389" width="14.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="39.65" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="569.4" y="261" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="572.38" y="271.5" ></text>
</g>
<g >
<title>sim::TcpFlow::Timeout::operator (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="421" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1188.32" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="287.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="336.7" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="339.70" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (90,909,090 samples, 0.27%)</title><rect x="582.7" y="389" width="3.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="585.71" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.09%)</title><rect x="1182.4" y="405" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.44" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1148.9" y="309" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1151.94" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (343,434,340 samples, 1.04%)</title><rect x="50.7" y="389" width="12.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="53.70" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="797.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="800.75" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="357" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.28" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="1133.8" y="373" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1136.81" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.06%)</title><rect x="65.8" y="373" width="0.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="68.83" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="53.6" y="293" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="56.58" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="165" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.4" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.45" y="287.5" ></text>
</g>
<g >
<title>sim::Process::operator (21,666,666,450 samples, 65.48%)</title><rect x="354.0" y="405" width="772.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="356.99" y="415.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="580.2" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.19" y="271.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.15%)</title><rect x="867.6" y="341" width="1.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="870.63" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="72.7" y="325" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.67" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="797.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="800.75" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1130.6" y="357" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1133.57" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1132.7" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.73" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.62" y="271.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="348.9" y="325" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="351.94" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="159.5" ></text>
</g>
<g >
<title>Logger::info (2,060,606,040 samples, 6.23%)</title><rect x="735.4" y="357" width="73.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="738.43" y="367.5" >Logger::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="133" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (30,303,030 samples, 0.09%)</title><rect x="1170.5" y="389" width="1.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1173.55" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="869.4" y="341" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="872.43" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.06%)</title><rect x="336.0" y="357" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="338.98" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.03%)</title><rect x="1135.6" y="325" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1138.61" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="213" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="223.5" ></text>
</g>
<g >
<title>vsnprintf (292,929,290 samples, 0.89%)</title><rect x="39.2" y="341" width="10.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="42.18" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="863.7" y="373" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="866.66" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.09%)</title><rect x="1172.0" y="389" width="1.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1174.99" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.31%)</title><rect x="343.2" y="325" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="346.18" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1177.8" y="341" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.75" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 0.18%)</title><rect x="1187.1" y="277" width="2.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.12" y="287.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.21%)</title><rect x="1140.3" y="309" width="2.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1143.29" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,202,020 samples, 0.06%)</title><rect x="1177.8" y="373" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1180.75" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (50,505,050 samples, 0.15%)</title><rect x="563.6" y="373" width="1.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="566.62" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="1134.9" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1137.89" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.03%)</title><rect x="34.5" y="389" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="37.49" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="76.6" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="79.64" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="64.0" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="67.03" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="565.1" y="309" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="568.06" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.09%)</title><rect x="64.7" y="405" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="67.75" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.0" y="389" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.03" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="1146.8" y="373" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1149.78" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="825.5" y="341" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="828.48" y="351.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.03%)</title><rect x="339.2" y="341" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="342.22" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="66.6" y="293" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.55" y="303.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (20,202,020 samples, 0.06%)</title><rect x="861.5" y="325" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="864.50" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.5" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.49" y="239.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_scalar (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="245" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.92" y="255.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="1147.5" y="389" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1150.50" y="399.5" ></text>
</g>
<g >
<title>operator new (575,757,570 samples, 1.74%)</title><rect x="833.4" y="357" width="20.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="836.41" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.03%)</title><rect x="1169.8" y="389" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1172.83" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.8" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.81" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="261" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.92" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="319.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="421" width="3.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.04" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="31.6" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="34.61" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="335.3" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.26" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (70,707,070 samples, 0.21%)</title><rect x="572.3" y="357" width="2.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="575.26" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.73" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="348.2" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="351.22" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.15%)</title><rect x="573.0" y="325" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="575.99" y="335.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="405" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.64" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1143.5" y="341" width="0.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1146.53" y="351.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.18%)</title><rect x="1160.1" y="341" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.10" y="351.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (70,707,070 samples, 0.21%)</title><rect x="351.1" y="373" width="2.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="354.11" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="229" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1191.20" y="239.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (60,606,060 samples, 0.18%)</title><rect x="854.3" y="357" width="2.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="857.30" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="245" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="255.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.27%)</title><rect x="1186.0" y="373" width="3.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1189.04" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="213" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.04" y="223.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.06%)</title><rect x="65.8" y="357" width="0.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="68.83" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.12%)</title><rect x="1142.8" y="357" width="1.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1145.81" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="65.8" y="309" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.83" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (252,525,250 samples, 0.76%)</title><rect x="52.1" y="357" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="55.14" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.03%)</title><rect x="332.0" y="373" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="335.01" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="17.2" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.20" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.06%)</title><rect x="77.4" y="437" width="0.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="80.36" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.09%)</title><rect x="1186.0" y="277" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.04" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1145.7" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.70" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="277" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1192.28" y="287.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.18%)</title><rect x="1160.1" y="357" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.10" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="336.7" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="339.70" y="351.5" ></text>
</g>
<g >
<title>sim::Link::arrive (595,959,590 samples, 1.80%)</title><rect x="329.1" y="389" width="21.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="332.13" y="399.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.1" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.11" y="191.5" ></text>
</g>
<g >
<title>__gnu_pbds::detail::bin_search_tree_set&lt;unsigned int, __gnu_pbds::null_type, std::less&lt;unsigned int&gt;, __gnu_pbds::detail::tree_traits&lt;unsigned int, __gnu_pbds::null_type, std::less&lt;unsigned int&gt;, __gnu_pbds::tree_order_statistics_node_update, __gnu_pbds::rb_tree_tag, std::allocator&lt;char&gt; &gt;, std::allocator&lt;char&gt; &gt;::~bin_search_tree_set (10,101,010 samples, 0.03%)</title><rect x="17.6" y="357" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="20.56" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (101,010,100 samples, 0.31%)</title><rect x="350.4" y="405" width="3.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="353.38" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="855.7" y="325" width="0.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="858.74" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.1" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.11" y="175.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,343,434,330 samples, 4.06%)</title><rect x="17.9" y="421" width="47.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="20.92" y="431.5" >sim:..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="245" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.76" y="255.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="338.5" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="341.50" y="351.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="579.8" y="309" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="582.83" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="918.1" y="373" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="921.05" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,636,363,590 samples, 14.01%)</title><rect x="396.5" y="389" width="165.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="399.49" y="399.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1132.7" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1135.73" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>sim::Link::~Link (70,707,070 samples, 0.21%)</title><rect x="15.0" y="373" width="2.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="18.04" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="71.6" y="277" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.59" y="287.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.03%)</title><rect x="1133.4" y="373" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1136.45" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="35.2" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.21" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.82" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.74" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="330.9" y="373" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="333.93" y="383.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="352.2" y="341" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="355.19" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.15%)</title><rect x="1180.6" y="405" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.63" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="577.7" y="277" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="580.67" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="350.7" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="353.74" y="367.5" ></text>
</g>
<g >
<title>Size&lt;Byte&gt; parse_with_default&lt;Size&lt;Byte&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1192.64" y="335.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.03%)</title><rect x="861.1" y="309" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="864.14" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="229" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.48" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="15.0" y="325" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.04" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1140.7" y="277" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.65" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="577.3" y="341" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="580.31" y="351.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (525,252,520 samples, 1.59%)</title><rect x="1128.8" y="389" width="18.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1131.77" y="399.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="19.0" y="405" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="22.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="64.0" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="67.03" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.7" y="213" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.75" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.27%)</title><rect x="568.7" y="325" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="571.66" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="869.8" y="357" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="872.79" y="367.5" ></text>
</g>
<g >
<title>fopen (50,505,050 samples, 0.15%)</title><rect x="66.6" y="357" width="1.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="69.55" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.09%)</title><rect x="564.3" y="341" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="567.34" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.0" y="373" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.03" y="383.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,202,020,190 samples, 3.63%)</title><rect x="21.2" y="405" width="42.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="24.17" y="415.5" >sim:..</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.03%)</title><rect x="342.1" y="357" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="345.10" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_from_egress_queue_size (10,101,010 samples, 0.03%)</title><rect x="582.4" y="389" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="585.35" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.3" y="85" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.27" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="271.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="341.4" y="341" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="344.38" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.1" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.13" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="335.6" y="277" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.62" y="287.5" ></text>
</g>
</g>
</svg>
