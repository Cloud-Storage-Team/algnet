<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.65%)</title><rect x="1136.4" y="469" width="7.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1139.36" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1098.1" y="373" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1101.05" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="325" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="308.8" y="453" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="311.83" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (30,303,030 samples, 1.95%)</title><rect x="554.0" y="357" width="23.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="557.03" y="367.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="278.2" y="453" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="281.18" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.60%)</title><rect x="691.9" y="277" width="30.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.95" y="287.5" >in..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (191,919,190 samples, 12.34%)</title><rect x="829.9" y="325" width="145.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="832.87" y="335.5" >YAML::SingleDocPar..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="613" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 7.14%)</title><rect x="101.9" y="437" width="84.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="104.95" y="447.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::LoadFile (747,474,740 samples, 48.05%)</title><rect x="416.1" y="549" width="567.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="419.10" y="559.5" >YAML::LoadFile</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="952.5" y="229" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="955.47" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (676,767,670 samples, 43.51%)</title><rect x="462.1" y="405" width="513.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="465.08" y="415.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="149" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="85" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="469" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="914.2" y="213" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="917.16" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="501" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (161,616,160 samples, 10.39%)</title><rect x="983.1" y="549" width="122.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="986.12" y="559.5" >YAML::Node::~Node</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="883.5" y="261" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="886.51" y="271.5" >i..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="929.5" y="261" width="7.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="932.48" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (50,505,050 samples, 3.25%)</title><rect x="791.6" y="293" width="38.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="794.56" y="303.5" >YAM..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="501" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="389" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="745.6" y="37" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.58" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="165" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="85" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="95.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="437" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1154.69" y="447.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.65%)</title><rect x="71.3" y="501" width="7.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="74.30" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="883.5" y="197" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="886.51" y="207.5" >i..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="753.2" y="309" width="7.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="756.25" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="960.1" y="245" width="7.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="963.13" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="768.6" y="213" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.57" y="223.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="944.8" y="213" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="947.81" y="223.5" ></text>
</g>
<g >
<title>sim::Simulator::start (252,525,250 samples, 16.23%)</title><rect x="216.9" y="565" width="191.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="219.88" y="575.5" >sim::Simulator::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="133" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="143.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.30%)</title><rect x="829.9" y="261" width="15.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="832.87" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="533" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="860.5" y="165" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="863.52" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="565" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="165" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="293" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="469" width="61.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1047.42" y="479.5" >std::_..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="1029.1" y="421" width="7.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1032.09" y="431.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.65%)</title><rect x="362.5" y="485" width="7.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="365.47" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="822.2" y="245" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="825.21" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="405" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.65%)</title><rect x="944.8" y="229" width="7.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="947.81" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (313,131,310 samples, 20.13%)</title><rect x="737.9" y="373" width="237.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="740.92" y="383.5" >YAML::SingleDocParser::HandleBl..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="197" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 3.25%)</title><rect x="684.3" y="293" width="38.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="687.29" y="303.5" >int..</text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.65%)</title><rect x="646.0" y="357" width="7.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="648.97" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.65%)</title><rect x="393.1" y="517" width="7.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="396.12" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (737,373,730 samples, 47.40%)</title><rect x="416.1" y="485" width="559.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="419.10" y="495.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="597" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="309" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="653.6" y="309" width="15.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="656.64" y="319.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (10,101,010 samples, 0.65%)</title><rect x="308.8" y="485" width="7.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="311.83" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="165" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="175.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.30%)</title><rect x="653.6" y="341" width="15.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="656.64" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator::add_connection (10,101,010 samples, 0.65%)</title><rect x="1105.7" y="501" width="7.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1108.71" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1174.7" y="389" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.68" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="549" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="1105.7" y="469" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1108.71" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="197" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="207.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="339.5" y="501" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="342.48" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="630.6" y="277" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="633.65" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="117" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="127.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 1.30%)</title><rect x="293.5" y="469" width="15.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="296.51" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="405" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="213" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="223.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 1.30%)</title><rect x="584.7" y="373" width="15.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="587.68" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="437" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="181" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 2.60%)</title><rect x="753.2" y="325" width="30.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="756.25" y="335.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="213" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="101" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.95%)</title><rect x="852.9" y="197" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="855.86" y="207.5" >[..</text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.65%)</title><rect x="944.8" y="245" width="7.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="947.81" y="255.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (737,373,730 samples, 47.40%)</title><rect x="416.1" y="437" width="559.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="419.10" y="447.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="181" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="191.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 1.30%)</title><rect x="737.9" y="341" width="15.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="740.92" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 2.60%)</title><rect x="929.5" y="277" width="30.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="932.48" y="287.5" >YA..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.30%)</title><rect x="416.1" y="373" width="15.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="419.10" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="389" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="437" width="61.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1047.42" y="447.5" >std::_..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="165" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="197" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.95%)</title><rect x="431.4" y="373" width="23.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="434.43" y="383.5" >Y..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="569.4" y="309" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="572.35" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.65%)</title><rect x="967.8" y="245" width="7.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="970.79" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="213" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="261" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="101" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="85" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.95%)</title><rect x="852.9" y="213" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="855.86" y="223.5" >[..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="229" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="832.87" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="261" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="740.92" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="421" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="581" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (60,606,060 samples, 3.90%)</title><rect x="875.8" y="309" width="46.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="878.84" y="319.5" >YAML..</text>
</g>
<g >
<title>__errno_location (10,101,010 samples, 0.65%)</title><rect x="1159.4" y="421" width="7.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1162.35" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 1.30%)</title><rect x="339.5" y="517" width="15.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="342.48" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="229" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.95%)</title><rect x="760.9" y="309" width="23.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="763.91" y="319.5" >Y..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (20,202,020 samples, 1.30%)</title><rect x="193.9" y="501" width="15.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="196.90" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="517" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.65%)</title><rect x="385.5" y="501" width="7.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="388.45" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="389" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="584.7" y="293" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="587.68" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::process (70,707,070 samples, 4.55%)</title><rect x="285.8" y="517" width="53.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="288.84" y="527.5" >sim::..</text>
</g>
<g >
<title>malloc (30,303,030 samples, 1.95%)</title><rect x="615.3" y="309" width="23.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="618.32" y="319.5" >m..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="629" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="201.6" y="453" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="204.56" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="883.5" y="213" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="886.51" y="223.5" >i..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="565" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="575.5" ></text>
</g>
<g >
<title>sim::write_to_csv (212,121,210 samples, 13.64%)</title><rect x="33.0" y="533" width="160.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="35.99" y="543.5" >sim::write_to_csv</text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.30%)</title><rect x="829.9" y="245" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="832.87" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (10,101,010 samples, 0.65%)</title><rect x="975.5" y="517" width="7.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="978.45" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="446.8" y="341" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="449.75" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="546.4" y="229" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="549.36" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="37" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="47.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.30%)</title><rect x="737.9" y="325" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="740.92" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="101" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="357" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="799.2" y="229" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="802.22" y="239.5" >i..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="453" width="61.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1047.42" y="463.5" >std::_..</text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (90,909,090 samples, 5.84%)</title><rect x="1113.4" y="485" width="68.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1116.38" y="495.5" >sim::Co..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="309" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (10,101,010 samples, 0.65%)</title><rect x="975.5" y="501" width="7.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="978.45" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="17.7" y="565" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.66" y="575.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 1.30%)</title><rect x="56.0" y="501" width="15.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="58.97" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 3.90%)</title><rect x="929.5" y="309" width="46.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="932.48" y="319.5" >YAML..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="783.9" y="293" width="7.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="786.90" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="630.6" y="229" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="633.65" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="783.9" y="277" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="786.90" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 3.90%)</title><rect x="508.1" y="293" width="45.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="511.05" y="303.5" >int ..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.65%)</title><rect x="1036.8" y="421" width="7.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1039.75" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (515,151,510 samples, 33.12%)</title><rect x="584.7" y="389" width="390.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="587.68" y="399.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (737,373,730 samples, 47.40%)</title><rect x="416.1" y="501" width="559.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="419.10" y="511.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (1,010,101,000 samples, 64.94%)</title><rect x="416.1" y="565" width="766.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="419.10" y="575.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="277" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="229" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="239.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (20,202,020 samples, 1.30%)</title><rect x="293.5" y="485" width="15.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="296.51" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="341" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="351.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (101,010,100 samples, 6.49%)</title><rect x="477.4" y="341" width="76.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="480.40" y="351.5" >YAML::Sc..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="937.1" y="229" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="940.14" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="437" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::VerifySimpleKey (10,101,010 samples, 0.65%)</title><rect x="561.7" y="341" width="7.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="564.69" y="351.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.65%)</title><rect x="354.8" y="453" width="7.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="357.81" y="463.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 5.84%)</title><rect x="1113.4" y="501" width="68.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1116.38" y="511.5" >sim::Co..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (60,606,060 samples, 3.90%)</title><rect x="875.8" y="293" width="46.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="878.84" y="303.5" >YAML..</text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.65%)</title><rect x="324.2" y="501" width="7.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="327.16" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.95%)</title><rect x="431.4" y="405" width="23.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="434.43" y="415.5" >Y..</text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.65%)</title><rect x="255.2" y="517" width="7.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="258.19" y="527.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (20,202,020 samples, 1.30%)</title><rect x="193.9" y="533" width="15.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="196.90" y="543.5" ></text>
</g>
<g >
<title>parse_size (10,101,010 samples, 0.65%)</title><rect x="1159.4" y="437" width="7.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1162.35" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="117" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="127.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="768.6" y="229" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.57" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (60,606,060 samples, 3.90%)</title><rect x="783.9" y="309" width="46.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="786.90" y="319.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="630.6" y="261" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="633.65" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (252,525,250 samples, 16.23%)</title><rect x="783.9" y="341" width="191.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="786.90" y="351.5" >YAML::SingleDocParser::Ha..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (50,505,050 samples, 3.25%)</title><rect x="600.0" y="341" width="38.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="603.00" y="351.5" >YAM..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.30%)</title><rect x="760.9" y="293" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="763.91" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="149" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="69" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="722.6" y="261" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="725.60" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (40,404,040 samples, 2.60%)</title><rect x="845.2" y="293" width="30.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="848.19" y="303.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="181" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="549" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="559.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (242,424,240 samples, 15.58%)</title><rect x="33.0" y="565" width="183.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="35.99" y="575.5" >sim::MetricsCollector::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="469" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="446.8" y="325" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="449.75" y="335.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.30%)</title><rect x="737.9" y="293" width="15.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="740.92" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="245" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="213" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="85" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="229" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.65%)</title><rect x="776.2" y="293" width="7.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="779.23" y="303.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (10,101,010 samples, 0.65%)</title><rect x="975.5" y="485" width="7.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="978.45" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (60,606,060 samples, 3.90%)</title><rect x="783.9" y="325" width="46.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="786.90" y="335.5" >YAML..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 2.60%)</title><rect x="791.6" y="277" width="30.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="794.56" y="287.5" >YA..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="133" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="133" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1128.7" y="469" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.70" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="569.4" y="325" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="572.35" y="335.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.95%)</title><rect x="431.4" y="357" width="23.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="434.43" y="367.5" >Y..</text>
</g>
<g >
<title>sim::Scheduler::tick (171,717,170 samples, 11.04%)</title><rect x="239.9" y="549" width="130.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="242.87" y="559.5" >sim::Scheduler::..</text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.65%)</title><rect x="209.2" y="549" width="7.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="212.22" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="405" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.95%)</title><rect x="431.4" y="389" width="23.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="434.43" y="399.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="293.5" y="453" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.51" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="760.9" y="277" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="763.91" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 1.30%)</title><rect x="56.0" y="469" width="15.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="58.97" y="479.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 1.30%)</title><rect x="416.1" y="405" width="15.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="419.10" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 1.30%)</title><rect x="56.0" y="517" width="15.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="58.97" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="149" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.65%)</title><rect x="400.8" y="517" width="7.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="403.78" y="527.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.30%)</title><rect x="416.1" y="389" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="419.10" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="347.1" y="485" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="350.14" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="325" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="646.0" y="341" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="648.97" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (161,616,160 samples, 10.39%)</title><rect x="462.1" y="389" width="122.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="465.08" y="399.5" >YAML::Scanner::..</text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.65%)</title><rect x="186.2" y="485" width="7.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="189.23" y="495.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="421" width="61.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1047.42" y="431.5" >cfree</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (111,111,110 samples, 7.14%)</title><rect x="653.6" y="357" width="84.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="656.64" y="367.5" >YAML::Sca..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (161,616,160 samples, 10.39%)</title><rect x="983.1" y="517" width="122.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="986.12" y="527.5" >std::_Sp_counte..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="906.5" y="229" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="909.49" y="239.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="439.1" y="341" width="7.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="442.09" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (60,606,060 samples, 3.90%)</title><rect x="600.0" y="357" width="46.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="603.00" y="367.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="453" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="245" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="293" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.65%)</title><rect x="776.2" y="277" width="7.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="779.23" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="423.8" y="357" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="426.77" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.30%)</title><rect x="584.7" y="357" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="587.68" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="165" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="341" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="117" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="127.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (20,202,020 samples, 1.30%)</title><rect x="960.1" y="293" width="15.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="963.13" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="421" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.65%)</title><rect x="354.8" y="501" width="7.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="357.81" y="511.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (40,404,040 samples, 2.60%)</title><rect x="845.2" y="309" width="30.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="848.19" y="319.5" >YA..</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.95%)</title><rect x="615.3" y="293" width="23.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="618.32" y="303.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="357" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 4.55%)</title><rect x="669.0" y="309" width="53.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="671.96" y="319.5" >int Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 3.25%)</title><rect x="515.7" y="277" width="38.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="518.71" y="287.5" >int..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="245" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="389" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="399.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (20,202,020 samples, 1.30%)</title><rect x="17.7" y="549" width="15.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="20.66" y="559.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (20,202,020 samples, 1.30%)</title><rect x="377.8" y="517" width="15.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="380.79" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="646.0" y="309" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="648.97" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (10,101,010 samples, 0.65%)</title><rect x="975.5" y="533" width="7.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="978.45" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (20,202,020 samples, 1.30%)</title><rect x="1029.1" y="453" width="15.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1032.09" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.65%)</title><rect x="71.3" y="517" width="7.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="74.30" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="133" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="143.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="25.3" y="469" width="7.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="28.32" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="170.9" y="405" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="173.91" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10,101,010 samples, 0.65%)</title><rect x="1105.7" y="517" width="7.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1108.71" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 7.14%)</title><rect x="101.9" y="453" width="84.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="104.95" y="463.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="181" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="952.5" y="165" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="955.47" y="175.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.30%)</title><rect x="584.7" y="325" width="15.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="587.68" y="335.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (10,101,010 samples, 0.65%)</title><rect x="278.2" y="501" width="7.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="281.18" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="883.5" y="229" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="886.51" y="239.5" >i..</text>
</g>
<g >
<title>YAML::Scanner::SimpleKey::Validate (10,101,010 samples, 0.65%)</title><rect x="554.0" y="341" width="7.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="557.03" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (737,373,730 samples, 47.40%)</title><rect x="416.1" y="469" width="559.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="419.10" y="479.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>malloc (30,303,030 samples, 1.95%)</title><rect x="852.9" y="245" width="22.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="855.86" y="255.5" >m..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.95%)</title><rect x="937.1" y="261" width="23.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="940.14" y="271.5" >Y..</text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (20,202,020 samples, 1.30%)</title><rect x="722.6" y="309" width="15.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="725.60" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.30%)</title><rect x="17.7" y="581" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.66" y="591.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (313,131,310 samples, 20.13%)</title><rect x="737.9" y="357" width="237.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="740.92" y="367.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="373" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (50,505,050 samples, 3.25%)</title><rect x="1006.1" y="469" width="38.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1009.10" y="479.5" >std..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (151,515,150 samples, 9.74%)</title><rect x="79.0" y="517" width="114.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="81.96" y="527.5" >std::ostream&amp; ..</text>
</g>
<g >
<title>all (1,555,555,540 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 1.30%)</title><rect x="224.5" y="549" width="15.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="227.55" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="133" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="143.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_packet_reordering (10,101,010 samples, 0.65%)</title><rect x="278.2" y="485" width="7.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="281.18" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (101,010,100 samples, 6.49%)</title><rect x="1105.7" y="549" width="76.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1108.71" y="559.5" >std::_Fu..</text>
</g>
<g >
<title>sim::Switch::~Switch (10,101,010 samples, 0.65%)</title><rect x="25.3" y="485" width="7.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="28.32" y="495.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (20,202,020 samples, 1.30%)</title><rect x="354.8" y="517" width="15.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="357.81" y="527.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="421" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1154.69" y="431.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="439.1" y="325" width="7.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="442.09" y="335.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (10,101,010 samples, 0.65%)</title><rect x="354.8" y="485" width="7.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="357.81" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="783.9" y="245" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="786.90" y="255.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.65%)</title><rect x="278.2" y="469" width="7.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="281.18" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="373" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.30%)</title><rect x="906.5" y="261" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="909.49" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="69" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="79.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (20,202,020 samples, 1.30%)</title><rect x="722.6" y="325" width="15.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="725.60" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.65%)</title><rect x="454.4" y="405" width="7.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="457.42" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.65%)</title><rect x="201.6" y="485" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="204.56" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.65%)</title><rect x="308.8" y="501" width="7.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="311.83" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="117" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="261" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="733.26" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="405" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.69" y="415.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (10,101,010 samples, 0.65%)</title><rect x="975.5" y="469" width="7.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="978.45" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.95%)</title><rect x="852.9" y="229" width="22.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="855.86" y="239.5" >[..</text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.95%)</title><rect x="852.9" y="261" width="22.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="855.86" y="271.5" >o..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.65%)</title><rect x="1167.0" y="437" width="7.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1170.01" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="768.6" y="261" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.57" y="271.5" ></text>
</g>
<g >
<title>sim::Host::process (10,101,010 samples, 0.65%)</title><rect x="278.2" y="517" width="7.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="281.18" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="485" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="745.6" y="53" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.58" y="63.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (212,121,210 samples, 13.64%)</title><rect x="33.0" y="549" width="160.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="35.99" y="559.5" >sim::LinksQueueSizeS..</text>
</g>
<g >
<title>sim::EventComparator::operator (20,202,020 samples, 1.30%)</title><rect x="262.9" y="517" width="15.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="265.86" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 2.60%)</title><rect x="929.5" y="293" width="30.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="932.48" y="303.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="952.5" y="149" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="955.47" y="159.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 4.55%)</title><rect x="500.4" y="309" width="53.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="503.39" y="319.5" >int Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="69" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="79.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="960.1" y="197" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.13" y="207.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 4.55%)</title><rect x="669.0" y="325" width="53.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="671.96" y="335.5" >YAML:..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 5.84%)</title><rect x="1113.4" y="517" width="68.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1116.38" y="527.5" >std::_F..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.60%)</title><rect x="791.6" y="261" width="30.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="794.56" y="271.5" >in..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (20,202,020 samples, 1.30%)</title><rect x="1029.1" y="437" width="15.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1032.09" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (40,404,040 samples, 2.60%)</title><rect x="845.2" y="277" width="30.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="848.19" y="287.5" >YA..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="822.2" y="229" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="825.21" y="239.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (50,505,050 samples, 3.25%)</title><rect x="1144.0" y="469" width="38.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1147.03" y="479.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="630.6" y="245" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="633.65" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.95%)</title><rect x="883.5" y="245" width="23.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="886.51" y="255.5" >i..</text>
</g>
<g >
<title>main (1,525,252,510 samples, 98.05%)</title><rect x="33.0" y="581" width="1157.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="35.99" y="591.5" >main</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="707.3" y="261" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="710.27" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="485.1" y="309" width="7.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="488.06" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="768.6" y="245" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.57" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="944.8" y="181" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="947.81" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="485" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 1.30%)</title><rect x="17.7" y="533" width="15.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="20.66" y="543.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.65%)</title><rect x="301.2" y="453" width="7.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="304.17" y="463.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.65%)</title><rect x="255.2" y="533" width="7.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="258.19" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (161,616,160 samples, 10.39%)</title><rect x="983.1" y="533" width="122.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="986.12" y="543.5" >std::_Sp_counte..</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.65%)</title><rect x="316.5" y="501" width="7.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="319.49" y="511.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.65%)</title><rect x="753.2" y="293" width="7.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="756.25" y="303.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.30%)</title><rect x="584.7" y="341" width="15.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="587.68" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="213" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 1.30%)</title><rect x="906.5" y="277" width="15.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="909.49" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="53" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="63.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.30%)</title><rect x="462.1" y="357" width="15.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="465.08" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.65%)</title><rect x="822.2" y="277" width="7.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="825.21" y="287.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.30%)</title><rect x="829.9" y="277" width="15.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="832.87" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="213" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 1.30%)</title><rect x="40.6" y="517" width="15.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="43.65" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="48.3" y="501" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="51.31" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="730.3" y="277" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="733.26" y="287.5" ></text>
</g>
<g >
<title>nons (1,555,555,540 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >nons</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="25.3" y="453" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.32" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="960.1" y="165" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.13" y="175.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.65%)</title><rect x="1174.7" y="437" width="7.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1177.68" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="653.6" y="325" width="15.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="656.64" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="533" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (737,373,730 samples, 47.40%)</title><rect x="416.1" y="453" width="559.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="419.10" y="463.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.30%)</title><rect x="737.9" y="309" width="15.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="740.92" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (20,202,020 samples, 1.30%)</title><rect x="193.9" y="549" width="15.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="196.90" y="559.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (40,404,040 samples, 2.60%)</title><rect x="875.8" y="277" width="30.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="878.84" y="287.5" >YA..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="730.3" y="293" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="733.26" y="303.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.30%)</title><rect x="737.9" y="277" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="740.92" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="960.1" y="229" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.13" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.60%)</title><rect x="791.6" y="245" width="30.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="794.56" y="255.5" >in..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.30%)</title><rect x="584.7" y="309" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="587.68" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="421" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="431.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.65%)</title><rect x="646.0" y="373" width="7.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="648.97" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="347.1" y="501" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.14" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.65%)</title><rect x="921.8" y="309" width="7.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="924.82" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="768.6" y="197" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.57" y="207.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="247.5" y="533" width="7.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="250.53" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="722.6" y="293" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="725.60" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="737.9" y="149" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="740.92" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="437" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="447.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.95%)</title><rect x="285.8" y="501" width="23.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="288.84" y="511.5" >s..</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.65%)</title><rect x="354.8" y="469" width="7.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="357.81" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="261" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="271.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 1.30%)</title><rect x="56.0" y="453" width="15.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="58.97" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (90,909,090 samples, 5.84%)</title><rect x="669.0" y="341" width="68.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="671.96" y="351.5" >YAML::S..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1182.3" y="517" width="7.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.34" y="527.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.95%)</title><rect x="615.3" y="325" width="23.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="618.32" y="335.5" >o..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 7.79%)</title><rect x="101.9" y="501" width="92.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="104.95" y="511.5" >std::ostre..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (161,616,160 samples, 10.39%)</title><rect x="983.1" y="485" width="122.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="986.12" y="495.5" >std::_Rb_tree&lt;s..</text>
</g>
<g >
<title>sim::YamlParser::process_connection (101,010,100 samples, 6.49%)</title><rect x="1105.7" y="533" width="76.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1108.71" y="543.5" >sim::Yam..</text>
</g>
<g >
<title>sim::Process::operator (121,212,120 samples, 7.79%)</title><rect x="262.9" y="533" width="91.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="265.86" y="543.5" >sim::Proce..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="354.8" y="437" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="357.81" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="197" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="207.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (40,404,040 samples, 2.60%)</title><rect x="377.8" y="533" width="30.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="380.79" y="543.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="952.5" y="181" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="955.47" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="149" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="159.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="308.8" y="469" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="311.83" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="25.3" y="517" width="7.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="28.32" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="638.3" y="341" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="641.31" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1105.7" y="453" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1108.71" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="722.6" y="277" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="725.60" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="48.3" y="485" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.31" y="495.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [6]&gt; (10,101,010 samples, 0.65%)</title><rect x="1121.0" y="469" width="7.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1124.04" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="245" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="423.8" y="341" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="426.77" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (20,202,020 samples, 1.30%)</title><rect x="193.9" y="517" width="15.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="196.90" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="1174.7" y="421" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.68" y="431.5" ></text>
</g>
<g >
<title>YAML::Load (737,373,730 samples, 47.40%)</title><rect x="416.1" y="533" width="559.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="419.10" y="543.5" >YAML::Load</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="373" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 1.30%)</title><rect x="829.9" y="309" width="15.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="832.87" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="56.0" y="357" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.97" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="868.2" y="149" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="871.18" y="159.5" ></text>
</g>
<g >
<title>__libc_start_main (1,545,454,530 samples, 99.35%)</title><rect x="17.7" y="613" width="1172.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="20.66" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="967.8" y="181" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="970.79" y="191.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.30%)</title><rect x="829.9" y="293" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="832.87" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.65%)</title><rect x="331.8" y="501" width="7.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="334.82" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.65%)</title><rect x="822.2" y="261" width="7.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="825.21" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (737,373,730 samples, 47.40%)</title><rect x="416.1" y="421" width="559.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="419.10" y="431.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.95%)</title><rect x="852.9" y="181" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="855.86" y="191.5" >[..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 1.30%)</title><rect x="56.0" y="485" width="15.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="58.97" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (111,111,110 samples, 7.14%)</title><rect x="653.6" y="373" width="84.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="656.64" y="383.5" >YAML::Sca..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.65%)</title><rect x="25.3" y="501" width="7.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="28.32" y="511.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.65%)</title><rect x="577.0" y="357" width="7.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="580.01" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="906.5" y="245" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="909.49" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 7.14%)</title><rect x="101.9" y="485" width="84.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="104.95" y="495.5" >[libstdc+..</text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 7.14%)</title><rect x="101.9" y="421" width="84.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="104.95" y="431.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.65%)</title><rect x="921.8" y="293" width="7.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="924.82" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="783.9" y="229" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="786.90" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="229" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="707.3" y="229" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="710.27" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="806.9" y="213" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="809.88" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="485" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="1174.7" y="405" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.68" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="94.3" y="501" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="97.29" y="511.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 3.25%)</title><rect x="370.1" y="549" width="38.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="373.13" y="559.5" >sim..</text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="405" width="61.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1047.42" y="415.5" >[libc...</text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.65%)</title><rect x="569.4" y="341" width="7.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="572.35" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 1.30%)</title><rect x="960.1" y="261" width="15.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="963.13" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.65%)</title><rect x="462.1" y="341" width="7.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="465.08" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (101,010,100 samples, 6.49%)</title><rect x="477.4" y="357" width="76.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="480.40" y="367.5" >YAML::Sc..</text>
</g>
<g >
<title>_start (1,545,454,530 samples, 99.35%)</title><rect x="17.7" y="629" width="1172.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="20.66" y="639.5" >_start</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="960.1" y="213" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.13" y="223.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.65%)</title><rect x="967.8" y="229" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="970.79" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="101" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="111.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="952.5" y="213" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="955.47" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="1151.7" y="325" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.69" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (10,101,010 samples, 0.65%)</title><rect x="370.1" y="533" width="7.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="373.13" y="543.5" ></text>
</g>
<g >
<title>void std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::_M_push_back_aux&lt;YAML::Token const&amp;&gt; (10,101,010 samples, 0.65%)</title><rect x="952.5" y="245" width="7.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="955.47" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="453" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="469.7" y="341" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="472.74" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="960.1" y="181" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.13" y="191.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (60,606,060 samples, 3.90%)</title><rect x="600.0" y="373" width="46.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="603.00" y="383.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="730.3" y="197" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="733.26" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (161,616,160 samples, 10.39%)</title><rect x="983.1" y="501" width="122.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="986.12" y="511.5" >std::_Sp_counte..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (80,808,080 samples, 5.19%)</title><rect x="492.7" y="325" width="61.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="495.73" y="335.5" >int YA..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="538.7" y="261" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="541.70" y="271.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 7.14%)</title><rect x="101.9" y="469" width="84.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="104.95" y="479.5" >vsnprintf</text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (737,373,730 samples, 47.40%)</title><rect x="416.1" y="517" width="559.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="419.10" y="527.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.65%)</title><rect x="454.4" y="389" width="7.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="457.42" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="707.3" y="245" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="710.27" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="1021.4" y="453" width="7.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1024.43" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="806.9" y="197" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="809.88" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.30%)</title><rect x="829.9" y="197" width="15.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="832.87" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (161,616,160 samples, 10.39%)</title><rect x="462.1" y="373" width="122.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="465.08" y="383.5" >YAML::Scanner::..</text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.65%)</title><rect x="408.4" y="565" width="7.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="411.44" y="575.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.65%)</title><rect x="937.1" y="245" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="940.14" y="255.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_tcp_flow (50,505,050 samples, 3.25%)</title><rect x="1144.0" y="453" width="38.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1147.03" y="463.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="71.3" y="341" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="74.30" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.19%)</title><rect x="1044.4" y="389" width="61.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1047.42" y="399.5" >[libc...</text>
</g>
<g >
<title>sim::SendData::operator (20,202,020 samples, 1.30%)</title><rect x="354.8" y="533" width="15.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="357.81" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="783.9" y="261" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="786.90" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="1105.7" y="485" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1108.71" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="952.5" y="197" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="955.47" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 1.30%)</title><rect x="960.1" y="277" width="15.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="963.13" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.65%)</title><rect x="362.5" y="501" width="7.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="365.47" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="929.5" y="245" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="932.48" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.65%)</title><rect x="370.1" y="517" width="7.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="373.13" y="527.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="646.0" y="325" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="648.97" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="485.1" y="325" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="488.06" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,545,454,530 samples, 99.35%)</title><rect x="17.7" y="597" width="1172.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.66" y="607.5" >[libc.so.6]</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="546.4" y="245" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="549.36" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="592.3" y="277" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.34" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.65%)</title><rect x="377.8" y="501" width="7.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="380.79" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 2.60%)</title><rect x="753.2" y="341" width="30.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="756.25" y="351.5" >YA..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="423.8" y="325" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="426.77" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="944.8" y="197" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="947.81" y="207.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.65%)</title><rect x="201.6" y="469" width="7.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="204.56" y="479.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::get_flows (10,101,010 samples, 0.65%)</title><rect x="408.4" y="549" width="7.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="411.44" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.30%)</title><rect x="653.6" y="293" width="15.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="656.64" y="303.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.65%)</title><rect x="40.6" y="501" width="7.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="43.65" y="511.5" ></text>
</g>
</g>
</svg>
