<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (373,737,370 samples, 2.13%)</title><rect x="763.9" y="309" width="25.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="766.87" y="319.5" >v..</text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="389" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.32" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (70,707,070 samples, 0.40%)</title><rect x="346.6" y="357" width="4.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="349.56" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="302.5" y="277" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="305.46" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="293" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.64" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="245" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="255.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="1091.6" y="309" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1094.61" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="143.7" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="146.67" y="303.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.35%)</title><rect x="293.0" y="277" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="295.96" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.86%)</title><rect x="43.2" y="357" width="10.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="46.25" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="846.7" y="309" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="849.65" y="319.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1042.1" y="341" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1045.08" y="351.5" ></text>
</g>
<g >
<title>Logger::info (1,959,595,940 samples, 11.16%)</title><rect x="657.3" y="325" width="131.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="660.34" y="335.5" >Logger::info</text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="141.6" y="341" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="144.64" y="351.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 1.38%)</title><rect x="622.7" y="341" width="16.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="625.73" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="31.0" y="69" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.04" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="16.8" y="309" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.79" y="319.5" ></text>
</g>
<g >
<title>sim::is_valid_link (60,606,060 samples, 0.35%)</title><rect x="1127.6" y="357" width="4.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1130.57" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="293.0" y="261" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.96" y="271.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.17%)</title><rect x="16.8" y="325" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.79" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="149" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.57" y="159.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.06%)</title><rect x="176.2" y="341" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="179.24" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="297.7" y="309" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="300.71" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="1131.6" y="357" width="1.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1134.64" y="367.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (40,404,040 samples, 0.23%)</title><rect x="283.5" y="357" width="2.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="286.46" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="38.5" y="261" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.50" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (60,606,060 samples, 0.35%)</title><rect x="1133.0" y="357" width="4.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1136.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="79.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.17%)</title><rect x="1186.6" y="213" width="2.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.61" y="223.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (141,414,140 samples, 0.81%)</title><rect x="312.6" y="325" width="9.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="315.63" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="174.9" y="325" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="177.89" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.29%)</title><rect x="849.4" y="293" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="852.37" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.23%)</title><rect x="1185.9" y="229" width="2.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.93" y="239.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="1169.6" y="325" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.64" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.06%)</title><rect x="24.9" y="357" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="27.93" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (80,808,080 samples, 0.46%)</title><rect x="69.7" y="389" width="5.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="72.71" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="245" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.21" y="255.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (585,858,580 samples, 3.34%)</title><rect x="1137.1" y="373" width="39.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1140.07" y="383.5" >sim..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1134.4" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1137.36" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="1096.4" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1099.36" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.40%)</title><rect x="29.7" y="197" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.68" y="207.5" ></text>
</g>
<g >
<title>sim::SendData::operator (585,858,580 samples, 3.34%)</title><rect x="1081.4" y="373" width="39.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1084.43" y="383.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.92%)</title><rect x="813.4" y="309" width="10.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="816.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="191.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="1135.7" y="309" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1138.72" y="319.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1171.0" y="309" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.00" y="319.5" ></text>
</g>
<g >
<title>strlen@plt (50,505,050 samples, 0.29%)</title><rect x="980.3" y="341" width="3.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="983.33" y="351.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.06%)</title><rect x="53.4" y="325" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="56.43" y="335.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (212,121,210 samples, 1.21%)</title><rect x="10.7" y="389" width="14.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.68" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.17%)</title><rect x="1171.0" y="325" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.00" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="849.4" y="229" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="852.37" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="143.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="322.8" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="325.81" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.23%)</title><rect x="1091.6" y="325" width="2.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1094.61" y="335.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (10,101,010 samples, 0.06%)</title><rect x="1107.9" y="229" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1110.90" y="239.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="52.7" y="325" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="55.75" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.12%)</title><rect x="297.0" y="325" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="300.03" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.06%)</title><rect x="53.4" y="341" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="56.43" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,404,040,310 samples, 53.54%)</title><rect x="352.0" y="357" width="631.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="354.99" y="367.5" >sim::Switch::process</text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (101,010,100 samples, 0.58%)</title><rect x="324.2" y="357" width="6.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="327.17" y="367.5" ></text>
</g>
<g >
<title>sim::Event::get_time (141,414,140 samples, 0.81%)</title><rect x="60.2" y="389" width="9.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="63.21" y="399.5" ></text>
</g>
<g >
<title>cfree (282,828,280 samples, 1.61%)</title><rect x="805.3" y="325" width="19.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="808.26" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="293.0" y="245" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.96" y="255.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="197" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.93" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.21%)</title><rect x="126.0" y="357" width="14.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="129.03" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="149" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.93" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="37" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="255.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.06%)</title><rect x="175.6" y="341" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="178.57" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.12%)</title><rect x="301.8" y="293" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="304.78" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.52%)</title><rect x="153.9" y="325" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="156.85" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1089.6" y="325" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1092.57" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="318.7" y="213" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="321.74" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="229" width="1.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.21" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1149.3" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.29" y="271.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.06%)</title><rect x="163.4" y="309" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="166.35" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.12%)</title><rect x="231.2" y="357" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="234.21" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="191.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="389" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.64" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (212,121,210 samples, 1.21%)</title><rect x="10.7" y="373" width="14.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.68" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (80,808,080 samples, 0.46%)</title><rect x="341.1" y="357" width="5.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="344.13" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.40%)</title><rect x="29.7" y="245" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.68" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (151,515,150 samples, 0.86%)</title><rect x="1162.9" y="357" width="10.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1165.86" y="367.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.12%)</title><rect x="1135.7" y="325" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1138.72" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.12%)</title><rect x="1177.8" y="373" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1180.79" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="309.9" y="277" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="312.92" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,060,606,030 samples, 17.42%)</title><rect x="639.0" y="341" width="205.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="642.02" y="351.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="41.2" y="229" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.21" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="181" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="191.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="1082.8" y="325" width="1.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1085.79" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="149" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="159.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.12%)</title><rect x="852.8" y="325" width="1.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="855.76" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="149" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="159.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="1099.1" y="309" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1102.07" y="319.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_outlinks (10,101,010 samples, 0.06%)</title><rect x="1181.9" y="373" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1184.86" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="164.7" y="261" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.71" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="261" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.54" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (10,101,010 samples, 0.06%)</title><rect x="351.3" y="357" width="0.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="354.31" y="367.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.06%)</title><rect x="41.9" y="325" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="44.89" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.46%)</title><rect x="19.5" y="309" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.50" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.12%)</title><rect x="10.7" y="357" width="1.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.68" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="309.2" y="277" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="312.24" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.21%)</title><rect x="10.7" y="421" width="14.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.68" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="308.6" y="293" width="2.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="311.56" y="303.5" ></text>
</g>
<g >
<title>sim::Host::~Host (101,010,100 samples, 0.58%)</title><rect x="12.0" y="341" width="6.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.04" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.40%)</title><rect x="37.1" y="309" width="4.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="40.14" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="312.0" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.96" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="293.0" y="229" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.96" y="239.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="855.5" y="293" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="858.47" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.35%)</title><rect x="293.0" y="293" width="4.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="295.96" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="233.2" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="236.24" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="849.4" y="245" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="852.37" y="255.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.23%)</title><rect x="240.7" y="357" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="243.71" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (161,616,160 samples, 0.92%)</title><rect x="1098.4" y="325" width="10.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1101.40" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.3" y="117" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.25" y="127.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="277" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.54" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="11.4" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.36" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1157.4" y="357" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1160.43" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="44.6" y="277" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.61" y="287.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.58%)</title><rect x="233.9" y="357" width="6.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="236.92" y="367.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.06%)</title><rect x="1108.6" y="293" width="0.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1111.57" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="229" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.23%)</title><rect x="314.0" y="293" width="2.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="316.99" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1150.6" y="309" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.64" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.75%)</title><rect x="1099.8" y="293" width="8.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1102.75" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="849.4" y="261" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="852.37" y="271.5" ></text>
</g>
<g >
<title>fopen (70,707,070 samples, 0.40%)</title><rect x="29.7" y="325" width="4.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="32.68" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (40,404,040 samples, 0.23%)</title><rect x="1173.0" y="357" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.04" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.12%)</title><rect x="156.6" y="293" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="159.57" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="303.8" y="261" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="306.81" y="271.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="357" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.54" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 0.23%)</title><rect x="174.9" y="373" width="2.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="177.89" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (60,606,060 samples, 0.35%)</title><rect x="1077.4" y="373" width="4.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1080.36" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.95%)</title><rect x="1124.2" y="389" width="58.3" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1127.18" y="399.5" >sim::S..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="213" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1185.54" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1135.7" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.72" y="303.5" ></text>
</g>
<g >
<title>malloc (202,020,200 samples, 1.15%)</title><rect x="625.4" y="325" width="13.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="628.45" y="335.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="1097.7" y="325" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1100.72" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (494,949,490 samples, 2.82%)</title><rect x="565.1" y="341" width="33.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="568.05" y="351.5" >[l..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="290.9" y="325" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="293.92" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="157.2" y="261" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="160.25" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="50.0" y="245" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.03" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="847.3" y="293" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="850.33" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="213" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1186.21" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="852.1" y="213" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="855.08" y="223.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.17%)</title><rect x="1186.6" y="165" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.61" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="287.5" ></text>
</g>
<g >
<title>write (50,505,050 samples, 0.29%)</title><rect x="26.3" y="293" width="3.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="29.29" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="181" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.21" y="191.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="301.8" y="277" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="304.78" y="287.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (565,656,560 samples, 3.22%)</title><rect x="1082.1" y="357" width="38.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1085.11" y="367.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="175.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (80,808,080 samples, 0.46%)</title><rect x="145.0" y="325" width="5.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="148.03" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="229" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1185.54" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="101" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="143.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (131,313,130 samples, 0.75%)</title><rect x="34.4" y="357" width="8.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="37.43" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="52.1" y="325" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="55.07" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1090.3" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1093.25" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="849.4" y="325" width="3.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="852.37" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (70,707,070 samples, 0.40%)</title><rect x="29.7" y="357" width="4.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="32.68" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="101" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="111.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (393,939,390 samples, 2.24%)</title><rect x="257.0" y="357" width="26.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="259.99" y="367.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="133" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.96" y="143.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.3" y="101" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.25" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="239.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="316.7" y="277" width="3.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="319.71" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="223.5" ></text>
</g>
<g >
<title>__libc_start_main (17,555,555,380 samples, 99.94%)</title><rect x="10.7" y="453" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.68" y="463.5" >__libc_start_main</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="213" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.57" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.12%)</title><rect x="1158.1" y="357" width="1.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1161.11" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="297.7" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="300.71" y="303.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (191,919,190 samples, 1.09%)</title><rect x="298.4" y="341" width="12.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="301.38" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="1097.0" y="309" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1100.04" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.17%)</title><rect x="1153.4" y="341" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.36" y="351.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.32" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.29%)</title><rect x="316.7" y="261" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="319.71" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1093.0" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1095.97" y="303.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="181" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.93" y="191.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.06%)</title><rect x="322.1" y="325" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="325.13" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="156.6" y="309" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="159.57" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.12%)</title><rect x="1176.4" y="373" width="1.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.43" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 0.69%)</title><rect x="35.1" y="341" width="8.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="38.11" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1177.1" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.11" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="303.1" y="293" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="306.13" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.12%)</title><rect x="143.7" y="325" width="1.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="146.67" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="373" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.64" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.58%)</title><rect x="314.0" y="309" width="6.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="316.99" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1187.3" y="149" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.29" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="846.7" y="325" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="849.65" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="1109.3" y="325" width="2.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1112.25" y="335.5" ></text>
</g>
<g >
<title>all (17,565,656,390 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (101,010,100 samples, 0.58%)</title><rect x="143.7" y="341" width="6.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="146.67" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1153.4" y="309" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.36" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.06%)</title><rect x="172.2" y="293" width="0.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="175.17" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.38%)</title><rect x="789.0" y="325" width="16.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="791.98" y="335.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.12%)</title><rect x="289.6" y="325" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="292.56" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="172.9" y="325" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="175.85" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="27.6" y="69" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.64" y="79.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (434,343,430 samples, 2.47%)</title><rect x="24.9" y="405" width="29.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="27.93" y="415.5" >si..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.17%)</title><rect x="314.7" y="261" width="2.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="317.67" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.06%)</title><rect x="1120.1" y="357" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1123.11" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="357" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.64" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="1116.0" y="325" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1119.04" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (343,434,340 samples, 1.96%)</title><rect x="150.5" y="341" width="23.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="153.46" y="351.5" >s..</text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1175.8" y="357" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1178.75" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1171.0" y="293" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.00" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.23%)</title><rect x="314.0" y="277" width="2.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="316.99" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="1117.4" y="341" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1120.40" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (30,303,030 samples, 0.17%)</title><rect x="157.9" y="309" width="2.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="160.92" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="157.2" y="277" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="160.25" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="294.3" y="213" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="297.31" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="11.4" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.36" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="133" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.40%)</title><rect x="29.7" y="213" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.68" y="223.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.12%)</title><rect x="10.7" y="325" width="1.3" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.68" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="852.8" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="855.76" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="133" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="143.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 1.09%)</title><rect x="12.0" y="357" width="12.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.04" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="165" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="175.5" ></text>
</g>
<g >
<title>open64 (70,707,070 samples, 0.40%)</title><rect x="29.7" y="277" width="4.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="32.68" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1084.1" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1087.15" y="351.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.12%)</title><rect x="1082.8" y="341" width="1.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1085.79" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="44.6" y="293" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.61" y="303.5" ></text>
</g>
<g >
<title>Logger::warn (2,454,545,430 samples, 13.97%)</title><rect x="400.2" y="341" width="164.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="403.17" y="351.5" >Logger::warn</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="320.8" y="309" width="1.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="323.78" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.21%)</title><rect x="10.7" y="405" width="14.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.68" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="290.2" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="293.24" y="303.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="1158.1" y="341" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1161.11" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="143.7" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="146.67" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="847.3" y="325" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="850.33" y="335.5" ></text>
</g>
<g >
<title>main (17,343,434,170 samples, 98.73%)</title><rect x="24.9" y="421" width="1165.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.93" y="431.5" >main</text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.06%)</title><rect x="1152.7" y="341" width="0.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1155.68" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="318.7" y="197" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="321.74" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="133" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.57" y="143.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.12%)</title><rect x="845.3" y="341" width="1.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="848.30" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (181,818,180 samples, 1.04%)</title><rect x="311.3" y="341" width="12.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="314.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="157.2" y="229" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="160.25" y="239.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1119.4" y="325" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1122.43" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="28.3" y="53" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.32" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.06%)</title><rect x="314.7" y="245" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="317.67" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.29%)</title><rect x="849.4" y="277" width="3.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="852.37" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1090.9" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1093.93" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (20,202,020 samples, 0.12%)</title><rect x="315.3" y="245" width="1.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="318.35" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="847.3" y="309" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="850.33" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="159.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.12%)</title><rect x="656.0" y="325" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="658.98" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,555,555,380 samples, 99.94%)</title><rect x="10.7" y="437" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.68" y="447.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.06%)</title><rect x="303.8" y="245" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="306.81" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.40%)</title><rect x="1147.3" y="325" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.25" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="341" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.64" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (141,414,140 samples, 0.81%)</title><rect x="163.4" y="325" width="9.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="166.35" y="335.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.29%)</title><rect x="1120.8" y="373" width="3.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1123.79" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="277" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="309" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.54" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.46%)</title><rect x="291.6" y="325" width="5.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="294.60" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.12%)</title><rect x="1109.3" y="309" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1112.25" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1175.1" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.07" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="322.1" y="309" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="325.13" y="319.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (70,707,070 samples, 0.40%)</title><rect x="29.7" y="341" width="4.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="32.68" y="351.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,393,939,260 samples, 76.25%)</title><rect x="177.6" y="373" width="899.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="180.60" y="383.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1149.3" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.29" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1145.2" y="357" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1148.22" y="367.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="325" width="0.7" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1192.32" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="213" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="223.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="310.6" y="325" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="313.60" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="127.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="151.1" y="309" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="154.14" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="30.4" y="117" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.36" y="127.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (515,151,510 samples, 2.93%)</title><rect x="140.3" y="373" width="34.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="143.28" y="383.5" >si..</text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="290.2" y="309" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="293.24" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.12%)</title><rect x="1179.1" y="373" width="1.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1182.14" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="289.6" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="292.56" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.06%)</title><rect x="1183.9" y="213" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.89" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="307.9" y="181" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="310.88" y="191.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.12%)</title><rect x="152.5" y="309" width="1.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="155.50" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="1087.5" y="341" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1090.54" y="351.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1153.4" y="325" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.36" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.17%)</title><rect x="160.0" y="325" width="2.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="162.96" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="157.2" y="245" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="160.25" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="223.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (111,111,110 samples, 0.63%)</title><rect x="846.7" y="341" width="7.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="849.65" y="351.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.17%)</title><rect x="398.1" y="341" width="2.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="401.13" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (171,717,170 samples, 0.98%)</title><rect x="299.1" y="325" width="11.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="302.06" y="335.5" ></text>
</g>
<g >
<title>cfree (252,525,250 samples, 1.44%)</title><rect x="598.3" y="341" width="17.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="601.30" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 0.35%)</title><rect x="1184.6" y="245" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.57" y="255.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (222,222,220 samples, 1.27%)</title><rect x="550.1" y="325" width="15.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="553.13" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="855.5" y="309" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="858.47" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1154.0" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.04" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.06%)</title><rect x="1116.7" y="341" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1119.72" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="341" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.54" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.23%)</title><rect x="1160.1" y="357" width="2.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1163.14" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.29%)</title><rect x="147.1" y="309" width="3.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="150.07" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="165" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.93" y="175.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="302.5" y="261" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="305.46" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.29%)</title><rect x="1152.0" y="357" width="3.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1155.00" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.40%)</title><rect x="292.3" y="309" width="4.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="295.28" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.3" y="85" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.25" y="95.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="197" width="0.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1186.21" y="207.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.63%)</title><rect x="44.6" y="309" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="47.61" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="176.9" y="341" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="179.92" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.17%)</title><rect x="1135.0" y="341" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1138.04" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="213" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.93" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="316.7" y="229" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="319.71" y="239.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.06%)</title><rect x="1126.2" y="373" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1129.22" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (80,808,080 samples, 0.46%)</title><rect x="1111.3" y="341" width="5.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1114.29" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.06%)</title><rect x="1159.5" y="357" width="0.6" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1162.47" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.63%)</title><rect x="1182.5" y="405" width="7.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.54" y="415.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.12%)</title><rect x="824.3" y="325" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="827.26" y="335.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.52%)</title><rect x="79.2" y="389" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="82.21" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="17.5" y="277" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.46" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="290.9" y="309" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="293.92" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="313.3" y="309" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="316.31" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="28.3" y="37" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.32" y="47.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="1084.8" y="341" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1087.82" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="1086.9" y="325" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1089.86" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="11.4" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.36" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="181" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="191.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.06%)</title><rect x="153.2" y="293" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="156.17" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="44.6" y="261" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.61" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="322.8" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="325.81" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1084.1" y="325" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1087.15" y="335.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (20,202,020 samples, 0.12%)</title><rect x="162.0" y="325" width="1.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="165.00" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,303,030 samples, 0.17%)</title><rect x="1155.4" y="357" width="2.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1158.39" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="309" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.64" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="32.4" y="53" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.39" y="63.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.46%)</title><rect x="1146.6" y="341" width="5.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1149.57" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="853.4" y="293" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="856.44" y="303.5" ></text>
</g>
<g >
<title>nons (17,565,656,390 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >nons</text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (141,414,140 samples, 0.81%)</title><rect x="1127.6" y="373" width="9.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1130.57" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (60,606,060 samples, 0.35%)</title><rect x="25.6" y="357" width="4.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="28.61" y="367.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="10.7" y="309" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.68" y="319.5" ></text>
</g>
<g >
<title>sim::Host::process (565,656,560 samples, 3.22%)</title><rect x="286.2" y="357" width="38.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="289.17" y="367.5" >sim..</text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.23%)</title><rect x="854.1" y="341" width="2.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="857.12" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="38.5" y="277" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.50" y="287.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.29%)</title><rect x="619.3" y="341" width="3.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="622.34" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.46%)</title><rect x="166.7" y="229" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="169.75" y="239.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="181" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.57" y="191.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1186.6" y="133" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.61" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="143.7" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="146.67" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="305.2" y="277" width="3.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="308.17" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="1101.1" y="245" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.11" y="255.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 0.17%)</title><rect x="1118.1" y="341" width="2.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1121.07" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="293" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.54" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="301.1" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.10" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="304.5" y="293" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="307.49" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="85" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.96" y="95.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.81%)</title><rect x="1099.8" y="309" width="9.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1102.75" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="318.7" y="181" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="321.74" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.29%)</title><rect x="1094.3" y="325" width="3.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1097.32" y="335.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.12%)</title><rect x="1085.5" y="341" width="1.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1088.50" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="849.4" y="309" width="3.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="852.37" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="39.9" y="245" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.86" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="18.8" y="341" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="21.82" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.17%)</title><rect x="1186.6" y="181" width="2.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.61" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="316.7" y="293" width="3.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="319.71" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1149.3" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.29" y="303.5" ></text>
</g>
<g >
<title>_start (17,555,555,380 samples, 99.94%)</title><rect x="10.7" y="469" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.68" y="479.5" >_start</text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="856.2" y="325" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="859.15" y="335.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (434,343,430 samples, 2.47%)</title><rect x="24.9" y="389" width="29.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="27.93" y="399.5" >si..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="288.9" y="325" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="291.88" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.23%)</title><rect x="27.0" y="101" width="2.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.96" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (434,343,430 samples, 2.47%)</title><rect x="24.9" y="373" width="29.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="27.93" y="383.5" >si..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.52%)</title><rect x="35.8" y="325" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="38.78" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.63%)</title><rect x="164.7" y="277" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="167.71" y="287.5" ></text>
</g>
<g >
<title>sim::Link::arrive (494,949,490 samples, 2.82%)</title><rect x="140.3" y="357" width="33.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="143.28" y="367.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="255.5" ></text>
</g>
<g >
<title>malloc (222,222,220 samples, 1.27%)</title><rect x="829.7" y="309" width="14.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="832.69" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.23%)</title><rect x="305.8" y="261" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="308.85" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,262,626,250 samples, 7.19%)</title><rect x="895.5" y="341" width="84.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="898.51" y="351.5" >std::_Rb_..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="23.6" y="277" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.57" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="32.4" y="37" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.39" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="36.5" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.46" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.40%)</title><rect x="29.7" y="261" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.68" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1126.9" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1129.89" y="383.5" ></text>
</g>
<g >
<title>sim::Event::Event (282,828,280 samples, 1.61%)</title><rect x="1058.4" y="341" width="19.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1061.36" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="27.6" y="85" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.64" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.69%)</title><rect x="1100.4" y="261" width="8.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1103.43" y="271.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,464,646,310 samples, 88.04%)</title><rect x="85.3" y="389" width="1038.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="88.32" y="399.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="191.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,606,060 samples, 0.35%)</title><rect x="75.1" y="389" width="4.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="78.14" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (343,434,340 samples, 1.96%)</title><rect x="1088.2" y="341" width="23.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1091.22" y="351.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.17%)</title><rect x="1171.0" y="341" width="2.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1174.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="159.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="43.2" y="341" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="46.25" y="351.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="1086.9" y="341" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1089.86" y="351.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="389" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.54" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.06%)</title><rect x="323.5" y="341" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="326.49" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.17%)</title><rect x="1186.6" y="197" width="2.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.61" y="207.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="848.7" y="325" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="851.69" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="320.1" y="293" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="323.10" y="303.5" ></text>
</g>
<g >
<title>Logger::warn (10,101,010 samples, 0.06%)</title><rect x="232.6" y="357" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="235.56" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 1.21%)</title><rect x="1044.1" y="341" width="14.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1047.11" y="351.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.06%)</title><rect x="844.6" y="341" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="847.62" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="306.5" y="197" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="309.53" y="207.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.12%)</title><rect x="1169.6" y="341" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.64" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="325" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.64" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="164.0" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.03" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.63%)</title><rect x="44.6" y="325" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="47.61" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="17.5" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.46" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.46%)</title><rect x="166.7" y="245" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="169.75" y="255.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 0.23%)</title><rect x="174.9" y="357" width="2.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="177.89" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="175.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="322.8" y="309" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="325.81" y="319.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="855.5" y="325" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="858.47" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1175.1" y="325" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.07" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (60,606,060 samples, 0.35%)</title><rect x="25.6" y="341" width="4.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="28.61" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="117" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="127.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="846.7" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="849.65" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="172.9" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="175.85" y="319.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (10,101,010 samples, 0.06%)</title><rect x="296.3" y="229" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="299.35" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="144.4" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.35" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.12%)</title><rect x="10.7" y="341" width="1.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.68" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="245" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.64" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1145.2" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.22" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (151,515,150 samples, 0.86%)</title><rect x="331.0" y="357" width="10.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="333.95" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.81%)</title><rect x="288.9" y="341" width="9.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="291.88" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (60,606,060 samples, 0.35%)</title><rect x="25.6" y="309" width="4.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="28.61" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="287.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="290.53" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.29%)</title><rect x="316.7" y="245" width="3.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="319.71" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="85" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="171.5" y="213" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="174.50" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.06%)</title><rect x="322.8" y="325" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="325.81" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="305.8" y="229" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="308.85" y="239.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="42.6" y="325" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="45.57" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="239.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (20,202,020 samples, 0.12%)</title><rect x="845.3" y="325" width="1.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="848.30" y="335.5" ></text>
</g>
<g >
<title>utils::create_all_directories (10,101,010 samples, 0.06%)</title><rect x="53.4" y="357" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="56.43" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="197" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (30,303,030 samples, 0.17%)</title><rect x="1092.3" y="309" width="2.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1095.29" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="101" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.96" y="111.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="288.2" y="325" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="291.21" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1098.4" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1101.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.06%)</title><rect x="176.2" y="325" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="179.24" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="325" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.54" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="1096.4" y="293" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1099.36" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1169.6" y="309" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.64" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="261" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="271.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.35%)</title><rect x="615.3" y="341" width="4.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="618.27" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.81%)</title><rect x="43.9" y="341" width="9.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="46.93" y="351.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.46%)</title><rect x="19.5" y="325" width="5.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.50" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="844.6" y="325" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="847.62" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="288.2" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="291.21" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="853.4" y="309" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="856.44" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="151.1" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="154.14" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (30,303,030 samples, 0.17%)</title><rect x="893.5" y="341" width="2.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="896.47" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="69" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.96" y="79.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.40%)</title><rect x="55.5" y="389" width="4.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="58.46" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (80,808,080 samples, 0.46%)</title><rect x="19.5" y="341" width="5.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="22.50" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.17%)</title><rect x="151.8" y="325" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="154.82" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="26.3" y="165" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.29" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="31.0" y="85" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.04" y="95.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.92%)</title><rect x="299.7" y="309" width="10.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="302.74" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="174.9" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="177.89" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="63.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="300.4" y="293" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="303.42" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.40%)</title><rect x="29.7" y="229" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.68" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="143.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1186.6" y="149" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.61" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1135.7" y="277" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.72" y="287.5" ></text>
</g>
<g >
<title>operator new (282,828,280 samples, 1.61%)</title><rect x="825.6" y="325" width="19.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="828.62" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.46%)</title><rect x="19.5" y="293" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.50" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="245" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1185.54" y="255.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.06%)</title><rect x="1093.6" y="293" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1096.65" y="303.5" ></text>
</g>
<g >
<title>sim::Event::Event (202,020,200 samples, 1.15%)</title><rect x="243.4" y="357" width="13.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="246.42" y="367.5" ></text>
</g>
<g >
<title>operator new (90,909,090 samples, 0.52%)</title><rect x="1145.9" y="357" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1148.89" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="197" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.57" y="207.5" ></text>
</g>
<g >
<title>_IO_file_fopen (70,707,070 samples, 0.40%)</title><rect x="29.7" y="309" width="4.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="32.68" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.97" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="325.81" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1157.4" y="341" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1160.43" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.12%)</title><rect x="1180.5" y="373" width="1.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1183.50" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="298.4" y="325" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="301.38" y="335.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.32" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1149.3" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.29" y="287.5" ></text>
</g>
<g >
<title>_IO_file_open (70,707,070 samples, 0.40%)</title><rect x="29.7" y="293" width="4.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="32.68" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.0" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.97" y="239.5" ></text>
</g>
<g >
<title>cfree (363,636,360 samples, 2.07%)</title><rect x="115.9" y="373" width="24.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="118.85" y="383.5" >c..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="277" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.64" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="303.1" y="277" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="306.13" y="287.5" ></text>
</g>
<g >
<title>vsnprintf (131,313,130 samples, 0.75%)</title><rect x="1099.8" y="277" width="8.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1102.75" y="287.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="397.5" y="341" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="400.45" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="151.8" y="309" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="154.82" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.12%)</title><rect x="1130.3" y="341" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1133.29" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="306.5" y="213" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="309.53" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.63%)</title><rect x="164.7" y="293" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="167.71" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="301.1" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="304.10" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="165" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.57" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.52%)</title><rect x="1101.8" y="229" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.79" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (545,454,540 samples, 3.11%)</title><rect x="856.8" y="341" width="36.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="859.83" y="351.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="127.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1134.4" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.36" y="351.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.12%)</title><rect x="142.3" y="341" width="1.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="145.32" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.23%)</title><rect x="305.8" y="245" width="2.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="308.85" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1183.9" y="197" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.89" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="322.8" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.81" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1177.1" y="357" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1180.11" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1125.5" y="373" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1128.54" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (16,797,979,630 samples, 95.63%)</title><rect x="54.1" y="405" width="1128.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="57.11" y="415.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="848.0" y="325" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="851.01" y="335.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="373" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.54" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1134.4" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.36" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.12%)</title><rect x="1184.6" y="229" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.57" y="239.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (20,202,020 samples, 0.12%)</title><rect x="173.5" y="357" width="1.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="176.53" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1170.3" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="287.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="261" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.64" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="307.9" y="165" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="310.88" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="288.9" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="291.88" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.40%)</title><rect x="37.1" y="293" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.14" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="117" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.96" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.63%)</title><rect x="607.8" y="325" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="610.80" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="255.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 1.09%)</title><rect x="1045.5" y="325" width="12.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1048.47" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1110.6" y="309" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1113.61" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.75%)</title><rect x="164.0" y="309" width="8.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="167.03" y="319.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="321.5" y="293" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="324.45" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.4" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.43" y="239.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="305.2" y="293" width="3.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="308.17" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (60,606,060 samples, 0.35%)</title><rect x="25.6" y="325" width="4.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="28.61" y="335.5" ></text>
</g>
<g >
<title>Size&lt;Byte&gt; parse_with_default&lt;Size&lt;Byte&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="341" width="0.7" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1192.32" y="351.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,393,939,380 samples, 7.94%)</title><rect x="983.7" y="357" width="93.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="986.72" y="367.5" >void sim::S..</text>
</g>
</g>
</svg>
