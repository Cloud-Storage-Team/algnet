<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="32.3" y="485" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="35.32" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1093.8" y="437" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1096.76" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.12%)</title><rect x="1184.4" y="325" width="1.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1187.42" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.6" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.60" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="421" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (70,707,070 samples, 0.41%)</title><rect x="1112.6" y="469" width="4.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1115.59" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.59%)</title><rect x="45.6" y="421" width="6.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="48.57" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="174.6" y="341" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="177.59" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.18%)</title><rect x="315.5" y="405" width="2.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="318.46" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.47%)</title><rect x="844.1" y="453" width="5.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="847.09" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="170.4" y="389" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="173.40" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="844.8" y="357" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="847.79" y="367.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="1082.6" y="469" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1085.60" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="239.5" ></text>
</g>
<g >
<title>operator new (333,333,330 samples, 1.95%)</title><rect x="814.1" y="453" width="23.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="817.10" y="463.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (121,212,120 samples, 0.71%)</title><rect x="312.0" y="469" width="8.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="314.97" y="479.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="843.4" y="453" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="846.39" y="463.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.30%)</title><rect x="1171.2" y="453" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.17" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.85" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="31.6" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.62" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.77%)</title><rect x="1095.2" y="421" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1098.15" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="1088.9" y="453" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1091.88" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="293" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="155.8" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="158.76" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="399.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.06%)</title><rect x="53.9" y="453" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="56.94" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1134.2" y="405" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.21" y="415.5" ></text>
</g>
<g >
<title>sim::Event::get_time (90,909,090 samples, 0.53%)</title><rect x="64.4" y="517" width="6.3" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="67.40" y="527.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1130.7" y="453" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1133.72" y="463.5" ></text>
</g>
<g >
<title>malloc (313,131,310 samples, 1.83%)</title><rect x="815.5" y="437" width="21.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="818.50" y="447.5" >m..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1173.3" y="421" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.26" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="309" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 1.12%)</title><rect x="11.4" y="485" width="13.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.39" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.24%)</title><rect x="1136.3" y="469" width="2.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1139.30" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.30%)</title><rect x="28.8" y="245" width="3.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.83" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="328.7" y="469" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="331.71" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="277" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="287.5" ></text>
</g>
<g >
<title>cfree (444,444,440 samples, 2.60%)</title><rect x="124.4" y="501" width="30.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="127.37" y="511.5" >cf..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1130.7" y="469" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.72" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.41%)</title><rect x="302.9" y="421" width="4.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="305.91" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (383,838,380 samples, 2.25%)</title><rect x="270.8" y="485" width="26.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="273.83" y="495.5" >s..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (40,404,040 samples, 0.24%)</title><rect x="309.2" y="437" width="2.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="312.18" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="485" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.61" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (292,929,290 samples, 1.71%)</title><rect x="1086.1" y="469" width="20.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1089.09" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="79.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.12%)</title><rect x="176.7" y="437" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="179.68" y="447.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.24%)</title><rect x="1153.7" y="469" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.74" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="485" width="6.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.33" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.06%)</title><rect x="1183.7" y="309" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1186.72" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="335.5" ></text>
</g>
<g >
<title>malloc (171,717,170 samples, 1.00%)</title><rect x="623.0" y="453" width="11.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="626.01" y="463.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.35%)</title><rect x="28.1" y="405" width="4.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="31.13" y="415.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (30,303,030 samples, 0.18%)</title><rect x="1115.4" y="453" width="2.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1118.38" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.53%)</title><rect x="170.4" y="405" width="6.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="173.40" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.30%)</title><rect x="1153.7" y="485" width="3.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1156.74" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.85" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="1088.9" y="437" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1091.88" y="447.5" ></text>
</g>
<g >
<title>sim::Link::transmit (20,202,020 samples, 0.12%)</title><rect x="180.9" y="485" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="183.86" y="495.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="1085.4" y="453" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1088.39" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.06%)</title><rect x="325.9" y="453" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="328.92" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="1146.8" y="453" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.76" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1150.9" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.95" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="453" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.35" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.18%)</title><rect x="849.7" y="469" width="2.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="852.67" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.85" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="287.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.12%)</title><rect x="1110.5" y="453" width="1.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1113.50" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1173.3" y="405" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.26" y="415.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.18%)</title><rect x="238.0" y="485" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="241.05" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1173.3" y="389" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.26" y="399.5" ></text>
</g>
<g >
<title>vsnprintf (131,313,130 samples, 0.77%)</title><rect x="1095.2" y="405" width="9.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.15" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (14,949,494,800 samples, 87.47%)</title><rect x="89.5" y="517" width="1032.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="92.50" y="527.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="175.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="485" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.30" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.35%)</title><rect x="321.0" y="437" width="4.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="324.04" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="341" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (30,303,030 samples, 0.18%)</title><rect x="348.9" y="485" width="2.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="351.94" y="495.5" ></text>
</g>
<g >
<title>__libc_start_main (17,080,807,910 samples, 99.94%)</title><rect x="10.7" y="581" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.70" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.47%)</title><rect x="1146.8" y="469" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1149.76" y="479.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.47%)</title><rect x="252.7" y="485" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="255.70" y="495.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.35%)</title><rect x="28.1" y="485" width="4.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="31.13" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="321.7" y="405" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="324.74" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="309" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="389" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="245" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="23.9" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.95" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (80,808,080 samples, 0.47%)</title><rect x="35.8" y="469" width="5.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="38.80" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.64" y="351.5" ></text>
</g>
<g >
<title>sim::Event::Event (181,818,180 samples, 1.06%)</title><rect x="258.3" y="485" width="12.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="261.27" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1134.9" y="373" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.91" y="383.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.35%)</title><rect x="1132.1" y="453" width="4.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1135.12" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.35%)</title><rect x="36.5" y="437" width="4.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="39.50" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="303.6" y="373" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="306.61" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.18%)</title><rect x="321.0" y="421" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="324.04" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1087.5" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1090.48" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="26.7" y="213" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.74" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,040,404,030 samples, 6.09%)</title><rect x="906.2" y="469" width="71.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="909.16" y="479.5" >std::_Rb..</text>
</g>
<g >
<title>Logger::info (1,868,686,850 samples, 10.93%)</title><rect x="654.4" y="453" width="129.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="657.40" y="463.5" >Logger::info</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="324.5" y="389" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="327.53" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="293" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="303.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (60,606,060 samples, 0.35%)</title><rect x="1117.5" y="501" width="4.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1120.47" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="85" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="848.3" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="851.27" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.12" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1166.3" y="469" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1169.29" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="17.7" y="421" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.67" y="431.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="849.0" y="421" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="851.97" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (2,969,696,940 samples, 17.38%)</title><rect x="634.9" y="469" width="205.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="637.87" y="479.5" >sim::Link::get_packet</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.12%)</title><rect x="169.0" y="405" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="172.01" y="415.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (878,787,870 samples, 5.14%)</title><rect x="1121.7" y="517" width="60.6" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1124.65" y="527.5" >sim::S..</text>
</g>
<g >
<title>sim::Host::send_packet (515,151,510 samples, 3.01%)</title><rect x="1081.9" y="485" width="35.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1084.90" y="495.5" >sim..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.06%)</title><rect x="323.1" y="421" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="326.13" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (707,070,700 samples, 4.14%)</title><rect x="851.8" y="469" width="48.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="854.76" y="479.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="565" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="373" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (434,343,430 samples, 2.54%)</title><rect x="25.3" y="533" width="30.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="28.34" y="543.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="581" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="469" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.61" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="405" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.06%)</title><rect x="314.8" y="421" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="317.76" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.85" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (80,808,080 samples, 0.47%)</title><rect x="1161.4" y="485" width="5.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1164.41" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="302.2" y="453" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="305.21" y="463.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.12%)</title><rect x="169.0" y="389" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="172.01" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="302.9" y="453" width="4.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="305.91" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.35%)</title><rect x="307.8" y="453" width="4.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="310.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.30%)</title><rect x="37.2" y="405" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.20" y="415.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.41%)</title><rect x="19.8" y="453" width="4.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1148.9" y="405" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.85" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.06%)</title><rect x="314.8" y="405" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="317.76" y="415.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.06%)</title><rect x="11.4" y="469" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="14.39" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="405" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="335.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.12%)</title><rect x="1184.4" y="293" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.42" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.06%)</title><rect x="180.2" y="485" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="183.17" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="326.6" y="421" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="329.62" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="157.8" y="453" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="160.85" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.18%)</title><rect x="315.5" y="373" width="2.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="318.46" y="383.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="839.9" y="469" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="842.91" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="312.0" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.97" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.24%)</title><rect x="1178.1" y="501" width="2.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.14" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="315.5" y="341" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="318.46" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1088.2" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1091.18" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.0" y="293" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.03" y="303.5" ></text>
</g>
<g >
<title>Logger::info (50,505,050 samples, 0.30%)</title><rect x="393.6" y="469" width="3.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="396.57" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.83%)</title><rect x="1094.5" y="437" width="9.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1097.46" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1153.0" y="485" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1156.04" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.59%)</title><rect x="1097.2" y="357" width="7.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1100.25" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="40.0" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.99" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.41%)</title><rect x="302.9" y="405" width="4.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="305.91" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.24%)</title><rect x="1185.8" y="309" width="2.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1188.82" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (80,808,080 samples, 0.47%)</title><rect x="844.1" y="437" width="5.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="847.09" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="357" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="1084.0" y="453" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1087.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1134.9" y="357" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.91" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="33.7" y="469" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="36.71" y="479.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="850.4" y="453" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="853.37" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.64" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.89%)</title><rect x="1093.8" y="453" width="10.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1096.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 1.12%)</title><rect x="798.8" y="437" width="13.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="801.76" y="447.5" ></text>
</g>
<g >
<title>sim::Link::arrive (343,434,340 samples, 2.01%)</title><rect x="156.5" y="485" width="23.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="159.45" y="495.5" >s..</text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 0.47%)</title><rect x="76.3" y="517" width="5.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="79.25" y="527.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="301.5" y="469" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="304.51" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.35%)</title><rect x="36.5" y="453" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="39.50" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.59%)</title><rect x="1097.2" y="373" width="7.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1100.25" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="46.3" y="389" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="49.26" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.18%)</title><rect x="33.0" y="485" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="36.01" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="317.6" y="421" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="320.55" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="157.2" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="160.15" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="317.6" y="405" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="320.55" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="431.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.12%)</title><rect x="1184.4" y="341" width="1.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1187.42" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1160.7" y="485" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1163.71" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="302.9" y="437" width="4.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="305.91" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="842.0" y="453" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="845.00" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="325.9" y="421" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="328.92" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (373,737,370 samples, 2.19%)</title><rect x="155.1" y="501" width="25.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="158.06" y="511.5" >s..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="840.6" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="843.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1134.9" y="341" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.91" y="351.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.06%)</title><rect x="10.7" y="453" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.70" y="463.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::get_flag (10,101,010 samples, 0.06%)</title><rect x="320.3" y="453" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="323.34" y="463.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="24.6" y="453" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="27.65" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="17.7" y="437" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.67" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="389" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="303.6" y="357" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="306.61" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="162.7" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="165.73" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="245" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.21" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,909,090 samples, 0.53%)</title><rect x="1168.4" y="485" width="6.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1171.38" y="495.5" ></text>
</g>
<g >
<title>sim::Process::~Process (70,707,070 samples, 0.41%)</title><rect x="1077.0" y="501" width="4.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1080.02" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.06%)</title><rect x="842.7" y="437" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="845.70" y="447.5" ></text>
</g>
<g >
<title>cfree (232,323,230 samples, 1.36%)</title><rect x="595.8" y="469" width="16.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="598.82" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="261" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="255.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.12%)</title><rect x="236.7" y="485" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="239.65" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="50.4" y="373" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.45" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="155.1" y="485" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="158.06" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (20,202,020 samples, 0.12%)</title><rect x="1174.7" y="485" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.66" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="389" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.18%)</title><rect x="1137.0" y="453" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="30.9" y="149" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.92" y="159.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="24.6" y="469" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="27.65" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="162.7" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="165.73" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.77%)</title><rect x="1095.2" y="389" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.15" y="399.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="325.2" y="437" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="328.22" y="447.5" ></text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 0.18%)</title><rect x="1128.6" y="485" width="2.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1131.63" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="447.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.06%)</title><rect x="323.1" y="373" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="326.13" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (16,282,828,120 samples, 95.27%)</title><rect x="58.1" y="533" width="1124.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="61.12" y="543.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.12%)</title><rect x="1083.3" y="469" width="1.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1086.30" y="479.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.35%)</title><rect x="1132.1" y="469" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1135.12" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1134.9" y="325" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.91" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.18%)</title><rect x="315.5" y="389" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="318.46" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (40,404,040 samples, 0.24%)</title><rect x="25.3" y="469" width="2.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="28.34" y="479.5" ></text>
</g>
<g >
<title>sim::Process::~Process (111,111,110 samples, 0.65%)</title><rect x="81.8" y="517" width="7.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="84.83" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.12%)</title><rect x="1092.4" y="421" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1095.36" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="261" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.21" y="271.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (111,111,110 samples, 0.65%)</title><rect x="337.8" y="485" width="7.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="340.78" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="1184.4" y="277" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.42" y="287.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (20,202,020 samples, 0.12%)</title><rect x="838.5" y="453" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="841.51" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.24%)</title><rect x="167.6" y="437" width="2.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="170.61" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="437" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.61" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="179.5" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="182.47" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.06%)</title><rect x="323.1" y="405" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="326.13" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="325" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.13" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="305.7" y="341" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="308.70" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="10.7" y="469" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.70" y="479.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.35%)</title><rect x="611.9" y="469" width="4.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="614.86" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.64" y="415.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.12%)</title><rect x="1184.4" y="309" width="1.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1187.42" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.35%)</title><rect x="1089.6" y="453" width="4.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1092.57" y="463.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="501" width="6.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.33" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1177.4" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.45" y="479.5" ></text>
</g>
<g >
<title>__uselocale (20,202,020 samples, 0.12%)</title><rect x="52.5" y="453" width="1.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="55.54" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="63.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (181,818,180 samples, 1.06%)</title><rect x="41.4" y="485" width="12.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="44.38" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.18%)</title><rect x="1182.3" y="325" width="2.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.33" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1130.7" y="485" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1133.72" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="1172.6" y="437" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.57" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.77%)</title><rect x="840.6" y="469" width="9.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="843.60" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.12%)</title><rect x="163.4" y="453" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="166.43" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="841.3" y="453" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="844.30" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (424,242,420 samples, 2.48%)</title><rect x="25.3" y="501" width="29.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="28.34" y="511.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.0" y="277" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.03" y="287.5" ></text>
</g>
<g >
<title>main (16,868,686,700 samples, 98.70%)</title><rect x="25.3" y="549" width="1164.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="28.34" y="559.5" >main</text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.06%)</title><rect x="326.6" y="453" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="329.62" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.24%)</title><rect x="25.3" y="453" width="2.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="28.34" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="178.1" y="437" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="181.07" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="40.0" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.99" y="383.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.35%)</title><rect x="28.1" y="453" width="4.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="31.13" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1130.0" y="469" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1133.02" y="479.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.59%)</title><rect x="45.6" y="437" width="6.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="48.57" y="447.5" ></text>
</g>
<g >
<title>all (17,090,908,920 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.12%)</title><rect x="392.2" y="469" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="395.17" y="479.5" ></text>
</g>
<g >
<title>cfree (262,626,260 samples, 1.54%)</title><rect x="793.9" y="453" width="18.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="796.88" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="277" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.21" y="287.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="437" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1154.64" y="447.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,404,040,390 samples, 8.22%)</title><rect x="980.1" y="485" width="96.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="983.08" y="495.5" >void sim::S..</text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="19.8" y="421" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.76" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="302.2" y="437" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="305.21" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.53%)</title><rect x="170.4" y="421" width="6.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="173.40" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.18%)</title><rect x="1104.2" y="453" width="2.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1107.22" y="463.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (90,909,090 samples, 0.53%)</title><rect x="312.7" y="453" width="6.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="315.67" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.64" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="30.9" y="165" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.92" y="175.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.06%)</title><rect x="813.4" y="453" width="0.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="816.40" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.06%)</title><rect x="842.7" y="453" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="845.70" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1086.8" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1089.78" y="463.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1182.3" y="309" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.33" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="171.1" y="357" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="174.10" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,080,807,910 samples, 99.94%)</title><rect x="10.7" y="565" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.70" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="316.2" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="319.16" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (20,202,020 samples, 0.12%)</title><rect x="318.9" y="453" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="321.95" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="469" width="6.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.33" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.06%)</title><rect x="329.4" y="469" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="332.41" y="479.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.06%)</title><rect x="318.3" y="437" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="321.25" y="447.5" ></text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.65%)</title><rect x="12.1" y="469" width="7.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.09" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.06%)</title><rect x="180.9" y="469" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="183.86" y="479.5" ></text>
</g>
<g >
<title>operator delete (171,717,170 samples, 1.00%)</title><rect x="240.8" y="485" width="11.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="243.84" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1148.9" y="421" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.85" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="351.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.47%)</title><rect x="616.0" y="469" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="619.04" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="844.1" y="389" width="4.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="847.09" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="1111.9" y="469" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1114.89" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="325.9" y="437" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="328.92" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.6" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.60" y="255.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1105.6" y="437" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1108.61" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1165.6" y="469" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1168.59" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.06%)</title><rect x="24.6" y="517" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="27.65" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.12%)</title><rect x="1167.0" y="485" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.99" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1138.4" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.39" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 0.24%)</title><rect x="1185.8" y="293" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.82" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1148.9" y="437" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.85" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.30%)</title><rect x="176.7" y="453" width="3.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="179.68" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 1.18%)</title><rect x="10.7" y="501" width="13.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.70" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1088.2" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.18" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="229" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.21" y="239.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.18%)</title><rect x="1137.0" y="437" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.00" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.06%)</title><rect x="53.9" y="469" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="56.94" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.64" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (111,111,110 samples, 0.65%)</title><rect x="330.1" y="485" width="7.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="333.11" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.24%)</title><rect x="1101.4" y="341" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.43" y="351.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.24%)</title><rect x="1153.7" y="453" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.74" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (40,404,040 samples, 0.24%)</title><rect x="25.3" y="485" width="2.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="28.34" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="1154.4" y="437" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.43" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1165.6" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.59" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="325" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.65%)</title><rect x="1131.4" y="485" width="7.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1134.42" y="495.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.47%)</title><rect x="58.8" y="517" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="61.82" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.18%)</title><rect x="315.5" y="421" width="2.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="318.46" y="431.5" ></text>
</g>
<g >
<title>_start (17,080,807,910 samples, 99.94%)</title><rect x="10.7" y="597" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.70" y="607.5" >_start</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="841.3" y="437" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="844.30" y="447.5" ></text>
</g>
<g >
<title>nons (17,090,908,920 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>sim::Link::Transmit::operator (20,202,020 samples, 0.12%)</title><rect x="180.9" y="501" width="1.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="183.86" y="511.5" ></text>
</g>
<g >
<title>sim::Process::operator (12,959,595,830 samples, 75.83%)</title><rect x="182.3" y="501" width="894.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="185.26" y="511.5" >sim::Process::operator</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (252,525,250 samples, 1.48%)</title><rect x="162.7" y="469" width="17.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="165.73" y="479.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="517" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.30" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.12%)</title><rect x="178.8" y="437" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="181.77" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1134.2" y="389" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.21" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="437" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="447.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.30%)</title><rect x="1171.2" y="469" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.17" y="479.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="812.0" y="453" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="815.01" y="463.5" ></text>
</g>
<g >
<title>utils::create_all_directories (10,101,010 samples, 0.06%)</title><rect x="53.9" y="485" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="56.94" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="46.3" y="405" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="49.26" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (40,404,040 samples, 0.24%)</title><rect x="55.3" y="533" width="2.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="58.33" y="543.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.41%)</title><rect x="321.0" y="453" width="4.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="324.04" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1127.9" y="485" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1130.93" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.24%)</title><rect x="10.7" y="549" width="14.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.70" y="559.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="181.6" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="184.56" y="463.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="851.1" y="453" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="854.06" y="463.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="1110.5" y="437" width="1.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1113.50" y="447.5" ></text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.35%)</title><rect x="28.1" y="421" width="4.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="31.13" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="26.7" y="229" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.74" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (70,707,070 samples, 0.41%)</title><rect x="19.8" y="469" width="4.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="22.76" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (121,212,120 samples, 0.71%)</title><rect x="320.3" y="469" width="8.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="323.34" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="311.3" y="421" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="314.28" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="29.5" y="197" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.53" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1134.9" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.91" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (90,909,090 samples, 0.53%)</title><rect x="35.1" y="485" width="6.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="38.11" y="495.5" ></text>
</g>
<g >
<title>sim::Event::Event (363,636,360 samples, 2.13%)</title><rect x="1051.9" y="469" width="25.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1054.91" y="479.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.5" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.51" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="300.8" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="303.82" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.89%)</title><rect x="601.4" y="453" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.39" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="27.4" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.43" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.24%)</title><rect x="37.9" y="389" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.90" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="313.4" y="421" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="316.37" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="323.1" y="389" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="326.13" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.06%)</title><rect x="1180.9" y="501" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1183.93" y="511.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.06%)</title><rect x="1156.5" y="469" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1159.52" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (202,020,200 samples, 1.18%)</title><rect x="1125.1" y="501" width="14.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1128.14" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="501" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.61" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="373" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="383.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.24%)</title><rect x="1037.3" y="469" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1040.27" y="479.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 1.18%)</title><rect x="10.7" y="517" width="13.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.70" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10,101,010 samples, 0.06%)</title><rect x="54.6" y="501" width="0.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="57.63" y="511.5" ></text>
</g>
<g >
<title>write (40,404,040 samples, 0.24%)</title><rect x="25.3" y="421" width="2.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="28.34" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="315.5" y="357" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="318.46" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="850.4" y="437" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="853.37" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.41%)</title><rect x="844.1" y="421" width="4.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="847.09" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (70,707,070 samples, 0.41%)</title><rect x="157.8" y="469" width="4.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="160.85" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="357" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.30%)</title><rect x="139.7" y="485" width="15.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="142.72" y="495.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="517" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.61" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="310.6" y="421" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="313.58" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="10.7" y="485" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.70" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.06%)</title><rect x="1181.6" y="501" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.63" y="511.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.35%)</title><rect x="28.1" y="469" width="4.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="31.13" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.18%)</title><rect x="1182.3" y="357" width="2.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.33" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (80,808,080 samples, 0.47%)</title><rect x="900.6" y="469" width="5.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="903.58" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="469" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.35" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.35" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="1132.1" y="437" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.12" y="447.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.30%)</title><rect x="16.3" y="453" width="3.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.28" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="302.9" y="389" width="4.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="305.91" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (40,404,040 samples, 0.24%)</title><rect x="345.4" y="485" width="2.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="348.45" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (161,616,160 samples, 0.95%)</title><rect x="42.8" y="469" width="11.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="45.78" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.6" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.60" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="1137.0" y="405" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.30%)</title><rect x="158.5" y="437" width="3.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="161.55" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (20,202,020 samples, 0.12%)</title><rect x="327.3" y="453" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="330.32" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (2,494,949,470 samples, 14.60%)</title><rect x="397.1" y="469" width="172.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="400.06" y="479.5" >Logger::warn</text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1129.3" y="469" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1132.33" y="479.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="1176.7" y="485" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1179.75" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="324.5" y="405" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="327.53" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="287.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.47%)</title><rect x="1146.8" y="485" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1149.76" y="495.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="1151.6" y="421" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1154.64" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.65" y="495.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="517" width="6.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.33" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.12%)</title><rect x="323.8" y="421" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="326.83" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.18%)</title><rect x="1176.1" y="501" width="2.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.05" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1155.1" y="421" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.13" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.06%)</title><rect x="167.6" y="421" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="170.61" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (80,808,080 samples, 0.47%)</title><rect x="1106.3" y="469" width="5.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1109.31" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="1134.2" y="421" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="101" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="111.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="323.8" y="405" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="326.83" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1152.3" y="485" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1155.34" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="383.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.18%)</title><rect x="978.0" y="469" width="2.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="980.99" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="844.8" y="373" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="847.79" y="383.5" ></text>
</g>
<g >
<title>sim::SendData::operator (515,151,510 samples, 3.01%)</title><rect x="1081.9" y="501" width="35.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1084.90" y="511.5" >sim..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (40,404,040 samples, 0.24%)</title><rect x="25.3" y="437" width="2.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="28.34" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="43.5" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.48" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (90,909,090 samples, 0.53%)</title><rect x="170.4" y="453" width="6.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="173.40" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.6" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.60" y="271.5" ></text>
</g>
<g >
<title>malloc (151,515,150 samples, 0.89%)</title><rect x="1041.5" y="453" width="10.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1044.45" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="1137.0" y="421" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="261" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.12%)</title><rect x="163.4" y="437" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="166.43" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.30%)</title><rect x="28.8" y="229" width="3.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.83" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.85" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (383,838,380 samples, 2.25%)</title><rect x="569.3" y="469" width="26.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="572.31" y="479.5" >[..</text>
</g>
<g >
<title>std::_Hash_bytes (50,505,050 samples, 0.30%)</title><rect x="1157.2" y="485" width="3.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1160.22" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; YAML::Node::as&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="469" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.30" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.18%)</title><rect x="168.3" y="421" width="2.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="171.31" y="431.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="325.2" y="421" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="328.22" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.24%)</title><rect x="1185.8" y="341" width="2.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1188.82" y="351.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (272,727,270 samples, 1.60%)</title><rect x="550.5" y="453" width="18.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="553.48" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.83%)</title><rect x="302.2" y="469" width="9.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="305.21" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1150.2" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.25" y="303.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.41%)</title><rect x="844.1" y="405" width="4.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="847.09" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.47%)</title><rect x="164.8" y="453" width="5.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="167.82" y="463.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (242,424,240 samples, 1.42%)</title><rect x="766.7" y="437" width="16.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="769.68" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="840.6" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="843.60" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.71%)</title><rect x="44.2" y="453" width="8.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="47.17" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1087.5" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1090.48" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="453" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.61" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="162.0" y="453" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="165.03" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.41%)</title><rect x="313.4" y="437" width="4.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="316.37" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="166.9" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="169.91" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="37" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="36.5" y="421" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.50" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1104.9" y="437" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1107.92" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="171.1" y="373" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="174.10" y="383.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.65%)</title><rect x="1182.3" y="533" width="7.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.33" y="543.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (80,808,080 samples, 0.47%)</title><rect x="70.7" y="517" width="5.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="73.67" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.24%)</title><rect x="1091.0" y="437" width="2.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1093.97" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="213" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.91" y="223.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="501" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.30" y="511.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.12%)</title><rect x="837.1" y="453" width="1.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="840.12" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.06%)</title><rect x="348.2" y="485" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="351.24" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="326.6" y="437" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="329.62" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="169.0" y="373" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="172.01" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="341" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.24%)</title><rect x="1185.8" y="325" width="2.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1188.82" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="27.4" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.43" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="19.8" y="437" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.76" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (90,909,090 samples, 0.53%)</title><rect x="170.4" y="437" width="6.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="173.40" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.24%)</title><rect x="651.6" y="453" width="2.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="654.61" y="463.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (535,353,530 samples, 3.13%)</title><rect x="1139.1" y="501" width="37.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1142.09" y="511.5" >sim..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="453" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="271.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.12%)</title><rect x="1084.7" y="469" width="1.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1087.69" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="25.3" y="277" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.34" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="27.4" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.43" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="316.9" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="319.86" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.18%)</title><rect x="1182.3" y="341" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.33" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (434,343,430 samples, 2.54%)</title><rect x="25.3" y="517" width="30.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="28.34" y="527.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="240.1" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="243.14" y="495.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1111.2" y="421" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1114.19" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.06%)</title><rect x="181.6" y="469" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="184.56" y="479.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.35%)</title><rect x="28.1" y="437" width="4.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="31.13" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.30%)</title><rect x="28.8" y="213" width="3.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.83" y="223.5" ></text>
</g>
<g >
<title>operator new (191,919,190 samples, 1.12%)</title><rect x="621.6" y="469" width="13.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="624.62" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1123.7" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.75" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="143.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="24.6" y="501" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="27.65" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.35" y="335.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.06%)</title><rect x="34.4" y="469" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="37.41" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1174.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.96" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,111,111,020 samples, 53.31%)</title><rect x="351.0" y="485" width="629.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="354.03" y="495.5" >sim::Switch::process</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.53%)</title><rect x="1182.3" y="373" width="6.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.33" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="421" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1191.61" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.89%)</title><rect x="783.4" y="453" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="786.42" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1124.4" y="501" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1127.44" y="511.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (50,505,050 samples, 0.30%)</title><rect x="158.5" y="453" width="3.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="161.55" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (60,606,060 samples, 0.35%)</title><rect x="1184.4" y="357" width="4.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.42" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.24%)</title><rect x="10.7" y="533" width="14.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.70" y="543.5" ></text>
</g>
<g >
<title>sim::Host::process (434,343,430 samples, 2.54%)</title><rect x="300.1" y="485" width="30.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="303.12" y="495.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="287.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (40,404,040 samples, 0.24%)</title><rect x="297.3" y="485" width="2.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="300.33" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.1" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.12" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.9" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.94" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.06%)</title><rect x="1091.7" y="421" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1094.67" y="431.5" ></text>
</g>
<g >
<title>operator new (171,717,170 samples, 1.00%)</title><rect x="1040.1" y="469" width="11.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1043.06" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="30.2" y="181" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.22" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="27.4" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.43" y="159.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.06%)</title><rect x="40.7" y="453" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="43.69" y="463.5" ></text>
</g>
</g>
</svg>
