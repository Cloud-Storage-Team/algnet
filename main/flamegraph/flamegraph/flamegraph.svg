<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>operator new (70,707,070 samples, 0.41%)</title><rect x="1166.4" y="517" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.39" y="527.5" ></text>
</g>
<g >
<title>cfree (60,606,060 samples, 0.35%)</title><rect x="20.4" y="517" width="4.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="23.42" y="527.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="294.1" y="501" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="297.06" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="533" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.61" y="543.5" ></text>
</g>
<g >
<title>__libc_start_main (17,151,514,980 samples, 99.94%)</title><rect x="10.7" y="645" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.69" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>fopen (90,909,090 samples, 0.53%)</title><rect x="26.0" y="517" width="6.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="28.97" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="158.6" y="421" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="161.63" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="164.9" y="501" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="167.88" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="18.3" y="485" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.33" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="168.4" y="533" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="171.35" y="543.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1151.8" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1154.80" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.77%)</title><rect x="41.9" y="549" width="9.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="44.95" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="300.3" y="453" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="303.31" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="447.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="858.7" y="533" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="861.71" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.18%)</title><rect x="10.7" y="597" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.69" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="28.1" y="277" width="4.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.06" y="287.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="357" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.14" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.06%)</title><rect x="907.3" y="533" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="910.33" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.12%)</title><rect x="1094.8" y="501" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1097.85" y="511.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::parent_path (10,101,010 samples, 0.06%)</title><rect x="51.0" y="533" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="53.98" y="543.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (414,141,410 samples, 2.41%)</title><rect x="25.3" y="565" width="28.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="28.28" y="575.5" >si..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="341" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.14" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="1104.6" y="421" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1107.57" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="298.9" y="485" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="301.92" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.2" y="341" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.22" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="20.4" y="501" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.42" y="511.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.29%)</title><rect x="60.0" y="581" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="63.01" y="591.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.41%)</title><rect x="299.6" y="517" width="4.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="302.62" y="527.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="581" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.61" y="591.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1151.8" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1154.80" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.06%)</title><rect x="166.3" y="517" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="169.27" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="151.7" y="501" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="154.68" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="373" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.36" y="383.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.18%)</title><rect x="301.0" y="437" width="2.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="304.01" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.12%)</title><rect x="311.4" y="453" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="314.42" y="463.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::BasicCC&gt;, sim::Link&gt;::add_link (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="549" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.31" y="559.5" ></text>
</g>
<g >
<title>fstatat64 (30,303,030 samples, 0.18%)</title><rect x="51.7" y="517" width="2.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="54.67" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="405" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.36" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.18%)</title><rect x="309.3" y="485" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="312.34" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="501" width="6.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.36" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1112.2" y="501" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1115.21" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="309" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.24%)</title><rect x="605.2" y="517" width="14.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="608.21" y="527.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="565" width="6.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.36" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.06%)</title><rect x="1187.2" y="373" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.22" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.12%)</title><rect x="1152.5" y="533" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1155.50" y="543.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (434,343,430 samples, 2.53%)</title><rect x="24.6" y="581" width="29.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="27.59" y="591.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1127.5" y="549" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.49" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.1" y="325" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.05" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="303.1" y="469" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="306.09" y="479.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (70,707,070 samples, 0.41%)</title><rect x="54.4" y="597" width="4.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="57.45" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.06%)</title><rect x="303.8" y="485" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="306.78" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1092.1" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1095.07" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="341" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (444,444,440 samples, 2.59%)</title><rect x="562.1" y="533" width="30.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="565.15" y="543.5" >[l..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.1" y="341" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.05" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="291.3" y="517" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="294.28" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1110.1" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1113.13" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="463.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (30,303,030 samples, 0.18%)</title><rect x="169.0" y="549" width="2.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="172.05" y="559.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.06%)</title><rect x="148.2" y="533" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="151.21" y="543.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.29%)</title><rect x="1119.2" y="565" width="3.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1122.16" y="575.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="165.6" y="501" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="168.57" y="511.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.92" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.12%)</title><rect x="860.1" y="501" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="863.10" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="19.7" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.72" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="223.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (30,303,030 samples, 0.18%)</title><rect x="171.8" y="565" width="2.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="174.82" y="575.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1183.7" y="373" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="277" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.14" y="287.5" ></text>
</g>
<g >
<title>sim::Process::operator (50,505,050 samples, 0.29%)</title><rect x="76.7" y="581" width="3.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="79.67" y="591.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.29%)</title><rect x="1150.4" y="549" width="3.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1153.41" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="1143.5" y="549" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1146.47" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1175.4" y="565" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1178.41" y="575.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.06%)</title><rect x="25.3" y="533" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="28.28" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.82%)</title><rect x="859.4" y="533" width="9.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="862.41" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (70,707,070 samples, 0.41%)</title><rect x="1166.4" y="533" width="4.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1169.39" y="543.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (121,212,120 samples, 0.71%)</title><rect x="319.1" y="549" width="8.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="322.06" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="415.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.06%)</title><rect x="33.6" y="533" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="36.61" y="543.5" ></text>
</g>
<g >
<title>sim::SendData::operator (444,444,440 samples, 2.59%)</title><rect x="1088.6" y="565" width="30.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1091.60" y="575.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.06%)</title><rect x="173.2" y="549" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="176.21" y="559.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.29%)</title><rect x="621.9" y="533" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="624.88" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="469" width="6.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.36" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="431.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,040,403,890 samples, 87.64%)</title><rect x="88.5" y="581" width="1034.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="91.48" y="591.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>Logger::warn (50,505,050 samples, 0.29%)</title><rect x="226.7" y="549" width="3.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="229.69" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="864.3" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="867.27" y="511.5" ></text>
</g>
<g >
<title>_IO_file_fopen (90,909,090 samples, 0.53%)</title><rect x="26.0" y="501" width="6.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="28.97" y="511.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_tag (10,101,010 samples, 0.06%)</title><rect x="1186.5" y="389" width="0.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1189.53" y="399.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.12%)</title><rect x="383.7" y="533" width="1.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="386.66" y="543.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 2.06%)</title><rect x="807.3" y="517" width="24.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="810.32" y="527.5" >c..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="292.0" y="485" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="294.98" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="517" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.61" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (171,717,170 samples, 1.00%)</title><rect x="1159.4" y="549" width="11.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1162.44" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1155.3" y="549" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1158.27" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="479.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="389" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.36" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="373" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.92" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.12%)</title><rect x="1183.7" y="357" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.75" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.29%)</title><rect x="1133.0" y="533" width="3.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1136.05" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="36.4" y="453" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.39" y="463.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.24%)</title><rect x="1133.7" y="501" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1136.74" y="511.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="1100.4" y="469" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1103.41" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="19.7" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.72" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1092.1" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1095.07" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="421" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,464,646,450 samples, 8.53%)</title><rect x="985.1" y="549" width="100.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="988.11" y="559.5" >void sim::Sc..</text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.65%)</title><rect x="12.1" y="533" width="7.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.08" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="18.3" y="501" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.33" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="431.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.12%)</title><rect x="667.0" y="517" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="670.02" y="527.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.06%)</title><rect x="858.0" y="533" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="861.02" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.94%)</title><rect x="631.6" y="517" width="11.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="634.60" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::weak_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_insert_unique&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="517" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1192.31" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="517" width="6.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.36" y="527.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.77%)</title><rect x="41.9" y="533" width="9.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="44.95" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (545,454,540 samples, 3.18%)</title><rect x="869.8" y="533" width="37.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="872.82" y="543.5" >sim..</text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (262,626,260 samples, 1.53%)</title><rect x="778.8" y="501" width="18.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="781.84" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.59%)</title><rect x="157.2" y="437" width="7.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="160.24" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="389" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.06%)</title><rect x="167.7" y="533" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="170.66" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="543.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="18.3" y="517" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.33" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="453" width="6.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.36" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1148.3" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.33" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="335.5" ></text>
</g>
<g >
<title>cfree (393,939,390 samples, 2.30%)</title><rect x="592.7" y="533" width="27.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="595.71" y="543.5" >c..</text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.18%)</title><rect x="10.7" y="613" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.69" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="20.4" y="485" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.42" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.47%)</title><rect x="35.0" y="501" width="5.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="38.00" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1135.8" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.83" y="463.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,262,626,130 samples, 77.28%)</title><rect x="173.9" y="565" width="911.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="176.91" y="575.5" >sim::Process::operator</text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.06%)</title><rect x="306.6" y="501" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="309.56" y="511.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.12%)</title><rect x="10.7" y="517" width="1.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.69" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="50.3" y="517" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="53.28" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.06%)</title><rect x="1181.0" y="565" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1183.97" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="373" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="383.5" ></text>
</g>
<g >
<title>cfree (252,525,250 samples, 1.47%)</title><rect x="123.2" y="565" width="17.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="126.21" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="367.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.12%)</title><rect x="856.6" y="517" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="859.63" y="527.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="300.3" y="485" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="303.31" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="31.5" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.53" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="43.3" y="469" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.34" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="1146.2" y="501" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.24" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="463.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.35%)</title><rect x="865.0" y="501" width="4.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="867.96" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="865.0" y="437" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="867.96" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="421" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.36" y="431.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.06%)</title><rect x="287.1" y="549" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="290.12" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.69" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="405" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="51.7" y="485" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.67" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1174.7" y="549" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1177.72" y="559.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (101,010,100 samples, 0.59%)</title><rect x="35.0" y="533" width="6.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="38.00" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.24%)</title><rect x="1133.7" y="485" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.74" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="1124.0" y="565" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.02" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="383.5" ></text>
</g>
<g >
<title>sim::Event::get_time (60,606,060 samples, 0.35%)</title><rect x="63.5" y="581" width="4.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="66.48" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="453" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="325" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.53%)</title><rect x="327.4" y="549" width="6.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="330.40" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.69" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.65%)</title><rect x="156.5" y="453" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="159.55" y="463.5" ></text>
</g>
<g >
<title>_start (17,151,514,980 samples, 99.94%)</title><rect x="10.7" y="661" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.69" y="671.5" >_start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="1167.1" y="469" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.08" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (60,606,060 samples, 0.35%)</title><rect x="333.6" y="549" width="4.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="336.65" y="559.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="437" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.36" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.88%)</title><rect x="1126.1" y="565" width="10.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1129.10" y="575.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="291.3" y="501" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="294.28" y="511.5" ></text>
</g>
<g >
<title>sim::Event::Event (414,141,410 samples, 2.41%)</title><rect x="1057.3" y="533" width="28.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1060.35" y="543.5" >si..</text>
</g>
<g >
<title>sim::Host::process (383,838,380 samples, 2.24%)</title><rect x="287.8" y="549" width="26.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="290.81" y="559.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="311.4" y="389" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.42" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="293" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="303.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (16,333,333,170 samples, 95.17%)</title><rect x="59.3" y="597" width="1123.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="62.31" y="607.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1132.4" y="533" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1135.35" y="543.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.35%)</title><rect x="865.0" y="469" width="4.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="867.96" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (60,606,060 samples, 0.35%)</title><rect x="20.4" y="533" width="4.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="23.42" y="543.5" ></text>
</g>
<g >
<title>sim::Link::transmit (10,101,010 samples, 0.06%)</title><rect x="172.5" y="549" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="175.52" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="383.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="517" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1147.16" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.12%)</title><rect x="1156.0" y="549" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1158.97" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.59%)</title><rect x="1103.9" y="485" width="6.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1106.88" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1091.4" y="533" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1094.38" y="543.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="293.4" y="517" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="296.37" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="383.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.12%)</title><rect x="311.4" y="437" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="314.42" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="63.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.12%)</title><rect x="311.4" y="469" width="1.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="314.42" y="479.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (40,404,040 samples, 0.24%)</title><rect x="1115.7" y="533" width="2.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1118.69" y="543.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.06%)</title><rect x="1187.2" y="357" width="0.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1190.22" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.31" y="479.5" ></text>
</g>
<g >
<title>nons (17,161,615,990 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="565" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.06%)</title><rect x="1118.5" y="549" width="0.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1121.46" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="613" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (434,343,430 samples, 2.53%)</title><rect x="24.6" y="597" width="29.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="27.59" y="607.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.24%)</title><rect x="148.9" y="533" width="2.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="151.91" y="543.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::~TcpFlow (10,101,010 samples, 0.06%)</title><rect x="19.7" y="533" width="0.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="22.72" y="543.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.06%)</title><rect x="303.8" y="501" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="306.78" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="437" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 1.00%)</title><rect x="128.8" y="549" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="131.76" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.12%)</title><rect x="1128.2" y="549" width="1.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1131.19" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="479.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="49.6" y="517" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="52.59" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="479.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1181.7" y="565" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.67" y="575.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="341" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.92" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.06%)</title><rect x="869.1" y="533" width="0.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="872.13" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,151,514,980 samples, 99.94%)</title><rect x="10.7" y="629" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.69" y="639.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="335.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.24%)</title><rect x="1133.7" y="517" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1136.74" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="311.4" y="405" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.42" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="1099.7" y="501" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1102.71" y="511.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="305.9" y="501" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="308.87" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.2" y="309" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.22" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.18%)</title><rect x="301.0" y="453" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.01" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.29%)</title><rect x="294.1" y="517" width="3.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="297.06" y="527.5" ></text>
</g>
<g >
<title>std::filesystem::status (30,303,030 samples, 0.18%)</title><rect x="51.7" y="533" width="2.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="54.67" y="543.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::operator/= (10,101,010 samples, 0.06%)</title><rect x="53.8" y="565" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="56.76" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 1.06%)</title><rect x="12.1" y="549" width="12.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.08" y="559.5" ></text>
</g>
<g >
<title>open64 (90,909,090 samples, 0.53%)</title><rect x="26.0" y="469" width="6.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="28.97" y="479.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.06%)</title><rect x="25.3" y="485" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="28.28" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.18%)</title><rect x="164.2" y="517" width="2.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="167.18" y="527.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="298.9" y="501" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="301.92" y="511.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="171.8" y="549" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="174.82" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="35.0" y="485" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="645" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.4" y="341" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.44" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="296.1" y="437" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="299.14" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.29%)</title><rect x="28.8" y="261" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.75" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="831.6" y="517" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="834.62" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="1100.4" y="485" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1103.41" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.59%)</title><rect x="1103.9" y="501" width="6.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1106.88" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.06%)</title><rect x="25.3" y="549" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="28.28" y="559.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.24%)</title><rect x="1112.9" y="533" width="2.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1115.91" y="543.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (292,929,290 samples, 1.71%)</title><rect x="1092.8" y="533" width="20.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1095.77" y="543.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (10,101,010 samples, 0.06%)</title><rect x="337.8" y="549" width="0.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="340.82" y="559.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.47%)</title><rect x="1096.9" y="517" width="5.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1099.93" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="30.8" y="213" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.84" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="153.8" y="501" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="156.77" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="415.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 1.18%)</title><rect x="10.7" y="581" width="13.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.69" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="298.2" y="501" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="301.23" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="25.3" y="517" width="0.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="28.28" y="527.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.29%)</title><rect x="380.2" y="533" width="3.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="383.18" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="565" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.61" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.24%)</title><rect x="862.2" y="517" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="865.18" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (121,212,120 samples, 0.71%)</title><rect x="305.2" y="517" width="8.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="308.17" y="527.5" ></text>
</g>
<g >
<title>sim::Process::~Process (40,404,040 samples, 0.24%)</title><rect x="1085.8" y="565" width="2.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1088.82" y="575.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.18%)</title><rect x="224.6" y="549" width="2.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="227.61" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="447.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (454,545,450 samples, 2.65%)</title><rect x="140.6" y="565" width="31.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="143.57" y="575.5" >si..</text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.41%)</title><rect x="1166.4" y="501" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.39" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="1166.4" y="485" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.39" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="23.9" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.89" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="303.5" ></text>
</g>
<g >
<title>utils::create_all_directories (40,404,040 samples, 0.24%)</title><rect x="51.0" y="549" width="2.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="53.98" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1174.7" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.72" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="859.4" y="517" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="862.41" y="527.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="308.0" y="469" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="310.95" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="661" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="167.0" y="533" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="169.96" y="543.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="1117.1" y="517" width="1.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1120.07" y="527.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="581" width="6.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.36" y="591.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.41%)</title><rect x="1144.9" y="549" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.86" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1096.2" y="485" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1099.24" y="495.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.06%)</title><rect x="167.0" y="517" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="169.96" y="527.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.18%)</title><rect x="295.5" y="469" width="2.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="298.45" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.65%)</title><rect x="41.9" y="517" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="44.95" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="303.1" y="485" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="306.09" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.18%)</title><rect x="1178.2" y="565" width="2.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1181.19" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1143.5" y="533" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.47" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (70,707,070 samples, 0.41%)</title><rect x="314.2" y="549" width="4.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="317.20" y="559.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.18%)</title><rect x="32.2" y="549" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="35.22" y="559.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.24%)</title><rect x="833.0" y="517" width="2.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="836.01" y="527.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="155.9" y="501" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="158.85" y="511.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (545,454,540 samples, 3.18%)</title><rect x="1136.5" y="565" width="37.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1139.52" y="575.5" >sim..</text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.06%)</title><rect x="313.5" y="517" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="316.51" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (40,404,040 samples, 0.24%)</title><rect x="1171.2" y="549" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.25" y="559.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.41%)</title><rect x="230.2" y="549" width="4.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="233.16" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="301.0" y="389" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.01" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.18%)</title><rect x="1183.1" y="405" width="2.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.05" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="869.1" y="501" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="872.13" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.06%)</title><rect x="300.3" y="437" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="303.31" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="485" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.31" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.65%)</title><rect x="156.5" y="469" width="7.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="159.55" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.06%)</title><rect x="292.7" y="469" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="295.67" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="858.0" y="517" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="861.02" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.59%)</title><rect x="1103.9" y="453" width="6.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1106.88" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (2,575,757,550 samples, 15.01%)</title><rect x="385.0" y="533" width="177.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="388.04" y="543.5" >Logger::warn</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.12%)</title><rect x="1183.7" y="389" width="1.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.75" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="453" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="463.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.06%)</title><rect x="50.3" y="501" width="0.7" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="53.28" y="511.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.59%)</title><rect x="1103.9" y="469" width="6.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1106.88" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,404,040 samples, 0.24%)</title><rect x="148.9" y="501" width="2.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="151.91" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1185.8" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.83" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.59%)</title><rect x="1129.6" y="549" width="6.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1132.58" y="559.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.47%)</title><rect x="1051.8" y="517" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1054.79" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.53%)</title><rect x="307.3" y="501" width="6.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="310.26" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="1102.5" y="517" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1105.49" y="527.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.29%)</title><rect x="300.3" y="501" width="3.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="303.31" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="288.5" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="291.51" y="543.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (434,343,430 samples, 2.53%)</title><rect x="1088.6" y="549" width="29.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1091.60" y="559.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="1146.2" y="469" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.24" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.18%)</title><rect x="301.0" y="485" width="2.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="304.01" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10,101,010 samples, 0.06%)</title><rect x="53.8" y="549" width="0.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="56.76" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="865.0" y="421" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="867.96" y="431.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="581" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.31" y="591.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.94%)</title><rect x="1040.0" y="533" width="11.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1042.98" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.12%)</title><rect x="153.8" y="485" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="156.77" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="373" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="1146.2" y="517" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.24" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="47.5" y="437" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.50" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.47%)</title><rect x="35.0" y="517" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="38.00" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.18%)</title><rect x="1183.1" y="421" width="2.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.05" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.18%)</title><rect x="295.5" y="485" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="298.45" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="533" width="6.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.36" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.65%)</title><rect x="156.5" y="485" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="159.55" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="30.1" y="229" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.14" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="399.5" ></text>
</g>
<g >
<title>all (17,161,615,990 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="19.7" y="517" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.72" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="405" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.18%)</title><rect x="1185.1" y="405" width="2.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.14" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,090,909,080 samples, 6.36%)</title><rect x="908.0" y="533" width="75.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="911.02" y="543.5" >std::_Rb..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.06%)</title><rect x="1180.3" y="565" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1183.28" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="517" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.47" y="527.5" ></text>
</g>
<g >
<title>malloc (242,424,240 samples, 1.41%)</title><rect x="838.6" y="501" width="16.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="841.57" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.14" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1149.7" y="549" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1152.72" y="559.5" ></text>
</g>
<g >
<title>operator new (282,828,280 samples, 1.65%)</title><rect x="835.8" y="517" width="19.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="838.79" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (111,111,110 samples, 0.65%)</title><rect x="34.3" y="549" width="7.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="37.31" y="559.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="290.6" y="533" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="293.59" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="865.0" y="453" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="867.96" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="301.0" y="405" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.01" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.69" y="543.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="1096.2" y="501" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1099.24" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1135.8" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.83" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.06%)</title><rect x="154.5" y="469" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="157.46" y="479.5" ></text>
</g>
<g >
<title>sim::Event::Event (272,727,270 samples, 1.59%)</title><rect x="239.2" y="549" width="18.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="242.19" y="559.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="861.5" y="501" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="864.49" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.12%)</title><rect x="10.7" y="533" width="1.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.69" y="543.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="373" width="1.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.14" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.24%)</title><rect x="161.4" y="405" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="164.41" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,404,040,310 samples, 54.80%)</title><rect x="338.5" y="549" width="646.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="341.51" y="559.5" >sim::Switch::process</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1151.8" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.80" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="308.6" y="469" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="311.65" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="289.9" y="517" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="292.89" y="527.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.12%)</title><rect x="1089.3" y="533" width="1.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1092.29" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="357" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.36" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.12%)</title><rect x="10.7" y="549" width="1.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.69" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="95.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="308.0" y="485" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="310.95" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="292.0" y="501" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="294.98" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="296.1" y="421" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="299.14" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="292.0" y="517" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="294.98" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="549" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.61" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="437" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="447.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (424,242,420 samples, 2.47%)</title><rect x="257.9" y="549" width="29.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="260.95" y="559.5" >si..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.12%)</title><rect x="1101.1" y="501" width="1.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1104.10" y="511.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.41%)</title><rect x="1144.9" y="533" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1147.86" y="543.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="389" width="1.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.14" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.1" y="357" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.05" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 1.18%)</title><rect x="10.7" y="565" width="13.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.69" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="983.0" y="533" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="986.03" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.35%)</title><rect x="865.0" y="485" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="867.96" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="501" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.31" y="511.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.06%)</title><rect x="291.3" y="485" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="294.28" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.12%)</title><rect x="289.2" y="533" width="1.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="292.20" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="165.6" y="485" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="168.57" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="141.3" y="549" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="144.27" y="559.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="565" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.31" y="575.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.18%)</title><rect x="1110.8" y="517" width="2.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1113.82" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.47%)</title><rect x="44.0" y="453" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.03" y="463.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="299.6" y="501" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="302.62" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="1112.2" y="485" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1115.21" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.59%)</title><rect x="1103.9" y="517" width="6.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1106.88" y="527.5" ></text>
</g>
<g >
<title>main (16,949,494,780 samples, 98.76%)</title><rect x="24.6" y="613" width="1165.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.59" y="623.5" >main</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.18%)</title><rect x="297.5" y="517" width="2.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="300.53" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="293" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.14" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1134.66" y="543.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.35%)</title><rect x="235.0" y="549" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="238.03" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="501" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.61" y="511.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.06%)</title><rect x="34.3" y="533" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="37.31" y="543.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (868,686,860 samples, 5.06%)</title><rect x="1122.6" y="581" width="59.8" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1125.63" y="591.5" >sim::S..</text>
</g>
<g >
<title>sim::Process::~Process (121,212,120 samples, 0.71%)</title><rect x="80.1" y="581" width="8.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="83.15" y="591.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.1" y="373" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.05" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1090.7" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1093.68" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="51.7" y="501" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.67" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="447.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="501" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1152.02" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="485" width="6.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.36" y="495.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (282,828,280 samples, 1.65%)</title><rect x="542.7" y="517" width="19.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="545.70" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1099.0" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1102.02" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.53%)</title><rect x="26.0" y="357" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.97" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.24%)</title><rect x="1146.2" y="485" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.24" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="312.8" y="485" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="315.81" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="296.8" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="299.84" y="415.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="501" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1147.16" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="151.7" y="517" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="154.68" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="163.5" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="166.49" y="399.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.65%)</title><rect x="1182.4" y="597" width="7.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.36" y="607.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,131,313,100 samples, 18.25%)</title><rect x="642.7" y="533" width="215.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="645.71" y="543.5" >sim::Link::get_packet</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.29%)</title><rect x="1185.1" y="421" width="3.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.14" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1152.02" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="147.5" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="150.52" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.12%)</title><rect x="1174.0" y="565" width="1.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1177.03" y="575.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.18%)</title><rect x="301.0" y="469" width="2.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="304.01" y="479.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="41.3" y="517" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="44.25" y="527.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1182.4" y="341" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1185.36" y="351.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.18%)</title><rect x="619.8" y="533" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="622.79" y="543.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.12%)</title><rect x="311.4" y="485" width="1.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="314.42" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="389" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="313.5" y="501" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="316.51" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (222,222,220 samples, 1.29%)</title><rect x="151.7" y="533" width="15.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="154.68" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="35.7" y="469" width="4.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.70" y="479.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.65%)</title><rect x="41.9" y="501" width="7.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="44.95" y="511.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (131,313,130 samples, 0.77%)</title><rect x="67.6" y="581" width="9.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="70.65" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.88%)</title><rect x="796.9" y="517" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="799.90" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="301.0" y="421" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.01" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.71%)</title><rect x="291.3" y="533" width="8.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="294.28" y="543.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="1103.2" y="517" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1106.18" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.12%)</title><rect x="855.2" y="517" width="1.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="858.24" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.18%)</title><rect x="295.5" y="453" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.45" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.24%)</title><rect x="152.4" y="517" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="155.38" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1142.8" y="549" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.77" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="581" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>__uselocale@plt (10,101,010 samples, 0.06%)</title><rect x="40.6" y="517" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="43.56" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1131.7" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1134.66" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="52.4" y="421" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.37" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (70,707,070 samples, 0.41%)</title><rect x="299.6" y="533" width="4.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="302.62" y="543.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="485" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.61" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.53%)</title><rect x="1104.6" y="437" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1107.57" y="447.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="869.1" y="517" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="872.13" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.18%)</title><rect x="1094.8" y="517" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1097.85" y="527.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.12%)</title><rect x="983.7" y="533" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="986.73" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.47%)</title><rect x="1183.1" y="437" width="5.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.05" y="447.5" ></text>
</g>
<g >
<title>sim::Link::arrive (383,838,380 samples, 2.24%)</title><rect x="142.7" y="549" width="26.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="145.65" y="559.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="415.5" ></text>
</g>
<g >
<title>operator new (252,525,250 samples, 1.47%)</title><rect x="625.4" y="533" width="17.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="628.35" y="543.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="325" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.92" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.2" y="325" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.22" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="171.1" y="549" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="174.13" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="311.4" y="421" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.42" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (60,606,060 samples, 0.35%)</title><rect x="865.0" y="517" width="4.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="867.96" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.18%)</title><rect x="1176.1" y="565" width="2.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1179.11" y="575.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (111,111,110 samples, 0.65%)</title><rect x="156.5" y="501" width="7.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="159.55" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.1" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="629" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.7" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.18%)</title><rect x="1157.4" y="549" width="2.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1160.36" y="559.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (90,909,090 samples, 0.53%)</title><rect x="26.0" y="533" width="6.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="28.97" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.12%)</title><rect x="1153.9" y="549" width="1.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1156.88" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="399.5" ></text>
</g>
<g >
<title>operator new (90,909,090 samples, 0.53%)</title><rect x="1051.1" y="533" width="6.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1054.09" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.31" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="389" width="1.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.22" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.06%)</title><rect x="1183.1" y="389" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1186.05" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="127.5" ></text>
</g>
<g >
<title>sim::RoutingModule::add_outlink (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="533" width="0.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1192.31" y="543.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.53%)</title><rect x="1182.4" y="549" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.36" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.24%)</title><rect x="1108.0" y="405" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1111.05" y="415.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (40,404,040 samples, 0.24%)</title><rect x="148.9" y="517" width="2.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="151.91" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="292.7" y="485" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="295.67" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="239.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.18%)</title><rect x="860.1" y="517" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="863.10" y="527.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.24%)</title><rect x="294.8" y="501" width="2.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="297.76" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.61" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (141,414,140 samples, 0.82%)</title><rect x="304.5" y="533" width="9.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="307.48" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.65%)</title><rect x="41.9" y="485" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.95" y="495.5" ></text>
</g>
<g >
<title>Logger::info (1,868,686,850 samples, 10.89%)</title><rect x="668.4" y="517" width="128.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="671.41" y="527.5" >Logger::info</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.77%)</title><rect x="155.2" y="517" width="9.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="158.16" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1185.1" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.14" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.06%)</title><rect x="25.3" y="501" width="0.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="28.28" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.12%)</title><rect x="1187.2" y="405" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.22" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="313.5" y="485" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="316.51" y="495.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="1149.0" y="485" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1152.02" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="300.3" y="469" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="303.31" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (90,909,090 samples, 0.53%)</title><rect x="26.0" y="549" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="28.97" y="559.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="308.6" y="485" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="311.65" y="495.5" ></text>
</g>
<g >
<title>_IO_file_open (90,909,090 samples, 0.53%)</title><rect x="26.0" y="485" width="6.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="28.97" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="53.8" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.76" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="30.1" y="245" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.14" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="312.8" y="469" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="315.81" y="479.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.06%)</title><rect x="155.2" y="501" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="158.16" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1144.2" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.16" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.18%)</title><rect x="51.7" y="469" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.67" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="50.3" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="53.28" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="25.3" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.28" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 1.00%)</title><rect x="819.8" y="501" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="822.82" y="511.5" ></text>
</g>
</g>
</svg>
