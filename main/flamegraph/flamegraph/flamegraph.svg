<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="363.0" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.04" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="277" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::process (70,707,070 samples, 0.33%)</title><rect x="1129.8" y="405" width="4.0" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1132.85" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="271.4" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="274.41" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.67%)</title><rect x="749.8" y="357" width="19.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="752.82" y="367.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="213" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1188.50" y="223.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="275.9" y="341" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="278.91" y="351.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1169.8" y="357" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.76" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="363.0" y="341" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="366.04" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="1125.9" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1128.91" y="351.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="364.2" y="325" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="367.17" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="349.6" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="352.55" y="383.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="350.1" y="373" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="353.11" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.19%)</title><rect x="356.9" y="357" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="359.86" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="277.6" y="341" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="280.59" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="284.3" y="389" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="287.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="373" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1154.21" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="359.1" y="357" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="362.11" y="367.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.05%)</title><rect x="1135.5" y="421" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1138.47" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1137.2" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.16" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1143.9" y="309" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.90" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="255.5" ></text>
</g>
<g >
<title>open64 (111,111,110 samples, 0.52%)</title><rect x="21.8" y="309" width="6.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="24.81" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="405" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1186.82" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::create_new_data_packet (80,808,080 samples, 0.38%)</title><rect x="263.0" y="389" width="4.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="265.98" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="26.9" y="53" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.87" y="63.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.05%)</title><rect x="279.3" y="357" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="282.28" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="362.5" y="341" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="365.48" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (80,808,080 samples, 0.38%)</title><rect x="1155.7" y="389" width="4.5" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1158.71" y="399.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="276.5" y="341" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="279.47" y="351.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.24%)</title><rect x="312.4" y="389" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="315.45" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1120.3" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1123.29" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="817.3" y="309" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="820.28" y="319.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1120.9" y="325" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1123.85" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,777,777,740 samples, 17.82%)</title><rect x="603.7" y="373" width="210.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="606.65" y="383.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="485" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="245" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="255.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="35.9" y="389" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="38.86" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (70,707,070 samples, 0.33%)</title><rect x="1114.1" y="357" width="3.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1117.11" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.67%)</title><rect x="574.4" y="357" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.42" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (30,303,030 samples, 0.14%)</title><rect x="365.9" y="389" width="1.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="368.86" y="399.5" ></text>
</g>
<g >
<title>cfree (727,272,720 samples, 3.43%)</title><rect x="215.8" y="405" width="40.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="218.76" y="415.5" >cfree</text>
</g>
<g >
<title>sim::Link::arrive (242,424,240 samples, 1.14%)</title><rect x="269.7" y="389" width="13.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="272.72" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.05%)</title><rect x="1151.8" y="357" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1154.77" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="25.2" y="69" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.18" y="79.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.19%)</title><rect x="815.6" y="341" width="2.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="818.59" y="351.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="894.9" y="325" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="897.86" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.14%)</title><rect x="1164.7" y="389" width="1.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1167.70" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="358.5" y="341" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="361.55" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="352.9" y="357" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="355.93" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="149" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.75" y="159.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="341" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1145.78" y="351.5" ></text>
</g>
<g >
<title>cfree (303,030,300 samples, 1.43%)</title><rect x="565.4" y="373" width="16.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="568.43" y="383.5" ></text>
</g>
<g >
<title>_start (21,181,817,970 samples, 99.90%)</title><rect x="11.1" y="501" width="1178.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.12" y="511.5" >_start</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.29%)</title><rect x="1125.9" y="357" width="3.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1128.91" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (171,717,170 samples, 0.81%)</title><rect x="12.2" y="389" width="9.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.25" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.10%)</title><rect x="1140.0" y="373" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1142.97" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (282,828,280 samples, 1.33%)</title><rect x="21.8" y="405" width="15.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="24.81" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="355.7" y="357" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="358.74" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1172.6" y="325" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.57" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="582.3" y="373" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="585.29" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="421" width="0.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.44" y="431.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (90,909,090 samples, 0.43%)</title><rect x="1114.1" y="373" width="5.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1117.11" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1141.1" y="373" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1144.09" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.78" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="319.5" ></text>
</g>
<g >
<title>sim::Process::~Process (40,404,040 samples, 0.19%)</title><rect x="1109.6" y="405" width="2.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1112.61" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="278.7" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="281.72" y="319.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="356.3" y="357" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="359.30" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="309" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (303,030,300 samples, 1.43%)</title><rect x="548.6" y="373" width="16.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="551.56" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="207.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.38%)</title><rect x="38.7" y="421" width="4.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="41.67" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="363.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="366.04" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="309" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.13" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="213" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.19" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="261" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="373" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.44" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="1177.6" y="341" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.63" y="351.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.10%)</title><rect x="272.0" y="373" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="274.97" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="143.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="358.0" y="341" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="360.98" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="159.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.14%)</title><rect x="1143.9" y="325" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.90" y="335.5" ></text>
</g>
<g >
<title>sim::SendData::operator (323,232,320 samples, 1.52%)</title><rect x="1111.9" y="405" width="17.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1114.86" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.44" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 0.14%)</title><rect x="360.2" y="341" width="1.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="363.23" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="266.4" y="309" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="269.35" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="165" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1127.0" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1130.04" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="325" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="335.5" ></text>
</g>
<g >
<title>operator new (353,535,350 samples, 1.67%)</title><rect x="584.0" y="373" width="19.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="586.98" y="383.5" ></text>
</g>
<g >
<title>nons (21,202,019,990 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >nons</text>
</g>
<g >
<title>sim::Generate::operator (131,313,130 samples, 0.62%)</title><rect x="261.9" y="405" width="7.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="264.85" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="213" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="223.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (252,525,250 samples, 1.19%)</title><rect x="269.2" y="405" width="14.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="272.16" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (292,929,290 samples, 1.38%)</title><rect x="319.2" y="389" width="16.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="322.19" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="316.9" y="389" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="319.95" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.24%)</title><rect x="360.2" y="357" width="2.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="363.23" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.10%)</title><rect x="11.1" y="373" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.12" y="383.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1116.9" y="341" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1119.92" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1149.5" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1152.52" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1145.0" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.03" y="287.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (40,404,040 samples, 0.19%)</title><rect x="1151.8" y="389" width="2.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1154.77" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.89" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="213" width="1.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.75" y="223.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1138.8" y="373" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1141.84" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="819.0" y="341" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="821.97" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="213" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.89" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.05%)</title><rect x="363.0" y="357" width="0.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="366.04" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="275.3" y="341" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="278.35" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (111,111,110 samples, 0.52%)</title><rect x="21.8" y="389" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="24.81" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.48%)</title><rect x="22.4" y="149" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.37" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="223.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,949,494,840 samples, 51.64%)</title><rect x="387.2" y="389" width="609.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="390.22" y="399.5" >sim::Switch::process</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.14%)</title><rect x="1123.7" y="325" width="1.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1126.66" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1143.9" y="293" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.90" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="30.2" y="309" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.24" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="341" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="351.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1150.1" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.09" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="405" width="0.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.44" y="415.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.10%)</title><rect x="582.9" y="373" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="585.85" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="360.8" y="261" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="363.80" y="271.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="364.7" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="367.73" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="264.7" y="325" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="267.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="149" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="357.4" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="360.42" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="268.6" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="271.60" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="293" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="363.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="366.04" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1141.1" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1144.09" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.14%)</title><rect x="1184.4" y="229" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.38" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1139.4" y="373" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1142.40" y="383.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="813.9" y="373" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="816.91" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1113.5" y="373" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1116.54" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.05%)</title><rect x="894.9" y="357" width="0.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="897.86" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (30,303,030 samples, 0.14%)</title><rect x="283.2" y="405" width="1.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="286.22" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="278.7" y="325" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="281.72" y="335.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (30,303,030 samples, 0.14%)</title><rect x="1133.8" y="405" width="1.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1136.78" y="415.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.19%)</title><rect x="1177.6" y="373" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.63" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="325" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1182.32" y="335.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.10%)</title><rect x="315.8" y="389" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="318.82" y="399.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="817.8" y="357" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="820.84" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1160.2" y="373" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1163.20" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="309" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.27" y="319.5" ></text>
</g>
<g >
<title>sim::Link::transmit (10,101,010 samples, 0.05%)</title><rect x="283.8" y="389" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="286.78" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="181" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.63" y="191.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1149.5" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1152.52" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="364.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="367.73" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.10%)</title><rect x="1120.3" y="341" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1123.29" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.19%)</title><rect x="1120.3" y="357" width="2.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1123.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="813.9" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="816.91" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.43%)</title><rect x="22.9" y="133" width="5.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.93" y="143.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (60,606,060 samples, 0.29%)</title><rect x="1186.1" y="261" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="814.5" y="357" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="817.47" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="358.5" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="361.55" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.14%)</title><rect x="790.9" y="357" width="1.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="793.86" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="353.5" y="357" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="356.49" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="373" width="5.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1187.38" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="266.9" y="309" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="269.91" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="364.2" y="181" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="367.17" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.33%)</title><rect x="30.8" y="293" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.80" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="101" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="111.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1181.0" y="389" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.01" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.43%)</title><rect x="22.9" y="101" width="5.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.93" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="1123.7" y="309" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1126.66" y="319.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.10%)</title><rect x="11.1" y="357" width="1.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.12" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="223.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1138.3" y="389" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1141.28" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="213.5" y="405" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="216.51" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="277.0" y="357" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="280.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.19" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="24.1" y="85" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.05" y="95.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (30,303,030 samples, 0.14%)</title><rect x="267.5" y="389" width="1.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="270.47" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 0.10%)</title><rect x="1184.4" y="197" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.38" y="207.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="894.9" y="309" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="897.86" y="319.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.10%)</title><rect x="1136.0" y="421" width="48.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1139.03" y="431.5" >sim:..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (121,212,120 samples, 0.57%)</title><rect x="29.1" y="389" width="6.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="32.11" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="352.4" y="357" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="355.36" y="367.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="1113.0" y="373" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1115.98" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="133" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.88" y="143.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.10%)</title><rect x="1154.6" y="389" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1157.58" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="361.4" y="325" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="364.36" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (21,181,817,970 samples, 99.90%)</title><rect x="11.1" y="485" width="1178.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.12" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.19" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,303,030,290 samples, 6.15%)</title><rect x="819.5" y="373" width="72.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="822.53" y="383.5" >sim::Rou..</text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="262.4" y="389" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="265.42" y="399.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1125.4" y="357" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1128.35" y="367.5" ></text>
</g>
<g >
<title>sim::Host::process (303,030,300 samples, 1.43%)</title><rect x="349.0" y="389" width="16.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="351.99" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="197" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1190.19" y="207.5" ></text>
</g>
<g >
<title>operator new (383,838,380 samples, 1.81%)</title><rect x="792.5" y="357" width="21.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="795.54" y="367.5" >o..</text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.24%)</title><rect x="264.7" y="341" width="2.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="267.66" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.43%)</title><rect x="22.9" y="117" width="5.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.93" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="261" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.78" y="335.5" ></text>
</g>
<g >
<title>sim::Host::~Host (90,909,090 samples, 0.43%)</title><rect x="12.2" y="373" width="5.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.25" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="363.0" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="366.04" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="28.0" y="389" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="30.99" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (10,101,010 samples, 0.05%)</title><rect x="1164.1" y="389" width="0.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1167.14" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="389" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.19" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.48%)</title><rect x="29.1" y="325" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.11" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.91%)</title><rect x="11.1" y="437" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (80,808,080 samples, 0.38%)</title><rect x="360.2" y="373" width="4.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="363.23" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.19" y="287.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.10%)</title><rect x="1186.1" y="213" width="1.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.06" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.33%)</title><rect x="21.8" y="437" width="15.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="24.81" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="360.8" y="293" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="363.80" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (10,101,010 samples, 0.05%)</title><rect x="894.9" y="373" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="897.86" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 1.29%)</title><rect x="241.1" y="389" width="15.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="244.05" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.05%)</title><rect x="1119.2" y="357" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1122.17" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.14%)</title><rect x="1184.4" y="261" width="1.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.38" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="69" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="79.5" ></text>
</g>
<g >
<title>malloc (383,838,380 samples, 1.81%)</title><rect x="1088.2" y="357" width="21.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.25" y="367.5" >m..</text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.91%)</title><rect x="11.1" y="453" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="463.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="417.0" y="373" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="420.01" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (373,737,370 samples, 1.76%)</title><rect x="729.0" y="341" width="20.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="732.02" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="197" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="309" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.24%)</title><rect x="892.0" y="373" width="2.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="895.05" y="383.5" ></text>
</g>
<g >
<title>_IO_file_fopen (111,111,110 samples, 0.52%)</title><rect x="21.8" y="341" width="6.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="24.81" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="1169.8" y="325" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.76" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (40,404,040 samples, 0.19%)</title><rect x="1179.9" y="405" width="2.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.88" y="415.5" ></text>
</g>
<g >
<title>fopen (111,111,110 samples, 0.52%)</title><rect x="21.8" y="357" width="6.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="24.81" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.78" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="1128.2" y="341" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1131.16" y="351.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="280.4" y="357" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="283.40" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="11.1" y="389" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.12" y="399.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.05%)</title><rect x="34.7" y="357" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="37.74" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="271.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="421" width="5.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.38" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.14%)</title><rect x="273.1" y="373" width="1.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="276.10" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.89" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1170.3" y="261" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.4" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.43" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="229" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="255.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.43%)</title><rect x="814.5" y="373" width="5.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="817.47" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.14%)</title><rect x="623.3" y="357" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="626.33" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (191,919,190 samples, 0.91%)</title><rect x="11.1" y="405" width="10.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.12" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="364.2" y="229" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="367.17" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (60,606,060 samples, 0.29%)</title><rect x="1160.8" y="389" width="3.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1163.77" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1150.1" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.09" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="223.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (50,505,050 samples, 0.24%)</title><rect x="264.7" y="357" width="2.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="267.66" y="367.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.05%)</title><rect x="28.6" y="373" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="31.55" y="383.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="894.9" y="341" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="897.86" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1123.1" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.10" y="351.5" ></text>
</g>
<g >
<title>malloc (202,020,200 samples, 0.95%)</title><rect x="592.4" y="357" width="11.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="595.41" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1127.6" y="341" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1130.60" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.78" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (171,717,170 samples, 0.81%)</title><rect x="377.7" y="389" width="9.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="380.66" y="399.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1177.6" y="357" width="2.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.63" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.05%)</title><rect x="318.6" y="389" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="321.63" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="363.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="366.04" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.14%)</title><rect x="275.3" y="357" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="278.35" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1149.5" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1152.52" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="357" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 0.57%)</title><rect x="29.1" y="373" width="6.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="32.11" y="383.5" ></text>
</g>
<g >
<title>cfree (363,636,360 samples, 1.72%)</title><rect x="769.5" y="357" width="20.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="772.49" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="17.3" y="341" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.31" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (20,202,020 samples, 0.10%)</title><rect x="1152.3" y="357" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1155.33" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (10,101,010 samples, 0.05%)</title><rect x="315.3" y="389" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="318.26" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="361.4" y="309" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="364.36" y="319.5" ></text>
</g>
<g >
<title>sim::Process::~Process (70,707,070 samples, 0.33%)</title><rect x="101.1" y="421" width="3.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="104.07" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1118.0" y="357" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1121.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="213" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="223.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.24%)</title><rect x="414.2" y="373" width="2.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="417.20" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="360.2" y="325" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="363.23" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="34.2" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.17" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1170.3" y="277" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.32" y="287.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1143.9" y="341" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.90" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.81%)</title><rect x="1119.7" y="373" width="9.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1122.73" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="360.8" y="277" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="363.80" y="287.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1158.0" y="357" width="0.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1160.96" y="367.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (111,111,110 samples, 0.52%)</title><rect x="21.8" y="373" width="6.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="24.81" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="197" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="207.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="263.5" y="357" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="266.54" y="367.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.91%)</title><rect x="11.1" y="421" width="10.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.12" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="165" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="175.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,818,181,670 samples, 69.89%)</title><rect x="284.9" y="405" width="824.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="287.90" y="415.5" >sim::Process::operator</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.14%)</title><rect x="1143.9" y="357" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1146.90" y="367.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="389" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1154.21" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1111.9" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1114.86" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="816.7" y="325" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="819.72" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (80,808,080 samples, 0.38%)</title><rect x="373.2" y="389" width="4.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="376.16" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="1169.8" y="341" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.76" y="351.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="279.8" y="357" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="282.84" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.10%)</title><rect x="1186.1" y="229" width="1.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.06" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="229" width="2.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.19" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="469" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="1123.7" y="341" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1126.66" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1153.5" y="373" width="0.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1156.46" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="350.1" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.11" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="278.7" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="281.72" y="287.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="349.0" y="373" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="351.99" y="383.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (171,717,170 samples, 0.81%)</title><rect x="1136.6" y="405" width="9.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1139.59" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1160.2" y="389" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1163.20" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1113.5" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1116.54" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.05%)</title><rect x="365.3" y="373" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="368.29" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="181" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.14%)</title><rect x="776.2" y="341" width="13.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="779.24" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="1169.8" y="309" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.76" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="245" width="2.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.19" y="255.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::~TcpFlow (80,808,080 samples, 0.38%)</title><rect x="17.3" y="373" width="4.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="20.31" y="383.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="11.1" y="341" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.12" y="351.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1150.1" y="373" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.09" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="35.3" y="357" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="38.30" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="281.5" y="341" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="284.53" y="351.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 0.10%)</title><rect x="1184.4" y="181" width="1.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.38" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="165" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.75" y="175.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (313,131,310 samples, 1.48%)</title><rect x="531.1" y="357" width="17.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="534.13" y="367.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1184.4" y="213" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.38" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.05%)</title><rect x="361.9" y="341" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="364.92" y="351.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (242,424,240 samples, 1.14%)</title><rect x="335.5" y="389" width="13.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="338.50" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (121,212,120 samples, 0.57%)</title><rect x="1138.8" y="389" width="6.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1141.84" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="501" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.27" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.14%)</title><rect x="1158.5" y="373" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1161.52" y="383.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="270.8" y="373" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="273.85" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="293" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="303.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.3" y="373" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1132.29" y="383.5" ></text>
</g>
<g >
<title>operator new (424,242,420 samples, 2.00%)</title><rect x="1086.0" y="373" width="23.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1089.00" y="383.5" >o..</text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (30,303,030 samples, 0.14%)</title><rect x="273.1" y="357" width="1.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="276.10" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="274.8" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="277.78" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (313,131,310 samples, 1.48%)</title><rect x="1112.4" y="389" width="17.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1115.42" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="37.0" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.98" y="367.5" ></text>
</g>
<g >
<title>all (21,202,019,990 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="351.2" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="354.24" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="357" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1121.60" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="818.4" y="357" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="821.40" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (21,181,817,970 samples, 99.90%)</title><rect x="11.1" y="469" width="1178.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.48%)</title><rect x="1184.4" y="437" width="5.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.38" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="223.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1169.2" y="373" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.20" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="361.4" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="364.36" y="303.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1172.6" y="357" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1175.57" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="207.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.14%)</title><rect x="1172.6" y="341" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.57" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="265.2" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="268.23" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 0.67%)</title><rect x="1166.4" y="389" width="7.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1169.39" y="399.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.38%)</title><rect x="17.3" y="357" width="4.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.31" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1116.9" y="325" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1119.92" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="37.0" y="373" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="39.98" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.32" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1141.1" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.09" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (101,010,100 samples, 0.48%)</title><rect x="1174.3" y="389" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.26" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="364.2" y="133" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="367.17" y="143.5" ></text>
</g>
<g >
<title>main (20,989,898,780 samples, 99.00%)</title><rect x="21.8" y="453" width="1168.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.81" y="463.5" >main</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="274.8" y="341" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="277.78" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="21.2" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.24" y="319.5" ></text>
</g>
<g >
<title>_IO_file_open (111,111,110 samples, 0.52%)</title><rect x="21.8" y="325" width="6.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="24.81" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="165" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.63" y="175.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="197" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.75" y="207.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="351.8" y="373" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="354.80" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="359.7" y="373" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="362.67" y="383.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.33%)</title><rect x="21.8" y="421" width="15.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="24.81" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.14%)</title><rect x="1184.4" y="245" width="1.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.38" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="273.1" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="276.10" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="277" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="263.5" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="266.54" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="281.0" y="357" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="283.97" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="16.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.75" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1192.44" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="309" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.69" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.67%)</title><rect x="274.8" y="373" width="7.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="277.78" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1154.0" y="389" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1157.02" y="399.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="1121.4" y="341" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1124.41" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.52%)</title><rect x="21.8" y="245" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.81" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="16.7" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.75" y="367.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (606,060,600 samples, 2.86%)</title><rect x="1146.2" y="405" width="33.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1149.15" y="415.5" >si..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="360.8" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="363.80" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="363.6" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="366.61" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="1122.5" y="357" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1125.54" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="264.1" y="357" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="267.10" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (101,010,100 samples, 0.48%)</title><rect x="367.5" y="389" width="5.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="370.54" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="1169.8" y="293" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.76" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (30,303,030 samples, 0.14%)</title><rect x="1151.8" y="373" width="1.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1154.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="364.2" y="85" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="367.17" y="95.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="815.0" y="357" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="818.03" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1160.2" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.20" y="367.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="364.2" y="341" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="367.17" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.48%)</title><rect x="29.1" y="341" width="5.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="32.11" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.69" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.19%)</title><rect x="265.2" y="325" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="268.23" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="197" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.63" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.62%)</title><rect x="352.4" y="373" width="7.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="355.36" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="274.8" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="277.78" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="271.4" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="274.41" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1117.5" y="341" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1120.48" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="175.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="405" width="5.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1187.38" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="383.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1142.8" y="357" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.78" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="789.7" y="357" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="792.73" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="127.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::try_to_put_data_to_device (80,808,080 samples, 0.38%)</title><rect x="263.0" y="373" width="4.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="265.98" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="364.2" y="277" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="367.17" y="287.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.05%)</title><rect x="1145.6" y="389" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1148.59" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (10,101,010 samples, 0.05%)</title><rect x="37.5" y="437" width="0.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="40.55" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.48%)</title><rect x="29.1" y="357" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="32.11" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="363.0" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="366.04" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.10%)</title><rect x="273.7" y="341" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="276.66" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="32.5" y="277" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.49" y="287.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (18,515,151,330 samples, 87.33%)</title><rect x="105.0" y="421" width="1030.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="108.01" y="431.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="191.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,030,303,010 samples, 9.58%)</title><rect x="996.6" y="389" width="113.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="999.61" y="399.5" >void sim::Sch..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="341" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1159.27" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="354.6" y="341" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="357.61" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (20,202,020 samples, 0.10%)</title><rect x="363.6" y="357" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="366.61" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (10,101,010 samples, 0.05%)</title><rect x="364.7" y="373" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="367.73" y="383.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="309" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1182.32" y="319.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="1122.0" y="341" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1124.98" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="265.8" y="309" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="268.79" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.24%)</title><rect x="1155.7" y="373" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1158.71" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.10%)</title><rect x="1156.8" y="357" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.83" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.19" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="282.7" y="373" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="285.65" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="364.2" y="117" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="367.17" y="127.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (101,010,100 samples, 0.48%)</title><rect x="256.2" y="405" width="5.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="259.23" y="415.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="1119.2" y="373" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1122.17" y="383.5" ></text>
</g>
<g >
<title>Logger::warn (2,343,434,320 samples, 11.05%)</title><rect x="418.1" y="373" width="130.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="421.14" y="383.5" >Logger::warn</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="268.6" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="271.60" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.14%)</title><rect x="1182.1" y="405" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.13" y="415.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="389" width="5.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1187.38" y="399.5" ></text>
</g>
<g >
<title>Logger::info (2,242,424,220 samples, 10.58%)</title><rect x="625.0" y="357" width="124.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="628.02" y="367.5" >Logger::info</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="360.8" y="245" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="363.80" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.19%)</title><rect x="1172.0" y="373" width="2.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1175.01" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1159.27" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="278.7" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="281.72" y="303.5" ></text>
</g>
<g >
<title>sim::Process::operator (101,010,100 samples, 0.48%)</title><rect x="95.5" y="421" width="5.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="98.45" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (939,393,930 samples, 4.43%)</title><rect x="43.2" y="421" width="52.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="46.17" y="431.5" >sim::..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1184.4" y="293" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.38" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.10%)</title><rect x="1186.1" y="245" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.06" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.10%)</title><rect x="1124.2" y="309" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1127.23" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.69" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (20,595,959,390 samples, 97.14%)</title><rect x="38.1" y="437" width="1146.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="41.11" y="447.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="17.3" y="325" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.31" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="268.6" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="271.60" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="181" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.75" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.34" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1141.1" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.09" y="367.5" ></text>
</g>
<g >
<title>malloc (292,929,290 samples, 1.38%)</title><rect x="797.6" y="341" width="16.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="800.60" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,818,181,800 samples, 8.58%)</title><rect x="895.4" y="373" width="101.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="898.42" y="383.5" >std::_Rb_tre..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="352.9" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="355.93" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.33%)</title><rect x="1141.7" y="373" width="3.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1144.65" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="240.5" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="243.49" y="399.5" ></text>
</g>
</g>
</svg>
