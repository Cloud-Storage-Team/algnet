<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="501" width="5.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1187.23" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="453" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.23" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.10%)</title><rect x="883.8" y="485" width="1.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="886.75" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="277" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.85" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="379.7" y="437" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="382.69" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="415.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="820.9" y="469" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="823.89" y="479.5" ></text>
</g>
<g >
<title>utils::create_all_directories (10,101,010 samples, 0.05%)</title><rect x="36.0" y="501" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="38.95" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (282,828,280 samples, 1.37%)</title><rect x="236.7" y="501" width="16.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="239.66" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1145.0" y="485" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1148.01" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="1124.3" y="469" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1127.25" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 0.20%)</title><rect x="282.2" y="517" width="2.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="285.22" y="527.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (40,404,040 samples, 0.20%)</title><rect x="386.0" y="453" width="2.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="389.03" y="463.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.10%)</title><rect x="438.5" y="485" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="441.51" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="453" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.78" y="463.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (181,818,180 samples, 0.88%)</title><rect x="10.6" y="533" width="10.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.58" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1185.4" y="229" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.39" y="239.5" ></text>
</g>
<g >
<title>all (20,666,666,460 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="421" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.23" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1142.1" y="421" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.13" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="309" width="1.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.81" y="319.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,090,908,890 samples, 97.21%)</title><rect x="37.1" y="549" width="1147.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="40.11" y="559.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="33.6" y="389" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.65" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1185.4" y="261" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.39" y="271.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="384.3" y="453" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="387.30" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.66" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.10%)</title><rect x="10.6" y="485" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.58" y="495.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.15%)</title><rect x="1131.2" y="517" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1134.17" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1185.4" y="245" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.39" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (151,515,150 samples, 0.73%)</title><rect x="1159.4" y="501" width="8.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1162.43" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="309" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1140.4" y="469" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.40" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1142.1" y="405" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.13" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.15%)</title><rect x="268.4" y="485" width="1.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="271.38" y="495.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (20,202,020 samples, 0.10%)</title><rect x="1148.5" y="501" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1151.48" y="511.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="517" width="0.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1186.66" y="527.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (282,828,280 samples, 1.37%)</title><rect x="266.1" y="517" width="16.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="269.07" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.39%)</title><rect x="22.7" y="213" width="4.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.69" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="1165.8" y="421" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.78" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.29%)</title><rect x="1164.6" y="485" width="3.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1167.62" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="293" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="303.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,404,040,260 samples, 69.70%)</title><rect x="284.5" y="517" width="822.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="287.53" y="527.5" >sim::Process::operator</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="271.8" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="274.84" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.34%)</title><rect x="1120.2" y="469" width="4.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1123.22" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,646,464,610 samples, 17.64%)</title><rect x="610.4" y="485" width="208.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="613.38" y="495.5" >sim::Link::get_packet</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (131,313,130 samples, 0.64%)</title><rect x="401.6" y="501" width="7.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="404.60" y="511.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.05%)</title><rect x="36.5" y="517" width="0.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="39.53" y="527.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="260.3" y="437" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="263.30" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="255.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="325" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1187.23" y="335.5" ></text>
</g>
<g >
<title>sim::Process::~Process (101,010,100 samples, 0.49%)</title><rect x="1107.0" y="517" width="5.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1109.95" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="222.2" y="517" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="225.24" y="527.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="388.9" y="485" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="391.91" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="255.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (30,303,030 samples, 0.15%)</title><rect x="1115.6" y="453" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1118.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="175.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.20%)</title><rect x="382.0" y="453" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="384.99" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="383.7" y="437" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="386.72" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="27.3" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="30.30" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="373" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="16.3" y="437" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.34" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="261" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1187.23" y="271.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.49%)</title><rect x="1184.2" y="549" width="5.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.23" y="559.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="1115.6" y="437" width="1.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1118.60" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 0.15%)</title><rect x="1186.5" y="341" width="1.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.54" y="351.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1176.7" y="501" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1179.74" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.88%)</title><rect x="10.6" y="565" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="575.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="11.2" y="453" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.15" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="453" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="379.1" y="469" width="1.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="382.11" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="822.0" y="469" width="1.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="825.04" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (111,111,110 samples, 0.54%)</title><rect x="258.6" y="485" width="6.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="261.57" y="495.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.85" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="31.3" y="437" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.34" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="35.4" y="501" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="38.38" y="511.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="819.2" y="469" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="822.16" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="405" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.10%)</title><rect x="1118.5" y="453" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1121.48" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1175.6" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.58" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.31" y="495.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="999.7" y="485" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1002.68" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="293" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.85" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1154.2" y="485" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1157.24" y="495.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.05%)</title><rect x="21.5" y="501" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="24.53" y="511.5" ></text>
</g>
<g >
<title>sim::Process::~Process (161,616,160 samples, 0.78%)</title><rect x="113.8" y="533" width="9.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="116.81" y="543.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.10%)</title><rect x="395.3" y="501" width="1.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="398.26" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="383.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="277" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.23" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (101,010,100 samples, 0.49%)</title><rect x="1138.1" y="501" width="5.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1141.09" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="262.0" y="437" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="265.03" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="303.5" ></text>
</g>
<g >
<title>cfree (60,606,060 samples, 0.29%)</title><rect x="38.3" y="533" width="3.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="41.26" y="543.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.05%)</title><rect x="30.8" y="485" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="33.76" y="495.5" ></text>
</g>
<g >
<title>sim::Event::get_time (40,404,040 samples, 0.20%)</title><rect x="47.5" y="533" width="2.3" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="50.49" y="543.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="888.4" y="437" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="891.37" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="387.8" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="390.76" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.44%)</title><rect x="271.3" y="469" width="5.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="274.26" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="357" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="367.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="799.6" y="469" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="802.55" y="479.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="282.8" y="501" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="285.80" y="511.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.15%)</title><rect x="313.9" y="501" width="1.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="316.94" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="277" width="1.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.81" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.05%)</title><rect x="36.0" y="485" width="0.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="38.95" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="191.5" ></text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 0.15%)</title><rect x="1143.9" y="501" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1146.86" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="389" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.23" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="275.9" y="453" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="278.87" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1123.1" y="421" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1126.10" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.05%)</title><rect x="387.8" y="421" width="0.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="390.76" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="34.2" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.22" y="383.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="1165.2" y="453" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.20" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.88%)</title><rect x="10.6" y="549" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="559.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (70,707,070 samples, 0.34%)</title><rect x="252.8" y="517" width="4.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="255.81" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="261" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.85" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="517" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1186.08" y="527.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="383.1" y="421" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="386.15" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.44%)</title><rect x="396.4" y="501" width="5.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="399.41" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="95.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.29%)</title><rect x="31.3" y="453" width="3.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="34.34" y="463.5" ></text>
</g>
<g >
<title>fopen (90,909,090 samples, 0.44%)</title><rect x="22.1" y="469" width="5.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="25.11" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="823.8" y="469" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="826.77" y="479.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1142.1" y="453" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.13" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1119.6" y="453" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1122.64" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="37.7" y="533" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.68" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.34%)</title><rect x="23.3" y="197" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.26" y="207.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.39%)</title><rect x="1184.8" y="389" width="4.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.81" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.15%)</title><rect x="1118.5" y="469" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1121.48" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="1126.6" y="453" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1129.56" y="463.5" ></text>
</g>
<g >
<title>sim::Event::Event (30,303,030 samples, 0.15%)</title><rect x="323.7" y="501" width="1.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="326.74" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="341" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.85" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="469" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.42" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="26.1" y="101" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.15" y="111.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="609.8" y="485" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="612.80" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.78" y="447.5" ></text>
</g>
<g >
<title>main (20,474,747,270 samples, 99.07%)</title><rect x="21.0" y="565" width="1169.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="23.96" y="575.5" >main</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="31.9" y="421" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.92" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.78" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1144.4" y="485" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1147.44" y="495.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,353,535,250 samples, 50.10%)</title><rect x="409.7" y="501" width="591.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="412.68" y="511.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="18.1" y="421" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.07" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="382.0" y="437" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="384.99" y="447.5" ></text>
</g>
<g >
<title>malloc (131,313,130 samples, 0.64%)</title><rect x="602.3" y="469" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="605.31" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="385.5" y="421" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="388.45" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (30,303,030 samples, 0.15%)</title><rect x="1132.9" y="517" width="1.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1135.90" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="106.3" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.31" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.66" y="479.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="818.0" y="469" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="821.01" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (30,303,030 samples, 0.15%)</title><rect x="1150.2" y="485" width="1.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1153.21" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="385.5" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="388.45" y="351.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (545,454,540 samples, 2.64%)</title><rect x="325.5" y="501" width="31.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="328.47" y="511.5" >si..</text>
</g>
<g >
<title>sim::IdentifierFactory::add_object (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="501" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1192.42" y="511.5" ></text>
</g>
<g >
<title>_start (20,656,565,450 samples, 99.95%)</title><rect x="10.6" y="613" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.58" y="623.5" >_start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="385.5" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="388.45" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="385.5" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="388.45" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="293" width="1.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.81" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.05%)</title><rect x="27.3" y="485" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="30.30" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.05%)</title><rect x="21.5" y="469" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="24.53" y="479.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 0.98%)</title><rect x="598.3" y="485" width="11.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="601.27" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.15%)</title><rect x="274.1" y="437" width="1.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="277.14" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (70,707,070 samples, 0.34%)</title><rect x="31.3" y="485" width="4.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="34.34" y="495.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.39%)</title><rect x="380.8" y="469" width="4.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="383.84" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.37%)</title><rect x="21.0" y="549" width="16.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="23.96" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.3" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.28" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.05%)</title><rect x="269.5" y="453" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="272.53" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="485" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.42" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="1162.3" y="453" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.32" y="463.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (242,424,240 samples, 1.17%)</title><rect x="542.9" y="469" width="13.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="545.90" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.39%)</title><rect x="22.7" y="229" width="4.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.69" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.10%)</title><rect x="281.1" y="485" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="284.07" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="319.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="517" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.42" y="527.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.39%)</title><rect x="16.3" y="469" width="4.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.34" y="479.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.15%)</title><rect x="1186.5" y="357" width="1.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.54" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="106.3" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.31" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.20%)</title><rect x="1125.4" y="469" width="2.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1128.41" y="479.5" ></text>
</g>
<g >
<title>sim::Host::process (272,727,270 samples, 1.32%)</title><rect x="373.9" y="501" width="15.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="376.92" y="511.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="277.0" y="469" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="280.03" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1140.4" y="437" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.40" y="447.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (313,131,310 samples, 1.52%)</title><rect x="1112.7" y="501" width="17.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1115.72" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="447.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (141,414,140 samples, 0.68%)</title><rect x="1137.5" y="517" width="8.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1140.52" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="283.9" y="485" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="286.95" y="495.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="1130.0" y="485" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1133.02" y="495.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="320.9" y="501" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="323.86" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.05%)</title><rect x="1130.6" y="501" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1133.60" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (10,101,010 samples, 0.05%)</title><rect x="263.8" y="469" width="0.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="266.76" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="261.5" y="421" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="264.46" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (101,010,100 samples, 0.49%)</title><rect x="389.5" y="501" width="5.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="392.49" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="276.5" y="469" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="279.45" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="379.7" y="453" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="382.69" y="463.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1186.5" y="309" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.54" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.15%)</title><rect x="1176.2" y="517" width="1.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.16" y="527.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1149.6" y="501" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1152.63" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="271.95" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.20%)</title><rect x="27.9" y="501" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="30.88" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="373" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.23" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="367.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.34%)</title><rect x="594.2" y="485" width="4.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="597.23" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.10%)</title><rect x="888.9" y="469" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="891.94" y="479.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.15%)</title><rect x="439.7" y="485" width="1.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="442.67" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="325" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="335.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.20%)</title><rect x="797.2" y="469" width="2.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="800.24" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="375.7" y="485" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="378.65" y="495.5" ></text>
</g>
<g >
<title>sim::SendData::operator (323,232,320 samples, 1.56%)</title><rect x="1112.7" y="517" width="18.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1115.72" y="527.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="822.6" y="453" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="825.62" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1123.7" y="453" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1126.68" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="259.7" y="437" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="262.73" y="447.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="267.8" y="485" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="270.80" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="485" width="5.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1187.23" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,303,030 samples, 0.15%)</title><rect x="1154.8" y="501" width="1.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1157.82" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.20%)</title><rect x="1121.4" y="437" width="2.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1124.37" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.68%)</title><rect x="789.2" y="453" width="8.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="792.17" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (141,414,140 samples, 0.68%)</title><rect x="1168.1" y="501" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.08" y="511.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="888.4" y="421" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="891.37" y="431.5" ></text>
</g>
<g >
<title>sim::Generate::operator (161,616,160 samples, 0.78%)</title><rect x="256.8" y="517" width="9.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="259.84" y="527.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (111,111,110 samples, 0.54%)</title><rect x="258.6" y="501" width="6.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="261.57" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,919,191,900 samples, 9.29%)</title><rect x="890.1" y="485" width="109.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="893.10" y="495.5" >std::_Rb_tree..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="25.6" y="133" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.57" y="143.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="30.2" y="501" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="33.19" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="341" width="0.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1187.23" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="263.8" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="266.76" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="269.0" y="437" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="271.95" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.15%)</title><rect x="1177.9" y="517" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1180.89" y="527.5" ></text>
</g>
<g >
<title>cfree (272,727,270 samples, 1.32%)</title><rect x="577.5" y="485" width="15.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="580.51" y="495.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.20%)</title><rect x="1134.6" y="533" width="49.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1137.63" y="543.5" >sim::..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="36.5" y="485" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="39.53" y="495.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="1119.6" y="437" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1122.64" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="269.0" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="271.95" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="377.4" y="469" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="380.38" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (50,505,050 samples, 0.24%)</title><rect x="1120.8" y="453" width="2.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1123.79" y="463.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="1117.9" y="469" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1120.91" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.29%)</title><rect x="31.3" y="469" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="34.34" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="127.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="277.6" y="469" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="280.61" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="274.7" y="421" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="277.72" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="549" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,656,565,450 samples, 99.95%)</title><rect x="10.6" y="581" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="591.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1148.5" y="485" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1151.48" y="495.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1142.1" y="437" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1145.13" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.78%)</title><rect x="1118.5" y="485" width="9.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1121.48" y="495.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="280.5" y="485" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="283.49" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="277" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="287.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.20%)</title><rect x="630.6" y="469" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="633.57" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,101,010 samples, 0.05%)</title><rect x="387.8" y="437" width="0.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="390.76" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="106.3" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.31" y="495.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.39%)</title><rect x="259.1" y="469" width="4.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="262.15" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1187.1" y="277" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.12" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="255.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (20,202,020 samples, 0.10%)</title><rect x="264.9" y="501" width="1.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="267.92" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (80,808,080 samples, 0.39%)</title><rect x="30.8" y="501" width="4.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="33.76" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="16.3" y="453" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.34" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.98%)</title><rect x="581.5" y="469" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="584.54" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="263.8" y="453" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="266.76" y="463.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.05%)</title><rect x="21.5" y="485" width="0.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="24.53" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="15.8" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.77" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.24%)</title><rect x="1186.5" y="373" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.54" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="29.6" y="485" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="32.61" y="495.5" ></text>
</g>
<g >
<title>open64 (90,909,090 samples, 0.44%)</title><rect x="22.1" y="421" width="5.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="25.11" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="437" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="447.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="1128.3" y="469" width="1.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1131.29" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1127.1" y="437" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1130.14" y="447.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="816.9" y="469" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="819.85" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="207.5" ></text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.05%)</title><rect x="21.5" y="453" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="24.53" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (60,606,060 samples, 0.29%)</title><rect x="885.5" y="469" width="3.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="888.48" y="479.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="258.0" y="501" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="261.00" y="511.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="501" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1150.90" y="511.5" ></text>
</g>
<g >
<title>sim::Link::transmit (20,202,020 samples, 0.10%)</title><rect x="283.4" y="501" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="286.37" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="823.2" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="826.20" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.05%)</title><rect x="275.3" y="421" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="278.30" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (80,808,080 samples, 0.39%)</title><rect x="16.3" y="485" width="4.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="19.34" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="501" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.66" y="511.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="533" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.42" y="543.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="1161.7" y="469" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1164.74" y="479.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="1173.3" y="469" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.27" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="389" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="399.5" ></text>
</g>
<g >
<title>_IO_file_open (90,909,090 samples, 0.44%)</title><rect x="22.1" y="437" width="5.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="25.11" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="1122.5" y="421" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1125.52" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="24.4" y="165" width="2.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.42" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (60,606,060 samples, 0.29%)</title><rect x="1179.6" y="517" width="3.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1182.62" y="527.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="265.5" y="485" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="268.49" y="495.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.05%)</title><rect x="257.4" y="501" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="260.42" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.44%)</title><rect x="819.2" y="485" width="5.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="822.16" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="279.3" y="453" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="282.34" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="1156.5" y="501" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1159.55" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="26.1" y="117" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.15" y="127.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1136.9" y="517" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1139.94" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.15%)</title><rect x="1142.1" y="469" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1145.13" y="479.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="821.5" y="469" width="0.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="824.47" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="385.5" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="388.45" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.2" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.15" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="262.6" y="453" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="265.61" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.29%)</title><rect x="259.1" y="453" width="3.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="262.15" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="259.1" y="437" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="262.15" y="447.5" ></text>
</g>
<g >
<title>malloc (252,525,250 samples, 1.22%)</title><rect x="802.4" y="453" width="14.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="805.43" y="463.5" ></text>
</g>
<g >
<title>Logger::info (2,141,414,120 samples, 10.36%)</title><rect x="632.9" y="469" width="122.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="635.87" y="479.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="565" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="485" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.66" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="351.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="533" width="5.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.23" y="543.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (10,101,010 samples, 0.05%)</title><rect x="106.9" y="533" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="109.89" y="543.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (90,909,090 samples, 0.44%)</title><rect x="22.1" y="485" width="5.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="25.11" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="10.6" y="501" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="31.9" y="405" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.92" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="387.8" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="390.76" y="399.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (303,030,300 samples, 1.47%)</title><rect x="356.6" y="501" width="17.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="359.62" y="511.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="593.1" y="485" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="596.08" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="106.3" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.31" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1141.6" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.55" y="431.5" ></text>
</g>
<g >
<title>sim::Process::operator (111,111,110 samples, 0.54%)</title><rect x="107.5" y="533" width="6.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="110.47" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.10%)</title><rect x="382.0" y="421" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="384.99" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="357" width="1.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.81" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="267.2" y="485" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="270.22" y="495.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1173.3" y="485" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.27" y="495.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="264.3" y="469" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="267.34" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.20%)</title><rect x="278.2" y="469" width="2.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="281.18" y="479.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (17,717,171,540 samples, 85.73%)</title><rect x="123.0" y="533" width="1011.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="126.04" y="543.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (161,616,160 samples, 0.78%)</title><rect x="11.7" y="501" width="9.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.73" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="27.3" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.30" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="23.8" y="181" width="3.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.84" y="191.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (141,414,140 samples, 0.68%)</title><rect x="380.3" y="485" width="8.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="383.26" y="495.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (535,353,530 samples, 2.59%)</title><rect x="1145.6" y="517" width="30.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1148.59" y="527.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="469" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.23" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1117.3" y="469" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1120.33" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (101,010,100 samples, 0.49%)</title><rect x="22.1" y="501" width="5.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="25.11" y="511.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="383.1" y="437" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="386.15" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="260.9" y="421" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="263.88" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.83%)</title><rect x="270.7" y="485" width="9.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="273.68" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="1173.9" y="453" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.85" y="463.5" ></text>
</g>
<g >
<title>malloc (232,323,230 samples, 1.12%)</title><rect x="1093.7" y="469" width="13.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1096.69" y="479.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="374.5" y="485" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="377.50" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="887.8" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="890.79" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="25.6" y="149" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.57" y="159.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.10%)</title><rect x="10.6" y="469" width="1.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.58" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1123.1" y="405" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1126.10" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="1157.7" y="501" width="1.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1160.70" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="399.5" ></text>
</g>
<g >
<title>sim::Host::~Host (80,808,080 samples, 0.39%)</title><rect x="11.7" y="485" width="4.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.73" y="495.5" ></text>
</g>
<g >
<title>_IO_file_fopen (90,909,090 samples, 0.44%)</title><rect x="22.1" y="453" width="5.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="25.11" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (50,505,050 samples, 0.24%)</title><rect x="385.5" y="469" width="2.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="388.45" y="479.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1149.1" y="485" width="0.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1152.05" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.15%)</title><rect x="386.0" y="437" width="1.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="389.03" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="351.5" ></text>
</g>
<g >
<title>operator new (292,929,290 samples, 1.42%)</title><rect x="800.1" y="469" width="16.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="803.13" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (363,636,360 samples, 1.76%)</title><rect x="556.7" y="485" width="20.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="559.74" y="495.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (90,909,090 samples, 0.44%)</title><rect x="884.9" y="485" width="5.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="887.91" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="269.0" y="469" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="271.95" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="261" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.90" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1188.3" y="357" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.27" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="415.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="269.5" y="469" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="272.53" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="387.8" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="390.76" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.29%)</title><rect x="272.4" y="453" width="3.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="275.41" y="463.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="266.6" y="485" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="269.65" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.42" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.24%)</title><rect x="377.4" y="485" width="2.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="380.38" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.2" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.15" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="437" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.23" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="325" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.85" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="385.5" y="453" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="388.45" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.37%)</title><rect x="21.0" y="533" width="16.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="23.96" y="543.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="378.0" y="453" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="380.96" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.78" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (20,656,565,450 samples, 99.95%)</title><rect x="10.6" y="597" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.58" y="607.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="341" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="378.5" y="469" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="381.53" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="309" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.23" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (10,101,010 samples, 0.05%)</title><rect x="388.3" y="485" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="391.34" y="495.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.29%)</title><rect x="317.4" y="501" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="320.40" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1138.7" y="485" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1141.67" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1158.9" y="501" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1161.86" y="511.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.15%)</title><rect x="315.7" y="501" width="1.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="318.67" y="511.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (30,303,030 samples, 0.15%)</title><rect x="1186.5" y="325" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.54" y="335.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.05%)</title><rect x="36.0" y="469" width="0.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="38.95" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="447.5" ></text>
</g>
<g >
<title>cfree (525,252,520 samples, 2.54%)</title><rect x="222.8" y="517" width="30.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="225.82" y="527.5" >cf..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="405" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.23" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="36.5" y="501" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="39.53" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1151.4" y="469" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1154.36" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (70,707,070 samples, 0.34%)</title><rect x="1113.3" y="469" width="4.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1116.29" y="479.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (90,909,090 samples, 0.44%)</title><rect x="1113.3" y="485" width="5.2" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1116.29" y="495.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.44%)</title><rect x="1184.2" y="517" width="5.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1187.23" y="527.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1186.5" y="293" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.54" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,040,404,030 samples, 5.03%)</title><rect x="824.3" y="485" width="59.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="827.35" y="495.5" >sim::R..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="325" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.81" y="335.5" ></text>
</g>
<g >
<title>operator new (282,828,280 samples, 1.37%)</title><rect x="1090.8" y="485" width="16.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1093.80" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="421" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="385.5" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="388.45" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="264.9" y="485" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="267.92" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="175.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (999,999,990 samples, 4.84%)</title><rect x="49.8" y="533" width="57.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="52.79" y="543.5" >sim::E..</text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1161.7" y="485" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.74" y="495.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="818.6" y="485" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="821.58" y="495.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (40,404,040 samples, 0.20%)</title><rect x="1127.7" y="485" width="2.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1130.71" y="495.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1140.4" y="453" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.40" y="463.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.49%)</title><rect x="41.7" y="533" width="5.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="44.72" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="47.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.05%)</title><rect x="270.1" y="485" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="273.11" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="1165.2" y="437" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.20" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="373" width="1.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.81" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="287.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="259.7" y="421" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="262.73" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>nons (20,666,666,460 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >nons</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (181,818,180 samples, 0.88%)</title><rect x="10.6" y="517" width="10.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (10,101,010 samples, 0.05%)</title><rect x="409.1" y="501" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="412.10" y="511.5" ></text>
</g>
<g >
<title>cfree (303,030,300 samples, 1.47%)</title><rect x="779.9" y="469" width="17.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="782.94" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.0" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.95" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.15%)</title><rect x="1184.8" y="341" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.81" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.34%)</title><rect x="1139.8" y="485" width="4.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1142.82" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (434,343,430 samples, 2.10%)</title><rect x="755.1" y="469" width="24.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="758.14" y="479.5" >[..</text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.05%)</title><rect x="376.8" y="485" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="379.80" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.44%)</title><rect x="22.1" y="245" width="5.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="269.0" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="271.95" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="385.5" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="388.45" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1139.2" y="485" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1142.25" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.7" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.73" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1112.7" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1115.72" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="357" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.23" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.20%)</title><rect x="1151.9" y="485" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1154.94" y="495.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1165.2" y="469" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.20" y="479.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,858,585,840 samples, 8.99%)</title><rect x="1000.8" y="501" width="106.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1003.83" y="511.5" >void sim::Sc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1163.5" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="293" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.23" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (80,808,080 samples, 0.39%)</title><rect x="1150.2" y="501" width="4.6" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1153.21" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.00" y="447.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="15.2" y="469" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.19" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1138.1" y="485" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1141.09" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="34.8" y="469" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="37.80" y="479.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.10%)</title><rect x="887.8" y="453" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="890.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.42" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.5" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.53" y="335.5" ></text>
</g>
<g >
<title>sim::Link::arrive (282,828,280 samples, 1.37%)</title><rect x="266.1" y="501" width="16.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="269.07" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.66" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.69" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="27.3" y="453" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="30.30" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (2,020,202,000 samples, 9.78%)</title><rect x="441.4" y="485" width="115.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="444.40" y="495.5" >Logger::warn</text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (272,727,270 samples, 1.32%)</title><rect x="21.0" y="517" width="15.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="23.96" y="527.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 1.22%)</title><rect x="740.7" y="453" width="14.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="743.72" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1164.0" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.05" y="111.5" ></text>
</g>
</g>
</svg>
