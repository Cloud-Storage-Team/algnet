<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>sim::LinkQueue::pop (90,909,090 samples, 0.27%)</title><rect x="892.7" y="517" width="3.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="895.67" y="527.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="31.9" y="533" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="34.85" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="32.9" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.93" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (111,111,110 samples, 0.33%)</title><rect x="617.2" y="549" width="3.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="620.19" y="559.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.03%)</title><rect x="53.0" y="501" width="0.3" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="55.99" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="64.5" y="517" width="0.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="67.45" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="351.5" ></text>
</g>
<g >
<title>nons (33,272,726,940 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="600.4" y="485" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="603.36" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_cwnd (30,303,030 samples, 0.09%)</title><rect x="614.0" y="517" width="1.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="616.97" y="527.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (80,808,080 samples, 0.24%)</title><rect x="1128.0" y="485" width="2.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1131.03" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="347.8" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.81" y="543.5" ></text>
</g>
<g >
<title>sim::Process::operator (21,171,716,960 samples, 63.63%)</title><rect x="371.8" y="565" width="750.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="374.81" y="575.5" >sim::Process::operator</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="356.8" y="453" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="359.76" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="404.4" y="549" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="407.41" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="469" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.07" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.03%)</title><rect x="904.5" y="517" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="907.49" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="610.0" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="613.03" y="463.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (171,717,170 samples, 0.52%)</title><rect x="359.6" y="501" width="6.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="362.63" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="598.9" y="501" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="601.93" y="511.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (10,101,010 samples, 0.03%)</title><rect x="626.9" y="549" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="629.87" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="347.4" y="517" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.45" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="517" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="604.7" y="389" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="607.66" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="898.4" y="421" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="901.40" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="360.0" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="362.99" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.06%)</title><rect x="610.0" y="437" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="613.03" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="53" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="63.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.36%)</title><rect x="598.2" y="533" width="4.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="601.21" y="543.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="614.7" y="485" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="617.69" y="495.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (262,626,260 samples, 0.79%)</title><rect x="720.7" y="517" width="9.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="723.72" y="527.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1167.4" y="549" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1170.43" y="559.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="597.5" y="469" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="600.49" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (111,111,110 samples, 0.33%)</title><rect x="602.5" y="533" width="3.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="605.51" y="543.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="753.3" y="533" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="756.32" y="543.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (949,494,940 samples, 2.85%)</title><rect x="908.4" y="533" width="33.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="911.43" y="543.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1181.0" y="469" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.04" y="479.5" ></text>
</g>
<g >
<title>main (33,040,403,710 samples, 99.30%)</title><rect x="18.2" y="613" width="1171.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="21.24" y="623.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="1173.5" y="533" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1176.52" y="543.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (222,222,220 samples, 0.67%)</title><rect x="67.7" y="565" width="7.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="70.67" y="575.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="595.3" y="533" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="598.34" y="543.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="11.1" y="501" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.07" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.15%)</title><rect x="370.0" y="517" width="1.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="373.02" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="373" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1189.78" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1182.8" y="549" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1185.84" y="559.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (60,606,060 samples, 0.18%)</title><rect x="369.7" y="533" width="2.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="372.66" y="543.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (111,111,110 samples, 0.33%)</title><rect x="1134.5" y="517" width="3.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1137.47" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="565" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.24%)</title><rect x="1186.4" y="453" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.42" y="463.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="71.3" y="517" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="74.26" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="357" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="65.5" y="565" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="68.53" y="575.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::create_packet (10,101,010 samples, 0.03%)</title><rect x="602.5" y="517" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="605.51" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1143.8" y="517" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1146.79" y="527.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="604.3" y="453" width="1.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="607.30" y="463.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="1134.1" y="501" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1137.12" y="511.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.06%)</title><rect x="70.5" y="501" width="0.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="73.54" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,616,161,600 samples, 4.86%)</title><rect x="18.2" y="597" width="57.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="21.24" y="607.5" >sim::M..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.09%)</title><rect x="907.4" y="533" width="1.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="910.36" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 0.76%)</title><rect x="54.4" y="485" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.42" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (80,808,080 samples, 0.24%)</title><rect x="1144.1" y="533" width="2.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1147.15" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="1137.7" y="469" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1140.70" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="905.6" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="908.57" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,868,686,820 samples, 14.63%)</title><rect x="83.8" y="581" width="172.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="86.79" y="591.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.15%)</title><rect x="349.6" y="517" width="1.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="352.60" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="357" width="0.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1191.21" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="69" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="661" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.06%)</title><rect x="1187.1" y="389" width="0.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.13" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="373" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.93" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.27%)</title><rect x="1122.7" y="565" width="3.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1125.65" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="610.0" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="613.03" y="431.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="1131.6" y="517" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1134.61" y="527.5" ></text>
</g>
<g >
<title>std::ostream::put (20,202,020 samples, 0.06%)</title><rect x="64.8" y="549" width="0.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="67.81" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="133" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="143.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (90,909,090 samples, 0.27%)</title><rect x="608.2" y="517" width="3.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="611.24" y="527.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="533" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1161.48" y="543.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.06%)</title><rect x="348.5" y="533" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="351.52" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (70,707,070 samples, 0.21%)</title><rect x="1186.8" y="437" width="2.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.78" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.06%)</title><rect x="1188.2" y="373" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.21" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="35.4" y="549" width="1.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="38.43" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="53.3" y="517" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="56.35" y="527.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.18%)</title><rect x="603.9" y="485" width="2.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="606.94" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="601.4" y="421" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.43" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.03%)</title><rect x="1130.9" y="501" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1133.89" y="511.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (101,010,100 samples, 0.30%)</title><rect x="602.9" y="517" width="3.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="605.87" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="495.5" ></text>
</g>
<g >
<title>Logger::info (1,929,292,910 samples, 5.80%)</title><rect x="778.0" y="517" width="68.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="781.04" y="527.5" >Logger:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="609.3" y="469" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="612.31" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (232,323,230 samples, 0.70%)</title><rect x="67.3" y="581" width="8.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="70.32" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="479.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (101,010,100 samples, 0.30%)</title><rect x="602.9" y="501" width="3.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="605.87" y="511.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.13" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1179.3" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.25" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="367.2" y="501" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="370.15" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="357" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="367.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="19.3" y="565" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="22.31" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="149" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="72.3" y="485" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.33" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (50,505,050 samples, 0.15%)</title><rect x="621.1" y="549" width="1.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="624.14" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.7" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.75" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="383.5" ></text>
</g>
<g >
<title>all (33,272,726,940 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.2" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.23" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="469" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.88" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="197" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="351.5" ></text>
</g>
<g >
<title>cfree (111,111,110 samples, 0.33%)</title><rect x="14.3" y="517" width="3.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="17.30" y="527.5" ></text>
</g>
<g >
<title>vsnprintf (252,525,250 samples, 0.76%)</title><rect x="54.4" y="501" width="9.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="57.42" y="511.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.09%)</title><rect x="403.3" y="549" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="406.33" y="559.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="54.1" y="533" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="57.06" y="543.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.15%)</title><rect x="1129.1" y="453" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1132.10" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="479.5" ></text>
</g>
<g >
<title>sim::Event::get_time (70,707,070 samples, 0.21%)</title><rect x="81.3" y="581" width="2.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="84.29" y="591.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.09%)</title><rect x="604.7" y="421" width="1.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="607.66" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="421" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.06" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="907.0" y="485" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="910.00" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="614.3" y="469" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="617.33" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (60,606,060 samples, 0.18%)</title><rect x="1128.7" y="469" width="2.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1131.74" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="907.0" y="501" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="910.00" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="1170.7" y="533" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1173.66" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="605.4" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="608.37" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="421" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.42" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 0.36%)</title><rect x="360.3" y="469" width="4.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="363.35" y="479.5" ></text>
</g>
<g >
<title>sim::is_valid_link (40,404,040 samples, 0.12%)</title><rect x="1157.4" y="549" width="1.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1160.40" y="559.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.03%)</title><rect x="1138.4" y="517" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1141.42" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="533" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="68.53" y="543.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.03%)</title><rect x="65.5" y="517" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="68.53" y="527.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1148.1" y="517" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1151.09" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (90,909,090 samples, 0.27%)</title><rect x="898.0" y="469" width="3.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="901.04" y="479.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (121,212,120 samples, 0.36%)</title><rect x="897.3" y="517" width="4.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="900.33" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="68.4" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.39" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1182.1" y="517" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.12" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="353.5" y="501" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="356.54" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="597.9" y="533" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="600.85" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="325" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (10,101,010 samples, 0.03%)</title><rect x="627.2" y="549" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="630.23" y="559.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.24%)</title><rect x="1139.5" y="469" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1142.49" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="612.5" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="615.54" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1156.0" y="565" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.97" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.03%)</title><rect x="1170.3" y="533" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1173.30" y="543.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.33%)</title><rect x="1186.1" y="597" width="3.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1189.06" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="399.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="611.1" y="485" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="614.11" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="20.7" y="549" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="23.75" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (181,818,180 samples, 0.55%)</title><rect x="359.3" y="517" width="6.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="362.27" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="341" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.2" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.22" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (40,404,040 samples, 0.12%)</title><rect x="357.5" y="501" width="1.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="360.48" y="511.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.09%)</title><rect x="601.4" y="469" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="604.43" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="350.3" y="485" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="353.32" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="893.0" y="485" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.03" y="495.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="368.6" y="549" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="371.59" y="559.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,646,464,610 samples, 10.96%)</title><rect x="767.7" y="533" width="129.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="770.65" y="543.5" >sim::Link::get_p..</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (40,404,040 samples, 0.12%)</title><rect x="625.4" y="549" width="1.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="628.43" y="559.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="389" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.78" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.09%)</title><rect x="352.8" y="517" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="355.82" y="527.5" ></text>
</g>
<g >
<title>fopen (30,303,030 samples, 0.09%)</title><rect x="36.5" y="517" width="1.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="39.51" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="892.7" y="501" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="895.67" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 0.82%)</title><rect x="42.2" y="469" width="9.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.24" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (60,606,060 samples, 0.18%)</title><rect x="1169.9" y="549" width="2.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1172.94" y="559.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.03%)</title><rect x="599.3" y="485" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="602.28" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1156.0" y="549" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.97" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1179.3" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.25" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (80,808,080 samples, 0.24%)</title><rect x="354.6" y="501" width="2.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="357.61" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="399.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="367.5" y="485" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="370.51" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="357" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.13" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (444,444,440 samples, 1.34%)</title><rect x="37.9" y="549" width="15.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="40.94" y="559.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="35.8" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="38.79" y="543.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (50,505,050 samples, 0.15%)</title><rect x="902.0" y="533" width="1.8" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="904.99" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.09%)</title><rect x="598.9" y="517" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="601.93" y="527.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.09%)</title><rect x="650.5" y="533" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="653.51" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="351.0" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.03" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (212,121,210 samples, 0.64%)</title><rect x="10.7" y="565" width="7.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="575.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.27%)</title><rect x="754.8" y="533" width="3.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="757.75" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1140.2" y="437" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.21" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="15.0" y="501" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.02" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (404,040,400 samples, 1.21%)</title><rect x="730.0" y="533" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="733.04" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="517" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="610.0" y="469" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="613.03" y="479.5" ></text>
</g>
<g >
<title>__uselocale@plt (10,101,010 samples, 0.03%)</title><rect x="51.9" y="517" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="54.91" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.06%)</title><rect x="1185.3" y="565" width="0.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1188.34" y="575.5" ></text>
</g>
<g >
<title>__uselocale (30,303,030 samples, 0.09%)</title><rect x="63.4" y="517" width="1.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="66.38" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="614.3" y="453" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="617.33" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1167.8" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.79" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="908.1" y="501" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="911.08" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.33%)</title><rect x="888.7" y="485" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="891.73" y="495.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.06%)</title><rect x="75.6" y="597" width="0.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="78.56" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="349.6" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="352.60" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="165" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>cfree (252,525,250 samples, 0.76%)</title><rect x="744.4" y="533" width="8.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="747.37" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="604.7" y="405" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="607.66" y="415.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="501" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="605.51" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.09%)</title><rect x="1188.2" y="389" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.21" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="463.5" ></text>
</g>
<g >
<title>_IO_file_open (30,303,030 samples, 0.09%)</title><rect x="36.5" y="485" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="39.51" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.15%)</title><rect x="600.7" y="501" width="1.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="603.72" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1160.6" y="485" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.63" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.06%)</title><rect x="352.8" y="501" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="355.82" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="389" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.06" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.09%)</title><rect x="1186.8" y="405" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.78" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (333,333,330 samples, 1.00%)</title><rect x="40.1" y="517" width="11.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="43.09" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="277" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="367.5" y="501" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="370.51" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="533" width="3.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1189.06" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="68.4" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.39" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (20,202,020 samples, 0.06%)</title><rect x="603.2" y="485" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="606.22" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="373" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1190.49" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="245" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="600.4" y="501" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="603.36" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="319.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="611.1" y="501" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="614.11" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1133.4" y="517" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1136.40" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="261" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="271.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.06%)</title><rect x="651.6" y="533" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="654.58" y="543.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (40,404,040 samples, 0.12%)</title><rect x="596.4" y="533" width="1.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="599.42" y="543.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="614.3" y="501" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="617.33" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="356.0" y="469" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="359.05" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.0" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.03" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.75" y="223.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (30,303,030 samples, 0.09%)</title><rect x="36.5" y="533" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="39.51" y="543.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="347.8" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="350.81" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="361.4" y="421" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="364.42" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="370.0" y="501" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="373.02" y="511.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (20,202,020 samples, 0.06%)</title><rect x="1171.4" y="533" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1174.37" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.61" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="72.3" y="469" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.33" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="906.3" y="501" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="909.28" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="325" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.21" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="255.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.24%)</title><rect x="898.4" y="437" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="901.40" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.09%)</title><rect x="604.7" y="437" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="607.66" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="405" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="415.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.15%)</title><rect x="401.5" y="549" width="1.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="404.54" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="70.9" y="453" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.90" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="10.7" y="549" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="559.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.03%)</title><rect x="901.3" y="485" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="904.27" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (333,333,330 samples, 1.00%)</title><rect x="40.1" y="501" width="11.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="43.09" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="485" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.03%)</title><rect x="357.1" y="469" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="360.12" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="335.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.21%)</title><rect x="404.8" y="549" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="407.77" y="559.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="365.0" y="485" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="368.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="19.0" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.96" y="527.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (90,909,090 samples, 0.27%)</title><rect x="1127.7" y="501" width="3.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1130.67" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="350.7" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.67" y="367.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="533" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.51" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1169.9" y="533" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.94" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1125.9" y="549" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1128.88" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.39%)</title><rect x="748.7" y="517" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="751.66" y="527.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.15%)</title><rect x="1129.1" y="437" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1132.10" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1143.1" y="501" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1146.07" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (474,747,470 samples, 1.43%)</title><rect x="351.7" y="533" width="16.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="354.75" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="363.6" y="405" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.57" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="68.4" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.39" y="239.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (70,707,070 samples, 0.21%)</title><rect x="611.5" y="517" width="2.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="614.46" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="293" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="303.5" ></text>
</g>
<g >
<title>operator new (595,959,590 samples, 1.79%)</title><rect x="871.5" y="517" width="21.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="874.54" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1172.8" y="549" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1175.81" y="559.5" ></text>
</g>
<g >
<title>__uselocale (20,202,020 samples, 0.06%)</title><rect x="1142.4" y="485" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1145.36" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="602.9" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="605.87" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="895.5" y="469" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="898.54" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="34.4" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.36" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1172.8" y="517" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.81" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.06%)</title><rect x="1182.5" y="565" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1185.48" y="575.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (10,101,010 samples, 0.03%)</title><rect x="1149.2" y="549" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1152.16" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1183.33" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="341" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1137.3" y="469" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.34" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (252,525,250 samples, 0.76%)</title><rect x="54.4" y="517" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="57.42" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="325" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="271.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1160.6" y="517" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.63" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="890.5" y="469" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="893.52" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.06%)</title><rect x="10.7" y="533" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.72" y="543.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.93" y="367.5" ></text>
</g>
<g >
<title>malloc (232,323,230 samples, 0.70%)</title><rect x="759.4" y="517" width="8.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="762.41" y="527.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::add_object (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="533" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1192.64" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="1139.5" y="453" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.49" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (70,707,070 samples, 0.21%)</title><rect x="775.5" y="517" width="2.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="778.53" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="20.0" y="517" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.03" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="399.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="364.6" y="485" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="367.64" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.2" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.22" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="357" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1190.49" y="367.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="565" width="3.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.06" y="575.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::Timeout::operator (30,303,030 samples, 0.09%)</title><rect x="1148.4" y="565" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1151.45" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="447.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (30,303,030 samples, 0.09%)</title><rect x="20.4" y="565" width="1.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="23.39" y="575.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.03%)</title><rect x="1149.2" y="533" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1152.16" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.03%)</title><rect x="67.0" y="565" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="69.96" y="575.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (111,111,110 samples, 0.33%)</title><rect x="897.3" y="501" width="4.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="900.33" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (30,303,030 samples, 0.09%)</title><rect x="36.5" y="549" width="1.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="39.51" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="615.0" y="517" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="618.05" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 0.82%)</title><rect x="846.5" y="517" width="9.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="849.46" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.61" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="1129.5" y="405" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.46" y="415.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.21%)</title><rect x="1099.7" y="533" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1102.73" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1179.3" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.25" y="527.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="389" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.42" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="341" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.93" y="351.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.03%)</title><rect x="256.5" y="581" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="259.46" y="591.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="604.3" y="469" width="1.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="607.30" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="517" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="527.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (272,727,270 samples, 0.82%)</title><rect x="606.4" y="533" width="9.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="609.45" y="543.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="599.3" y="501" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="602.28" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="437" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.42" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1133.4" y="501" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1136.40" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="351.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (575,757,570 samples, 1.73%)</title><rect x="1162.1" y="565" width="20.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1165.06" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.06%)</title><rect x="356.4" y="469" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="359.41" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="905.2" y="485" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="908.21" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.03%)</title><rect x="355.7" y="485" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="358.69" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="613" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="463.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.03%)</title><rect x="616.5" y="533" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="619.48" y="543.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="901.6" y="517" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="904.63" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="367.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="325" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1190.13" y="335.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="1126.2" y="533" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1129.24" y="543.5" ></text>
</g>
<g >
<title>cfree (414,141,410 samples, 1.24%)</title><rect x="331.0" y="565" width="14.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="333.97" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="229" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="239.5" ></text>
</g>
<g >
<title>operator new (101,010,100 samples, 0.30%)</title><rect x="407.3" y="549" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="410.27" y="559.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="373" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.42" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.7" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.75" y="495.5" ></text>
</g>
<g >
<title>operator new (252,525,250 samples, 0.76%)</title><rect x="1102.2" y="533" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1105.23" y="543.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (31,292,928,980 samples, 94.05%)</title><rect x="76.3" y="597" width="1109.8" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="79.27" y="607.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::Host::~Host (191,919,190 samples, 0.58%)</title><rect x="11.4" y="533" width="6.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.43" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.5" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.45" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (40,404,040 samples, 0.12%)</title><rect x="1175.3" y="549" width="1.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1178.31" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="373" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.06" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1180.7" y="485" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1183.69" y="495.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.06%)</title><rect x="896.3" y="517" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="899.25" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="36.9" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.87" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="20.7" y="517" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.75" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="35.8" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.79" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="181" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="901.6" y="501" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="904.63" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="39.7" y="517" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.73" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.12%)</title><rect x="356.0" y="485" width="1.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="359.05" y="495.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="603.9" y="469" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="606.94" y="479.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1180.0" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.97" y="543.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (111,111,110 samples, 0.33%)</title><rect x="1127.3" y="533" width="4.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1130.31" y="543.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (111,111,110 samples, 0.33%)</title><rect x="1127.3" y="517" width="4.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1130.31" y="527.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,242,424,230 samples, 3.73%)</title><rect x="21.5" y="565" width="44.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="24.46" y="575.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="501" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="277" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="565" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.28" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.09%)</title><rect x="1174.2" y="549" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1177.24" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1140.2" y="421" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (333,333,330 samples, 1.00%)</title><rect x="40.1" y="485" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.09" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.09%)</title><rect x="904.9" y="517" width="1.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="907.85" y="527.5" ></text>
</g>
<g >
<title>open64 (30,303,030 samples, 0.09%)</title><rect x="68.0" y="469" width="1.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="71.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="485" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.51" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="614.3" y="485" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="617.33" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.09%)</title><rect x="65.9" y="565" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="68.88" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="319.5" ></text>
</g>
<g >
<title>operator new (272,727,270 samples, 0.82%)</title><rect x="758.0" y="533" width="9.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="760.98" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="50.8" y="437" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.84" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1179.3" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.25" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="581" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.24%)</title><rect x="72.3" y="501" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="75.33" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="453" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.07" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="32.2" y="517" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.21" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="897.3" y="485" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="900.33" y="495.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="1131.6" y="501" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1134.61" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (282,828,280 samples, 0.85%)</title><rect x="860.4" y="501" width="10.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="863.43" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="15.4" y="485" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.37" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.03%)</title><rect x="1131.3" y="517" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1134.25" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.03%)</title><rect x="1149.2" y="517" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1152.16" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="447.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.03%)</title><rect x="616.8" y="533" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="619.84" y="543.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="18.6" y="565" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.60" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="905.2" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="908.21" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="595.7" y="533" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="598.70" y="543.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,383,838,370 samples, 4.16%)</title><rect x="18.2" y="581" width="49.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="21.24" y="591.5" >sim:..</text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="34.0" y="533" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="37.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="69.8" y="533" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="72.82" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.06%)</title><rect x="367.9" y="517" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="370.87" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="469" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="405" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.42" y="415.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.03%)</title><rect x="65.5" y="501" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="68.53" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="645" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.15%)</title><rect x="600.7" y="485" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="603.72" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="469" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.51" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.09%)</title><rect x="1188.2" y="405" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.21" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 0.58%)</title><rect x="11.4" y="549" width="6.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.43" y="559.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.03%)</title><rect x="1138.8" y="501" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1141.77" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="605.7" y="469" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="608.73" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.18%)</title><rect x="365.7" y="517" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="368.72" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="905.6" y="405" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="908.57" y="415.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="371.1" y="501" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="374.09" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="604.7" y="373" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="607.66" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="70.5" y="485" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.54" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.6" y="549" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.60" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (80,808,080 samples, 0.24%)</title><rect x="1158.8" y="549" width="2.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1161.83" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="447.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.03%)</title><rect x="365.4" y="485" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="368.36" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="350.3" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="353.32" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1129.1" y="421" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.10" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.51" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="609.7" y="453" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="612.67" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.09%)</title><rect x="1183.2" y="565" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1186.19" y="575.5" ></text>
</g>
<g >
<title>sim::SendData::operator (636,363,630 samples, 1.91%)</title><rect x="1125.9" y="565" width="22.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1128.88" y="575.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="366.4" y="501" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="369.44" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="36.9" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.87" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="309" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.21" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.24%)</title><rect x="893.0" y="501" width="2.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="896.03" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.6" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.58" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="610.0" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="613.03" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="351.0" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="354.03" y="463.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.03%)</title><rect x="64.5" y="501" width="0.3" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="67.45" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.06%)</title><rect x="1172.1" y="549" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1175.09" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.12%)</title><rect x="1160.3" y="533" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.27" y="543.5" ></text>
</g>
<g >
<title>sim::Process::~Process (131,313,130 samples, 0.39%)</title><rect x="258.3" y="581" width="4.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="261.25" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="72.3" y="453" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.33" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.2" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.23" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.2" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.23" y="271.5" ></text>
</g>
<g >
<title>Logger::warn (2,191,919,170 samples, 6.59%)</title><rect x="652.3" y="533" width="77.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="655.30" y="543.5" >Logger::..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="905.2" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="908.21" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,202,020,180 samples, 6.62%)</title><rect x="944.6" y="533" width="78.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="947.61" y="543.5" >std::_Rb_..</text>
</g>
<g >
<title>sim::Host::send_packet (626,262,620 samples, 1.88%)</title><rect x="1126.2" y="549" width="22.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1129.24" y="559.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="610.0" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="613.03" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="904.1" y="517" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="907.13" y="527.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (888,888,880 samples, 2.67%)</title><rect x="1154.5" y="581" width="31.6" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1157.54" y="591.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1190.49" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.91" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.61" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="74.1" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="77.12" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="906.6" y="501" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="909.64" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="421" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="431.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="347.1" y="533" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="350.09" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="899.5" y="405" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="902.48" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="389" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1180.7" y="517" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.69" y="527.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1159.6" y="533" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.55" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="463.5" ></text>
</g>
<g >
<title>sim::Host::process (626,262,620 samples, 1.88%)</title><rect x="595.0" y="549" width="22.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="597.98" y="559.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="62.7" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="65.66" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="383.5" ></text>
</g>
<g >
<title>open64 (30,303,030 samples, 0.09%)</title><rect x="36.5" y="469" width="1.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="39.51" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.51" y="463.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="581" width="3.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.06" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1143.1" y="517" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1146.07" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.07" y="495.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="39.0" y="533" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="42.02" y="543.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (111,111,110 samples, 0.33%)</title><rect x="71.6" y="549" width="4.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="74.62" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.09%)</title><rect x="1173.2" y="549" width="1.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1176.16" y="559.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.09%)</title><rect x="346.0" y="533" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="349.02" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="905.2" y="501" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="908.21" y="511.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1180.7" y="501" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.69" y="511.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1172.8" y="533" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1175.81" y="543.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="65.5" y="549" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="68.53" y="559.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1161.7" y="549" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1164.70" y="559.5" ></text>
</g>
<g >
<title>malloc (232,323,230 samples, 0.70%)</title><rect x="1103.0" y="517" width="8.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1105.95" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.12%)</title><rect x="33.3" y="549" width="1.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="36.28" y="559.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="549" width="3.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1189.06" y="559.5" ></text>
</g>
<g >
<title>sim::Event::Event (292,929,290 samples, 0.88%)</title><rect x="410.9" y="549" width="10.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="413.86" y="559.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1132.7" y="517" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1135.68" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (30,303,030 samples, 0.09%)</title><rect x="68.0" y="549" width="1.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="71.03" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1127.7" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.67" y="495.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="597.5" y="485" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="600.49" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.12%)</title><rect x="1137.0" y="485" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1139.98" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.30%)</title><rect x="903.8" y="533" width="3.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="906.78" y="543.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1159.6" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.55" y="527.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1160.6" y="501" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.63" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="373" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 0.43%)</title><rect x="1176.7" y="549" width="5.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1179.75" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.61" y="463.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="599.6" y="501" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="602.64" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1135.5" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.55" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="70.9" y="469" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.90" y="479.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (90,909,090 samples, 0.27%)</title><rect x="591.8" y="549" width="3.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="594.76" y="559.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 0.09%)</title><rect x="70.5" y="533" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="73.54" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="70.5" y="517" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="73.54" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="37.2" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.23" y="255.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.03%)</title><rect x="908.1" y="517" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="911.08" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.12%)</title><rect x="1187.9" y="421" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.85" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="367.5" ></text>
</g>
<g >
<title>sim::Process::operator (40,404,040 samples, 0.12%)</title><rect x="256.8" y="581" width="1.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="259.82" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="10.7" y="613" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="501" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.36%)</title><rect x="360.3" y="485" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="363.35" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (292,929,290 samples, 0.88%)</title><rect x="54.4" y="533" width="10.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="57.42" y="543.5" ></text>
</g>
<g >
<title>cfree (404,040,400 samples, 1.21%)</title><rect x="856.1" y="517" width="14.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="859.13" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="549" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.28" y="559.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="614.7" y="501" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="617.69" y="511.5" ></text>
</g>
<g >
<title>sim::Link::transmit (60,606,060 samples, 0.18%)</title><rect x="369.7" y="549" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="372.66" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.30%)</title><rect x="72.0" y="533" width="3.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="74.97" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="37" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.2" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.22" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1169.9" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.94" y="511.5" ></text>
</g>
<g >
<title>sim::Event::Event (323,232,320 samples, 0.97%)</title><rect x="1111.2" y="533" width="11.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1114.19" y="543.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="903.8" y="517" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="906.78" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="437" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.06" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (70,707,070 samples, 0.21%)</title><rect x="622.9" y="549" width="2.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="625.93" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.09%)</title><rect x="1184.3" y="565" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1187.27" y="575.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="351.0" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="354.03" y="479.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.06%)</title><rect x="368.9" y="549" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="371.94" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="415.5" ></text>
</g>
<g >
<title>strchrnul@plt (10,101,010 samples, 0.03%)</title><rect x="74.8" y="485" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="77.84" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1137.7" y="437" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.70" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="85" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1126.6" y="533" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.59" y="543.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="610.7" y="501" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="613.75" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="898.0" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="901.04" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.33%)</title><rect x="59.1" y="437" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="62.08" y="447.5" ></text>
</g>
<g >
<title>fopen (30,303,030 samples, 0.09%)</title><rect x="68.0" y="517" width="1.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="71.03" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="213" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1182.1" y="533" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.12" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="309" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (232,323,230 samples, 0.70%)</title><rect x="838.2" y="501" width="8.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="841.22" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.03%)</title><rect x="1169.6" y="549" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1172.58" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="431.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (30,303,030 samples, 0.09%)</title><rect x="68.0" y="533" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="71.03" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="55.5" y="453" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="58.49" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.73%)</title><rect x="43.3" y="453" width="8.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.32" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="895.5" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.54" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="68.4" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.39" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,808,080,760 samples, 14.45%)</title><rect x="421.2" y="549" width="170.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="424.24" y="559.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1155.6" y="565" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.61" y="575.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (121,212,120 samples, 0.36%)</title><rect x="1138.8" y="517" width="4.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1141.77" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="10.7" y="597" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="38.3" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.30" y="543.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (80,808,080 samples, 0.24%)</title><rect x="368.9" y="565" width="2.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="371.94" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (33,252,524,920 samples, 99.94%)</title><rect x="10.7" y="629" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="639.5" >[libc.so.6]</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (141,414,140 samples, 0.43%)</title><rect x="353.9" y="517" width="5.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="356.90" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.03%)</title><rect x="901.3" y="501" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="904.27" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.03%)</title><rect x="1138.1" y="469" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1141.06" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (343,434,340 samples, 1.03%)</title><rect x="1132.0" y="533" width="12.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1134.97" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1146.7" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.65" y="527.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.06%)</title><rect x="10.7" y="517" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.72" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="447.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="904.9" y="501" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="907.85" y="511.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="31.9" y="549" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="34.85" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="50.8" y="421" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.84" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1141.3" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.28" y="415.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.03%)</title><rect x="63.0" y="469" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="66.02" y="479.5" ></text>
</g>
<g >
<title>malloc (545,454,540 samples, 1.64%)</title><rect x="873.3" y="501" width="19.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="876.33" y="511.5" ></text>
</g>
<g >
<title>_IO_file_open (30,303,030 samples, 0.09%)</title><rect x="68.0" y="485" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="71.03" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.12%)</title><rect x="905.9" y="517" width="1.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="908.93" y="527.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.24%)</title><rect x="898.4" y="453" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="901.40" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="609.0" y="485" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="611.96" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.0" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.03" y="431.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (60,606,060 samples, 0.18%)</title><rect x="349.2" y="533" width="2.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="352.24" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="501" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.51" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="611.5" y="501" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="614.46" y="511.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.03%)</title><rect x="1154.2" y="581" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1157.18" y="591.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="611.8" y="485" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="614.82" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1127.0" y="533" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1129.95" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="36.2" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.15" y="495.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.03%)</title><rect x="70.2" y="533" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="73.18" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="517" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.28" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="495.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1180.0" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.97" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1167.4" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.43" y="543.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="549" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.64" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.09%)</title><rect x="612.9" y="485" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="615.90" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.03%)</title><rect x="351.4" y="533" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="354.39" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.24%)</title><rect x="1139.5" y="485" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.49" y="495.5" ></text>
</g>
<g >
<title>sim::Link::arrive (646,464,640 samples, 1.94%)</title><rect x="345.7" y="549" width="22.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="348.66" y="559.5" >s..</text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="1133.8" y="501" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1136.76" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.03%)</title><rect x="37.6" y="549" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="40.58" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1137.7" y="453" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.70" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="293" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.57" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="453" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="463.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (404,040,400 samples, 1.21%)</title><rect x="39.4" y="533" width="14.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="42.37" y="543.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="35.8" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="38.79" y="527.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.03%)</title><rect x="37.6" y="533" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="40.58" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="65.5" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="68.53" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="20.7" y="533" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="23.75" y="543.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="606.1" y="469" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="609.09" y="479.5" ></text>
</g>
<g >
<title>__libc_start_main (33,252,524,920 samples, 99.94%)</title><rect x="10.7" y="645" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.72" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (212,121,210 samples, 0.64%)</title><rect x="10.7" y="581" width="7.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.72" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="399.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="870.5" y="517" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="873.46" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="359.3" y="501" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="362.27" y="511.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="894.5" y="485" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="897.46" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="453" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.06" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="596.8" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="599.78" y="495.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (25,131,312,880 samples, 75.53%)</title><rect x="262.9" y="581" width="891.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="265.91" y="591.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="608.2" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="611.24" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="611.8" y="453" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="614.82" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="612.9" y="501" width="1.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="615.90" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="610.0" y="485" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="613.03" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="20.7" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.75" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="431.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.09%)</title><rect x="77.0" y="581" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="79.99" y="591.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="501" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="511.5" ></text>
</g>
<g >
<title>_IO_file_fopen (30,303,030 samples, 0.09%)</title><rect x="68.0" y="501" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="71.03" y="511.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (161,616,160 samples, 0.49%)</title><rect x="1156.3" y="565" width="5.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1159.33" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1179.3" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.25" y="543.5" ></text>
</g>
<g >
<title>_IO_file_fopen (30,303,030 samples, 0.09%)</title><rect x="36.5" y="501" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="39.51" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1160.6" y="469" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.63" y="479.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="581" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.28" y="591.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (131,313,130 samples, 0.39%)</title><rect x="1149.5" y="565" width="4.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1152.52" y="575.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.03%)</title><rect x="1187.9" y="405" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1190.85" y="415.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (131,313,130 samples, 0.39%)</title><rect x="897.0" y="533" width="4.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="899.97" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.61" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="447.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="611.8" y="469" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="614.82" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="361.4" y="437" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="364.42" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.6" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.60" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="371.5" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="374.45" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.03%)</title><rect x="616.1" y="533" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="619.12" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="581" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.64" y="591.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="325" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.93" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="357" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.06" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="371.5" y="485" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="374.45" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (111,111,110 samples, 0.33%)</title><rect x="1139.1" y="501" width="4.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1142.13" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="356.8" y="437" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="359.76" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="55.5" y="469" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="58.49" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 0.70%)</title><rect x="337.4" y="549" width="8.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.42" y="559.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="596.4" y="517" width="1.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="599.42" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.09%)</title><rect x="1186.8" y="421" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.78" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="69.1" y="549" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="72.11" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1169.9" y="517" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.94" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="601.4" y="453" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.43" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.03%)</title><rect x="1156.7" y="549" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.68" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="431.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="341" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.13" y="351.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="607.9" y="517" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="610.88" y="527.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="895.9" y="517" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="898.90" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (70,707,070 samples, 0.21%)</title><rect x="942.1" y="533" width="2.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="945.11" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="601.4" y="437" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.43" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.03%)</title><rect x="595.0" y="533" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="597.98" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="1147.0" y="533" width="1.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1150.01" y="543.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="69.8" y="549" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="72.82" y="559.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1157.0" y="549" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1160.04" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.9" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.86" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="600.0" y="517" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="603.00" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="52.3" y="517" width="1.0" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="55.27" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (313,131,310 samples, 0.94%)</title><rect x="53.7" y="549" width="11.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="56.70" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="330.3" y="565" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="333.26" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.0" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.03" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1127.0" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.95" y="527.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.09%)</title><rect x="1022.7" y="533" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1025.71" y="543.5" ></text>
</g>
<g >
<title>__munmap (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="453" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1131.74" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.24%)</title><rect x="72.3" y="517" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="75.33" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="36.5" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.51" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.09%)</title><rect x="596.8" y="501" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="599.78" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1128.7" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.74" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="53.0" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.99" y="479.5" ></text>
</g>
<g >
<title>_start (33,252,524,920 samples, 99.94%)</title><rect x="10.7" y="661" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.72" y="671.5" >_start</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="75.2" y="517" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="78.20" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.06%)</title><rect x="34.7" y="549" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="37.72" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="19.3" y="533" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.31" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="479.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="606.1" y="485" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="609.09" y="495.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="19.3" y="549" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="22.31" y="559.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1143.4" y="501" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1146.43" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="437" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="533" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="117" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="127.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="549" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.51" y="559.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.06%)</title><rect x="1133.8" y="517" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1136.76" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="629" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (656,565,650 samples, 1.97%)</title><rect x="345.7" y="565" width="23.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="348.66" y="575.5" >s..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="608.6" y="485" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="611.60" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.06%)</title><rect x="905.2" y="469" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="908.21" y="479.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.03%)</title><rect x="1168.1" y="549" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1171.15" y="559.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.03%)</title><rect x="901.6" y="533" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="904.63" y="543.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="405" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.06" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="67.3" y="565" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="70.32" y="575.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (30,303,030 samples, 0.09%)</title><rect x="70.5" y="549" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="73.54" y="559.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="350.0" y="501" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="352.96" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.2" y="341" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.21" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="596.1" y="533" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="599.06" y="543.5" ></text>
</g>
<g >
<title>sim::Switch::process (11,171,717,060 samples, 33.58%)</title><rect x="627.6" y="549" width="396.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="630.58" y="559.5" >sim::Switch::process</text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;unsigned int&gt;, bool&gt; std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::_M_insert_unique&lt;unsigned int const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="615.4" y="517" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="618.40" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.36%)</title><rect x="360.3" y="453" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="363.35" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="21.1" y="501" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.11" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.18%)</title><rect x="608.6" y="501" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="611.60" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="1135.9" y="501" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1138.91" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="371.1" y="485" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="374.09" y="495.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.27%)</title><rect x="78.1" y="581" width="3.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="81.06" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1168.5" y="517" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.51" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1180.3" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1183.33" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="601.4" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.43" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.67" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="309" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="367.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (101,010,100 samples, 0.30%)</title><rect x="897.7" y="485" width="3.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="900.69" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="1181.8" y="549" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.76" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.09%)</title><rect x="1180.7" y="533" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.69" y="543.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.06%)</title><rect x="1131.3" y="533" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1134.25" y="543.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.03%)</title><rect x="358.9" y="517" width="0.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="361.91" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.15%)</title><rect x="600.7" y="517" width="1.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="603.72" y="527.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,787,878,760 samples, 8.38%)</title><rect x="1023.8" y="549" width="98.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1026.78" y="559.5" >void sim::S..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.18%)</title><rect x="1136.3" y="501" width="2.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1139.27" y="511.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="565" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.64" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="68.0" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.03" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="614.7" y="469" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="617.69" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="903.8" y="501" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="906.78" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1159.9" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.91" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="614.7" y="101" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="617.69" y="111.5" ></text>
</g>
</g>
</svg>
