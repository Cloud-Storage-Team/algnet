<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.66" y="239.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (20,202,020 samples, 0.10%)</title><rect x="411.8" y="453" width="1.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="414.79" y="463.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (70,707,070 samples, 0.33%)</title><rect x="254.0" y="453" width="3.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="257.00" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="381.4" y="421" width="1.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="384.36" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.33%)</title><rect x="32.0" y="405" width="3.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="34.98" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="341" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1186.80" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="341" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.36" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="844.0" y="405" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="847.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.10%)</title><rect x="22.4" y="405" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="25.40" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.69" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="265.3" y="421" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="268.27" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1129.1" y="405" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1132.14" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="255.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.24%)</title><rect x="254.0" y="421" width="2.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="257.00" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="37.0" y="437" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="40.05" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1125.8" y="405" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1128.76" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="282.2" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.18" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="257.4" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="260.38" y="415.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1161.3" y="421" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.26" y="431.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="261" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1191.31" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.24%)</title><rect x="1186.1" y="325" width="2.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="351.5" ></text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.19%)</title><rect x="315.4" y="453" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="318.43" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="453" width="0.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.44" y="463.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1120.7" y="389" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1123.69" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="906.0" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="908.99" y="431.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.05%)</title><rect x="21.8" y="421" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="24.83" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="319.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (30,303,030 samples, 0.14%)</title><rect x="282.2" y="469" width="1.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="285.18" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.33%)</title><rect x="842.3" y="437" width="4.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="845.31" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (90,909,090 samples, 0.43%)</title><rect x="264.1" y="437" width="5.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="267.15" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="382.5" y="373" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="385.48" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1151.1" y="437" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1154.12" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="391.5" y="389" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="394.50" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,101,010 samples, 0.05%)</title><rect x="392.6" y="389" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="395.63" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (30,303,030 samples, 0.14%)</title><rect x="279.9" y="437" width="1.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="282.92" y="447.5" ></text>
</g>
<g >
<title>sim::Link::arrive (404,040,400 samples, 1.91%)</title><rect x="259.6" y="453" width="22.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="262.64" y="463.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="255.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.05%)</title><rect x="21.8" y="437" width="0.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="24.83" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.10%)</title><rect x="1179.3" y="469" width="1.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.29" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="367.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (60,606,060 samples, 0.29%)</title><rect x="906.0" y="437" width="3.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="908.99" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="12.8" y="389" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.82" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="389" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.80" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="392.6" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="395.63" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.57%)</title><rect x="1122.9" y="437" width="6.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1125.94" y="447.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="11.1" y="405" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.13" y="415.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 0.14%)</title><rect x="614.7" y="437" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="617.65" y="447.5" ></text>
</g>
<g >
<title>_IO_file_fopen (111,111,110 samples, 0.53%)</title><rect x="23.5" y="405" width="6.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="26.52" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.14%)</title><rect x="270.9" y="421" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="273.91" y="431.5" ></text>
</g>
<g >
<title>Logger::get_instance (80,808,080 samples, 0.38%)</title><rect x="445.6" y="437" width="4.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="448.60" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="261" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.49" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="378.5" y="437" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="381.54" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1146.6" y="357" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.61" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.10%)</title><rect x="394.3" y="405" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="397.32" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1175.3" y="421" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.35" y="431.5" ></text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.05%)</title><rect x="21.8" y="405" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="24.83" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="844.6" y="421" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="847.57" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="367.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.38%)</title><rect x="39.3" y="485" width="4.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="42.30" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1164.6" y="453" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1167.64" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="22.4" y="421" width="1.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="25.40" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.91%)</title><rect x="11.1" y="517" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.13" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="389.8" y="373" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="392.81" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.10%)</title><rect x="1121.8" y="421" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1124.81" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.14%)</title><rect x="1167.5" y="453" width="1.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1170.46" y="463.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1179.3" y="453" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1182.29" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.10%)</title><rect x="797.8" y="405" width="13.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="800.79" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="383.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (111,111,110 samples, 0.53%)</title><rect x="23.5" y="437" width="6.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="26.52" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="309" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.36" y="319.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.14%)</title><rect x="450.1" y="437" width="1.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="453.11" y="447.5" ></text>
</g>
<g >
<title>sim::Generate::operator (90,909,090 samples, 0.43%)</title><rect x="253.4" y="469" width="5.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="256.44" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="389.2" y="389" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="392.25" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="840.1" y="421" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="843.06" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.05%)</title><rect x="1182.7" y="469" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1185.67" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="245" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="399.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="388.7" y="357" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="391.68" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="273.7" y="373" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="276.72" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.19%)</title><rect x="1186.6" y="293" width="2.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.62" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="393.8" y="405" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="396.75" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="293" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="840.1" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="843.06" y="399.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="388.1" y="405" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="391.12" y="415.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.14%)</title><rect x="646.2" y="421" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="649.21" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="421" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.87" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.10%)</title><rect x="1184.9" y="309" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.93" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (60,606,060 samples, 0.29%)</title><rect x="396.0" y="453" width="3.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="399.01" y="463.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="257.9" y="453" width="0.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="260.95" y="463.5" ></text>
</g>
<g >
<title>malloc (363,636,360 samples, 1.72%)</title><rect x="818.6" y="405" width="20.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="821.64" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="287.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="309" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1186.80" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="277" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="287.5" ></text>
</g>
<g >
<title>sim::Event::Event (30,303,030 samples, 0.14%)</title><rect x="321.1" y="453" width="1.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="324.06" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="393.8" y="373" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="396.75" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1166.9" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.90" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1146.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.05" y="319.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="469" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1186.24" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="253.4" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="256.44" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="245" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.75" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="501" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1157.9" y="437" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1160.88" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="549" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="245" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.49" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="197" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.34%)</title><rect x="21.8" y="501" width="15.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="24.83" y="511.5" ></text>
</g>
<g >
<title>sim::parse_flow_common (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="453" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1191.87" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.14%)</title><rect x="276.5" y="405" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="279.54" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::TcpFlow&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="469" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1191.87" y="479.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="279.4" y="421" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="282.36" y="431.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (60,606,060 samples, 0.29%)</title><rect x="1161.3" y="453" width="3.3" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1164.26" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="31.4" y="453" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="34.41" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="261.3" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="264.33" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1161.8" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.82" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (121,212,120 samples, 0.57%)</title><rect x="1114.5" y="421" width="6.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1117.49" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.14%)</title><rect x="1112.2" y="437" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1115.23" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="437" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (70,707,070 samples, 0.33%)</title><rect x="254.0" y="437" width="3.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="257.00" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.19%)</title><rect x="310.9" y="453" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="313.92" y="463.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.14%)</title><rect x="1172.5" y="421" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.53" y="431.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.14%)</title><rect x="840.6" y="437" width="1.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="843.62" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (80,808,080 samples, 0.38%)</title><rect x="17.3" y="437" width="4.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="20.33" y="447.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1157.3" y="453" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.32" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="22.4" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.40" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.14%)</title><rect x="1130.3" y="469" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1133.27" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.10%)</title><rect x="392.1" y="405" width="1.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="395.06" y="415.5" ></text>
</g>
<g >
<title>sim::Process::operator (50,505,050 samples, 0.24%)</title><rect x="94.5" y="485" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="97.53" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="32.5" y="373" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.54" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.05%)</title><rect x="392.6" y="373" width="0.6" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="395.63" y="383.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="229" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.18" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="533" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (232,323,230 samples, 1.10%)</title><rect x="1135.3" y="453" width="13.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1138.34" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.48%)</title><rect x="24.1" y="165" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.09" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1164.1" y="437" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1167.08" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="36.5" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="39.49" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (70,707,070 samples, 0.33%)</title><rect x="1184.9" y="341" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.93" y="351.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (616,161,610 samples, 2.91%)</title><rect x="322.8" y="453" width="34.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="325.75" y="463.5" >si..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="254.0" y="389" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="257.00" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="421" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.80" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.24%)</title><rect x="276.0" y="421" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="278.98" y="431.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1120.7" y="405" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1123.69" y="415.5" ></text>
</g>
<g >
<title>fopen (111,111,110 samples, 0.53%)</title><rect x="23.5" y="421" width="6.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="26.52" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="213" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="384.7" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="387.74" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="255.1" y="389" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="258.13" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="261.9" y="437" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="264.89" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="840.1" y="373" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="843.06" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="261" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.93" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="399.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (121,212,120 samples, 0.57%)</title><rect x="1114.5" y="437" width="6.8" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1117.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="335.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,727,272,580 samples, 69.63%)</title><rect x="283.9" y="469" width="821.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="286.87" y="479.5" >sim::Process::operator</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="21.3" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="24.27" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.91%)</title><rect x="11.1" y="501" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.13" y="511.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.14%)</title><rect x="813.6" y="421" width="1.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="816.57" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.10%)</title><rect x="1133.1" y="469" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1136.09" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="25.8" y="117" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.78" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.05%)</title><rect x="844.0" y="389" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="847.00" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.05%)</title><rect x="94.0" y="485" width="0.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="96.96" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1179.9" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.86" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.7" y="437" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1132.70" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="335.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="281.6" y="437" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="284.61" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (60,606,060 samples, 0.29%)</title><rect x="1175.9" y="453" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.91" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.10%)</title><rect x="11.1" y="421" width="1.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="14.13" y="431.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="1145.5" y="389" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.48" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.49" y="287.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,545,454,340 samples, 97.13%)</title><rect x="37.6" y="501" width="1146.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="40.61" y="511.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>_IO_file_open (111,111,110 samples, 0.53%)</title><rect x="23.5" y="389" width="6.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="26.52" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (424,242,420 samples, 2.01%)</title><rect x="258.5" y="469" width="23.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="261.51" y="479.5" >s..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="273.7" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="276.72" y="367.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.38%)</title><rect x="12.8" y="421" width="4.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.82" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="303.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.10%)</title><rect x="22.4" y="389" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="25.40" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="1128.0" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1131.01" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="261" width="0.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.62" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="325" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.36" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1172.5" y="405" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.53" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="1166.3" y="453" width="1.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1169.33" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1146.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.05" y="335.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.53%)</title><rect x="1183.8" y="501" width="6.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.80" y="511.5" ></text>
</g>
<g >
<title>sim::Host::process (323,232,320 samples, 1.53%)</title><rect x="377.4" y="453" width="18.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="380.41" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="282.7" y="453" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="285.74" y="463.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1156.8" y="453" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.75" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="270.3" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="273.34" y="415.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.10%)</title><rect x="907.7" y="405" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="910.68" y="415.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="840.1" y="405" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="843.06" y="415.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1187.2" y="261" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.18" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1175.3" y="405" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.35" y="415.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="272.0" y="405" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="275.03" y="415.5" ></text>
</g>
<g >
<title>sim::Process::~Process (141,414,140 samples, 0.67%)</title><rect x="97.3" y="485" width="7.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="100.34" y="495.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="469" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.44" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="293" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.93" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="303.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_flows (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="485" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1191.87" y="495.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1145.5" y="405" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1148.48" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="393.8" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="396.75" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="111.5" ></text>
</g>
<g >
<title>malloc (171,717,170 samples, 0.81%)</title><rect x="618.0" y="421" width="9.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="621.03" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="396.75" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.14%)</title><rect x="1174.2" y="437" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1177.22" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,404,040 samples, 0.19%)</title><rect x="267.0" y="405" width="2.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="269.96" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="261.3" y="437" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="264.33" y="447.5" ></text>
</g>
<g >
<title>cfree (333,333,330 samples, 1.58%)</title><rect x="792.2" y="421" width="18.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="795.16" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.81%)</title><rect x="269.2" y="437" width="9.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="272.22" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.43%)</title><rect x="24.7" y="133" width="5.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.65" y="143.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="325" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1186.80" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="293" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1188.49" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="159.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (282,828,280 samples, 1.34%)</title><rect x="21.8" y="469" width="15.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="24.83" y="479.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="1008.5" y="437" width="1.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1011.55" y="447.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1166.3" y="437" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1169.33" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1113.9" y="437" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1116.93" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (80,808,080 samples, 0.38%)</title><rect x="32.0" y="453" width="4.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="34.98" y="463.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1158.4" y="453" width="0.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1161.44" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1137.6" y="437" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1140.59" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="325" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="335.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,696,969,590 samples, 50.57%)</title><rect x="412.9" y="453" width="596.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="415.91" y="463.5" >sim::Switch::process</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (111,111,110 samples, 0.53%)</title><rect x="23.5" y="453" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="26.52" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="229" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (40,404,040 samples, 0.19%)</title><rect x="390.9" y="421" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="393.94" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="421" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,717,171,700 samples, 8.12%)</title><rect x="1009.7" y="453" width="95.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1012.68" y="463.5" >void sim::S..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.24%)</title><rect x="254.0" y="405" width="2.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="257.00" y="415.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (888,888,880 samples, 4.20%)</title><rect x="1134.2" y="485" width="49.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1137.21" y="495.5" >sim::..</text>
</g>
<g >
<title>operator new (202,020,200 samples, 0.96%)</title><rect x="616.3" y="437" width="11.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="619.34" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1157.9" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.88" y="415.5" ></text>
</g>
<g >
<title>sim::Process::~Process (121,212,120 samples, 0.57%)</title><rect x="1105.5" y="469" width="6.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1108.47" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.05%)</title><rect x="841.7" y="421" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="844.75" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (80,808,080 samples, 0.38%)</title><rect x="12.8" y="437" width="4.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="15.82" y="447.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (30,303,030 samples, 0.14%)</title><rect x="251.7" y="469" width="1.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="254.75" y="479.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="378.0" y="437" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="380.98" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="840.1" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="843.06" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="275.4" y="421" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="278.42" y="431.5" ></text>
</g>
<g >
<title>nons (21,151,514,940 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >nons</text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="35.9" y="421" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="38.92" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1137.0" y="437" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1140.03" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="357" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.80" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="388.7" y="373" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="391.68" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (131,313,130 samples, 0.62%)</title><rect x="404.5" y="453" width="7.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="407.46" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="36.5" y="453" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="39.49" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="383.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="810.8" y="421" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="813.75" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="392.6" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="395.63" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (323,232,320 samples, 1.53%)</title><rect x="1112.2" y="453" width="18.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1115.23" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (414,141,410 samples, 1.96%)</title><rect x="228.6" y="453" width="23.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="231.64" y="463.5" >[..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.24" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="565" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (40,404,040 samples, 0.19%)</title><rect x="393.2" y="421" width="2.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="396.19" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="908.8" y="421" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="911.81" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="245" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.62" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.10%)</title><rect x="904.9" y="437" width="1.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="907.86" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.10%)</title><rect x="11.1" y="437" width="1.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.13" y="447.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (363,636,360 samples, 1.72%)</title><rect x="357.1" y="453" width="20.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="360.13" y="463.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="256.3" y="373" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="259.26" y="383.5" ></text>
</g>
<g >
<title>_start (21,131,312,920 samples, 99.90%)</title><rect x="11.1" y="565" width="1178.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.13" y="575.5" >_start</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="437" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.17" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="33.1" y="357" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.10" y="367.5" ></text>
</g>
<g >
<title>main (20,939,393,730 samples, 99.00%)</title><rect x="21.8" y="517" width="1168.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.83" y="527.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="908.2" y="373" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="911.24" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="1124.6" y="421" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1127.63" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="392.6" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="395.63" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="382.5" y="405" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="385.48" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="485" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.44" y="495.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.24%)</title><rect x="388.1" y="421" width="2.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="391.12" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="11.1" y="453" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.13" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,808,080 samples, 0.38%)</title><rect x="380.8" y="437" width="4.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="383.79" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="437" width="0.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.87" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="278.2" y="405" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="281.23" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1125.2" y="405" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.20" y="415.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="269.8" y="421" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="272.78" y="431.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (30,303,030 samples, 0.14%)</title><rect x="262.5" y="437" width="1.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="265.45" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="272.6" y="421" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="275.60" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (777,777,770 samples, 3.68%)</title><rect x="50.6" y="485" width="43.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="53.57" y="495.5" >sim:..</text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="385.3" y="437" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="388.30" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="396.75" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="1125.2" y="389" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1128.20" y="399.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (303,030,300 samples, 1.43%)</title><rect x="1134.8" y="469" width="16.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1137.78" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1157.9" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.88" y="431.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.14%)</title><rect x="1121.3" y="437" width="1.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1124.25" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="314.3" y="453" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="317.30" y="463.5" ></text>
</g>
<g >
<title>operator new (424,242,420 samples, 2.01%)</title><rect x="815.3" y="421" width="23.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="818.26" y="431.5" >o..</text>
</g>
<g >
<title>[libc.so.6] (373,737,370 samples, 1.77%)</title><rect x="575.2" y="437" width="20.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.21" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1146.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.05" y="351.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 1.00%)</title><rect x="1093.6" y="437" width="11.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1096.64" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="392.6" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="395.63" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (80,808,080 samples, 0.38%)</title><rect x="32.0" y="437" width="4.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="34.98" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1175.3" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.35" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="391.5" y="373" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="394.50" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (18,444,444,260 samples, 87.20%)</title><rect x="105.2" y="485" width="1029.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="108.23" y="495.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (30,303,030 samples, 0.14%)</title><rect x="21.8" y="453" width="1.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="24.83" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.05%)</title><rect x="380.2" y="437" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="383.23" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (40,404,040 samples, 0.19%)</title><rect x="1159.0" y="453" width="2.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1162.01" y="463.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.91%)</title><rect x="11.1" y="485" width="10.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.13" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.24" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="394.50" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (10,101,010 samples, 0.05%)</title><rect x="395.4" y="453" width="0.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="398.44" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1143.2" y="389" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.23" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="79.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.33%)</title><rect x="32.0" y="421" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="34.98" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="396.75" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1184.9" y="325" width="1.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.93" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.19%)</title><rect x="1186.6" y="309" width="2.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.62" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="223.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1138.7" y="405" width="2.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1141.72" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="29.7" y="453" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="32.72" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="396.75" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="469" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="29.2" y="101" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.16" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (21,131,312,920 samples, 99.90%)</title><rect x="11.1" y="533" width="1178.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.13" y="543.5" >[libc.so.6]</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.17" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="277" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.62" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="380.8" y="421" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="383.79" y="431.5" ></text>
</g>
<g >
<title>open64 (111,111,110 samples, 0.53%)</title><rect x="23.5" y="373" width="6.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="26.52" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="16.2" y="373" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.20" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,767,676,750 samples, 8.36%)</title><rect x="909.4" y="437" width="98.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="912.37" y="447.5" >std::_Rb_tr..</text>
</g>
<g >
<title>malloc (181,818,180 samples, 0.86%)</title><rect x="1095.3" y="421" width="10.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1098.33" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1156.2" y="453" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1159.19" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="245" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.18" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.74" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="405" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.80" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="421" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.17" y="431.5" ></text>
</g>
<g >
<title>sim::is_valid_link (60,606,060 samples, 0.29%)</title><rect x="1148.3" y="453" width="3.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1151.30" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (2,212,121,190 samples, 10.46%)</title><rect x="451.8" y="437" width="123.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="454.80" y="447.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.48%)</title><rect x="24.1" y="149" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.09" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="35.4" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.36" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (171,717,170 samples, 0.81%)</title><rect x="12.3" y="453" width="9.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.25" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1113.9" y="421" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1116.93" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="373" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.80" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.24" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (20,202,020 samples, 0.10%)</title><rect x="313.2" y="453" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="316.17" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (191,919,190 samples, 0.91%)</title><rect x="11.1" y="469" width="10.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="143.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [11]&gt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1192.44" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.24%)</title><rect x="1161.3" y="437" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1164.26" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1142.7" y="421" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1145.66" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="261" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1158.4" y="437" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1161.44" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.05%)</title><rect x="258.5" y="453" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="261.51" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_from (40,404,040 samples, 0.19%)</title><rect x="1148.9" y="437" width="2.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1151.86" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="357" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="277" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.93" y="287.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="254.6" y="389" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="257.57" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.19%)</title><rect x="1180.4" y="469" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.42" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.34%)</title><rect x="21.8" y="485" width="15.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="24.83" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="213" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1190.18" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="485" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="341" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="437" width="5.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.80" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1173.1" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.09" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.73" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1113.4" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1116.36" y="431.5" ></text>
</g>
<g >
<title>sim::Event::get_time (20,202,020 samples, 0.10%)</title><rect x="49.4" y="485" width="1.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="52.45" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="229" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.49" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="351.5" ></text>
</g>
<g >
<title>all (21,151,514,940 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.80" y="287.5" ></text>
</g>
<g >
<title>Logger::info (2,202,020,180 samples, 10.41%)</title><rect x="647.9" y="421" width="122.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="650.90" y="431.5" >Logger::info</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (30,303,030 samples, 0.14%)</title><rect x="385.9" y="437" width="1.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="388.86" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="38.7" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.74" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="382.5" y="389" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="385.48" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="485" width="5.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.80" y="495.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (20,202,020 samples, 0.10%)</title><rect x="256.8" y="421" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="259.82" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="273.7" y="389" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="276.72" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,050,505,040 samples, 4.97%)</title><rect x="846.3" y="437" width="58.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="849.26" y="447.5" >sim::R..</text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (494,949,490 samples, 2.34%)</title><rect x="1151.7" y="469" width="27.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1154.68" y="479.5" >s..</text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="469" width="5.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.80" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.05%)</title><rect x="392.1" y="389" width="0.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="395.06" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1143.2" y="421" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.23" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="274.3" y="421" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="277.29" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="845.7" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="848.69" y="415.5" ></text>
</g>
<g >
<title>sim::Link::transmit (10,101,010 samples, 0.05%)</title><rect x="283.3" y="453" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="286.30" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1182.7" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.67" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="842.3" y="421" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="845.31" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1158.4" y="421" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1161.44" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (131,313,130 samples, 0.62%)</title><rect x="1141.0" y="437" width="7.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1143.97" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.80" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.14%)</title><rect x="1162.4" y="421" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1165.39" y="431.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.48%)</title><rect x="43.8" y="485" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="46.81" y="495.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (20,202,020 samples, 0.10%)</title><rect x="1132.0" y="469" width="1.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1134.96" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1139.3" y="389" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.28" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.14%)</title><rect x="1187.2" y="277" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.18" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="265.8" y="405" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="268.84" y="415.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.14%)</title><rect x="1143.2" y="405" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.23" y="415.5" ></text>
</g>
<g >
<title>cfree (252,525,250 samples, 1.19%)</title><rect x="596.1" y="437" width="14.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="599.06" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="391.5" y="405" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="394.50" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.24%)</title><rect x="1126.9" y="421" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1129.89" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="32.5" y="389" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.54" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="387.6" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="390.55" y="431.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="260.8" y="437" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="263.76" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.29%)</title><rect x="1144.9" y="421" width="3.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1147.92" y="431.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.19%)</title><rect x="1138.7" y="421" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1141.72" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (383,838,380 samples, 1.81%)</title><rect x="770.7" y="421" width="21.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="773.74" y="431.5" >[..</text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (262,626,260 samples, 1.24%)</title><rect x="560.6" y="421" width="14.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="563.55" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.53%)</title><rect x="23.5" y="309" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.52" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (60,606,060 samples, 0.29%)</title><rect x="265.8" y="421" width="3.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="268.84" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="396.75" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="12.3" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.25" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="229" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.75" y="239.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.43%)</title><rect x="399.4" y="453" width="5.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="402.39" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="1145.5" y="373" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.48" y="383.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="840.1" y="437" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="843.06" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1146.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.05" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.48%)</title><rect x="604.5" y="421" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="607.51" y="431.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1172.5" y="437" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1175.53" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="1165.2" y="453" width="1.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1168.21" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="517" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="203.8" y="469" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="206.85" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1134.8" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.78" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="415.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="838.9" y="421" width="1.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="841.93" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.19%)</title><rect x="906.6" y="421" width="2.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="909.55" y="431.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.05%)</title><rect x="30.9" y="437" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="33.85" y="447.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1126.3" y="421" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1129.32" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1124.1" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1127.07" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (141,414,140 samples, 0.67%)</title><rect x="387.6" y="437" width="7.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="390.55" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.19%)</title><rect x="388.7" y="405" width="2.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="391.68" y="415.5" ></text>
</g>
<g >
<title>cfree (818,181,810 samples, 3.87%)</title><rect x="206.1" y="469" width="45.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="209.10" y="479.5" >cfree</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="437" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.24" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="908.2" y="389" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="911.24" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="37.0" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.05" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1093.1" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.08" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="380.8" y="405" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="383.79" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.10%)</title><rect x="270.9" y="405" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="273.91" y="415.5" ></text>
</g>
<g >
<title>sim::SendData::operator (323,232,320 samples, 1.53%)</title><rect x="1112.2" y="469" width="18.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1115.23" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.43%)</title><rect x="1183.8" y="453" width="5.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.80" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.80" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (121,212,120 samples, 0.57%)</title><rect x="1169.1" y="453" width="6.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1172.15" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="12.8" y="405" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.82" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="23.0" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.96" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="283.3" y="437" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="286.30" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,808,080,770 samples, 18.00%)</title><rect x="627.6" y="437" width="212.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="630.61" y="447.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="388.7" y="389" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="391.68" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="393.8" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="396.75" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1161.3" y="405" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1164.26" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="259.1" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="262.07" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.10%)</title><rect x="22.4" y="437" width="1.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="25.40" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.80" y="271.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.29%)</title><rect x="317.7" y="453" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="320.68" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1008.0" y="437" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1010.98" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.48%)</title><rect x="24.1" y="181" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.09" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="391.5" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="394.50" y="271.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.38%)</title><rect x="610.1" y="437" width="4.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="613.14" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="273.7" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="276.72" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.19%)</title><rect x="383.0" y="421" width="2.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="386.05" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.10%)</title><rect x="278.8" y="437" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="281.80" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="22.4" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.40" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="273.2" y="405" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="276.16" y="415.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (404,040,400 samples, 1.91%)</title><rect x="748.2" y="405" width="22.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="751.20" y="415.5" >v..</text>
</g>
<g >
<title>__libc_start_main (21,131,312,920 samples, 99.90%)</title><rect x="11.1" y="549" width="1178.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.13" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.2" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.24" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.83" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="1138.2" y="437" width="2.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1141.16" y="447.5" ></text>
</g>
</g>
</svg>
