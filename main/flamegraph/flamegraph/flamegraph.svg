<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.23%)</title><rect x="884.3" y="325" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="887.34" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.08%)</title><rect x="1131.4" y="341" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1134.36" y="351.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.26%)</title><rect x="1154.0" y="357" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.01" y="367.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.04%)</title><rect x="1166.9" y="373" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1169.90" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="95.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.04%)</title><rect x="282.3" y="309" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="285.34" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.04%)</title><rect x="540.9" y="325" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="543.91" y="335.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (90,909,090 samples, 0.34%)</title><rect x="20.7" y="373" width="4.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="23.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="213" width="1.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.22" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="255.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.04%)</title><rect x="295.7" y="341" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="298.67" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="53" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="63.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="229" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1190.78" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="69" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="79.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="542.7" y="309" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="545.69" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (303,030,300 samples, 1.13%)</title><rect x="289.5" y="373" width="13.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="292.45" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.04%)</title><rect x="542.7" y="341" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="545.69" y="351.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.08%)</title><rect x="286.3" y="373" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="289.34" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="303.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.11%)</title><rect x="1179.3" y="341" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.34" y="351.5" ></text>
</g>
<g >
<title>sim::Link::transmit (50,505,050 samples, 0.19%)</title><rect x="305.4" y="389" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="308.44" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.15%)</title><rect x="1155.3" y="309" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.35" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="133" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="25.1" y="373" width="0.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="28.11" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="542.2" y="245" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="545.24" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="1162.0" y="389" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.01" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.08%)</title><rect x="535.1" y="341" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="538.14" y="351.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.11%)</title><rect x="1179.3" y="357" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.34" y="367.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.19%)</title><rect x="540.5" y="357" width="2.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="543.47" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1128.7" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1131.69" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.08%)</title><rect x="288.1" y="357" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="291.12" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="277" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.08%)</title><rect x="541.8" y="309" width="0.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="544.80" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.04%)</title><rect x="19.3" y="421" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="22.33" y="431.5" ></text>
</g>
<g >
<title>cfree (424,242,420 samples, 1.58%)</title><rect x="696.9" y="373" width="18.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="699.85" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="541.4" y="325" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="544.36" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="271.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (3,868,686,830 samples, 14.42%)</title><rect x="360.1" y="389" width="170.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="363.09" y="399.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.04%)</title><rect x="582.2" y="373" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="585.23" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="245" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1190.78" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.08%)</title><rect x="1176.7" y="261" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.67" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="245" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.22" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::SendData::operator (404,040,400 samples, 1.51%)</title><rect x="1125.6" y="405" width="17.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1128.58" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,303,030 samples, 0.11%)</title><rect x="1167.3" y="389" width="1.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1170.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="303.5" ></text>
</g>
<g >
<title>Logger::info (1,999,999,980 samples, 7.45%)</title><rect x="748.4" y="357" width="88.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="751.39" y="367.5" >Logger::info</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="536.9" y="277" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="539.91" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="53" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.41%)</title><rect x="27.8" y="293" width="4.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.77" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.04%)</title><rect x="1164.7" y="389" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1167.68" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1166.0" y="373" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.01" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.41%)</title><rect x="297.0" y="325" width="4.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="300.00" y="335.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.04%)</title><rect x="880.8" y="325" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="883.78" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="159.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.15%)</title><rect x="287.7" y="373" width="1.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="290.67" y="383.5" ></text>
</g>
<g >
<title>sim::Link::arrive (434,343,430 samples, 1.62%)</title><rect x="284.1" y="389" width="19.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="287.12" y="399.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.04%)</title><rect x="282.3" y="325" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="285.34" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="1129.6" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1132.58" y="335.5" ></text>
</g>
<g >
<title>main (26,606,060,340 samples, 99.17%)</title><rect x="19.8" y="453" width="1170.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="22.77" y="463.5" >main</text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.26%)</title><rect x="1154.0" y="325" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.01" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (151,515,150 samples, 0.56%)</title><rect x="33.1" y="373" width="6.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="36.10" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.08%)</title><rect x="533.4" y="373" width="0.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="536.36" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="181" width="0.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.89" y="191.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.04%)</title><rect x="1153.6" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1156.57" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="197" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="207.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.11%)</title><rect x="341.0" y="389" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="343.99" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.04%)</title><rect x="1151.8" y="373" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1154.79" y="383.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.15%)</title><rect x="1162.9" y="389" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1165.90" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="261" width="0.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.89" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.04%)</title><rect x="1186.4" y="261" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.45" y="271.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.11%)</title><rect x="1170.9" y="373" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1173.90" y="383.5" ></text>
</g>
<g >
<title>operator new (272,727,270 samples, 1.02%)</title><rect x="867.0" y="357" width="12.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="870.01" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="69" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="287.5" ></text>
</g>
<g >
<title>operator new (323,232,320 samples, 1.20%)</title><rect x="720.0" y="373" width="14.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="722.95" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.15%)</title><rect x="887.0" y="357" width="1.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="890.00" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.04%)</title><rect x="290.8" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="293.78" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.45%)</title><rect x="27.3" y="309" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.33" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (90,909,090 samples, 0.34%)</title><rect x="1153.1" y="373" width="4.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1156.12" y="383.5" ></text>
</g>
<g >
<title>sim::Process::operator (18,535,353,350 samples, 69.09%)</title><rect x="307.7" y="405" width="815.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="310.67" y="415.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="303.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (292,929,290 samples, 1.09%)</title><rect x="823.5" y="341" width="12.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="826.47" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="281.5" y="245" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="284.45" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="165" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.78" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="346.3" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.32" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1171.8" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.78" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="127.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="229" width="1.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.22" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="191.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (80,808,080 samples, 0.30%)</title><rect x="930.5" y="373" width="3.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="933.54" y="383.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.04%)</title><rect x="292.1" y="341" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="295.12" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="165" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.22" y="175.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="229" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.89" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="287.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.04%)</title><rect x="296.1" y="357" width="0.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="299.11" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.30%)</title><rect x="883.4" y="357" width="3.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="886.45" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="319.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="1126.9" y="373" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1129.91" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.15%)</title><rect x="1178.9" y="373" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1181.89" y="383.5" ></text>
</g>
<g >
<title>malloc (262,626,260 samples, 0.98%)</title><rect x="867.5" y="341" width="11.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="870.45" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1134.0" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.02" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="181" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.78" y="191.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.04%)</title><rect x="534.7" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="537.69" y="351.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.08%)</title><rect x="15.3" y="357" width="0.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.33" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.08%)</title><rect x="301.9" y="357" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="304.89" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="1133.6" y="341" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1136.58" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.04%)</title><rect x="281.5" y="261" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="284.45" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="341" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.23" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="101" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="111.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1185.1" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.11" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,303,030,270 samples, 12.31%)</title><rect x="734.2" y="373" width="145.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="737.17" y="383.5" >sim::Link::get_pac..</text>
</g>
<g >
<title>sim::Event::operator&gt; (2,939,393,910 samples, 10.96%)</title><rect x="52.2" y="421" width="129.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="55.21" y="431.5" >sim::Event::oper..</text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.04%)</title><rect x="303.7" y="389" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="306.67" y="399.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.26%)</title><rect x="16.2" y="357" width="3.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.22" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="293" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.56" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="1142.5" y="373" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1145.46" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.08%)</title><rect x="881.7" y="357" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="884.67" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (90,909,090 samples, 0.34%)</title><rect x="342.3" y="389" width="4.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="345.32" y="399.5" ></text>
</g>
<g >
<title>operator delete (111,111,110 samples, 0.41%)</title><rect x="42.9" y="421" width="4.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="45.88" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.26%)</title><rect x="298.8" y="261" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="301.78" y="271.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.11%)</title><rect x="1177.6" y="373" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.56" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.08%)</title><rect x="1130.5" y="341" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1133.47" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="95.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.26%)</title><rect x="349.0" y="389" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="351.98" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.11%)</title><rect x="1129.1" y="357" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1132.13" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="261" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.04%)</title><rect x="1186.0" y="277" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.00" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="290.3" y="341" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="293.34" y="351.5" ></text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.41%)</title><rect x="11.3" y="373" width="4.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.33" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="159.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.30%)</title><rect x="715.5" y="373" width="3.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="718.51" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="25.5" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.55" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.26%)</title><rect x="16.2" y="325" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.22" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="325" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.56" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.08%)</title><rect x="291.2" y="341" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="294.23" y="351.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.04%)</title><rect x="20.2" y="325" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="23.22" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.08%)</title><rect x="535.1" y="357" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="538.14" y="367.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.04%)</title><rect x="879.0" y="357" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="882.01" y="367.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::get_devices (10,101,010 samples, 0.04%)</title><rect x="1157.1" y="405" width="0.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1160.12" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="245" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="213" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.56" y="223.5" ></text>
</g>
<g >
<title>vsnprintf (141,414,140 samples, 0.53%)</title><rect x="26.4" y="341" width="6.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="29.44" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.79%)</title><rect x="10.4" y="437" width="9.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.44" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="373" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.23" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (20,202,020 samples, 0.08%)</title><rect x="557.8" y="389" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="560.79" y="399.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.38%)</title><rect x="297.4" y="309" width="4.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="300.45" y="319.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.04%)</title><rect x="1142.0" y="357" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1145.02" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.04%)</title><rect x="302.8" y="373" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="305.78" y="383.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.04%)</title><rect x="534.7" y="325" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="537.69" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.30%)</title><rect x="36.2" y="309" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.21" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.56%)</title><rect x="1133.1" y="357" width="6.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1136.13" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1128.7" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1131.69" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.26%)</title><rect x="16.2" y="341" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.22" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.04%)</title><rect x="539.1" y="373" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="542.13" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.11%)</title><rect x="536.9" y="309" width="1.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="539.91" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.04%)</title><rect x="302.3" y="341" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="305.33" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="10.9" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.89" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 0.11%)</title><rect x="280.6" y="325" width="1.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="283.56" y="335.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (40,404,040 samples, 0.15%)</title><rect x="530.2" y="389" width="1.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="533.25" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.04%)</title><rect x="1186.4" y="229" width="0.5" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.45" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.23%)</title><rect x="292.6" y="357" width="2.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="295.56" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="887.4" y="341" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="890.45" y="351.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,373,737,350 samples, 8.85%)</title><rect x="1018.5" y="389" width="104.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1021.51" y="399.5" >void sim::Sc..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.08%)</title><rect x="887.9" y="341" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="890.89" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.08%)</title><rect x="19.8" y="389" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="22.77" y="399.5" ></text>
</g>
<g >
<title>_IO_file_open (90,909,090 samples, 0.34%)</title><rect x="20.7" y="325" width="4.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="23.66" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.04%)</title><rect x="1181.6" y="389" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.56" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.08%)</title><rect x="1188.7" y="149" width="0.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.67" y="159.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1185.1" y="373" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.11" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.04%)</title><rect x="534.7" y="357" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="537.69" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (404,040,400 samples, 1.51%)</title><rect x="1125.6" y="389" width="17.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1128.58" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (121,212,120 samples, 0.45%)</title><rect x="296.6" y="357" width="5.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="299.56" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="101" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="111.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.04%)</title><rect x="538.7" y="341" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="541.69" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="111.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1127.8" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1130.80" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="1178.0" y="341" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.00" y="351.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="117" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.22" y="127.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1152.7" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1155.68" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="25.1" y="389" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="28.11" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.04%)</title><rect x="1166.5" y="373" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.45" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="319.5" ></text>
</g>
<g >
<title>sim::Generate::operator (131,313,130 samples, 0.49%)</title><rect x="277.5" y="405" width="5.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="280.45" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::try_to_put_data_to_device (70,707,070 samples, 0.26%)</title><rect x="279.7" y="373" width="3.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="282.68" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (878,787,870 samples, 3.28%)</title><rect x="1146.9" y="421" width="38.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1149.91" y="431.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.04%)</title><rect x="280.6" y="309" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="283.56" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.04%)</title><rect x="1189.1" y="133" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.11" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="325" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.23" y="335.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.04%)</title><rect x="24.7" y="357" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="27.66" y="367.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.04%)</title><rect x="19.8" y="373" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="22.77" y="383.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.04%)</title><rect x="542.2" y="277" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="545.24" y="287.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 0.90%)</title><rect x="1097.6" y="373" width="10.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1100.59" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="15.3" y="341" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.33" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="335.5" ></text>
</g>
<g >
<title>nons (26,828,282,560 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >nons</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="866.1" y="357" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="869.12" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1127.8" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1130.80" y="367.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.04%)</title><rect x="19.3" y="373" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="22.33" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.08%)</title><rect x="1129.6" y="341" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1132.58" y="351.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.04%)</title><rect x="1130.0" y="325" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1133.02" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.08%)</title><rect x="887.9" y="325" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="890.89" y="335.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.15%)</title><rect x="746.6" y="357" width="1.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="749.61" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.04%)</title><rect x="883.0" y="357" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="886.00" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="15.3" y="325" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.33" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="165" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="175.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.11%)</title><rect x="1096.3" y="373" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1099.26" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="1132.2" y="357" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1135.24" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (161,616,160 samples, 0.60%)</title><rect x="32.7" y="389" width="7.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="35.66" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="223.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.04%)</title><rect x="883.9" y="341" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="886.89" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (101,010,100 samples, 0.38%)</title><rect x="539.6" y="373" width="4.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="542.58" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (151,515,150 samples, 0.56%)</title><rect x="26.0" y="373" width="6.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="28.99" y="383.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.04%)</title><rect x="866.6" y="357" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="869.57" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.72%)</title><rect x="857.7" y="341" width="8.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="860.68" y="351.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.04%)</title><rect x="278.3" y="389" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="281.34" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.04%)</title><rect x="19.3" y="405" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.33" y="415.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="405" width="4.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1188.56" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.41%)</title><rect x="1152.2" y="389" width="4.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1155.24" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="197" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.22" y="207.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1130.5" y="277" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1133.47" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1150.0" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.02" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.04%)</title><rect x="542.7" y="357" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="545.69" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (161,616,160 samples, 0.60%)</title><rect x="25.5" y="389" width="7.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="28.55" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (454,545,450 samples, 1.69%)</title><rect x="19.8" y="405" width="20.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="22.77" y="415.5" ></text>
</g>
<g >
<title>cfree (424,242,420 samples, 1.58%)</title><rect x="258.8" y="405" width="18.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="261.80" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="357" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.56" y="367.5" ></text>
</g>
<g >
<title>__libc_start_main (26,818,181,550 samples, 99.96%)</title><rect x="10.4" y="485" width="1179.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.44" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="181" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.04%)</title><rect x="1186.4" y="245" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.45" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="293" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="303.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.04%)</title><rect x="532.5" y="373" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="535.47" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (393,939,390 samples, 1.47%)</title><rect x="663.5" y="357" width="17.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="666.53" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.04%)</title><rect x="294.8" y="325" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="297.78" y="335.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="213" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.78" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.23%)</title><rect x="884.3" y="293" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="887.34" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.04%)</title><rect x="543.1" y="341" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="546.13" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.26%)</title><rect x="36.7" y="293" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.66" y="303.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 1.20%)</title><rect x="851.9" y="357" width="14.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="854.91" y="367.5" ></text>
</g>
<g >
<title>malloc (232,323,230 samples, 0.87%)</title><rect x="724.0" y="357" width="10.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="726.95" y="367.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.04%)</title><rect x="543.6" y="341" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="546.58" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="24.2" y="37" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.22" y="47.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.04%)</title><rect x="540.9" y="309" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="543.91" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (26,818,181,550 samples, 99.96%)</title><rect x="10.4" y="469" width="1179.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.44" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::Link::get_from (30,303,030 samples, 0.11%)</title><rect x="1150.5" y="373" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1153.46" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.11%)</title><rect x="1188.2" y="181" width="1.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.22" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.04%)</title><rect x="20.2" y="357" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="23.22" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.38%)</title><rect x="1134.9" y="293" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.91" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="207.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.04%)</title><rect x="302.8" y="357" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="305.78" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.04%)</title><rect x="535.6" y="325" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="538.58" y="335.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.04%)</title><rect x="879.5" y="373" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="882.45" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="18.4" y="309" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.44" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.08%)</title><rect x="1130.5" y="325" width="0.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1133.47" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.04%)</title><rect x="20.2" y="373" width="0.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="23.22" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (454,545,450 samples, 1.69%)</title><rect x="19.8" y="437" width="20.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="22.77" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.08%)</title><rect x="10.4" y="389" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="207.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.23%)</title><rect x="884.3" y="309" width="2.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="887.34" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.08%)</title><rect x="1148.7" y="405" width="0.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1151.68" y="415.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.23%)</title><rect x="280.1" y="341" width="2.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="283.12" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="239.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.04%)</title><rect x="1139.8" y="357" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1142.80" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (333,333,330 samples, 1.24%)</title><rect x="1108.3" y="373" width="14.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1111.25" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1181.6" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.56" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="143.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.38%)</title><rect x="1185.6" y="437" width="4.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1188.56" y="447.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.04%)</title><rect x="886.6" y="261" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="889.56" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 0.83%)</title><rect x="267.7" y="389" width="9.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="270.68" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1170.5" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.45" y="383.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.08%)</title><rect x="10.4" y="357" width="0.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.44" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.04%)</title><rect x="1186.4" y="213" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.45" y="223.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.08%)</title><rect x="306.8" y="373" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="309.78" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="882.6" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="885.56" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="281.9" y="325" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="284.90" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.45%)</title><rect x="34.4" y="325" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.44" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.19%)</title><rect x="1137.1" y="261" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.13" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="127.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.26%)</title><rect x="1154.0" y="341" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.01" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.41%)</title><rect x="1134.5" y="309" width="4.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1137.47" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="357" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.23" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.19%)</title><rect x="884.8" y="277" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="887.78" y="287.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.19%)</title><rect x="580.0" y="373" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="583.01" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="341" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.56" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.04%)</title><rect x="544.5" y="373" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="547.47" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="541.4" y="309" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="544.36" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (21,797,979,580 samples, 81.25%)</title><rect x="188.2" y="421" width="958.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="191.16" y="431.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.15%)</title><rect x="290.8" y="357" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="293.78" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="245" width="0.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.89" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.23" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 0.68%)</title><rect x="11.3" y="389" width="8.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.33" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="117" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.08%)</title><rect x="1184.7" y="405" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1187.67" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 0.94%)</title><rect x="704.4" y="357" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="707.41" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.08%)</title><rect x="538.2" y="357" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="541.25" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="42.0" y="421" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.99" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1152.7" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1155.68" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1166.0" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.01" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="293.0" y="341" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.00" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.49%)</title><rect x="34.0" y="357" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="36.99" y="367.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="421" width="4.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1188.56" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="223.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (454,545,450 samples, 1.69%)</title><rect x="19.8" y="421" width="20.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="22.77" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="280.6" y="277" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="283.56" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.04%)</title><rect x="543.6" y="325" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="546.58" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="24.2" y="53" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.22" y="63.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.49%)</title><rect x="1134.0" y="341" width="5.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1137.02" y="351.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.04%)</title><rect x="19.3" y="357" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="22.33" y="367.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.04%)</title><rect x="881.2" y="341" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="884.23" y="351.5" ></text>
</g>
<g >
<title>_start (26,818,181,550 samples, 99.96%)</title><rect x="10.4" y="501" width="1179.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.44" y="511.5" >_start</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="302.3" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="305.33" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.23%)</title><rect x="22.0" y="69" width="2.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.00" y="79.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.08%)</title><rect x="10.4" y="373" width="0.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.44" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.11%)</title><rect x="1172.2" y="389" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1175.23" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="149" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="159.5" ></text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 0.45%)</title><rect x="34.4" y="341" width="5.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="37.44" y="351.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.08%)</title><rect x="39.8" y="437" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="42.77" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.08%)</title><rect x="1176.7" y="277" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.67" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1166.0" y="357" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.01" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.04%)</title><rect x="879.9" y="357" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="882.89" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="540.5" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="543.47" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="1179.3" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.34" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="213" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="223.5" ></text>
</g>
<g >
<title>sim::Event::Event (181,818,180 samples, 0.68%)</title><rect x="352.1" y="389" width="8.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="355.09" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="536.9" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="539.91" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (50,505,050 samples, 0.19%)</title><rect x="555.6" y="389" width="2.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="558.57" y="399.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.04%)</title><rect x="1189.6" y="421" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.56" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="239.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.04%)</title><rect x="1142.9" y="373" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1145.91" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.38%)</title><rect x="297.4" y="293" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="300.45" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="133" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="1126.0" y="373" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.02" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1157.1" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.12" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.23%)</title><rect x="884.3" y="341" width="2.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="887.34" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.30%)</title><rect x="21.1" y="85" width="3.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.11" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.04%)</title><rect x="280.6" y="293" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="283.56" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.08%)</title><rect x="541.8" y="325" width="0.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="544.80" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.30%)</title><rect x="298.3" y="277" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="301.34" y="287.5" ></text>
</g>
<g >
<title>_IO_file_fopen (90,909,090 samples, 0.34%)</title><rect x="20.7" y="341" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="23.66" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.15%)</title><rect x="884.8" y="261" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="887.78" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="133" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.04%)</title><rect x="535.6" y="309" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="538.58" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (171,717,170 samples, 0.64%)</title><rect x="1149.6" y="405" width="7.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1152.57" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="1179.8" y="309" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.78" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.08%)</title><rect x="304.6" y="389" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="307.56" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="290.3" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="293.34" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.08%)</title><rect x="31.8" y="261" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.77" y="271.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,101,010 samples, 0.04%)</title><rect x="1189.6" y="405" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1192.56" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.04%)</title><rect x="283.7" y="389" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="286.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="159.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (474,747,470 samples, 1.77%)</title><rect x="283.2" y="405" width="20.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="286.23" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="175.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.08%)</title><rect x="719.1" y="373" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="722.07" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="295.2" y="357" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="298.23" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.04%)</title><rect x="882.1" y="325" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="885.12" y="335.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.04%)</title><rect x="1127.8" y="373" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1130.80" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (90,909,090 samples, 0.34%)</title><rect x="20.7" y="389" width="4.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="23.66" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.04%)</title><rect x="1130.9" y="309" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1133.91" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="542.2" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="545.24" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="229" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.56" y="239.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="277" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1188.56" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="101" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1191.22" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="540.0" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="543.02" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1157.1" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.12" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.04%)</title><rect x="1147.8" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1150.79" y="415.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.19%)</title><rect x="346.8" y="389" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="349.76" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.04%)</title><rect x="24.7" y="373" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="27.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="149" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.22" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.15%)</title><rect x="30.9" y="277" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.88" y="287.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 0.75%)</title><rect x="10.4" y="421" width="8.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.44" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="541.8" y="277" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="544.80" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="542.2" y="229" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="545.24" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="197" width="0.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.89" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="281.5" y="197" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="284.45" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (111,111,110 samples, 0.41%)</title><rect x="534.2" y="373" width="4.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="537.25" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.04%)</title><rect x="1181.6" y="405" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1184.56" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (80,808,080 samples, 0.30%)</title><rect x="304.1" y="405" width="3.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="307.11" y="415.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.04%)</title><rect x="289.0" y="357" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="292.01" y="367.5" ></text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.38%)</title><rect x="47.8" y="421" width="4.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="50.76" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="536.9" y="261" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="539.91" y="271.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.04%)</title><rect x="1127.4" y="373" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1130.36" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1130.5" y="293" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.47" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.04%)</title><rect x="541.4" y="293" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="544.36" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.19%)</title><rect x="540.5" y="341" width="2.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="543.47" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.78" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="532.9" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="535.91" y="383.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="389" width="4.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1188.56" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.04%)</title><rect x="281.5" y="309" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="284.45" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="281.5" y="213" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="284.45" y="223.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.04%)</title><rect x="1148.2" y="405" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1151.24" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.11%)</title><rect x="536.9" y="325" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="539.91" y="335.5" ></text>
</g>
<g >
<title>fopen (90,909,090 samples, 0.34%)</title><rect x="20.7" y="357" width="4.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="23.66" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.11%)</title><rect x="536.9" y="341" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="539.91" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.11%)</title><rect x="1176.2" y="293" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.23" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="175.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.04%)</title><rect x="879.9" y="373" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="882.89" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="882.1" y="309" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="885.12" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.04%)</title><rect x="24.7" y="389" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="27.66" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.34%)</title><rect x="1135.4" y="277" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.35" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="373" width="4.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1188.56" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.19%)</title><rect x="1140.2" y="373" width="2.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1143.24" y="383.5" ></text>
</g>
<g >
<title>pthread_once@plt (10,101,010 samples, 0.04%)</title><rect x="1139.4" y="325" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1142.35" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.15%)</title><rect x="1187.8" y="261" width="1.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.78" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1166.0" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.01" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.04%)</title><rect x="281.5" y="293" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="284.45" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="239.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.04%)</title><rect x="287.2" y="373" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="290.23" y="383.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,606,060 samples, 0.23%)</title><rect x="181.5" y="421" width="2.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="184.49" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 0.23%)</title><rect x="1186.9" y="277" width="2.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.89" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="69" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1191.22" y="79.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::create_new_data_packet (80,808,080 samples, 0.30%)</title><rect x="279.2" y="389" width="3.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="282.23" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="281.5" y="229" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="284.45" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.34%)</title><rect x="1185.6" y="309" width="4.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.56" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (70,707,070 samples, 0.26%)</title><rect x="16.2" y="373" width="3.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="19.22" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1177.1" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.12" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="307.2" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="310.22" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="288.6" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="291.56" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1133.1" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.13" y="351.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.04%)</title><rect x="1132.7" y="357" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1135.69" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.04%)</title><rect x="541.4" y="277" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="544.36" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.34%)</title><rect x="20.7" y="229" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.66" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.04%)</title><rect x="295.7" y="357" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="298.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="191.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.04%)</title><rect x="281.0" y="309" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="284.01" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="542.7" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="545.69" y="335.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.04%)</title><rect x="1186.0" y="261" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.04%)</title><rect x="1187.3" y="149" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.33" y="159.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (191,919,190 samples, 0.72%)</title><rect x="880.3" y="373" width="8.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="883.34" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="281.5" y="277" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="284.45" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.04%)</title><rect x="1186.4" y="277" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.45" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.04%)</title><rect x="544.0" y="373" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="547.02" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="307.2" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="310.22" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="197" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.56" y="207.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IFlow&gt;&amp;, Size&lt;Byte&gt;&amp;&gt; (10,101,010 samples, 0.04%)</title><rect x="282.8" y="389" width="0.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="285.79" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="117" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.04%)</title><rect x="1180.7" y="389" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1183.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.08%)</title><rect x="880.8" y="357" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="883.78" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="38.4" y="277" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.43" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.19%)</title><rect x="1165.1" y="389" width="2.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1168.12" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,454,545,350 samples, 38.97%)</title><rect x="558.7" y="389" width="459.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="561.68" y="399.5" >sim::Switch::process</text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.15%)</title><rect x="1162.9" y="357" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.90" y="367.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (80,808,080 samples, 0.30%)</title><rect x="1143.4" y="405" width="3.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1146.35" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1152.7" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1155.68" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.04%)</title><rect x="888.8" y="373" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="891.78" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.04%)</title><rect x="278.8" y="389" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="281.79" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.33" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.08%)</title><rect x="541.8" y="293" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="544.80" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (272,727,270 samples, 1.02%)</title><rect x="1128.2" y="373" width="12.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1131.25" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="261" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.56" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (141,414,140 samples, 0.53%)</title><rect x="26.4" y="357" width="6.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="29.44" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (151,515,150 samples, 0.56%)</title><rect x="1174.0" y="389" width="6.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1177.01" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.11%)</title><rect x="293.9" y="341" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="296.89" y="351.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.72%)</title><rect x="1099.8" y="357" width="8.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1102.81" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.08%)</title><rect x="306.8" y="357" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="309.78" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="293" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="545.69" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1164.2" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.23" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 0.75%)</title><rect x="10.4" y="405" width="8.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.44" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.53%)</title><rect x="26.4" y="325" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.44" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (80,808,080 samples, 0.30%)</title><rect x="552.0" y="389" width="3.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="555.02" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="280.1" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="283.12" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.32%)</title><rect x="836.4" y="357" width="15.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="839.36" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (60,606,060 samples, 0.23%)</title><rect x="1182.0" y="405" width="2.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.04%)</title><rect x="20.2" y="341" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="23.22" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="223.5" ></text>
</g>
<g >
<title>all (26,828,282,560 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="143.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.04%)</title><rect x="880.8" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="883.78" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.79%)</title><rect x="10.4" y="453" width="9.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.44" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (20,202,020 samples, 0.08%)</title><rect x="543.1" y="357" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="546.13" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.04%)</title><rect x="1157.1" y="373" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1160.12" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="536.5" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="539.47" y="351.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.04%)</title><rect x="19.8" y="357" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="22.77" y="367.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (545,454,540 samples, 2.03%)</title><rect x="1157.6" y="405" width="24.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1160.57" y="415.5" >s..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.04%)</title><rect x="882.1" y="341" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="885.12" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.04%)</title><rect x="1186.0" y="245" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.00" y="255.5" ></text>
</g>
<g >
<title>open64 (90,909,090 samples, 0.34%)</title><rect x="20.7" y="309" width="4.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="23.66" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.04%)</title><rect x="1173.6" y="389" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1176.56" y="399.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.11%)</title><rect x="1177.6" y="357" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.56" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.04%)</title><rect x="1130.5" y="309" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1133.47" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.04%)</title><rect x="1187.3" y="165" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.33" y="175.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.04%)</title><rect x="303.2" y="389" width="0.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="306.22" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.11%)</title><rect x="300.6" y="245" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="303.56" y="255.5" ></text>
</g>
<g >
<title>sim::is_valid_link (40,404,040 samples, 0.15%)</title><rect x="1150.5" y="389" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1153.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="542.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="545.69" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.04%)</title><rect x="1168.7" y="389" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1171.67" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="133" width="0.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1191.22" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,919,191,900 samples, 7.15%)</title><rect x="934.1" y="373" width="84.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="937.10" y="383.5" >std::_Rb_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="10.0" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.15%)</title><rect x="1162.9" y="373" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1165.90" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.04%)</title><rect x="538.2" y="341" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="541.25" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (939,393,930 samples, 3.50%)</title><rect x="889.2" y="373" width="41.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="892.22" y="383.5" >sim..</text>
</g>
<g >
<title>sim::Host::process (292,929,290 samples, 1.09%)</title><rect x="532.0" y="389" width="12.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="535.03" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.15%)</title><rect x="1130.5" y="357" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1133.47" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.8" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.77" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (70,707,070 samples, 0.26%)</title><rect x="1169.1" y="389" width="3.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1172.12" y="399.5" ></text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.04%)</title><rect x="19.8" y="341" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="22.77" y="351.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.34%)</title><rect x="184.2" y="421" width="4.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="187.16" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (363,636,360 samples, 1.36%)</title><rect x="680.9" y="373" width="16.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="683.86" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (10,101,010 samples, 0.04%)</title><rect x="1181.1" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.11" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.04%)</title><rect x="1187.8" y="197" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.78" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1136.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.69" y="271.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.04%)</title><rect x="291.7" y="325" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="294.67" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.56" y="191.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (60,606,060 samples, 0.23%)</title><rect x="280.1" y="357" width="2.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="283.12" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.04%)</title><rect x="1139.8" y="341" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1142.80" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10,101,010 samples, 0.04%)</title><rect x="1188.2" y="85" width="0.5" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1191.22" y="95.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (26,030,302,770 samples, 97.03%)</title><rect x="40.7" y="437" width="1144.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="43.66" y="447.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.08%)</title><rect x="1186.9" y="213" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.89" y="223.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.04%)</title><rect x="1185.6" y="245" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.56" y="255.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.45%)</title><rect x="296.6" y="341" width="5.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="299.56" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="19.3" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.33" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.04%)</title><rect x="1153.6" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.57" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.04%)</title><rect x="10.9" y="341" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.89" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (161,616,160 samples, 0.60%)</title><rect x="544.9" y="389" width="7.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="547.91" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.04%)</title><rect x="20.2" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.22" y="223.5" ></text>
</g>
<g >
<title>sim::Process::~Process (60,606,060 samples, 0.23%)</title><rect x="1122.9" y="405" width="2.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1125.91" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.19%)</title><rect x="536.0" y="357" width="2.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="539.02" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (2,232,323,210 samples, 8.32%)</title><rect x="582.7" y="373" width="98.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="585.67" y="383.5" >Logger::warn</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.41%)</title><rect x="1134.5" y="325" width="4.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.47" y="335.5" ></text>
</g>
</g>
</svg>
