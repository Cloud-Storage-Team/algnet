<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.10%)</title><rect x="269.3" y="373" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="272.30" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (272,727,270 samples, 1.31%)</title><rect x="275.0" y="389" width="15.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="278.01" y="399.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (20,202,020 samples, 0.10%)</title><rect x="1123.7" y="373" width="1.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1126.75" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="282.4" y="325" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="285.44" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="405" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1154.16" y="415.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.05%)</title><rect x="36.3" y="357" width="0.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="39.27" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.05%)</title><rect x="36.8" y="389" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="39.84" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.34%)</title><rect x="1174.6" y="373" width="4.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.58" y="383.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.34%)</title><rect x="625.1" y="389" width="4.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="628.13" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="165" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.05%)</title><rect x="21.4" y="341" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="24.42" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1122.6" y="373" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1125.60" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="149" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.10%)</title><rect x="1160.3" y="405" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1163.30" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="1176.3" y="325" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.29" y="335.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.92%)</title><rect x="634.8" y="373" width="10.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="637.84" y="383.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="393.8" y="341" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="396.81" y="351.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,363,636,220 samples, 68.83%)</title><rect x="296.1" y="421" width="812.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="299.15" y="431.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="841.0" y="373" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="844.03" y="383.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.29%)</title><rect x="22.0" y="389" width="3.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="24.99" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.8" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.84" y="351.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="902.1" y="357" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="905.14" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.44%)</title><rect x="843.3" y="389" width="5.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="846.31" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="245" width="1.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.14" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.05%)</title><rect x="20.9" y="405" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="23.85" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="269.3" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="272.30" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="277.9" y="341" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="280.87" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="395.5" y="357" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="398.53" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.1" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.14" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="20.3" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.28" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.3" y="261" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.29" y="271.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.05%)</title><rect x="1142.6" y="405" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1145.59" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="35.7" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.70" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="207.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="325" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.72" y="335.5" ></text>
</g>
<g >
<title>sim::Event::Event (40,404,040 samples, 0.19%)</title><rect x="333.3" y="405" width="2.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="336.27" y="415.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.48%)</title><rect x="29.4" y="357" width="5.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="32.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="397.2" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="400.24" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="229" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="181" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="191.5" ></text>
</g>
<g >
<title>cfree (121,212,120 samples, 0.58%)</title><rect x="38.0" y="437" width="6.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="40.99" y="447.5" ></text>
</g>
<g >
<title>all (20,868,686,660 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="295.6" y="373" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="298.58" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.05%)</title><rect x="1186.0" y="245" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1189.00" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.8" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.84" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.29%)</title><rect x="22.0" y="405" width="3.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="24.99" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="303.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="437" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.86" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.24%)</title><rect x="1151.7" y="389" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1154.73" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1142.0" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.02" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.19%)</title><rect x="1179.1" y="421" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.15" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="384.1" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="387.10" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="394.4" y="341" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="397.39" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="843.9" y="373" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="846.88" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="133" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1113.5" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1116.47" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="197" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.72" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="392.1" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="395.10" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.44%)</title><rect x="279.0" y="373" width="5.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="282.01" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="820.5" y="373" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="823.46" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.05%)</title><rect x="397.8" y="389" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="400.81" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="846.7" y="357" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="849.74" y="367.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="447.5" y="373" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="450.50" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.39%)</title><rect x="1108.3" y="421" width="4.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1111.33" y="431.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (282,828,280 samples, 1.36%)</title><rect x="568.6" y="373" width="16.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="571.59" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (929,292,920 samples, 4.45%)</title><rect x="50.6" y="437" width="52.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="53.55" y="447.5" >sim::..</text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="19.7" y="373" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.71" y="383.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="266.4" y="389" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="269.45" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="389" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.86" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="31.7" y="325" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.70" y="335.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (50,505,050 samples, 0.24%)</title><rect x="900.4" y="389" width="2.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="903.43" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="23.7" y="85" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.71" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.10%)</title><rect x="1181.4" y="421" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.43" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,464,646,430 samples, 16.60%)</title><rect x="646.3" y="389" width="195.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="649.26" y="399.5" >sim::Link::get_packet</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="269.9" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="272.87" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="1176.3" y="293" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.29" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="28.3" y="405" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="31.28" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (131,313,130 samples, 0.63%)</title><rect x="412.1" y="405" width="7.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="415.09" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="284.2" y="373" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="287.15" y="383.5" ></text>
</g>
<g >
<title>sim::Host::process (272,727,270 samples, 1.31%)</title><rect x="383.0" y="405" width="15.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="385.96" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1152.3" y="341" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1155.30" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="197" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="207.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1149.4" y="405" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1152.45" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (505,050,500 samples, 2.42%)</title><rect x="264.7" y="421" width="28.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="267.73" y="431.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="239.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="385.8" y="373" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="388.82" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="260.7" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="263.74" y="367.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1146.6" y="405" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1149.59" y="415.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1154.0" y="373" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1157.02" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="842.7" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="845.74" y="335.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 1.69%)</title><rect x="605.1" y="389" width="20.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="608.14" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="239.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (888,888,880 samples, 4.26%)</title><rect x="1133.5" y="437" width="50.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1136.46" y="447.5" >sim::..</text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.34%)</title><rect x="1174.6" y="389" width="4.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.58" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="181" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.14" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="181" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="191.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.10%)</title><rect x="10.6" y="373" width="1.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.57" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="277.9" y="357" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="280.87" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (2,414,141,390 samples, 11.57%)</title><rect x="448.1" y="389" width="136.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="451.07" y="399.5" >Logger::warn</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="387.0" y="341" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="389.96" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.29%)</title><rect x="1124.9" y="373" width="3.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1127.89" y="383.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.10%)</title><rect x="1132.3" y="421" width="1.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1135.31" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="846.2" y="357" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="849.17" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.15%)</title><rect x="277.3" y="373" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="280.30" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="331.6" y="405" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="334.56" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (50,505,050 samples, 0.24%)</title><rect x="293.3" y="421" width="2.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="296.29" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1139.7" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.74" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="261.3" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="264.31" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="229" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="239.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (70,707,070 samples, 0.34%)</title><rect x="251.6" y="421" width="4.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="254.60" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="386.4" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="389.39" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (181,818,180 samples, 0.87%)</title><rect x="1168.3" y="405" width="10.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.30" y="415.5" ></text>
</g>
<g >
<title>Logger::info (2,070,707,050 samples, 9.92%)</title><rect x="668.0" y="373" width="117.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="670.97" y="383.5" >Logger::info</text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.15%)</title><rect x="666.3" y="373" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="669.25" y="383.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.15%)</title><rect x="275.6" y="373" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="278.59" y="383.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.19%)</title><rect x="1151.7" y="373" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1154.73" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="385.8" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="388.82" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.92%)</title><rect x="1097.5" y="373" width="10.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1100.47" y="383.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1167.2" y="373" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.15" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="271.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.29%)</title><rect x="260.2" y="373" width="3.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="263.16" y="383.5" ></text>
</g>
<g >
<title>cfree (838,383,830 samples, 4.02%)</title><rect x="204.2" y="421" width="47.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="207.19" y="431.5" >cfree</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="309" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.72" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,858,585,650 samples, 99.95%)</title><rect x="10.6" y="485" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.57" y="495.5" >[libc.so.6]</text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="388.1" y="373" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="391.10" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="388.7" y="373" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="391.67" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (181,818,180 samples, 0.87%)</title><rect x="10.6" y="421" width="10.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.57" y="431.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (40,404,040 samples, 0.19%)</title><rect x="290.4" y="389" width="2.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="293.44" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.36%)</title><rect x="21.4" y="453" width="16.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="24.42" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.05%)</title><rect x="292.7" y="389" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="295.72" y="399.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.53%)</title><rect x="1183.7" y="453" width="6.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.72" y="463.5" ></text>
</g>
<g >
<title>operator new (313,131,310 samples, 1.50%)</title><rect x="822.7" y="373" width="17.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="825.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="207.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="341" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.72" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="373" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.72" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="645.1" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="648.12" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1139.7" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1142.74" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.1" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.14" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="1094.0" y="389" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1097.05" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1184.3" y="293" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.29" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="1182.6" y="421" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1185.58" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="335.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (141,414,140 samples, 0.68%)</title><rect x="1135.7" y="421" width="8.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1138.74" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1128.3" y="389" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1131.32" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1159.7" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.73" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="841.0" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="844.03" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="395.0" y="357" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="397.96" y="367.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.39%)</title><rect x="44.8" y="437" width="4.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="47.84" y="447.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="405" width="5.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.72" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (111,111,110 samples, 0.53%)</title><rect x="258.5" y="389" width="6.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="261.45" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (30,303,030 samples, 0.15%)</title><rect x="396.1" y="373" width="1.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="399.10" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.10%)</title><rect x="325.3" y="405" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="328.28" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="842.7" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="845.74" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.34%)</title><rect x="391.0" y="357" width="4.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="393.96" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1167.2" y="341" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.15" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (131,313,130 samples, 0.63%)</title><rect x="390.4" y="389" width="7.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="393.39" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (80,808,080 samples, 0.39%)</title><rect x="270.4" y="373" width="4.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="273.45" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="645.7" y="389" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="648.69" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (616,161,610 samples, 2.95%)</title><rect x="335.6" y="405" width="34.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="338.56" y="415.5" >si..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.44%)</title><rect x="385.2" y="389" width="5.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="388.25" y="399.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.29%)</title><rect x="22.0" y="357" width="3.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="24.99" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="191.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (90,909,090 samples, 0.44%)</title><rect x="1151.7" y="405" width="5.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1154.73" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="287.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="421" width="5.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.72" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="223.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1142.0" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1145.02" y="351.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1167.2" y="357" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1170.15" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="271.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::get_flag (10,101,010 samples, 0.05%)</title><rect x="390.4" y="373" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="393.39" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="213" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="223.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 1.16%)</title><rect x="1094.6" y="389" width="13.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1097.62" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="261" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.86" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.2" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.16" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="389" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.15" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (80,808,080 samples, 0.39%)</title><rect x="403.0" y="405" width="4.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="405.95" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1178.0" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.01" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.19%)</title><rect x="1166.0" y="389" width="2.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1169.01" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="1176.3" y="309" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.29" y="319.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1121.5" y="341" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1124.46" y="351.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (20,202,020 samples, 0.10%)</title><rect x="842.2" y="357" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="845.17" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="394.4" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="397.39" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1139.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.74" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="175.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="289.9" y="373" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="292.86" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1147.7" y="373" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.73" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,272,727,070 samples, 97.14%)</title><rect x="37.4" y="453" width="1146.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="40.42" y="463.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.05%)</title><rect x="1186.0" y="229" width="0.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1189.00" y="239.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.34%)</title><rect x="327.6" y="405" width="4.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="330.56" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1185.4" y="277" width="1.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1188.43" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.15%)</title><rect x="1129.5" y="421" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1132.46" y="431.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="1149.4" y="389" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1152.45" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="326.4" y="405" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="329.42" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.48%)</title><rect x="29.4" y="341" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.42" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="25.4" y="405" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="28.42" y="415.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="213" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.14" y="223.5" ></text>
</g>
<g >
<title>utils::create_all_directories (10,101,010 samples, 0.05%)</title><rect x="36.8" y="405" width="0.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="39.84" y="415.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="229" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.57" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="386.4" y="373" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="389.39" y="383.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 0.15%)</title><rect x="629.1" y="389" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="632.13" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="165" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.29" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="281.9" y="341" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="284.87" y="351.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="1112.9" y="389" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1115.89" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="22.0" y="293" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.99" y="303.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1150.0" y="373" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1153.02" y="383.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (20,202,020 samples, 0.10%)</title><rect x="1150.0" y="405" width="1.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1153.02" y="415.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.10%)</title><rect x="842.2" y="389" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="845.17" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="229" width="1.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.14" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="1158.6" y="405" width="1.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1161.59" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="11.1" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.14" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.05%)</title><rect x="284.7" y="373" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="287.72" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="405" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1146.17" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.34%)</title><rect x="1174.6" y="357" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.58" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1137.5" y="389" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.45" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="245" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1187.86" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="275.6" y="357" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="278.59" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.05%)</title><rect x="1178.6" y="421" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1181.58" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (313,131,310 samples, 1.50%)</title><rect x="785.1" y="373" width="17.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="788.05" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="23.1" y="101" width="2.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.14" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="181" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="22.0" y="277" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.99" y="287.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="197" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.14" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1142.0" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.02" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="843.9" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="846.88" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="197" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="207.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.29%)</title><rect x="22.0" y="373" width="3.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="24.99" y="383.5" ></text>
</g>
<g >
<title>sim::Generate::operator (161,616,160 samples, 0.77%)</title><rect x="255.6" y="421" width="9.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="258.60" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="282.4" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="285.44" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,353,535,250 samples, 49.61%)</title><rect x="419.5" y="405" width="585.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="422.52" y="415.5" >sim::Switch::process</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (80,808,080 samples, 0.39%)</title><rect x="16.3" y="389" width="4.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="19.28" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="165" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.72" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="133" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.34%)</title><rect x="1138.6" y="389" width="4.0" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1141.60" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.87%)</title><rect x="810.2" y="357" width="10.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="813.18" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.4" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.43" y="127.5" ></text>
</g>
<g >
<title>nons (20,868,686,660 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.4" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.43" y="111.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (606,060,600 samples, 2.90%)</title><rect x="1144.3" y="421" width="34.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1147.31" y="431.5" >si..</text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1138.0" y="389" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1141.03" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (131,313,130 samples, 0.63%)</title><rect x="1114.6" y="373" width="7.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1117.61" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="267.0" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="270.02" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="269.9" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="272.87" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.48%)</title><rect x="29.4" y="373" width="5.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="32.42" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="261" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.57" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="261" width="1.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.14" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="840.5" y="373" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="843.45" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,767,676,750 samples, 8.47%)</title><rect x="903.3" y="389" width="99.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="906.28" y="399.5" >std::_Rb_tre..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1142.0" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.02" y="367.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1128.3" y="373" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1131.32" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="397.2" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="400.24" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="392.7" y="309" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="395.67" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="902.1" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="905.14" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="389" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1159.30" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1127.7" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1130.74" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="22.0" y="309" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.99" y="319.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.15%)</title><rect x="1158.6" y="389" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1161.59" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="847.9" y="373" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="850.88" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (161,616,160 samples, 0.77%)</title><rect x="11.7" y="405" width="9.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.71" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1123.2" y="373" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1126.18" y="383.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.05%)</title><rect x="103.1" y="437" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="106.10" y="447.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="395.0" y="341" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="397.96" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="262.4" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="265.45" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="263.0" y="341" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="266.02" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="255.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.19%)</title><rect x="445.8" y="389" width="2.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="448.79" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="32.3" y="309" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.27" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.05%)</title><rect x="284.7" y="357" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="287.72" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="11.7" y="357" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.71" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (20,202,020 samples, 0.10%)</title><rect x="263.6" y="373" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="266.59" y="383.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.36%)</title><rect x="21.4" y="437" width="16.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="24.42" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.2" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.16" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="245" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1188.43" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="14.6" y="325" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.57" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="387.0" y="357" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="389.96" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,101,010 samples, 0.05%)</title><rect x="397.2" y="341" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="400.24" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.15%)</title><rect x="281.3" y="357" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="284.30" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="267.0" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="270.02" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (363,636,360 samples, 1.74%)</title><rect x="584.6" y="389" width="20.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="587.58" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.10%)</title><rect x="396.1" y="341" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="399.10" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="117" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="127.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="437" width="5.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.72" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="259.6" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="262.59" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="393.2" y="325" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="396.24" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="21.4" y="373" width="0.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="24.42" y="383.5" ></text>
</g>
<g >
<title>sim::Event::get_time (20,202,020 samples, 0.10%)</title><rect x="49.4" y="437" width="1.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="52.41" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (101,010,100 samples, 0.48%)</title><rect x="29.4" y="389" width="5.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="32.42" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.05%)</title><rect x="21.4" y="405" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="24.42" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="263.6" y="341" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="266.59" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="1156.9" y="405" width="1.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1159.87" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1143.7" y="421" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1146.74" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (80,808,080 samples, 0.39%)</title><rect x="285.3" y="373" width="4.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="288.30" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.10%)</title><rect x="1185.4" y="261" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1188.43" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.15" y="383.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (131,313,130 samples, 0.63%)</title><rect x="1114.6" y="389" width="7.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1117.61" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="357" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.72" y="367.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1151.7" y="357" width="2.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1154.73" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="269.9" y="341" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="272.87" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="282.4" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="285.44" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="388.7" y="357" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="391.67" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.05%)</title><rect x="1150.6" y="389" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1153.59" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="392.1" y="341" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="395.10" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="295.6" y="389" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="298.58" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (70,707,070 samples, 0.34%)</title><rect x="271.0" y="357" width="4.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="274.02" y="367.5" ></text>
</g>
<g >
<title>main (20,666,666,460 samples, 99.03%)</title><rect x="21.4" y="469" width="1168.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.42" y="479.5" >main</text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.29%)</title><rect x="22.0" y="341" width="3.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="24.99" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.05%)</title><rect x="21.4" y="357" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="24.42" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="35.1" y="405" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="38.13" y="415.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="267.6" y="389" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="270.59" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="255.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 0.29%)</title><rect x="1185.4" y="293" width="3.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.43" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (121,212,120 samples, 0.58%)</title><rect x="268.2" y="389" width="6.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="271.16" y="399.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.29%)</title><rect x="22.0" y="325" width="3.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="24.99" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.10%)</title><rect x="1184.3" y="277" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.29" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (888,888,880 samples, 4.26%)</title><rect x="848.5" y="389" width="50.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="851.45" y="399.5" >sim::..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="842.7" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="845.74" y="351.5" ></text>
</g>
<g >
<title>sim::Link::transmit (50,505,050 samples, 0.24%)</title><rect x="293.3" y="405" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="296.29" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.44%)</title><rect x="1183.7" y="389" width="5.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.72" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="289.3" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="292.29" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="844.5" y="373" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="847.45" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (80,808,080 samples, 0.39%)</title><rect x="11.7" y="389" width="4.6" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="14.71" y="399.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1147.7" y="389" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1150.73" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="269.3" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="272.30" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (20,858,585,650 samples, 99.95%)</title><rect x="10.6" y="501" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.57" y="511.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="287.5" ></text>
</g>
<g >
<title>sim::SendData::operator (292,929,290 samples, 1.40%)</title><rect x="1112.9" y="421" width="16.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1115.89" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="260.7" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="263.74" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="261.9" y="325" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="264.88" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.92%)</title><rect x="10.6" y="469" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.57" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1150.0" y="389" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1153.02" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (282,828,280 samples, 1.36%)</title><rect x="21.4" y="421" width="16.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="24.42" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (121,212,120 samples, 0.58%)</title><rect x="257.9" y="405" width="6.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="260.88" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.05%)</title><rect x="397.2" y="325" width="0.6" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="400.24" y="335.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="395.5" y="373" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="398.53" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.15" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="22.0" y="245" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.99" y="255.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1121.5" y="357" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1124.46" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="392.7" y="325" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="395.67" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="34.6" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.56" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (393,939,390 samples, 1.89%)</title><rect x="229.3" y="405" width="22.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="232.32" y="415.5" >[..</text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (80,808,080 samples, 0.39%)</title><rect x="407.5" y="405" width="4.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="410.52" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1146.6" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.59" y="399.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (292,929,290 samples, 1.40%)</title><rect x="1112.9" y="405" width="16.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1115.89" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="20.9" y="421" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="23.85" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="271.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="847.9" y="357" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="850.88" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.1" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.14" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.19%)</title><rect x="1140.3" y="373" width="2.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1143.31" y="383.5" ></text>
</g>
<g >
<title>operator new (262,626,260 samples, 1.26%)</title><rect x="630.8" y="389" width="14.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="633.84" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="36.3" y="373" width="0.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="39.27" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (121,212,120 samples, 0.58%)</title><rect x="1161.4" y="405" width="6.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1164.44" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.10%)</title><rect x="842.2" y="373" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="845.17" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="845.0" y="357" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="848.02" y="367.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1114.0" y="389" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1117.04" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="278.4" y="357" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="281.44" y="367.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="421" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1191.86" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="387.5" y="357" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="390.53" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="255.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (222,222,220 samples, 1.06%)</title><rect x="370.4" y="405" width="12.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="373.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="165" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="175.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="1126.6" y="357" width="1.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1129.60" y="367.5" ></text>
</g>
<g >
<title>sim::Link::arrive (494,949,490 samples, 2.37%)</title><rect x="265.3" y="405" width="28.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="268.30" y="415.5" >s..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.19%)</title><rect x="1186.6" y="277" width="2.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.57" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.24%)</title><rect x="900.4" y="373" width="2.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="903.43" y="383.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="263.6" y="357" width="1.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="266.59" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="902.7" y="357" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="905.71" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.8" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.85" y="79.5" ></text>
</g>
<g >
<title>_start (20,858,585,650 samples, 99.95%)</title><rect x="10.6" y="517" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.57" y="527.5" >_start</text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="1127.2" y="341" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1130.17" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="22.0" y="261" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.99" y="271.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (30,303,030 samples, 0.15%)</title><rect x="396.1" y="357" width="1.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="399.10" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.8" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.84" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.05%)</title><rect x="21.4" y="389" width="0.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="24.42" y="399.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="245" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.57" y="255.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (80,808,080 samples, 0.39%)</title><rect x="398.4" y="405" width="4.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="401.38" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (17,888,888,710 samples, 85.72%)</title><rect x="121.9" y="437" width="1011.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="124.95" y="447.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1147.7" y="405" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.73" y="415.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.05%)</title><rect x="36.8" y="373" width="0.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="39.84" y="383.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 1.50%)</title><rect x="802.8" y="373" width="17.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="805.76" y="383.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.92%)</title><rect x="10.6" y="437" width="10.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.57" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1148.9" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.88" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="10.6" y="405" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.57" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.92%)</title><rect x="10.6" y="453" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.57" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="202.5" y="421" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="205.48" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.15" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.24%)</title><rect x="22.6" y="213" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.57" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.10%)</title><rect x="10.6" y="389" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.57" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.8" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.85" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1176.9" y="149" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.86" y="159.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="389.8" y="357" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="392.82" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (20,202,020 samples, 0.10%)</title><rect x="1131.2" y="421" width="1.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1134.17" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (111,111,110 samples, 0.53%)</title><rect x="1122.0" y="389" width="6.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1125.03" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="181" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.72" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="1176.3" y="341" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.29" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.10%)</title><rect x="821.6" y="373" width="1.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="824.61" y="383.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.15%)</title><rect x="1003.2" y="389" width="1.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1006.23" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.19%)</title><rect x="443.5" y="389" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="446.50" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.39%)</title><rect x="391.0" y="373" width="4.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="393.96" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1113.5" y="389" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1116.47" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="295.0" y="389" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="298.00" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="261.3" y="341" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="264.31" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="197" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="207.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="383.5" y="389" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="386.53" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.05%)</title><rect x="392.7" y="293" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="395.67" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="35.7" y="389" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="38.70" y="399.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 1.21%)</title><rect x="770.8" y="357" width="14.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="773.77" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (121,212,120 samples, 0.58%)</title><rect x="1135.7" y="405" width="6.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1138.74" y="415.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.39%)</title><rect x="11.7" y="373" width="4.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.71" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.8" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.85" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1148.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1151.31" y="239.5" ></text>
</g>
<g >
<title>malloc (282,828,280 samples, 1.36%)</title><rect x="824.5" y="357" width="16.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="827.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.27" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.43" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="405" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1191.86" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="261.9" y="309" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="264.88" y="319.5" ></text>
</g>
<g >
<title>sim::Process::~Process (191,919,190 samples, 0.92%)</title><rect x="111.1" y="437" width="10.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="114.09" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="283.0" y="357" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="286.01" y="367.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.05%)</title><rect x="841.6" y="373" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="844.60" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.42" y="335.5" ></text>
</g>
<g >
<title>sim::Process::operator (131,313,130 samples, 0.63%)</title><rect x="103.7" y="437" width="7.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="106.67" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="847.3" y="373" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="850.31" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="902.1" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="905.14" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 1.26%)</title><rect x="610.3" y="373" width="14.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="613.28" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="288.7" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="291.72" y="367.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,828,282,810 samples, 8.76%)</title><rect x="1004.9" y="405" width="103.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1007.95" y="415.5" >void sim::Sc..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (111,111,110 samples, 0.53%)</title><rect x="28.8" y="405" width="6.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="31.85" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.15%)</title><rect x="1154.6" y="389" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1157.59" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (30,303,030 samples, 0.15%)</title><rect x="898.7" y="389" width="1.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="901.71" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="289.3" y="357" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="292.29" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.19%)</title><rect x="261.3" y="357" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="264.31" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="645.1" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="648.12" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="11.7" y="341" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.71" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1167.2" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.15" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1184.9" y="229" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.86" y="239.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="421" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1186.15" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="397.2" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="400.24" y="303.5" ></text>
</g>
</g>
</svg>
