<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="982.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="965" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="965" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="469" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="727.5" y="501" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="730.49" y="511.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::send_data (10,101,010 samples, 0.50%)</title><rect x="419.1" y="789" width="6.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="422.15" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="453" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="405" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (666,666,660 samples, 33.17%)</title><rect x="668.2" y="773" width="391.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="671.19" y="783.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.50%)</title><rect x="122.7" y="773" width="5.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="125.66" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="613" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="674.1" y="613" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="677.12" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (606,060,600 samples, 30.15%)</title><rect x="27.8" y="837" width="355.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="30.79" y="847.5" >sim::MetricsCollector::export_metrics_to_files</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="565" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="575.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (30,303,030 samples, 1.51%)</title><rect x="478.4" y="773" width="17.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="481.44" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="1029.9" y="453" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1032.90" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="277" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1047.7" y="533" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1050.69" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="336.1" y="485" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="339.13" y="495.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (30,303,030 samples, 1.51%)</title><rect x="448.8" y="773" width="17.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="451.79" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="988.4" y="453" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="991.39" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.51%)</title><rect x="431.0" y="741" width="17.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="434.01" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (70,707,070 samples, 3.52%)</title><rect x="1000.3" y="565" width="41.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1003.25" y="575.5" >YAM..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="165" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="421" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="101" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="453" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.51%)</title><rect x="745.3" y="533" width="17.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.28" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="709" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="719.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_to_args (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="741" width="5.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1187.07" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="677" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (80,808,080 samples, 4.02%)</title><rect x="952.8" y="549" width="47.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="955.81" y="559.5" >YAML..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (80,808,080 samples, 4.02%)</title><rect x="686.0" y="645" width="47.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="688.98" y="655.5" >YAML..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="306.5" y="661" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="309.48" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="853" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="661" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.42" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="27.8" y="789" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.79" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (101,010,100 samples, 5.03%)</title><rect x="1065.5" y="757" width="59.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1068.48" y="767.5" >std::_..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (101,010,100 samples, 5.03%)</title><rect x="1065.5" y="805" width="59.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1068.48" y="815.5" >std::_..</text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.50%)</title><rect x="425.1" y="773" width="5.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="428.08" y="783.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 2.01%)</title><rect x="359.8" y="757" width="23.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="362.85" y="767.5" >[..</text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.50%)</title><rect x="1053.6" y="549" width="5.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1056.62" y="559.5" ></text>
</g>
<g >
<title>all (2,010,100,990 samples, 100%)</title><rect x="10.0" y="933" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.52%)</title><rect x="952.8" y="533" width="41.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="955.81" y="543.5" >YAM..</text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.50%)</title><rect x="116.7" y="757" width="6.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="119.73" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.51%)</title><rect x="709.7" y="565" width="17.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="712.70" y="575.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="691.9" y="613" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.91" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="970.6" y="517" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="973.60" y="527.5" >i..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="533" width="5.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1044.76" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="448.8" y="741" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="451.79" y="751.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="691.9" y="565" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.91" y="575.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [12]&gt; (10,101,010 samples, 0.50%)</title><rect x="1166.3" y="709" width="5.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1169.28" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="661" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="671.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (353,535,350 samples, 17.59%)</title><rect x="852.0" y="613" width="207.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="855.01" y="623.5" >YAML::SingleDocParser::Hand..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.01%)</title><rect x="1024.0" y="485" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1026.97" y="495.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (40,404,040 samples, 2.01%)</title><rect x="739.3" y="629" width="23.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="742.35" y="639.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.51%)</title><rect x="1018.0" y="501" width="17.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1021.04" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="821" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="581" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="591.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 1.01%)</title><rect x="383.6" y="821" width="11.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="386.57" y="831.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 2.51%)</title><rect x="1095.1" y="661" width="29.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.13" y="671.5" >[l..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="293" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.51%)</title><rect x="745.3" y="549" width="17.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.28" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="421" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="421" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_data (10,101,010 samples, 0.50%)</title><rect x="419.1" y="773" width="6.0" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="422.15" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="691.9" y="581" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.91" y="591.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="485" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1044.76" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.01%)</title><rect x="840.2" y="565" width="11.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="843.15" y="575.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 1.51%)</title><rect x="579.2" y="741" width="17.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="582.25" y="751.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (10,101,010 samples, 0.50%)</title><rect x="15.9" y="821" width="6.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="18.93" y="831.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.50%)</title><rect x="419.1" y="741" width="6.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="422.15" y="751.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.50%)</title><rect x="116.7" y="725" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="119.73" y="735.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.51%)</title><rect x="561.5" y="773" width="17.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="564.46" y="783.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (50,505,050 samples, 2.51%)</title><rect x="697.8" y="613" width="29.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="700.84" y="623.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="773" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.51%)</title><rect x="816.4" y="549" width="17.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="819.43" y="559.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.50%)</title><rect x="508.1" y="757" width="5.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="511.09" y="767.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="537.7" y="741" width="6.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="540.74" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="69" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="133" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="389" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="661" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="741" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1062.55" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="549" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="261" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="573.3" y="661" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.32" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="325" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 3.02%)</title><rect x="798.6" y="565" width="35.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="801.64" y="575.5" >int..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (373,737,370 samples, 18.59%)</title><rect x="840.2" y="629" width="219.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="843.15" y="639.5" >YAML::SingleDocParser::Handl..</text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [3]&gt; (10,101,010 samples, 0.50%)</title><rect x="1172.2" y="693" width="5.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1175.21" y="703.5" ></text>
</g>
<g >
<title>sim::Process::operator (161,616,160 samples, 8.04%)</title><rect x="466.6" y="805" width="94.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="469.58" y="815.5" >sim::Proces..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="181" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="336.1" y="501" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="339.13" y="511.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.50%)</title><rect x="128.6" y="773" width="5.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="131.59" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.50%)</title><rect x="1053.6" y="517" width="5.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1056.62" y="527.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.50%)</title><rect x="519.9" y="757" width="6.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="522.95" y="767.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (555,555,550 samples, 27.64%)</title><rect x="733.4" y="661" width="326.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="736.42" y="671.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="597.0" y="757" width="6.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="600.04" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="645" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="655.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="805" width="5.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1187.07" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="405" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="946.9" y="501" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="949.88" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (636,363,630 samples, 31.66%)</title><rect x="686.0" y="677" width="373.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="688.98" y="687.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>YAML::detail::memory::create_node (30,303,030 samples, 1.51%)</title><rect x="745.3" y="613" width="17.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="748.28" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="837" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.93" y="847.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.50%)</title><rect x="395.4" y="821" width="6.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="398.43" y="831.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (252,525,250 samples, 12.56%)</title><rect x="911.3" y="597" width="148.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="914.31" y="607.5" >YAML::SingleDocPar..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="405" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (101,010,100 samples, 5.03%)</title><rect x="1000.3" y="581" width="59.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1003.25" y="591.5" >YAML::..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (111,111,110 samples, 5.53%)</title><rect x="1124.8" y="821" width="65.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1127.77" y="831.5" >std::_F..</text>
</g>
<g >
<title>sim::LinkQueue::push (10,101,010 samples, 0.50%)</title><rect x="514.0" y="757" width="5.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="517.02" y="767.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (60,606,060 samples, 3.02%)</title><rect x="911.3" y="581" width="35.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="914.31" y="591.5" >YAM..</text>
</g>
<g >
<title>sim::Simulator::~Simulator (10,101,010 samples, 0.50%)</title><rect x="662.3" y="837" width="5.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="665.26" y="847.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.50%)</title><rect x="567.4" y="725" width="5.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="570.39" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="419.1" y="661" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="422.15" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="336.1" y="469" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="339.13" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 1.01%)</title><rect x="1006.2" y="485" width="11.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1009.18" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="789" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.50%)</title><rect x="573.3" y="693" width="5.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="576.32" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.51%)</title><rect x="431.0" y="757" width="17.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="434.01" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="405" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (10,101,010 samples, 0.50%)</title><rect x="632.6" y="805" width="5.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="635.61" y="815.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.50%)</title><rect x="1053.6" y="501" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1056.62" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 2.51%)</title><rect x="1095.1" y="677" width="29.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.13" y="687.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="27.8" y="773" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.79" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.50%)</title><rect x="668.2" y="661" width="5.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="671.19" y="671.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 1.01%)</title><rect x="1006.2" y="501" width="11.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1009.18" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="87.1" y="757" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="90.09" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="485" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="805" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.51%)</title><rect x="745.3" y="597" width="17.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="748.28" y="607.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.50%)</title><rect x="472.5" y="773" width="5.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="475.51" y="783.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="757" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1062.55" y="767.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.50%)</title><rect x="905.4" y="565" width="5.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="908.38" y="575.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::begin (10,101,010 samples, 0.50%)</title><rect x="1130.7" y="757" width="5.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1133.70" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="875.7" y="469" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.73" y="479.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="485" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="377.6" y="677" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="380.64" y="687.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="789" width="5.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1127.77" y="799.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="591.1" y="725" width="5.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="594.11" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="840.2" y="485" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="843.15" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="104.9" y="757" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="107.87" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="407.3" y="789" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="410.29" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="645" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="655.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1035.8" y="485" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1038.83" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (30,303,030 samples, 1.51%)</title><rect x="1041.8" y="565" width="17.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1044.76" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="501" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="511.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 1.01%)</title><rect x="27.8" y="805" width="11.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="30.79" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="693" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="703.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 1.01%)</title><rect x="531.8" y="757" width="11.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="534.81" y="767.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.50%)</title><rect x="674.1" y="645" width="6.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="677.12" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="485" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="122.7" y="725" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="125.66" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 10.55%)</title><rect x="199.7" y="709" width="124.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="202.75" y="719.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.50%)</title><rect x="490.3" y="741" width="5.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="493.30" y="751.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="680.1" y="613" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="683.05" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="421" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="98.9" y="773" width="6.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="101.94" y="783.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="674.1" y="629" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="677.12" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="309" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="319.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.50%)</title><rect x="739.3" y="613" width="6.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="742.35" y="623.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (10,101,010 samples, 0.50%)</title><rect x="561.5" y="757" width="5.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="564.46" y="767.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (90,909,090 samples, 4.52%)</title><rect x="1130.7" y="805" width="53.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1133.70" y="815.5" >sim::..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.01%)</title><rect x="840.2" y="581" width="11.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="843.15" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="15.9" y="805" width="6.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.93" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="419.1" y="677" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="422.15" y="687.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.50%)</title><rect x="519.9" y="773" width="6.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="522.95" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="597" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="573.3" y="677" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.32" y="687.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (30,303,030 samples, 1.51%)</title><rect x="579.2" y="757" width="17.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="582.25" y="767.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.50%)</title><rect x="342.1" y="757" width="5.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="345.06" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="645" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,999,999,980 samples, 99.50%)</title><rect x="15.9" y="869" width="1174.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.93" y="879.5" >[libc.so.6]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="149" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="159.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.50%)</title><rect x="994.3" y="533" width="6.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="997.32" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="677" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="687.5" ></text>
</g>
<g >
<title>sim::TcpFlow::Timeout::operator (50,505,050 samples, 2.51%)</title><rect x="603.0" y="805" width="29.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="605.96" y="815.5" >si..</text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.50%)</title><rect x="786.8" y="581" width="5.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="789.78" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="656.3" y="821" width="6.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="659.33" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="837" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="875.7" y="453" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.73" y="463.5" >i..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="15.9" y="789" width="6.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.93" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="661" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.50%)</title><rect x="573.3" y="725" width="5.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="576.32" y="735.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (30,303,030 samples, 1.51%)</title><rect x="638.5" y="805" width="17.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="641.54" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="229" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="239.5" ></text>
</g>
<g >
<title>sim::AddDataToConnection::operator (10,101,010 samples, 0.50%)</title><rect x="419.1" y="805" width="6.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="422.15" y="815.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="773" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1062.55" y="783.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.50%)</title><rect x="674.1" y="661" width="6.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="677.12" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="469" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="709" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="840.2" y="501" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="843.15" y="511.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (80,808,080 samples, 4.02%)</title><rect x="852.0" y="549" width="47.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="855.01" y="559.5" >YAML..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="53" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="63.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 1.01%)</title><rect x="407.3" y="805" width="11.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="410.29" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="122.7" y="709" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="125.66" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="517" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (282,828,280 samples, 14.07%)</title><rect x="158.2" y="725" width="166.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="161.24" y="735.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.50%)</title><rect x="674.1" y="677" width="6.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="677.12" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="21.9" y="837" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.86" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="629" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="639.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.50%)</title><rect x="466.6" y="741" width="5.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="469.58" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="453" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (70,707,070 samples, 3.52%)</title><rect x="1000.3" y="549" width="41.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1003.25" y="559.5" >YAM..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (60,606,060 samples, 3.02%)</title><rect x="697.8" y="629" width="35.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="700.84" y="639.5" >YAM..</text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.50%)</title><rect x="490.3" y="757" width="5.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="493.30" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="389" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1035.8" y="469" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1038.83" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_data (10,101,010 samples, 0.50%)</title><rect x="484.4" y="741" width="5.9" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="487.37" y="751.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="680.1" y="581" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="683.05" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="389" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="565" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="575.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 3.02%)</title><rect x="863.9" y="517" width="35.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="866.87" y="527.5" >int..</text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (666,666,660 samples, 33.17%)</title><rect x="668.2" y="789" width="391.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="671.19" y="799.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="325" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (90,909,090 samples, 4.52%)</title><rect x="946.9" y="581" width="53.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="949.88" y="591.5" >YAML:..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.50%)</title><rect x="116.7" y="773" width="6.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="119.73" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="674.1" y="597" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="677.12" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="597" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="573.3" y="645" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.32" y="655.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="773" width="5.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1187.07" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (80,808,080 samples, 4.02%)</title><rect x="686.0" y="661" width="47.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="688.98" y="671.5" >YAML..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="946.9" y="517" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="949.88" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,101,010 samples, 0.50%)</title><rect x="1178.1" y="757" width="6.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1181.14" y="767.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (656,565,650 samples, 32.66%)</title><rect x="674.1" y="693" width="385.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="677.12" y="703.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (60,606,060 samples, 3.02%)</title><rect x="1089.2" y="725" width="35.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1092.20" y="735.5" >std..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="565" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="469" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="852.0" y="533" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="855.01" y="543.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (373,737,370 samples, 18.59%)</title><rect x="128.6" y="789" width="219.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="131.59" y="799.5" >std::ostream&amp; std::ostream::..</text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.50%)</title><rect x="318.3" y="693" width="6.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="321.34" y="703.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.52%)</title><rect x="1000.3" y="533" width="41.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1003.25" y="543.5" >YAM..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (121,212,120 samples, 6.03%)</title><rect x="763.1" y="613" width="71.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="766.07" y="623.5" >YAML::Sc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="405" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="840.2" y="517" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="843.15" y="527.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 1.01%)</title><rect x="840.2" y="613" width="11.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="843.15" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="629" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>vsnprintf (292,929,290 samples, 14.57%)</title><rect x="152.3" y="741" width="172.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="155.31" y="751.5" >vsnprintf</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 3.02%)</title><rect x="282.8" y="677" width="35.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.76" y="687.5" >[li..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="885" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (888,888,880 samples, 44.22%)</title><rect x="668.2" y="837" width="521.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="671.19" y="847.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 1.51%)</title><rect x="525.9" y="773" width="17.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="528.88" y="783.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.50%)</title><rect x="727.5" y="597" width="5.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="730.49" y="607.5" ></text>
</g>
<g >
<title>sim::Switch::process (111,111,110 samples, 5.53%)</title><rect x="496.2" y="789" width="65.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="499.23" y="799.5" >sim::Sw..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="741" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.50%)</title><rect x="573.3" y="709" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="576.32" y="719.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.50%)</title><rect x="1053.6" y="533" width="5.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1056.62" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="988.4" y="437" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="991.39" y="447.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (70,707,070 samples, 3.52%)</title><rect x="561.5" y="789" width="41.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="564.46" y="799.5" >sim..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="875.7" y="501" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.73" y="511.5" >i..</text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.50%)</title><rect x="668.2" y="693" width="5.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="671.19" y="703.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="419.1" y="709" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="422.15" y="719.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="703.8" y="581" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="706.77" y="591.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (111,111,110 samples, 5.53%)</title><rect x="769.0" y="597" width="65.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="771.99" y="607.5" >YAML::S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="680.1" y="597" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="683.05" y="607.5" ></text>
</g>
<g >
<title>sim::TcpFlowParser::parse_tcp_flow (20,202,020 samples, 1.01%)</title><rect x="1166.3" y="725" width="11.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1169.28" y="735.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="501" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1044.76" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.50%)</title><rect x="686.0" y="629" width="5.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="688.98" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="341" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.50%)</title><rect x="1035.8" y="517" width="6.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1038.83" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.51%)</title><rect x="745.3" y="565" width="17.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="748.28" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="531.8" y="741" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="534.81" y="751.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 2.51%)</title><rect x="917.2" y="533" width="29.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="920.24" y="543.5" >op..</text>
</g>
<g >
<title>YAML::Scanner::empty (121,212,120 samples, 6.03%)</title><rect x="763.1" y="645" width="71.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="766.07" y="655.5" >YAML::Sc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="693" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="970.6" y="501" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="973.60" y="511.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.51%)</title><rect x="745.3" y="501" width="17.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.28" y="511.5" ></text>
</g>
<g >
<title>__libc_start_main (1,999,999,980 samples, 99.50%)</title><rect x="15.9" y="885" width="1174.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="18.93" y="895.5" >__libc_start_main</text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (30,303,030 samples, 1.51%)</title><rect x="1160.4" y="741" width="17.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1163.35" y="751.5" ></text>
</g>
<g >
<title>nons (2,010,100,990 samples, 100.00%)</title><rect x="10.0" y="917" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="927.5" >nons</text>
</g>
<g >
<title>writev (20,202,020 samples, 1.01%)</title><rect x="330.2" y="741" width="11.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="333.20" y="751.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 1.01%)</title><rect x="1041.8" y="549" width="11.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1044.76" y="559.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.50%)</title><rect x="466.6" y="757" width="5.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="469.58" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="373" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 1.51%)</title><rect x="324.3" y="757" width="17.8" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="327.27" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.50%)</title><rect x="727.5" y="613" width="5.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="730.49" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="727.5" y="485" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="730.49" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (121,212,120 samples, 6.03%)</title><rect x="763.1" y="629" width="71.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="766.07" y="639.5" >YAML::Sc..</text>
</g>
<g >
<title>YAML::Node::~Node (101,010,100 samples, 5.03%)</title><rect x="1065.5" y="821" width="59.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1068.48" y="831.5" >YAML::..</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (20,202,020 samples, 1.01%)</title><rect x="567.4" y="741" width="11.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="570.39" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="373" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="629" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="469" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1044.76" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="496.2" y="773" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="499.23" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="693" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="213" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="223.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (40,404,040 samples, 2.01%)</title><rect x="425.1" y="805" width="23.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="428.08" y="815.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="549" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="341" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.51%)</title><rect x="365.8" y="709" width="17.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="368.78" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="638.5" y="789" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="641.54" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="693" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.42" y="703.5" ></text>
</g>
<g >
<title>YAML::LoadFile (676,767,670 samples, 33.67%)</title><rect x="668.2" y="821" width="397.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="671.19" y="831.5" >YAML::LoadFile</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="85" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="95.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (60,606,060 samples, 3.02%)</title><rect x="911.3" y="549" width="35.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="914.31" y="559.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="533" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 1.01%)</title><rect x="98.9" y="789" width="11.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="101.94" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="581" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="591.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="39.6" y="789" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="42.65" y="799.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.01%)</title><rect x="840.2" y="549" width="11.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="843.15" y="559.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="741" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.42" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="533" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="725" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="437" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.50%)</title><rect x="680.1" y="677" width="5.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="683.05" y="687.5" ></text>
</g>
<g >
<title>sim::SendData::operator (70,707,070 samples, 3.52%)</title><rect x="561.5" y="805" width="41.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="564.46" y="815.5" >sim..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="725" width="5.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1187.07" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.50%)</title><rect x="110.8" y="789" width="5.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="113.80" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="693" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="703.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="39.6" y="805" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="42.65" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="39.6" y="773" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.65" y="783.5" ></text>
</g>
<g >
<title>_start (1,999,999,980 samples, 99.50%)</title><rect x="15.9" y="901" width="1174.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="18.93" y="911.5" >_start</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="613" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="709" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.42" y="719.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [12]&gt; (10,101,010 samples, 0.50%)</title><rect x="1166.3" y="693" width="5.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1169.28" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.51%)</title><rect x="448.8" y="757" width="17.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="451.79" y="767.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.50%)</title><rect x="514.0" y="773" width="5.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="517.02" y="783.5" ></text>
</g>
<g >
<title>YAML::Load (666,666,660 samples, 33.17%)</title><rect x="668.2" y="805" width="391.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="671.19" y="815.5" >YAML::Load</text>
</g>
<g >
<title>main (1,989,898,970 samples, 98.99%)</title><rect x="21.9" y="853" width="1168.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.86" y="863.5" >main</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.51%)</title><rect x="709.7" y="597" width="17.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="712.70" y="607.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [3]&gt; (10,101,010 samples, 0.50%)</title><rect x="1172.2" y="709" width="5.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1175.21" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="501" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.01%)</title><rect x="875.7" y="485" width="23.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.73" y="495.5" >i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="725" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="309" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="389" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 2.01%)</title><rect x="579.2" y="773" width="23.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="582.25" y="783.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.51%)</title><rect x="1107.0" y="645" width="17.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.98" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.50%)</title><rect x="691.9" y="629" width="5.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="694.91" y="639.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (60,606,060 samples, 3.02%)</title><rect x="911.3" y="565" width="35.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="914.31" y="575.5" >YAM..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.01%)</title><rect x="887.6" y="437" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="890.59" y="447.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 1.51%)</title><rect x="745.3" y="581" width="17.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="748.28" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="549" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="559.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="805" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1062.55" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="946.9" y="469" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="949.88" y="479.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="757" width="5.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1187.07" y="767.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 1.01%)</title><rect x="502.2" y="773" width="11.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="505.16" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="725" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="613" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="946.9" y="533" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="949.88" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="104.9" y="773" width="5.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="107.87" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="677" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="687.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (313,131,310 samples, 15.58%)</title><rect x="140.5" y="757" width="183.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="143.45" y="767.5" >[libstdc++.so.6.0.33]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="533" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="543.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 1.01%)</title><rect x="567.4" y="757" width="11.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="570.39" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.50%)</title><rect x="460.7" y="725" width="5.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="463.65" y="735.5" ></text>
</g>
<g >
<title>sim::write_to_csv (525,252,520 samples, 26.13%)</title><rect x="45.6" y="805" width="308.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="48.58" y="815.5" >sim::write_to_csv</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="840.2" y="533" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="843.15" y="543.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.50%)</title><rect x="680.1" y="661" width="5.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="683.05" y="671.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="691.9" y="597" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.91" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="941.0" y="373" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="943.95" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 2.01%)</title><rect x="359.8" y="725" width="23.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="362.85" y="735.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="517" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="117" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="869" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>sim::Simulator::start (474,747,470 samples, 23.62%)</title><rect x="383.6" y="837" width="278.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="386.57" y="847.5" >sim::Simulator::start</text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.01%)</title><rect x="87.1" y="789" width="11.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="90.09" y="799.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.50%)</title><rect x="466.6" y="773" width="5.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="469.58" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="828.3" y="517" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="831.29" y="527.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse_send_data (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="773" width="5.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1127.77" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="197" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="357" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="357" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.50%)</title><rect x="419.1" y="757" width="6.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="422.15" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="245" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (10,101,010 samples, 0.50%)</title><rect x="650.4" y="789" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="653.40" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="757" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="122.7" y="757" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="125.66" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="661" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="671.5" ></text>
</g>
<g >
<title>sim::Link::transmit (30,303,030 samples, 1.51%)</title><rect x="448.8" y="789" width="17.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="451.79" y="799.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 33.17%)</title><rect x="668.2" y="741" width="391.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="671.19" y="751.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (50,505,050 samples, 2.51%)</title><rect x="353.9" y="773" width="29.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="356.92" y="783.5" >st..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (101,010,100 samples, 5.03%)</title><rect x="1065.5" y="773" width="59.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1068.48" y="783.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="677" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="437" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.01%)</title><rect x="371.7" y="693" width="11.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="374.71" y="703.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="419.1" y="693" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="422.15" y="703.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.50%)</title><rect x="899.4" y="565" width="6.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="902.45" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 5.03%)</title><rect x="852.0" y="597" width="59.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="855.01" y="607.5" >YAML::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="901" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 5.03%)</title><rect x="852.0" y="581" width="59.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="855.01" y="591.5" >YAML::..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="341" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="437" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="988.4" y="469" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="991.39" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="741" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="751.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [12]&gt; (10,101,010 samples, 0.50%)</title><rect x="1142.6" y="741" width="5.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1145.56" y="751.5" ></text>
</g>
<g >
<title>cfree (60,606,060 samples, 3.02%)</title><rect x="1089.2" y="693" width="35.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1092.20" y="703.5" >cfree</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.51%)</title><rect x="745.3" y="517" width="17.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="748.28" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="389" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="399.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.50%)</title><rect x="561.5" y="725" width="5.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="564.46" y="735.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="828.3" y="533" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="831.29" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 33.17%)</title><rect x="668.2" y="709" width="391.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="671.19" y="719.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="581" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 2.01%)</title><rect x="923.2" y="501" width="23.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="926.17" y="511.5" >[..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (90,909,090 samples, 4.52%)</title><rect x="946.9" y="565" width="53.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="949.88" y="575.5" >YAML:..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="789" width="5.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1187.07" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="37" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="47.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="725" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.42" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 1.51%)</title><rect x="543.7" y="773" width="17.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="546.67" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="453" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="463.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (60,606,060 samples, 3.02%)</title><rect x="1000.3" y="517" width="35.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1003.25" y="527.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="357" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="644.5" y="789" width="5.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="647.47" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="325" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.50%)</title><rect x="561.5" y="741" width="5.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="564.46" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="421" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1044.76" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1154.4" y="677" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.42" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.51%)</title><rect x="709.7" y="581" width="17.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="712.70" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="98.9" y="757" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="101.94" y="767.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (30,303,030 samples, 1.51%)</title><rect x="448.8" y="805" width="17.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="451.79" y="815.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (555,555,550 samples, 27.64%)</title><rect x="27.8" y="821" width="326.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="30.79" y="831.5" >sim::LinksQueueSizeStorage::export_to_files</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="727.5" y="549" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="730.49" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="122.7" y="741" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="125.66" y="751.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (40,404,040 samples, 2.01%)</title><rect x="739.3" y="645" width="23.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="742.35" y="655.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="330.2" y="629" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.20" y="639.5" ></text>
</g>
<g >
<title>sim::Host::process (50,505,050 samples, 2.51%)</title><rect x="466.6" y="789" width="29.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="469.58" y="799.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 33.17%)</title><rect x="668.2" y="757" width="391.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="671.19" y="767.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>malloc (50,505,050 samples, 2.51%)</title><rect x="917.2" y="517" width="29.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="920.24" y="527.5" >ma..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 1.01%)</title><rect x="454.7" y="741" width="11.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="457.72" y="751.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.50%)</title><rect x="514.0" y="741" width="5.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="517.02" y="751.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.50%)</title><rect x="1041.8" y="517" width="5.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1044.76" y="527.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (30,303,030 samples, 1.51%)</title><rect x="431.0" y="773" width="17.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="434.01" y="783.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="703.8" y="597" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="706.77" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="727.5" y="517" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="730.49" y="527.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.50%)</title><rect x="680.1" y="629" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="683.05" y="639.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.50%)</title><rect x="1035.8" y="501" width="6.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1038.83" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="613" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="623.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (50,505,050 samples, 2.51%)</title><rect x="353.9" y="821" width="29.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="356.92" y="831.5" >si..</text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (70,707,070 samples, 3.52%)</title><rect x="1136.6" y="757" width="41.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1139.63" y="767.5" >sim..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 4.52%)</title><rect x="1130.7" y="789" width="53.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1133.70" y="799.5" >std::..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.50%)</title><rect x="668.2" y="677" width="5.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="671.19" y="687.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (50,505,050 samples, 2.51%)</title><rect x="353.9" y="789" width="29.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="356.92" y="799.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="10.0" y="709" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="453" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="437" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="757" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.50%)</title><rect x="946.9" y="549" width="5.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="949.88" y="559.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.50%)</title><rect x="348.0" y="789" width="5.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="350.99" y="799.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.01%)</title><rect x="87.1" y="773" width="11.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="90.09" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="309" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (393,939,390 samples, 19.60%)</title><rect x="401.4" y="821" width="231.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="404.36" y="831.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.01%)</title><rect x="935.0" y="437" width="11.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="938.03" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="780.9" y="565" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="783.85" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="336.1" y="517" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="339.13" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="725" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1062.55" y="735.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.01%)</title><rect x="840.2" y="597" width="11.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="843.15" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1148.5" y="741" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.49" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="485" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (80,808,080 samples, 4.02%)</title><rect x="852.0" y="565" width="47.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="855.01" y="575.5" >YAML..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 3.52%)</title><rect x="857.9" y="533" width="41.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="860.94" y="543.5" >int..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="727.5" y="533" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="730.49" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="946.9" y="485" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="949.88" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 2.01%)</title><rect x="359.8" y="741" width="23.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="362.85" y="751.5" >v..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (101,010,100 samples, 5.03%)</title><rect x="1065.5" y="789" width="59.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1068.48" y="799.5" >std::_..</text>
</g>
<g >
<title>sim::ScenarioParser::parse (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="805" width="5.9" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1127.77" y="815.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (40,404,040 samples, 2.01%)</title><rect x="632.6" y="821" width="23.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="635.61" y="831.5" >s..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="780.9" y="581" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="783.85" y="591.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [5]&gt; (10,101,010 samples, 0.50%)</title><rect x="1160.4" y="725" width="5.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1163.35" y="735.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="727.5" y="565" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="730.49" y="575.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (20,202,020 samples, 1.01%)</title><rect x="116.7" y="789" width="11.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="119.73" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 3.52%)</title><rect x="792.7" y="581" width="41.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="795.71" y="591.5" >int..</text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (50,505,050 samples, 2.51%)</title><rect x="353.9" y="805" width="29.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="356.92" y="815.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="846.1" y="373" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="849.08" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (383,838,380 samples, 19.10%)</title><rect x="834.2" y="645" width="225.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="837.22" y="655.5" >YAML::SingleDocParser::Handle..</text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.50%)</title><rect x="419.1" y="725" width="6.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="422.15" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="853" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.93" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.01%)</title><rect x="982.5" y="485" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.46" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.01%)</title><rect x="1024.0" y="469" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1026.97" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.50%)</title><rect x="1012.1" y="469" width="5.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1015.11" y="479.5" ></text>
</g>
<g >
<title>sim::Link::arrive (40,404,040 samples, 2.01%)</title><rect x="425.1" y="789" width="23.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="428.08" y="799.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 9.05%)</title><rect x="211.6" y="693" width="106.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="214.61" y="703.5" >[libc.so.6]</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (363,636,360 samples, 18.09%)</title><rect x="134.5" y="773" width="213.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="137.52" y="783.5" >std::ostreambuf_iterator&lt;cha..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.50%)</title><rect x="1059.5" y="789" width="6.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1062.55" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="116.7" y="597" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="119.73" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.50%)</title><rect x="632.6" y="789" width="5.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="635.61" y="799.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="727.5" y="581" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="730.49" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="757.1" y="469" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="760.14" y="479.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::send_data (10,101,010 samples, 0.50%)</title><rect x="484.4" y="757" width="5.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="487.37" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.50%)</title><rect x="680.1" y="645" width="5.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="683.05" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="691.9" y="549" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="694.91" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (60,606,060 samples, 3.02%)</title><rect x="1089.2" y="709" width="35.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1092.20" y="719.5" >std..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="828.3" y="501" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="831.29" y="511.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 4.52%)</title><rect x="1130.7" y="773" width="53.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1133.70" y="783.5" >sim::..</text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.50%)</title><rect x="116.7" y="709" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="119.73" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1124.8" y="645" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.77" y="655.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 33.17%)</title><rect x="668.2" y="725" width="391.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="671.19" y="735.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.50%)</title><rect x="116.7" y="741" width="6.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="119.73" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (60,606,060 samples, 3.02%)</title><rect x="1089.2" y="741" width="35.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1092.20" y="751.5" >std..</text>
</g>
</g>
</svg>
