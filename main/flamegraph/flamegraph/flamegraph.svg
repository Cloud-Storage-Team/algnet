<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="25.1" y="309" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.06" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.06%)</title><rect x="1130.5" y="389" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1133.45" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1137.3" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.30" y="303.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1181.8" y="405" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.79" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="313.2" y="341" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="316.21" y="351.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.06%)</title><rect x="837.5" y="325" width="0.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="840.51" y="335.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="291.3" y="357" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="294.31" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="357" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>_IO_file_fopen (90,909,090 samples, 0.52%)</title><rect x="27.1" y="341" width="6.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="30.11" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="289.9" y="341" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="292.94" y="351.5" ></text>
</g>
<g >
<title>operator new (272,727,270 samples, 1.57%)</title><rect x="593.2" y="373" width="18.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="596.16" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="167.4" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="170.42" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (151,515,150 samples, 0.87%)</title><rect x="42.9" y="357" width="10.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="45.85" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.46" y="383.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 1.80%)</title><rect x="131.1" y="405" width="21.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="134.15" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.35%)</title><rect x="164.0" y="341" width="4.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="167.00" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::add_inlink (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1192.32" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="239.5" ></text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.06%)</title><rect x="155.8" y="357" width="0.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="158.79" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="41.5" y="373" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="44.48" y="383.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.12%)</title><rect x="827.2" y="373" width="1.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="830.24" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.75%)</title><rect x="44.2" y="293" width="8.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.22" y="303.5" ></text>
</g>
<g >
<title>vsnprintf (151,515,150 samples, 0.87%)</title><rect x="42.9" y="341" width="10.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="45.85" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1166.7" y="325" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.73" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1129.8" y="373" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1132.77" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="175.0" y="357" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="177.95" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="1090.1" y="357" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1093.07" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1128.4" y="389" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1131.40" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="161.9" y="357" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="164.95" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (181,818,180 samples, 1.04%)</title><rect x="1092.8" y="341" width="12.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1095.81" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.06%)</title><rect x="290.6" y="309" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="293.63" y="319.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.46%)</title><rect x="1133.2" y="357" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1136.19" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="357" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.63" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1107.2" y="341" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1110.18" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.12%)</title><rect x="292.0" y="357" width="1.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="295.00" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.23%)</title><rect x="298.2" y="325" width="2.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="301.16" y="335.5" ></text>
</g>
<g >
<title>_IO_file_open (90,909,090 samples, 0.52%)</title><rect x="27.1" y="325" width="6.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="30.11" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.16%)</title><rect x="11.4" y="453" width="13.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.37" y="463.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,505,050,490 samples, 8.64%)</title><rect x="973.0" y="389" width="102.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="976.03" y="399.5" >void sim::Sc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="133" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="143.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="827.2" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="830.24" y="367.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="405" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.47" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="308.4" y="245" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="311.42" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="149" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="40.1" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="43.12" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="310.5" y="325" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="313.48" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.46%)</title><rect x="1183.2" y="277" width="5.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.16" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (40,404,040 samples, 0.23%)</title><rect x="1173.6" y="405" width="2.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1176.57" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.29%)</title><rect x="337.9" y="389" width="3.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="340.85" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.12%)</title><rect x="11.4" y="389" width="1.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.37" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.12%)</title><rect x="1091.4" y="341" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1094.44" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.64%)</title><rect x="295.4" y="357" width="7.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="298.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.4" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.36" y="303.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.29%)</title><rect x="1120.2" y="405" width="3.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1123.19" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (131,313,130 samples, 0.75%)</title><rect x="1109.2" y="373" width="8.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1112.23" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="319.5" ></text>
</g>
<g >
<title>__libc_start_main (17,393,939,220 samples, 99.88%)</title><rect x="11.4" y="485" width="1178.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.37" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="181" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1187.52" y="191.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (50,505,050 samples, 0.29%)</title><rect x="158.5" y="357" width="3.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="161.53" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.23%)</title><rect x="171.5" y="325" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="174.53" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="165" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1186.16" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="319.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (10,101,010 samples, 0.06%)</title><rect x="300.2" y="229" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="303.21" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="293" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.47" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="229" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1185.47" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (90,909,090 samples, 0.52%)</title><rect x="27.1" y="389" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="30.11" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="292.0" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.00" y="303.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.23%)</title><rect x="1163.3" y="373" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1166.31" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="299.5" y="229" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="302.52" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (10,101,010 samples, 0.06%)</title><rect x="302.9" y="357" width="0.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="305.95" y="367.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 1.16%)</title><rect x="11.4" y="421" width="13.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.37" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="833.4" y="293" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="836.40" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 0.29%)</title><rect x="1184.5" y="245" width="3.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.52" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1155.8" y="373" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.78" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (30,303,030 samples, 0.17%)</title><rect x="54.5" y="437" width="2.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="57.49" y="447.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (434,343,430 samples, 2.49%)</title><rect x="254.4" y="389" width="29.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="257.35" y="399.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="213" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="1152.4" y="389" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1155.35" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.12%)</title><rect x="313.9" y="325" width="1.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="316.90" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (161,616,160 samples, 0.93%)</title><rect x="1094.2" y="325" width="10.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1097.18" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="290.6" y="325" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="293.63" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.35%)</title><rect x="289.9" y="373" width="4.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="292.94" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.12%)</title><rect x="1107.9" y="357" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1110.87" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="290.6" y="357" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="293.63" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.06%)</title><rect x="1153.7" y="389" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1156.72" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="389" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.63" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1174.9" y="373" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.94" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1082.5" y="357" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1085.54" y="367.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="1083.2" y="373" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1086.23" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="245" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="299.5" y="245" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="302.52" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="174.3" y="325" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="177.27" y="335.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="1104.4" y="261" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1107.44" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.93%)</title><rect x="576.0" y="357" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="579.04" y="367.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="382.3" y="373" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="385.34" y="383.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.46%)</title><rect x="1133.2" y="341" width="5.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1136.19" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.23%)</title><rect x="830.7" y="357" width="2.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="833.66" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.35%)</title><rect x="1134.6" y="309" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.56" y="319.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.12%)</title><rect x="292.0" y="309" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="295.00" y="319.5" ></text>
</g>
<g >
<title>_start (17,393,939,220 samples, 99.88%)</title><rect x="11.4" y="501" width="1178.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.37" y="511.5" >_start</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="308.4" y="325" width="2.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="311.42" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (595,959,590 samples, 3.42%)</title><rect x="843.0" y="373" width="40.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="845.98" y="383.5" >sim..</text>
</g>
<g >
<title>sim::Host::process (404,040,400 samples, 2.32%)</title><rect x="287.9" y="389" width="27.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="290.89" y="399.5" >s..</text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.12%)</title><rect x="153.7" y="373" width="1.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="156.74" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1086.6" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1089.65" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.06%)</title><rect x="176.3" y="389" width="0.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="179.32" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="213" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.52" y="223.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 1.22%)</title><rect x="809.4" y="357" width="14.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="812.44" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="833.4" y="341" width="4.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="836.40" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.17%)</title><rect x="831.3" y="341" width="2.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="834.35" y="351.5" ></text>
</g>
<g >
<title>Logger::info (1,969,696,950 samples, 11.31%)</title><rect x="630.8" y="357" width="133.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="633.80" y="367.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.52%)</title><rect x="331.7" y="389" width="6.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="334.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="181" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="25.1" y="293" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.06" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (70,707,070 samples, 0.41%)</title><rect x="36.0" y="373" width="4.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="39.01" y="383.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.06%)</title><rect x="178.4" y="373" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="181.38" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="25.1" y="277" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.06" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="485" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="389" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="277" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.47" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1124.3" y="405" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.29" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.12%)</title><rect x="829.3" y="357" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="832.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="12.1" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.05" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.12%)</title><rect x="832.0" y="325" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="835.03" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="835.5" y="277" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="838.45" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1187.9" y="245" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.95" y="255.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.06%)</title><rect x="1129.8" y="389" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1132.77" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="18.9" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.90" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="293" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="303.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.29%)</title><rect x="227.7" y="389" width="3.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="230.66" y="399.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1119.5" y="373" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1122.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1142.8" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.77" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.23%)</title><rect x="1185.2" y="213" width="2.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1188.21" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.06%)</title><rect x="1181.1" y="405" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1184.10" y="415.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (90,909,090 samples, 0.52%)</title><rect x="27.1" y="373" width="6.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="30.11" y="383.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1192.32" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (50,505,050 samples, 0.29%)</title><rect x="164.7" y="325" width="3.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="167.69" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,131,313,100 samples, 17.98%)</title><rect x="611.6" y="373" width="212.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="614.64" y="383.5" >sim::Link::get_packet</text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.12%)</title><rect x="1118.1" y="373" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1121.13" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="172.2" y="245" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="175.22" y="255.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 0.23%)</title><rect x="177.0" y="405" width="2.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="180.01" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.87%)</title><rect x="42.9" y="325" width="10.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.85" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.16%)</title><rect x="11.4" y="437" width="13.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.37" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="839.6" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="842.56" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.12%)</title><rect x="313.9" y="341" width="1.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="316.90" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="341" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.63" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="335.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 0.23%)</title><rect x="177.0" y="389" width="2.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="180.01" y="399.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.06%)</title><rect x="175.6" y="357" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="178.64" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="229" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="239.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1129.1" y="389" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1132.08" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="827.9" y="357" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="830.92" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (111,111,110 samples, 0.64%)</title><rect x="324.2" y="389" width="7.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="327.16" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="181" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="842.3" y="357" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="845.30" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.64%)</title><rect x="1161.3" y="389" width="7.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1164.25" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="833.4" y="357" width="4.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="836.40" y="367.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.06%)</title><rect x="1187.3" y="197" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1190.26" y="207.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="175.6" y="373" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="178.64" y="383.5" ></text>
</g>
<g >
<title>sim::Link::arrive (353,535,350 samples, 2.03%)</title><rect x="152.4" y="389" width="23.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="155.37" y="399.5" >s..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="297.5" y="309" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="300.47" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="168.8" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="171.79" y="367.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="149" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.52" y="159.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.23%)</title><rect x="298.2" y="277" width="2.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="301.16" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (30,303,030 samples, 0.17%)</title><rect x="25.1" y="341" width="2.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="28.06" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (292,929,290 samples, 1.68%)</title><rect x="1089.4" y="373" width="19.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1092.39" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="1088.7" y="373" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1091.70" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.12%)</title><rect x="829.3" y="341" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="832.29" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.17%)</title><rect x="156.5" y="357" width="2.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="159.47" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="832.7" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="835.71" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1146.2" y="389" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1149.19" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="277" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (131,313,130 samples, 0.75%)</title><rect x="315.3" y="389" width="8.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="318.27" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.06%)</title><rect x="294.0" y="373" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="297.05" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.8" y="197" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.84" y="207.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="1084.6" y="373" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1087.59" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="1148.2" y="341" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.25" y="351.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (161,616,160 samples, 0.93%)</title><rect x="69.5" y="421" width="11.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="72.55" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="289.9" y="357" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="292.94" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (50,505,050 samples, 0.29%)</title><rect x="1168.8" y="389" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.78" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="373" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>main (17,191,919,020 samples, 98.72%)</title><rect x="25.1" y="453" width="1164.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="28.06" y="463.5" >main</text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1144.1" y="373" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1147.14" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="309" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.47" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="261" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.16" y="271.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1166.7" y="341" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.73" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.64%)</title><rect x="305.0" y="357" width="7.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="308.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="261" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.84" y="223.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="293.4" y="341" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="296.36" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="38.7" y="277" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.75" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="229" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="261" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.47" y="271.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.12%)</title><rect x="1049.0" y="373" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1052.00" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="469" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>malloc (202,020,200 samples, 1.16%)</title><rect x="597.9" y="357" width="13.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="600.95" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.17%)</title><rect x="1090.8" y="357" width="2.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1093.75" y="367.5" ></text>
</g>
<g >
<title>sim::Event::get_time (90,909,090 samples, 0.52%)</title><rect x="63.4" y="421" width="6.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="66.39" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="245" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (191,919,190 samples, 1.10%)</title><rect x="40.8" y="389" width="13.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="43.80" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="832.7" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="835.71" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="20.3" y="341" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.27" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="255.5" ></text>
</g>
<g >
<title>sim::SendData::operator (585,858,580 samples, 3.36%)</title><rect x="1080.5" y="405" width="39.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1083.49" y="415.5" >sim..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="301.6" y="309" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.58" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1146.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="453" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="287.5" ></text>
</g>
<g >
<title>sim::Event::Event (151,515,150 samples, 0.87%)</title><rect x="244.1" y="389" width="10.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="247.08" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="357" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.47" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="261" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="101" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="111.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (90,909,090 samples, 0.52%)</title><rect x="34.6" y="389" width="6.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="37.64" y="399.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.17%)</title><rect x="1166.7" y="357" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.73" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.64%)</title><rect x="1182.5" y="437" width="7.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.47" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1117.4" y="341" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1120.45" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="133" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="143.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="170.2" y="341" width="4.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="173.16" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.23%)</title><rect x="1166.0" y="373" width="2.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1169.04" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="229" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.16" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (40,404,040 samples, 0.23%)</title><rect x="165.4" y="309" width="2.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="168.37" y="319.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (515,151,510 samples, 2.96%)</title><rect x="1138.7" y="405" width="34.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1141.67" y="415.5" >si..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.06%)</title><rect x="1151.0" y="373" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1153.99" y="383.5" ></text>
</g>
<g >
<title>cfree (333,333,330 samples, 1.91%)</title><rect x="781.4" y="357" width="22.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="784.38" y="367.5" >c..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (30,303,030 samples, 0.17%)</title><rect x="25.1" y="373" width="2.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="28.06" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="59.3" y="421" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="62.28" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="12.1" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.05" y="351.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="311.8" y="325" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="314.84" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="373" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.47" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.8" y="133" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.84" y="143.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (20,202,020 samples, 0.12%)</title><rect x="341.3" y="389" width="1.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="344.28" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="24.4" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.37" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.06%)</title><rect x="1182.5" y="245" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.47" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="26.4" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.43" y="63.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.06%)</title><rect x="294.7" y="373" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="297.73" y="383.5" ></text>
</g>
<g >
<title>cfree (292,929,290 samples, 1.68%)</title><rect x="567.1" y="373" width="19.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="570.15" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="303.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.46%)</title><rect x="1075.0" y="405" width="5.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1078.01" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1171.5" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.52" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="36.7" y="309" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.69" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 1.04%)</title><rect x="140.0" y="389" width="12.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="143.05" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1135.51" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.87%)</title><rect x="1094.9" y="293" width="10.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1097.86" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.84" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (30,303,030 samples, 0.17%)</title><rect x="25.1" y="389" width="2.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="28.06" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (171,717,170 samples, 0.99%)</title><rect x="303.6" y="373" width="11.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="306.63" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.23%)</title><rect x="298.2" y="293" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="301.16" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.84" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.28%)</title><rect x="788.9" y="341" width="15.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="791.91" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,393,939,220 samples, 99.88%)</title><rect x="11.4" y="469" width="1178.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.37" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>Logger::warn (2,373,737,350 samples, 13.63%)</title><rect x="383.7" y="373" width="160.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="386.71" y="383.5" >Logger::warn</text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.12%)</title><rect x="1174.9" y="389" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1177.94" y="399.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="383.0" y="373" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="386.03" y="383.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="1117.4" y="357" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1120.45" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,141,413,990 samples, 86.95%)</title><rect x="97.6" y="421" width="1026.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="100.61" y="431.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.06%)</title><rect x="312.5" y="357" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="315.53" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="175.0" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="177.95" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="325" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.63" y="335.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="421" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.47" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="341" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.47" y="351.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="421" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.63" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.52%)</title><rect x="162.6" y="357" width="6.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="165.63" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.17%)</title><rect x="25.1" y="357" width="2.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="28.06" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.17%)</title><rect x="308.4" y="293" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="311.42" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="29.2" y="69" width="4.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.16" y="79.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="149" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.89" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.46%)</title><rect x="1133.2" y="325" width="5.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.19" y="335.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::BasicCC&gt;, sim::Link&gt;::add_link (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="389" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.32" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.46%)</title><rect x="156.5" y="373" width="5.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="159.47" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1102.4" y="245" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.39" y="255.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="53.1" y="357" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="56.12" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="168.1" y="341" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="171.11" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="309" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.63" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="289.3" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="292.26" y="367.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.29%)</title><rect x="806.0" y="357" width="3.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="809.02" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="830.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="833.66" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="37.4" y="293" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.38" y="303.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.41%)</title><rect x="1050.4" y="357" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1053.37" y="367.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="587.0" y="373" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="590.00" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.58%)</title><rect x="1097.6" y="261" width="6.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1100.60" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="171.5" y="293" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="174.53" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="288.6" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="291.57" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="405" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (80,808,080 samples, 0.46%)</title><rect x="1146.9" y="389" width="5.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1149.88" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.12%)</title><rect x="825.9" y="357" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="828.87" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="271.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="389" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.47" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (171,717,170 samples, 0.99%)</title><rect x="42.2" y="373" width="11.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="45.17" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.46%)</title><rect x="27.8" y="101" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.80" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.7" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.68" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="501" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.52%)</title><rect x="1182.5" y="325" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.47" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="296.8" y="293" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="299.79" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.8" y="181" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.84" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="26.4" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.43" y="79.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.12%)</title><rect x="886.8" y="373" width="1.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="889.79" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="154.4" y="357" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="157.42" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.35%)</title><rect x="833.4" y="309" width="4.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="836.40" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="181" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.89" y="191.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.06%)</title><rect x="80.5" y="421" width="0.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="83.50" y="431.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="35.3" y="373" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="38.32" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (30,303,030 samples, 0.17%)</title><rect x="313.2" y="357" width="2.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="316.21" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.7" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.68" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="341" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="130.5" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="133.46" y="415.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.99%)</title><rect x="1123.6" y="421" width="58.9" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1126.61" y="431.5" >sim::S..</text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (434,343,430 samples, 2.49%)</title><rect x="25.1" y="437" width="29.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="28.06" y="447.5" >si..</text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.35%)</title><rect x="589.0" y="373" width="4.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="592.05" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.23%)</title><rect x="295.4" y="325" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="298.42" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.41%)</title><rect x="170.2" y="357" width="4.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="173.16" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="289.3" y="373" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="292.26" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="293" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::Process::~Process (161,616,160 samples, 0.93%)</title><rect x="86.7" y="421" width="10.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="89.66" y="431.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.17%)</title><rect x="231.1" y="389" width="2.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="234.08" y="399.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.23%)</title><rect x="1163.3" y="357" width="2.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1166.31" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="213" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.12%)</title><rect x="1091.4" y="325" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1094.44" y="335.5" ></text>
</g>
<g >
<title>fopen (90,909,090 samples, 0.52%)</title><rect x="27.1" y="357" width="6.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="30.11" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="838.2" y="357" width="2.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="841.19" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.9" y="165" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.89" y="175.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.12%)</title><rect x="300.9" y="325" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="303.89" y="335.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.06%)</title><rect x="972.3" y="373" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="975.34" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="308.4" y="229" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="311.42" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 0.29%)</title><rect x="1184.5" y="229" width="3.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.52" y="239.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="133" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.52" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="832.7" y="309" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="835.71" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="181" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1186.16" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.46%)</title><rect x="27.8" y="117" width="5.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.80" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="299.5" y="213" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="302.52" y="223.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.17%)</title><rect x="308.4" y="277" width="2.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="311.42" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="373" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.63" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (10,101,010 samples, 0.06%)</title><rect x="1186.6" y="181" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1189.58" y="191.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="155.1" y="373" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="158.10" y="383.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.06%)</title><rect x="155.8" y="373" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="158.79" y="383.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (434,343,430 samples, 2.49%)</title><rect x="25.1" y="421" width="29.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="28.06" y="431.5" >si..</text>
</g>
<g >
<title>sim::Switch::process (9,303,030,210 samples, 53.42%)</title><rect x="342.6" y="389" width="630.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="345.65" y="399.5" >sim::Switch::process</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="169.5" y="357" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="172.48" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (585,858,580 samples, 3.36%)</title><rect x="1080.5" y="389" width="39.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1083.49" y="399.5" >sim..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="213" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.16" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="312.5" y="325" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="315.53" y="335.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.17%)</title><rect x="1081.2" y="373" width="2.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1084.17" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.35%)</title><rect x="36.0" y="357" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="39.01" y="367.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="804.0" y="357" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="806.97" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="290.6" y="341" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="293.63" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.12%)</title><rect x="292.0" y="325" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="295.00" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1183.2" y="197" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1186.16" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.7" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.68" y="191.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="305.7" y="325" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="308.68" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.12%)</title><rect x="11.4" y="373" width="1.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.37" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="309.8" y="213" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="312.79" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1083.9" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1086.91" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="167.4" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="170.42" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 1.04%)</title><rect x="12.7" y="389" width="12.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.74" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="835.5" y="245" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="838.45" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1155.8" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.78" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (333,333,330 samples, 1.91%)</title><rect x="544.6" y="373" width="22.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="547.56" y="383.5" >[..</text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.29%)</title><rect x="36.7" y="341" width="3.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="39.69" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="840.2" y="357" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="843.24" y="367.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.41%)</title><rect x="20.3" y="357" width="4.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="23.27" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.8" y="165" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.84" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="165" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="175.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1162.6" y="373" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1165.62" y="383.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.17%)</title><rect x="1144.1" y="389" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.14" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="296.8" y="309" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="299.79" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="32.6" y="37" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.59" y="47.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (60,606,060 samples, 0.35%)</title><rect x="283.8" y="389" width="4.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="286.78" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.36" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="197" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="207.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.35%)</title><rect x="233.1" y="389" width="4.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="236.13" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (70,707,070 samples, 0.41%)</title><rect x="1176.3" y="405" width="4.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1179.31" y="415.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.06%)</title><rect x="1090.1" y="325" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1093.07" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.06%)</title><rect x="53.8" y="389" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="56.81" y="399.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.12%)</title><rect x="166.1" y="293" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="169.06" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1092.8" y="325" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1095.81" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="310.5" y="309" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="313.48" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="312.5" y="341" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="315.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="261" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="197" width="0.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1187.52" y="207.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1172.2" y="389" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1175.20" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.35%)</title><rect x="833.4" y="325" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="836.40" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="421" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="117" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1144.8" y="357" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.83" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="292.0" y="277" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="229" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="971.0" y="373" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="973.97" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1168.1" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.10" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="437" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="1127.0" y="389" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.03" y="399.5" ></text>
</g>
<g >
<title>sim::Event::Event (292,929,290 samples, 1.68%)</title><rect x="1055.2" y="373" width="19.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1058.16" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1135.51" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (181,818,180 samples, 1.04%)</title><rect x="828.6" y="373" width="12.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="831.61" y="383.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.29%)</title><rect x="1147.6" y="373" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.56" y="383.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (363,636,360 samples, 2.09%)</title><rect x="152.4" y="405" width="24.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="155.37" y="415.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="298.2" y="261" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="301.16" y="271.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.17%)</title><rect x="1086.6" y="373" width="2.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1089.65" y="383.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="357" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1146.46" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::operator/= (10,101,010 samples, 0.06%)</title><rect x="53.8" y="405" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="56.81" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.23%)</title><rect x="1105.1" y="357" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1108.13" y="367.5" ></text>
</g>
<g >
<title>all (17,414,141,240 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.29%)</title><rect x="1147.6" y="357" width="3.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1150.56" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.29%)</title><rect x="883.4" y="373" width="3.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="886.36" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.12%)</title><rect x="292.0" y="341" width="1.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="295.00" y="351.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,212,121,080 samples, 75.87%)</title><rect x="179.7" y="405" width="895.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="182.74" y="415.5" >sim::Process::operator</text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 1.45%)</title><rect x="747.2" y="341" width="17.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="750.16" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="341" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.06%)</title><rect x="296.8" y="277" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="299.79" y="287.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="421" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.32" y="431.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="341" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1146.46" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (16,616,161,450 samples, 95.42%)</title><rect x="56.5" y="437" width="1126.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="59.54" y="447.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1107.2" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1110.18" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.29%)</title><rect x="36.7" y="325" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.69" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.64%)</title><rect x="1131.1" y="389" width="7.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1134.14" y="399.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="302.3" y="341" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="305.26" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="1090.1" y="341" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1093.07" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 1.45%)</title><rect x="764.3" y="357" width="17.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="767.27" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (70,707,070 samples, 0.41%)</title><rect x="20.3" y="373" width="4.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="23.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.29%)</title><rect x="158.5" y="341" width="3.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="161.53" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (60,606,060 samples, 0.35%)</title><rect x="1184.5" y="261" width="4.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.52" y="271.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1117.4" y="325" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1120.45" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1184.5" y="165" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.52" y="175.5" ></text>
</g>
<g >
<title>open64 (90,909,090 samples, 0.52%)</title><rect x="27.1" y="309" width="6.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="30.11" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1143.5" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.46" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (80,808,080 samples, 0.46%)</title><rect x="1133.2" y="373" width="5.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1136.19" y="383.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.29%)</title><rect x="60.0" y="421" width="3.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="62.97" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="293.4" y="357" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="296.36" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.12%)</title><rect x="1183.2" y="245" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.16" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1183.8" y="149" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.84" y="159.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (50,505,050 samples, 0.29%)</title><rect x="823.8" y="373" width="3.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="826.82" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (202,020,200 samples, 1.16%)</title><rect x="161.9" y="373" width="13.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="164.95" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="835.5" y="261" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="838.45" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (191,919,190 samples, 1.10%)</title><rect x="1125.7" y="405" width="13.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1128.66" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="20.3" y="325" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.27" y="335.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.41%)</title><rect x="1050.4" y="373" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1053.37" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.17%)</title><rect x="1159.2" y="389" width="2.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1162.20" y="399.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.12%)</title><rect x="1085.3" y="373" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1088.28" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1165.4" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.36" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="630.1" y="357" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="633.12" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="85" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="95.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="179.1" y="373" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="182.06" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="165" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="175.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.23%)</title><rect x="171.5" y="309" width="2.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="174.53" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1164.0" y="341" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.99" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.51" y="351.5" ></text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.64%)</title><rect x="12.7" y="373" width="7.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.74" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="19.6" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.58" y="319.5" ></text>
</g>
<g >
<title>malloc (181,818,180 samples, 1.04%)</title><rect x="811.5" y="341" width="12.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="814.50" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (161,616,160 samples, 0.93%)</title><rect x="1094.2" y="309" width="10.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1097.18" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (222,222,220 samples, 1.28%)</title><rect x="529.5" y="357" width="15.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="532.50" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,808,080 samples, 0.46%)</title><rect x="305.7" y="341" width="5.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="308.68" y="351.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="307.7" y="325" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="310.74" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="305.7" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="308.68" y="319.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.12%)</title><rect x="1185.9" y="197" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.89" y="207.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="308.4" y="309" width="2.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="311.42" y="319.5" ></text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 0.46%)</title><rect x="81.2" y="421" width="5.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="84.18" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="157.2" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.16" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.06%)</title><rect x="1092.1" y="309" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1095.12" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (181,818,180 samples, 1.04%)</title><rect x="1092.8" y="357" width="12.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1095.81" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="34.0" y="389" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="36.96" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="172.2" y="261" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="175.22" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.75%)</title><rect x="44.2" y="309" width="8.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.22" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="1151.7" y="373" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1154.67" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.23%)</title><rect x="298.2" y="309" width="2.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="301.16" y="319.5" ></text>
</g>
<g >
<title>operator new (101,010,100 samples, 0.58%)</title><rect x="237.2" y="389" width="6.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="240.24" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1150.3" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.30" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="1106.5" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1109.50" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.6" y="405" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.63" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 1.16%)</title><rect x="11.4" y="405" width="13.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.37" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="25.7" y="245" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.74" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="172.2" y="277" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="175.22" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1132.5" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1135.51" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="308.4" y="261" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="311.42" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="149" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.64%)</title><rect x="1097.6" y="277" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1100.60" y="287.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="287.9" y="373" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="290.89" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="12.1" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.05" y="335.5" ></text>
</g>
<g >
<title>write (30,303,030 samples, 0.17%)</title><rect x="25.1" y="325" width="2.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="28.06" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="157.8" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="160.84" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="33.3" y="389" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="36.27" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (121,212,120 samples, 0.70%)</title><rect x="295.4" y="373" width="8.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="298.42" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="306.4" y="325" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="309.37" y="335.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.12%)</title><rect x="11.4" y="357" width="1.3" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.37" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1171.5" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.52" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.58%)</title><rect x="295.4" y="341" width="6.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="298.42" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1153.0" y="389" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1156.04" y="399.5" ></text>
</g>
<g >
<title>nons (17,414,141,240 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="197" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.35%)</title><rect x="29.2" y="85" width="4.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.16" y="95.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="405" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.32" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,222,222,210 samples, 7.02%)</title><rect x="888.2" y="373" width="82.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="891.16" y="383.5" >std::_Rb_..</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.12%)</title><rect x="311.2" y="341" width="1.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="314.16" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.17%)</title><rect x="1154.4" y="389" width="2.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1157.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.52%)</title><rect x="27.1" y="213" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.11" y="223.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.12%)</title><rect x="1087.3" y="357" width="1.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1090.33" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1171.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.52" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.12%)</title><rect x="292.0" y="261" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.00" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.17%)</title><rect x="840.9" y="373" width="2.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="843.93" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.23%)</title><rect x="30.5" y="53" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.53" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.23%)</title><rect x="1156.5" y="389" width="2.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.46" y="399.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.17%)</title><rect x="18.2" y="357" width="2.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.21" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="18.2" y="341" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.21" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.41%)</title><rect x="48.3" y="277" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.33" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="325" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (424,242,420 samples, 2.44%)</title><rect x="25.1" y="405" width="28.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="28.06" y="415.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.12%)</title><rect x="10.0" y="277" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
</g>
</svg>
