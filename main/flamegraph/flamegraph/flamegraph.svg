<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1334.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1317" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1317" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="677" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1029" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="1039.5" ></text>
</g>
<g >
<title>__libc_start_main (19,101,009,910 samples, 99.89%)</title><rect x="11.2" y="1237" width="1178.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.25" y="1247.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1171.9" y="965" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.92" y="975.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 0.16%)</title><rect x="111.6" y="1125" width="1.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="114.61" y="1135.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (141,414,140 samples, 0.74%)</title><rect x="371.5" y="1141" width="8.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="374.54" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (636,363,630 samples, 3.33%)</title><rect x="567.3" y="1125" width="39.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="570.27" y="1135.5" >[li..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="991.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="196.4" y="1125" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="199.38" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="59.2" y="837" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="62.24" y="847.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.21%)</title><rect x="1152.0" y="1141" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1154.98" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="645" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="227.5" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="230.55" y="1103.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="869.0" y="1093" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="871.98" y="1103.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (40,404,040 samples, 0.21%)</title><rect x="1091.5" y="1109" width="2.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1094.51" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="1029" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="1039.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="330.4" y="1109" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="333.40" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="885" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="326.0" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="329.04" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1077" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="917" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="927.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="845.9" y="1061" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="848.91" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="901" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="597" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.69%)</title><rect x="213.8" y="1077" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="216.84" y="1087.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1141" width="5.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.14" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="85" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="117" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="127.5" ></text>
</g>
<g >
<title>memcmp@plt (10,101,010 samples, 0.05%)</title><rect x="228.2" y="1093" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="231.17" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="1141" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.38" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="885" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="1077" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1087.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.53%)</title><rect x="862.7" y="1109" width="6.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="865.74" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1077" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1087.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1093.4" y="1045" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1096.38" y="1055.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1141" width="4.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="59.75" y="1151.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="26.8" y="1141" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="29.83" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1045" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1171.9" y="949" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.92" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.5" y="933" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.55" y="943.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="111.6" y="1077" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="114.61" y="1087.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.85%)</title><rect x="638.3" y="1109" width="10.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="641.34" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="85.4" y="1061" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="88.43" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.76" y="1023.5" ></text>
</g>
<g >
<title>Logger::warn (10,101,010 samples, 0.05%)</title><rect x="279.3" y="1141" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="282.29" y="1151.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="27.5" y="1157" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="30.45" y="1167.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (40,404,040 samples, 0.21%)</title><rect x="117.2" y="1189" width="2.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="120.22" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1071.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="202.0" y="1077" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="204.99" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="901" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="911.5" ></text>
</g>
<g >
<title>sim::Host::process (474,747,470 samples, 2.48%)</title><rect x="324.8" y="1141" width="29.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="327.79" y="1151.5" >si..</text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.16%)</title><rect x="1186.9" y="997" width="1.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.88" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1109" width="0.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="107.75" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="1093" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.22" y="1103.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.21%)</title><rect x="1137.0" y="1125" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.02" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1125" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="549" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="559.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (595,959,590 samples, 3.12%)</title><rect x="1087.8" y="1141" width="36.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1090.77" y="1151.5" >sim..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1109" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="325" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="1029" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1039.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="1183.1" y="965" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.14" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="789" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="799.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.11%)</title><rect x="1131.4" y="1141" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1134.41" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="949" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.05%)</title><rect x="101.0" y="1109" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="104.01" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="67.3" y="1061" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="70.35" y="1071.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="348.5" y="1045" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="351.48" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="348.5" y="1013" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="351.48" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="901" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1109" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1119.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="350.3" y="1093" width="1.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="353.35" y="1103.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="82.9" y="1125" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="85.93" y="1135.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1120.2" y="1077" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1123.18" y="1087.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1093" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="864.49" y="1103.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (30,303,030 samples, 0.16%)</title><rect x="859.0" y="1125" width="1.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="862.00" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="469" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1141" width="3.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="110.87" y="1151.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.05%)</title><rect x="857.1" y="1077" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="860.13" y="1087.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.05%)</title><rect x="278.7" y="1141" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="281.66" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="100.4" y="885" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="103.39" y="895.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.26%)</title><rect x="331.0" y="1077" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="334.02" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="1013" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="1023.5" ></text>
</g>
<g >
<title>vsnprintf (131,313,130 samples, 0.69%)</title><rect x="213.8" y="1061" width="8.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="216.84" y="1071.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="349.7" y="1061" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="352.73" y="1071.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="346.6" y="1077" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="349.61" y="1087.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="847.8" y="1093" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="850.78" y="1103.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (80,808,080 samples, 0.42%)</title><rect x="1089.6" y="1125" width="5.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1092.64" y="1135.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.11%)</title><rect x="1088.4" y="1125" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1091.39" y="1135.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.16%)</title><rect x="1185.0" y="997" width="1.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.01" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1045" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="997" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="261" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.37%)</title><rect x="337.3" y="1093" width="4.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="340.26" y="1103.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="113.5" y="1125" width="3.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="116.48" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="389" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="399.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="872.1" y="1109" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="875.09" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1093.4" y="1029" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1096.38" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="693" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="703.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.21%)</title><rect x="113.5" y="1093" width="2.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="116.48" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="1039.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="1099.0" y="1077" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1101.99" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="917" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,939,393,840 samples, 51.98%)</title><rect x="382.1" y="1141" width="613.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="385.14" y="1151.5" >sim::Switch::process</text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.32%)</title><rect x="631.5" y="1125" width="3.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="634.48" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.37%)</title><rect x="94.2" y="1029" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="97.15" y="1039.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.58%)</title><rect x="1101.5" y="1077" width="6.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1104.48" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="203.2" y="997" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="206.24" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1045" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.30" y="1055.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.16%)</title><rect x="1108.3" y="1109" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1111.34" y="1119.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="1094.6" y="1125" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1097.63" y="1135.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1109" width="1.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="109.62" y="1119.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="1125" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1159.34" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1013" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="1023.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.26%)</title><rect x="331.0" y="1109" width="3.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="334.02" y="1119.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.11%)</title><rect x="857.8" y="1125" width="1.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="860.75" y="1135.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.16%)</title><rect x="222.6" y="1093" width="1.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="225.56" y="1103.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="869.0" y="1109" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="871.98" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="114.1" y="1029" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="117.10" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="165" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.11%)</title><rect x="1167.6" y="1141" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1170.56" y="1151.5" ></text>
</g>
<g >
<title>_IO_file_open (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1077" width="4.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="59.75" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="917" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="927.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="348.5" y="1077" width="1.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="351.48" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1093" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1173.8" y="1061" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.79" y="1071.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1077" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="107.75" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="851.5" y="1077" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="854.52" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="997" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="1007.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1175.7" y="1141" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1178.66" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="107.2" y="885" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.24" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="1045" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="1055.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1061" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="277" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="206.4" y="1109" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="209.35" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.2" y="1109" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.21" y="1119.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="1061" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1146.25" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="975.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.1" y="917" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.13" y="927.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="334.1" y="1093" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="337.14" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="565" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="575.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1125" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.30" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1180.0" y="1157" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1183.03" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="24.3" y="1173" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.34" y="1183.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1141" width="0.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1127.55" y="1151.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="202.0" y="1093" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="204.99" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="485" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="495.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1054.7" y="1125" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1057.73" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="917" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="927.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.37%)</title><rect x="15.6" y="1109" width="4.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.61" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1077" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1087.5" ></text>
</g>
<g >
<title>main (18,888,888,700 samples, 98.78%)</title><rect x="24.3" y="1205" width="1165.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.34" y="1215.5" >main</text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1130.8" y="1157" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1133.78" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1109" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1119.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (101,010,100 samples, 0.53%)</title><rect x="198.3" y="1125" width="6.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="201.25" y="1135.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="341.0" y="1077" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="344.00" y="1087.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="229.4" y="1077" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="232.42" y="1087.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="346.0" y="1077" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="348.99" y="1087.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1120.2" y="1109" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1123.18" y="1119.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1173" width="5.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.14" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1061" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.30" y="1071.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (111,111,110 samples, 0.58%)</title><rect x="225.1" y="1157" width="6.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="228.06" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1093" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="917" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="927.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="917" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="112.2" y="1045" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.23" y="1055.5" ></text>
</g>
<g >
<title>open64 (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1061" width="4.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="59.75" y="1071.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.16%)</title><rect x="993.6" y="1125" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="996.65" y="1135.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.26%)</title><rect x="869.6" y="1125" width="3.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="872.60" y="1135.5" ></text>
</g>
<g >
<title>open64 (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1061" width="3.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="110.87" y="1071.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (464,646,460 samples, 2.43%)</title><rect x="196.4" y="1157" width="28.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="199.38" y="1167.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="108.5" y="901" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.49" y="911.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.11%)</title><rect x="210.1" y="1093" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="213.10" y="1103.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1097.7" y="1077" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1100.74" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="59.9" y="821" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="62.87" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="965" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="959.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1045" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="864.49" y="1055.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (60,606,060 samples, 0.32%)</title><rect x="1155.1" y="1141" width="3.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1158.09" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.27%)</title><rect x="65.5" y="1077" width="14.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="68.48" y="1087.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1029" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1039.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="1173" width="0.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.75" y="1183.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="48.6" y="1093" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.65" y="1103.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="337.3" y="1077" width="3.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="340.26" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1013" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="1023.5" ></text>
</g>
<g >
<title>malloc (272,727,270 samples, 1.43%)</title><rect x="827.8" y="1093" width="16.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="830.83" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1061" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1071.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1141" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="31.08" y="1151.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1077" width="1.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="109.62" y="1087.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="847.8" y="1077" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="850.78" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.37%)</title><rect x="20.0" y="1093" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.97" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="933" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="981" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="991.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.21%)</title><rect x="326.7" y="1093" width="2.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="329.66" y="1103.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="845.3" y="1093" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="848.29" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="100.4" y="869" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="103.39" y="879.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (70,707,070 samples, 0.37%)</title><rect x="903.9" y="1125" width="4.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="906.88" y="1135.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="901" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.77" y="911.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1109" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="31.08" y="1119.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (272,727,270 samples, 1.43%)</title><rect x="765.5" y="1093" width="16.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="768.50" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1141" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1151.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (333,333,330 samples, 1.74%)</title><rect x="81.1" y="1141" width="20.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="84.06" y="1151.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.05%)</title><rect x="857.1" y="1093" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="860.13" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="1029" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="1039.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="1123.3" y="1109" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1126.30" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="981" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>vsnprintf (232,323,230 samples, 1.22%)</title><rect x="84.2" y="1093" width="14.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="87.18" y="1103.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="1097.1" y="1109" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1100.12" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="864.0" y="1045" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="866.99" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="965" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="933" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (202,020,200 samples, 1.06%)</title><rect x="11.9" y="1141" width="12.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.87" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="933" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.11%)</title><rect x="1180.6" y="1157" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1183.65" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1029" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1039.5" ></text>
</g>
<g >
<title>sim::SendData::operator (595,959,590 samples, 3.12%)</title><rect x="1087.8" y="1157" width="36.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1090.77" y="1167.5" >sim..</text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 1.00%)</title><rect x="807.9" y="1093" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="810.89" y="1103.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="1157" width="0.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.75" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1150.1" y="1141" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.11" y="1151.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="230.7" y="1109" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="233.67" y="1119.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (30,303,030 samples, 0.16%)</title><rect x="1185.0" y="965" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.01" y="975.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.11%)</title><rect x="1158.8" y="1141" width="1.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1161.83" y="1151.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (313,131,310 samples, 1.64%)</title><rect x="205.1" y="1125" width="19.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="208.11" y="1135.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="197.6" y="1125" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="200.63" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,909,090 samples, 0.48%)</title><rect x="1168.8" y="1141" width="5.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1171.81" y="1151.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="1109.0" y="1093" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1111.96" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1029" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1153.8" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.85" y="1103.5" ></text>
</g>
<g >
<title>__uselocale (20,202,020 samples, 0.11%)</title><rect x="867.7" y="1077" width="1.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="870.73" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="959.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1109" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="864.49" y="1119.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="223.2" y="1077" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="226.19" y="1087.5" ></text>
</g>
<g >
<title>_start (19,101,009,910 samples, 99.89%)</title><rect x="11.2" y="1253" width="1178.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.25" y="1263.5" >_start</text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (212,121,210 samples, 1.11%)</title><rect x="11.2" y="1173" width="13.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.25" y="1183.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (60,606,060 samples, 0.32%)</title><rect x="1185.0" y="1013" width="3.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.01" y="1023.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.11%)</title><rect x="1099.0" y="1061" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1101.99" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.8" y="1109" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.83" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1077" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.30" y="1087.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1125" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1127.55" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="965" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="1125" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.75" y="1135.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.37%)</title><rect x="20.0" y="1109" width="4.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.97" y="1119.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1125" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.87" y="1135.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1125" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="59.13" y="1135.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1097.1" y="1093" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1100.12" y="1103.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="427.6" y="1125" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="430.64" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1039.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="348.5" y="1061" width="1.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="351.48" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1138.9" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.89" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="109.7" y="757" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.74" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="949" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="949" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="959.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="328.5" y="1061" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="331.53" y="1071.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="965" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1187.39" y="975.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="1141" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.75" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="965" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="975.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="348.5" y="981" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="351.48" y="991.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1130.2" y="1157" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1133.16" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="110.4" y="741" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="113.36" y="751.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.37%)</title><rect x="284.3" y="1141" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="287.27" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="837" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="981" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="991.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (505,050,500 samples, 2.64%)</title><rect x="872.7" y="1125" width="31.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="875.72" y="1135.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1125" width="5.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.14" y="1135.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="116.6" y="1109" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="119.59" y="1119.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1093" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1103.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1077" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1127.55" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.90%)</title><rect x="617.1" y="1109" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="620.14" y="1119.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="203.9" y="1109" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="206.86" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1157.0" y="1125" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.96" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="215.7" y="1013" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="218.71" y="1023.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1125" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="31.08" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1138.9" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.89" y="1023.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.69%)</title><rect x="861.5" y="1125" width="8.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="864.49" y="1135.5" ></text>
</g>
<g >
<title>strchrnul@plt (10,101,010 samples, 0.05%)</title><rect x="80.4" y="1077" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="83.44" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1093" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="54.9" y="1093" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.88" y="1103.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.05%)</title><rect x="106.0" y="1157" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="109.00" y="1167.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1099.6" y="1045" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1102.61" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1093" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="885" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.77" y="895.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.32%)</title><rect x="627.7" y="1125" width="3.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="630.74" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="1023.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="1092.8" y="1061" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1095.76" y="1071.5" ></text>
</g>
<g >
<title>sim::Host::~Host (131,313,130 samples, 0.69%)</title><rect x="11.9" y="1125" width="8.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.87" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,383,838,370 samples, 7.24%)</title><rect x="908.2" y="1125" width="85.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="911.25" y="1135.5" >std::_Rb_t..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1237" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1247.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="533" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="58.0" y="869" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="61.00" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="981" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1141" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1151.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (111,111,110 samples, 0.58%)</title><rect x="850.3" y="1109" width="6.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="853.27" y="1119.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1157" width="5.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.14" y="1167.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,323,232,310 samples, 6.92%)</title><rect x="25.0" y="1173" width="81.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="27.96" y="1183.5" >sim::Link..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="997" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1173" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1183.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.05%)</title><rect x="1094.0" y="1109" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1097.00" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="81.1" y="1125" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="84.06" y="1135.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1093" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1127.55" y="1103.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="329.2" y="1109" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="332.15" y="1119.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (202,020,200 samples, 1.06%)</title><rect x="1131.4" y="1157" width="12.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1134.41" y="1167.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1125" width="3.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="110.87" y="1135.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="196.4" y="1109" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="199.38" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.26%)</title><rect x="337.9" y="981" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.88" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1138.3" y="1077" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.26" y="1087.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.05%)</title><rect x="230.0" y="1077" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="233.04" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1141" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="949" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="959.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="18.1" y="1077" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.10" y="1087.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="336.6" y="1093" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="339.63" y="1103.5" ></text>
</g>
<g >
<title>operator new (363,636,360 samples, 1.90%)</title><rect x="822.2" y="1109" width="22.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="825.22" y="1119.5" >o..</text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (70,707,070 samples, 0.37%)</title><rect x="1125.2" y="1157" width="4.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1128.17" y="1167.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.16%)</title><rect x="1186.9" y="981" width="1.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.88" y="991.5" ></text>
</g>
<g >
<title>cfree (292,929,290 samples, 1.53%)</title><rect x="801.7" y="1109" width="18.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="804.65" y="1119.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (10,101,010 samples, 0.05%)</title><rect x="221.3" y="1013" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="224.32" y="1023.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1141" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.87" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1007.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1109" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1127.55" y="1119.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.1" y="885" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.13" y="895.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1045" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="109.1" y="821" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.11" y="831.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (282,828,280 samples, 1.48%)</title><rect x="63.6" y="1109" width="17.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="66.61" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.58%)</title><rect x="1101.5" y="1045" width="6.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.48" y="1055.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (90,909,090 samples, 0.48%)</title><rect x="354.1" y="1141" width="5.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="357.09" y="1151.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1135.8" y="1125" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1138.77" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.06%)</title><rect x="68.0" y="1045" width="12.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="70.97" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1055.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.11%)</title><rect x="846.5" y="1061" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="849.53" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="1102.7" y="1029" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.73" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1013" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1023.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,505,050,490 samples, 7.87%)</title><rect x="24.3" y="1189" width="92.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="27.34" y="1199.5" >sim::Metric..</text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.05%)</title><rect x="351.6" y="1109" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="354.60" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.4" y="885" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.37" y="895.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="1045" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1146.25" y="1055.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1152.0" y="1125" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1154.98" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="965" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="293" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1093" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.30" y="1103.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.58%)</title><rect x="1101.5" y="1061" width="6.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1104.48" y="1071.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (20,202,020 samples, 0.11%)</title><rect x="1157.6" y="1125" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1160.59" y="1135.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="26.2" y="1157" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="29.21" y="1167.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1135.8" y="1109" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1138.77" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="1077" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.34" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="869" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="997" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="1007.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (141,414,140 samples, 0.74%)</title><rect x="213.2" y="1109" width="8.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="216.21" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1152.0" y="1109" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.98" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="421" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="113.5" y="1141" width="3.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="116.48" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1141.4" y="1061" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.38" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="197.0" y="1125" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="200.00" y="1135.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (20,202,020 samples, 0.11%)</title><rect x="350.3" y="1109" width="1.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="353.35" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="245" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="255.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.69%)</title><rect x="213.8" y="1093" width="8.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="216.84" y="1103.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="203.2" y="1045" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="206.24" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 1.00%)</title><rect x="86.7" y="1045" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="89.67" y="1055.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="344.7" y="1093" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="347.74" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1138.3" y="1061" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.26" y="1071.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1109" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.30" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="965" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (60,606,060 samples, 0.32%)</title><rect x="1120.8" y="1125" width="3.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1123.81" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1055.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="230.7" y="1093" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="233.67" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="121.6" y="1173" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="124.58" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="341" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1023.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1100.2" y="1093" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1103.24" y="1103.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="346.0" y="1061" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="348.99" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="949" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="959.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="1157" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.38" y="1167.5" ></text>
</g>
<g >
<title>Logger::warn (2,252,525,230 samples, 11.78%)</title><rect x="428.3" y="1125" width="139.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="431.27" y="1135.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1055.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="648.3" y="1125" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="651.31" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.16%)</title><rect x="51.8" y="1141" width="1.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="54.76" y="1151.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (232,323,230 samples, 1.22%)</title><rect x="84.2" y="1109" width="14.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="87.18" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="933" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="943.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1181.9" y="1157" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1184.90" y="1167.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,434,343,420 samples, 7.50%)</title><rect x="995.5" y="1141" width="88.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="998.52" y="1151.5" >void sim::..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="328.5" y="1077" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="331.53" y="1087.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.05%)</title><rect x="860.9" y="1125" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="863.87" y="1135.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1125" width="1.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="109.62" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1138.3" y="1029" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.26" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1109" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="11.2" y="1205" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="1215.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="1077" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.22" y="1087.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="11.2" y="1125" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.25" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="661" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="671.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="205.1" y="1093" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="208.11" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="1135.1" y="1141" width="1.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1138.15" y="1151.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="221.9" y="1093" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="224.94" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.26%)</title><rect x="77.3" y="1029" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.32" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="917" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.77" y="927.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (282,828,280 samples, 1.48%)</title><rect x="63.6" y="1125" width="17.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="66.61" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1013" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1093" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="981" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="991.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.11%)</title><rect x="103.5" y="1125" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="106.50" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="1045" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="773" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1045" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1055.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="857.1" y="1109" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="860.13" y="1119.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.42%)</title><rect x="198.9" y="1109" width="5.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="201.87" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="901" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="911.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.1" y="901" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.13" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="51.1" y="1125" width="0.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="54.14" y="1135.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (90,909,090 samples, 0.48%)</title><rect x="344.7" y="1109" width="5.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="347.74" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1077" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1189" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1199.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.16%)</title><rect x="111.6" y="1109" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="114.61" y="1119.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="223.8" y="1077" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="226.81" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.04" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="1140.1" y="1077" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.13" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.22" y="1039.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (515,151,510 samples, 2.69%)</title><rect x="1144.5" y="1157" width="31.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1147.50" y="1167.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="203.2" y="1029" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="206.24" y="1039.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="869.0" y="1077" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="871.98" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1138.9" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.89" y="959.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (858,585,850 samples, 4.49%)</title><rect x="1129.5" y="1173" width="53.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1132.54" y="1183.5" >sim::..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="55.5" y="1077" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="58.50" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1077" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.87" y="1087.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="949" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.77" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.5" y="901" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.55" y="911.5" ></text>
</g>
<g >
<title>Logger::info (1,959,595,940 samples, 10.25%)</title><rect x="661.4" y="1109" width="120.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="664.40" y="1119.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="981" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="991.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.26%)</title><rect x="337.9" y="1061" width="3.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="340.88" y="1071.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.11%)</title><rect x="324.8" y="1125" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="327.79" y="1135.5" ></text>
</g>
<g >
<title>sim::Process::operator (30,303,030 samples, 0.16%)</title><rect x="141.5" y="1173" width="1.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="144.53" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="1013" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="863.4" y="1061" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="866.37" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="949" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1077" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 0.21%)</title><rect x="53.6" y="1141" width="2.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="56.63" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="501" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="334.1" y="1077" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="337.14" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="933" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="943.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 0.16%)</title><rect x="1185.0" y="981" width="1.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.01" y="991.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="54.3" y="1125" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="57.26" y="1135.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1093" width="1.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="109.62" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1029" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.76" y="1039.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.58%)</title><rect x="1183.1" y="1189" width="6.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.14" y="1199.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="51.1" y="1109" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="54.14" y="1119.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.21%)</title><rect x="1097.7" y="1093" width="2.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1100.74" y="1103.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1181.3" y="1141" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.27" y="1151.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1137.0" y="1109" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.02" y="1119.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 1.11%)</title><rect x="635.2" y="1125" width="13.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="638.22" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="1045" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="933" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="943.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1061" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1127.55" y="1071.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1181.3" y="1125" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.27" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="105.4" y="1157" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="108.37" y="1167.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="203.2" y="1061" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="206.24" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1055.5" ></text>
</g>
<g >
<title>sim::StartFlow::operator (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1157" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1127.55" y="1167.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (151,515,150 samples, 0.79%)</title><rect x="335.4" y="1125" width="9.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="338.39" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.76" y="1071.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="54.3" y="1109" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="57.26" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (212,121,210 samples, 1.11%)</title><rect x="11.2" y="1157" width="13.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.25" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.37%)</title><rect x="20.0" y="1077" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.97" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1125" width="0.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="107.75" y="1135.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1125" width="4.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="59.75" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.26%)</title><rect x="1176.9" y="1157" width="3.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1179.91" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="326.7" y="1077" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="329.66" y="1087.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.21%)</title><rect x="221.9" y="1109" width="2.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="224.94" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1157" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1167.5" ></text>
</g>
<g >
<title>_IO_file_fopen (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1093" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="110.87" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="862.7" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="865.74" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (121,212,120 samples, 0.63%)</title><rect x="1136.4" y="1141" width="7.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1139.39" y="1151.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.21%)</title><rect x="113.5" y="1109" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="116.48" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="997" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="949" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="959.5" ></text>
</g>
<g >
<title>vsnprintf (252,525,250 samples, 1.32%)</title><rect x="65.5" y="1093" width="15.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="68.48" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="1102.7" y="1013" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.73" y="1023.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1093" width="0.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="59.13" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="869" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="933" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="943.5" ></text>
</g>
<g >
<title>sim::Link::arrive (464,646,460 samples, 2.43%)</title><rect x="196.4" y="1141" width="28.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="199.38" y="1151.5" >si..</text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="329.2" y="1093" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="332.15" y="1103.5" ></text>
</g>
<g >
<title>fopen (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1109" width="3.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="110.87" y="1119.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (171,717,170 samples, 0.90%)</title><rect x="106.6" y="1157" width="10.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="109.62" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="183.3" y="1141" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="186.29" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="229" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="239.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="352.2" y="1109" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="355.22" y="1119.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="206.4" y="1093" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="209.35" y="1103.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (171,717,170 samples, 0.90%)</title><rect x="106.6" y="1173" width="10.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="109.62" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.8" y="933" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.77" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="109.7" y="773" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.74" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="79.8" y="1013" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.82" y="1023.5" ></text>
</g>
<g >
<title>sim::Event::Event (212,121,210 samples, 1.11%)</title><rect x="1070.9" y="1125" width="13.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1073.94" y="1135.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (30,303,030 samples, 0.16%)</title><rect x="342.9" y="1109" width="1.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="345.87" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="11.2" y="1189" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="1199.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,252,525,220 samples, 17.01%)</title><rect x="648.9" y="1125" width="200.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="651.93" y="1135.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="917" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="927.5" ></text>
</g>
<g >
<title>sim::Event::get_time (121,212,120 samples, 0.63%)</title><rect x="127.2" y="1173" width="7.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="130.19" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1253" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="885" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="933" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="405" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="415.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="82.3" y="1125" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="85.31" y="1135.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1186.3" y="933" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.26" y="943.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="116.0" y="1109" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="118.97" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1171.9" y="997" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.92" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (313,131,310 samples, 1.64%)</title><rect x="782.3" y="1109" width="19.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="785.33" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1061" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="1071.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,808,080,670 samples, 72.21%)</title><rect x="231.9" y="1157" width="852.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="234.91" y="1167.5" >sim::Process::operator</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="26.8" y="1157" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="29.83" y="1167.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.11%)</title><rect x="348.5" y="1029" width="1.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="351.48" y="1039.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.21%)</title><rect x="98.5" y="1109" width="2.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="101.52" y="1119.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.05%)</title><rect x="224.4" y="1125" width="0.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="227.43" y="1135.5" ></text>
</g>
<g >
<title>malloc (171,717,170 samples, 0.90%)</title><rect x="1060.3" y="1109" width="10.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1063.34" y="1119.5" ></text>
</g>
<g >
<title>sim::Link::transmit (90,909,090 samples, 0.48%)</title><rect x="225.7" y="1141" width="5.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="228.68" y="1151.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1186.3" y="949" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.26" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1141" width="0.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="107.75" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="60.5" y="805" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="63.49" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="373" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.4" y="901" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.37" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.22" y="1055.5" ></text>
</g>
<g >
<title>YAML::Scanner::ExistsActiveSimpleKey (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="949" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1187.39" y="959.5" ></text>
</g>
<g >
<title>std::ostream::put (50,505,050 samples, 0.26%)</title><rect x="101.6" y="1141" width="3.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="104.63" y="1151.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (161,616,160 samples, 0.85%)</title><rect x="1110.8" y="1125" width="10.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1113.83" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="885" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="895.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.16%)</title><rect x="1186.9" y="965" width="1.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.88" y="975.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (111,111,110 samples, 0.58%)</title><rect x="1101.5" y="1093" width="6.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1104.48" y="1103.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="347.2" y="1061" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="350.23" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1157" width="0.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="107.75" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1173.2" y="1077" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.17" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="113.5" y="1045" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="116.48" y="1055.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (292,929,290 samples, 1.53%)</title><rect x="83.6" y="1125" width="18.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="86.56" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="965" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="997" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="1007.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="173.9" y="1157" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="176.94" y="1167.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (101,010,100 samples, 0.53%)</title><rect x="850.9" y="1093" width="6.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="853.90" y="1103.5" ></text>
</g>
<g >
<title>sim::Link::~Link (70,707,070 samples, 0.37%)</title><rect x="20.0" y="1125" width="4.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="22.97" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.21%)</title><rect x="1165.1" y="1141" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1168.07" y="1151.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1173.2" y="1109" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.17" y="1119.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (17,232,323,060 samples, 90.12%)</title><rect x="119.7" y="1189" width="1063.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="122.71" y="1199.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1100.9" y="1093" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1103.86" y="1103.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="821.6" y="1109" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="824.60" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="340.4" y="965" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="343.38" y="975.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="1109" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1159.34" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1156.3" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.34" y="1103.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.11%)</title><rect x="1150.7" y="1141" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1153.73" y="1151.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="347.9" y="1077" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="350.86" y="1087.5" ></text>
</g>
<g >
<title>sim::Process::~Process (60,606,060 samples, 0.32%)</title><rect x="1084.0" y="1157" width="3.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1087.03" y="1167.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.26%)</title><rect x="424.5" y="1125" width="3.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="427.53" y="1135.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.16%)</title><rect x="1183.1" y="1013" width="1.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.14" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.11%)</title><rect x="50.5" y="1141" width="1.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="53.52" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="113.5" y="1077" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="116.48" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.37%)</title><rect x="15.6" y="1093" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.61" y="1103.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1061" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="864.49" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="975.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (90,909,090 samples, 0.48%)</title><rect x="863.4" y="1093" width="5.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="866.37" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="869" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="879.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1099.6" y="1029" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1102.61" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.2" y="1141" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.21" y="1151.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="845.9" y="1077" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="848.91" y="1087.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="1092.8" y="1077" width="1.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1095.76" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="757" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="48.0" y="1109" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.02" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1077" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1087.5" ></text>
</g>
<g >
<title>cfree (343,434,340 samples, 1.80%)</title><rect x="606.5" y="1125" width="21.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="609.55" y="1135.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="48.0" y="1141" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="51.02" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="821" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="831.5" ></text>
</g>
<g >
<title>writev (40,404,040 samples, 0.21%)</title><rect x="98.5" y="1093" width="2.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="101.52" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="997" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1007.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.05%)</title><rect x="326.0" y="1109" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="329.04" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1007.5" ></text>
</g>
<g >
<title>fopen (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1109" width="4.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="59.75" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="112.9" y="1013" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.85" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="357" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="1077" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.14" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="949" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="959.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.16%)</title><rect x="1186.9" y="949" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.88" y="959.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1125" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.04" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="331.6" y="1013" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="334.65" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="133" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="143.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.16%)</title><rect x="1186.9" y="933" width="1.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.88" y="943.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="111.0" y="1141" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="113.98" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="1013" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="107.2" y="869" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.24" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1029" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="1039.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (30,303,030 samples, 0.16%)</title><rect x="380.3" y="1141" width="1.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="383.27" y="1151.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.16%)</title><rect x="1092.1" y="1093" width="1.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1095.13" y="1103.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::get_devices (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1157" width="0.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1146.87" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="613" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="623.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.16%)</title><rect x="1183.1" y="981" width="1.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.14" y="991.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (60,606,060 samples, 0.32%)</title><rect x="853.4" y="1077" width="3.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="856.39" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1109" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.87" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.5" y="917" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.55" y="927.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="334.8" y="1125" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="337.76" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="197" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.16%)</title><rect x="1160.1" y="1141" width="1.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1163.08" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="917" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="23.1" y="1061" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.09" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="981" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="991.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (30,303,030 samples, 0.16%)</title><rect x="322.9" y="1141" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="325.92" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="309" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="11.2" y="1141" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.25" y="1151.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.16%)</title><rect x="111.6" y="1093" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="114.61" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="917" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="629" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1151.4" y="1109" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.35" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="725" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="334.1" y="1109" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="337.14" y="1119.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="341.6" y="1093" width="1.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="344.62" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.8" y="1125" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.83" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="865.2" y="1029" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.24" y="1039.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="1173" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.38" y="1183.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::get_records (10,101,010 samples, 0.05%)</title><rect x="49.9" y="1141" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="52.89" y="1151.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.11%)</title><rect x="106.6" y="1141" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="109.62" y="1151.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.16%)</title><rect x="122.8" y="1173" width="1.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="125.83" y="1183.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.11%)</title><rect x="848.4" y="1109" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="851.40" y="1119.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="329.8" y="1109" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="332.78" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="933" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="943.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.16%)</title><rect x="845.9" y="1093" width="1.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="848.91" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="933" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="943.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="329.8" y="1093" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="332.78" y="1103.5" ></text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 0.16%)</title><rect x="1133.3" y="1141" width="1.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1136.28" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1125" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1061" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.8" y="1093" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.83" y="1103.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.05%)</title><rect x="204.5" y="1125" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="207.48" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="219.4" y="997" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="222.45" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="1077" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1087.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.37%)</title><rect x="279.9" y="1141" width="4.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="282.91" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="845.9" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="848.91" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="106.6" y="901" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="109.62" y="911.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1007.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="349.7" y="1077" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="352.73" y="1087.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="862.1" y="1109" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="865.12" y="1119.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="61.1" y="1141" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="64.11" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="199.5" y="1093" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="202.50" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="352.8" y="1125" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="355.84" y="1135.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1109" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.04" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="1045" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.76" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="58.0" y="853" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="61.00" y="863.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="112.2" y="1029" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.23" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="149" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1137.0" y="1093" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.02" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.11%)</title><rect x="350.3" y="1077" width="1.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="353.35" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1061" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.69%)</title><rect x="213.8" y="1045" width="8.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="216.84" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="1061" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1071.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.32%)</title><rect x="1140.1" y="1109" width="3.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.13" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="1013" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1023.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (373,737,370 samples, 1.95%)</title><rect x="299.9" y="1141" width="23.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="302.86" y="1151.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="60.5" y="789" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="63.49" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.05%)</title><rect x="1176.3" y="1157" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.29" y="1167.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.05%)</title><rect x="1098.4" y="1077" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1101.37" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1171.9" y="981" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.92" y="991.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (50,505,050 samples, 0.26%)</title><rect x="326.0" y="1125" width="3.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="329.04" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1045" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1055.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,898,989,740 samples, 83.15%)</title><rect x="148.4" y="1173" width="981.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="151.38" y="1183.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="965" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="975.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1138.9" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.89" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="981" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="991.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (212,121,210 samples, 1.11%)</title><rect x="554.2" y="1109" width="13.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="557.18" y="1119.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="48.0" y="1125" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="51.02" y="1135.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1077" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="59.13" y="1087.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.58%)</title><rect x="336.0" y="1109" width="6.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="339.01" y="1119.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (111,111,110 samples, 0.58%)</title><rect x="134.7" y="1173" width="6.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="137.67" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1045" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="1055.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.16%)</title><rect x="208.2" y="1077" width="1.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="211.23" y="1087.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.26%)</title><rect x="331.0" y="1061" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="334.02" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="805" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="815.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="329.2" y="1077" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="332.15" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1013" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="453" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1171.9" y="1013" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.92" y="1023.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.32%)</title><rect x="207.6" y="1109" width="3.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="210.60" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="331.6" y="1029" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="334.65" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="997" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="1013" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="1023.5" ></text>
</g>
<g >
<title>_IO_file_fopen (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1093" width="4.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="59.75" y="1103.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.48%)</title><rect x="329.2" y="1125" width="5.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="332.15" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="53" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="63.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.37%)</title><rect x="863.4" y="1077" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="866.37" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1150.7" y="1125" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.73" y="1135.5" ></text>
</g>
<g >
<title>all (19,121,211,930 samples, 100%)</title><rect x="10.0" y="1285" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1295.5" ></text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.21%)</title><rect x="124.7" y="1173" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="127.70" y="1183.5" ></text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.05%)</title><rect x="197.6" y="1109" width="0.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="200.63" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1013" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 1.85%)</title><rect x="174.6" y="1157" width="21.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="177.56" y="1167.5" >c..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (70,707,070 samples, 0.37%)</title><rect x="1139.5" y="1125" width="4.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1142.51" y="1135.5" ></text>
</g>
<g >
<title>nons (19,121,211,930 samples, 100.00%)</title><rect x="10.0" y="1269" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="1279.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="997" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="709" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="719.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.05%)</title><rect x="231.3" y="1141" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="234.29" y="1151.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.05%)</title><rect x="337.3" y="1061" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="340.26" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1109.6" y="1077" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.59" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="109.1" y="837" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.11" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="109.7" y="805" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.74" y="815.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1109" width="0.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="59.13" y="1119.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="345.4" y="1093" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="348.36" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1029" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.13" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="1125" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="917" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="112.2" y="1061" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.23" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1138.3" y="1045" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.26" y="1055.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="63.0" y="1125" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="65.98" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="203.2" y="981" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="206.24" y="991.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="1097.1" y="1077" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1100.12" y="1087.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="207.0" y="1093" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="209.98" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1109" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="109.7" y="789" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.74" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1129.5" y="1157" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.54" y="1167.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.05%)</title><rect x="11.2" y="1109" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.25" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="933" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="943.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.16%)</title><rect x="211.3" y="1109" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="214.34" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1092.1" y="1077" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1095.13" y="1087.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="26.2" y="1125" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.21" y="1135.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (252,525,250 samples, 1.32%)</title><rect x="1095.3" y="1125" width="15.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1098.25" y="1135.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.11%)</title><rect x="1133.9" y="1125" width="1.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1136.90" y="1135.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1132.7" y="1141" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1135.65" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="113.5" y="1061" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="116.48" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="437" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="581" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="591.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="325.4" y="1109" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="328.41" y="1119.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1110.2" y="1109" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1113.21" y="1119.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.05%)</title><rect x="56.1" y="1141" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="59.13" y="1151.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="819.7" y="1109" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="822.73" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="741" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1141" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.26%)</title><rect x="337.9" y="997" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.88" y="1007.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.26%)</title><rect x="1097.7" y="1109" width="3.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1100.74" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1171.3" y="1029" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.30" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="37" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="47.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.16%)</title><rect x="208.2" y="1093" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="211.23" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,101,009,910 samples, 99.89%)</title><rect x="11.2" y="1221" width="1178.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="1231.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="203.2" y="1013" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="206.24" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.22" y="1071.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1077" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="864.49" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1182.5" y="1173" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.52" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="517" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1107.1" y="997" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1110.09" y="1007.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.32%)</title><rect x="864.0" y="1061" width="3.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="866.99" y="1071.5" ></text>
</g>
<g >
<title>_IO_file_open (50,505,050 samples, 0.26%)</title><rect x="107.9" y="1077" width="3.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="110.87" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="949" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="104.7" y="1093" width="0.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="107.75" y="1103.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="228.8" y="1093" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="231.80" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="901" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="911.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (313,131,310 samples, 1.64%)</title><rect x="61.7" y="1141" width="19.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="64.74" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.58%)</title><rect x="215.1" y="1029" width="6.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="218.08" y="1039.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="872.1" y="1093" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="875.09" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="975.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="205.1" y="1109" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="208.11" y="1119.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.26%)</title><rect x="331.0" y="1045" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="334.02" y="1055.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.26%)</title><rect x="337.9" y="1013" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.88" y="1023.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1120.2" y="1093" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1123.18" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="181" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="981" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1146.25" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1061" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1071.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="933" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1157" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1167.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="213.2" y="1093" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="216.21" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="202.6" y="997" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="205.61" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="110.4" y="725" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="113.36" y="735.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (131,313,130 samples, 0.69%)</title><rect x="344.7" y="1125" width="8.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="347.74" y="1135.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="856.5" y="1061" width="0.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="859.51" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="917" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="927.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="54.9" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.88" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="1039.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1173.2" y="1093" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.17" y="1103.5" ></text>
</g>
<g >
<title>sim::Event::Event (181,818,180 samples, 0.95%)</title><rect x="288.6" y="1141" width="11.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="291.64" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.37%)</title><rect x="56.8" y="1045" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.75" y="1055.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (80,808,080 samples, 0.42%)</title><rect x="226.3" y="1125" width="5.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="229.30" y="1135.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (131,313,130 samples, 0.69%)</title><rect x="849.7" y="1125" width="8.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="852.65" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="1173" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="1183.5" ></text>
</g>
<g >
<title>operator new (222,222,220 samples, 1.16%)</title><rect x="1057.2" y="1125" width="13.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1060.23" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1221" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1231.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.32%)</title><rect x="657.7" y="1109" width="3.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="660.66" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="69" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="79.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.32%)</title><rect x="1140.1" y="1093" width="3.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.13" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="1093" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.87" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="856.5" y="101" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="859.51" y="111.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1154.5" y="1141" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1157.47" y="1151.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (20,202,020 samples, 0.11%)</title><rect x="1174.4" y="1141" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.42" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1045" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (121,212,120 samples, 0.63%)</title><rect x="1100.9" y="1109" width="7.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1103.86" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="853" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1205" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1215.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.26%)</title><rect x="331.0" y="1093" width="3.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="334.02" y="1103.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="861.5" y="1029" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="864.49" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1138.9" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1141.89" y="991.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.16%)</title><rect x="1183.1" y="997" width="1.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.14" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="997" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.04" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="1125" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="348.5" y="997" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="351.48" y="1007.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="119.1" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="122.09" y="991.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.26%)</title><rect x="337.9" y="1045" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="340.88" y="1055.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (30,303,030 samples, 0.16%)</title><rect x="111.6" y="1141" width="1.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="114.61" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="108.5" y="885" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.49" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="865.9" y="1013" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.86" y="1023.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="1029" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="1039.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (60,606,060 samples, 0.32%)</title><rect x="844.7" y="1109" width="3.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="847.66" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="109.1" y="869" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.11" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1124.5" y="1045" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.55" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="1061" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (50,505,050 samples, 0.26%)</title><rect x="1161.9" y="1141" width="3.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1164.95" y="1151.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (191,919,190 samples, 1.00%)</title><rect x="359.7" y="1141" width="11.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="362.70" y="1151.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1108.3" y="1093" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1111.34" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="28.1" y="1029" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.08" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="328.5" y="949" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="331.53" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="99.1" y="981" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.14" y="991.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,202,020 samples, 0.11%)</title><rect x="1173.2" y="1125" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1176.17" y="1135.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.42%)</title><rect x="143.4" y="1173" width="5.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="146.40" y="1183.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.37%)</title><rect x="346.0" y="1093" width="4.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="348.99" y="1103.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,232,323,220 samples, 6.44%)</title><rect x="28.7" y="1157" width="76.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="31.70" y="1167.5" >sim::wri..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="109.1" y="853" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="112.11" y="863.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.21%)</title><rect x="326.7" y="1109" width="2.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="329.66" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="99.8" y="901" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="102.76" y="911.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.26%)</title><rect x="227.5" y="1109" width="3.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="230.55" y="1119.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.26%)</title><rect x="337.9" y="1029" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="340.88" y="1039.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.22%)</title><rect x="84.2" y="1077" width="14.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="87.18" y="1087.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="1157" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="981" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.45" y="991.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="965" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="856.5" y="213" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="859.51" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.26%)</title><rect x="107.9" y="965" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.87" y="975.5" ></text>
</g>
</g>
</svg>
