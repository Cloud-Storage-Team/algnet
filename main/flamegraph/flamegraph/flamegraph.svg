<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="565" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 3.74%)</title><rect x="285.7" y="437" width="44.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="288.70" y="447.5" >[lib..</text>
</g>
<g >
<title>malloc (70,707,070 samples, 6.54%)</title><rect x="329.8" y="437" width="77.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="332.81" y="447.5" >malloc</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="341" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="351.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="469" width="11.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1181.97" y="479.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="293" width="22.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1126.83" y="303.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="101" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="111.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="405" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="415.5" >YAML:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="245" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="255.5" ></text>
</g>
<g >
<title>main (959,595,950 samples, 88.79%)</title><rect x="142.3" y="549" width="1047.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="145.34" y="559.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="341" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (191,919,190 samples, 17.76%)</title><rect x="208.5" y="501" width="209.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="211.50" y="511.5" >sim::RoutingModule::update_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="165" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="175.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 2.80%)</title><rect x="693.7" y="453" width="33.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="696.74" y="463.5" >ma..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="597" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.93%)</title><rect x="1046.6" y="485" width="11.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1049.64" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (60,606,060 samples, 5.61%)</title><rect x="671.7" y="485" width="66.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="674.68" y="495.5" >sim::Ro..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="309" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="197" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="85" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (111,111,110 samples, 10.28%)</title><rect x="21.0" y="501" width="121.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="24.03" y="511.5" >std::_Rb_tree&lt;s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.93%)</title><rect x="793.0" y="485" width="11.0" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="795.99" y="495.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.93%)</title><rect x="1167.9" y="517" width="11.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1170.94" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.93%)</title><rect x="21.0" y="485" width="11.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="24.03" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="437" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="357" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="318.8" y="213" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="321.79" y="223.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="293" width="22.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.89" y="303.5" >Y..</text>
</g>
<g >
<title>YAML::Load (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="501" width="55.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1115.80" y="511.5" >YAML:..</text>
</g>
<g >
<title>all (1,080,808,070 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 3.74%)</title><rect x="605.5" y="405" width="44.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="608.51" y="415.5" >[[ke..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="245" width="22.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1148.89" y="255.5" >i..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.93%)</title><rect x="1167.9" y="501" width="11.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1170.94" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.93%)</title><rect x="241.6" y="485" width="11.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="244.59" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="453" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.93%)</title><rect x="958.4" y="453" width="11.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="961.41" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="131.3" y="437" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="134.31" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="318.8" y="229" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="321.79" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="213" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="186.4" y="485" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="189.45" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.93%)</title><rect x="197.5" y="501" width="11.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="200.48" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="341" width="22.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1148.89" y="351.5" >Y..</text>
</g>
<g >
<title>__libc_start_main (1,070,707,060 samples, 99.07%)</title><rect x="21.0" y="581" width="1169.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="24.03" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (151,515,150 samples, 14.02%)</title><rect x="848.1" y="485" width="165.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="851.13" y="495.5" >std::__detail::_Map_b..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="341" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="351.5" >[..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.93%)</title><rect x="186.4" y="501" width="11.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="189.45" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="549" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="405" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.93%)</title><rect x="1112.8" y="325" width="11.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1115.80" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="389" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="229" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.93%)</title><rect x="1112.8" y="357" width="11.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1115.80" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="341" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="351.5" >[..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 3.74%)</title><rect x="1123.8" y="357" width="44.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1126.83" y="367.5" >YAML..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.93%)</title><rect x="1167.9" y="485" width="11.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1170.94" y="495.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.93%)</title><rect x="407.0" y="485" width="11.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="410.01" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.93%)</title><rect x="1167.9" y="469" width="11.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1170.94" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="770.9" y="453" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="773.93" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="638.6" y="245" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="641.60" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="325" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="335.5" >[..</text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (30,303,030 samples, 2.80%)</title><rect x="1013.6" y="485" width="33.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1016.55" y="495.5" >st..</text>
</g>
<g >
<title>sim::Host::~Host (101,010,100 samples, 9.35%)</title><rect x="32.1" y="469" width="110.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="35.06" y="479.5" >sim::Host::~H..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 13.08%)</title><rect x="252.6" y="485" width="154.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="255.62" y="495.5" >std::__detail::_Map..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="325" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="277" width="22.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1126.83" y="287.5" >m..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="69" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="296.7" y="421" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="299.73" y="431.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="373" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="517" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="437" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="447.5" >YAML:..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.93%)</title><rect x="1101.8" y="501" width="11.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1104.78" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="309" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="309" width="22.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1148.89" y="319.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="389" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="399.5" ></text>
</g>
<g >
<title>sim::Simulator::start (888,888,880 samples, 82.24%)</title><rect x="142.3" y="533" width="970.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="145.34" y="543.5" >sim::Simulator::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="261" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="271.5" >[..</text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 6.54%)</title><rect x="572.4" y="453" width="77.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="575.43" y="463.5" >[libc.so..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.93%)</title><rect x="770.9" y="469" width="11.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="773.93" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.93%)</title><rect x="561.4" y="485" width="11.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="564.40" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="293" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="293" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.93%)</title><rect x="1101.8" y="485" width="11.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1104.78" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.93%)</title><rect x="837.1" y="485" width="11.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="840.10" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="293" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.87%)</title><rect x="947.4" y="469" width="22.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="950.38" y="479.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="309" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="421" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="616.5" y="389" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="619.54" y="399.5" >[[..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 2.80%)</title><rect x="748.9" y="485" width="33.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="751.88" y="495.5" >st..</text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 2.80%)</title><rect x="208.5" y="485" width="33.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="211.50" y="495.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="229" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="239.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="309" width="22.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1126.83" y="319.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 2.80%)</title><rect x="693.7" y="437" width="33.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="696.74" y="447.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.87%)</title><rect x="164.4" y="501" width="22.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.39" y="511.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="616.5" y="373" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="619.54" y="383.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="421" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="296.7" y="389" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="299.73" y="399.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="357" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="367.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1035.6" y="421" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1038.61" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="373" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="533" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="325" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 2.80%)</title><rect x="804.0" y="485" width="33.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="807.02" y="495.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="389" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.93%)</title><rect x="660.7" y="485" width="11.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="663.65" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.93%)</title><rect x="230.6" y="469" width="11.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="233.56" y="479.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="325" width="22.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1126.83" y="335.5" >Y..</text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="485" width="55.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1115.80" y="495.5" >YAML:..</text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="453" width="11.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1181.97" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="437" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="961.41" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="261" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="325" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="335.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="213" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="1035.6" y="437" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1038.61" y="447.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.87%)</title><rect x="1024.6" y="469" width="22.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1027.58" y="479.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="325" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="357" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="367.5" ></text>
</g>
<g >
<title>nons (1,080,808,070 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="389" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="399.5" >YAML:..</text>
</g>
<g >
<title>YAML::LoadFile (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="517" width="55.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1115.80" y="527.5" >YAML:..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="517" width="11.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1181.97" y="527.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="373" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="383.5" >YAML:..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (101,010,100 samples, 9.35%)</title><rect x="32.1" y="485" width="110.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="35.06" y="495.5" >std::_Sp_coun..</text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.93%)</title><rect x="737.9" y="485" width="11.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="740.85" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="373" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1035.6" y="389" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1038.61" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="373" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="501" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 6.54%)</title><rect x="572.4" y="485" width="77.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="575.43" y="495.5" >operator..</text>
</g>
<g >
<title>sim::Link::Link (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="437" width="11.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1181.97" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="341" width="22.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1126.83" y="351.5" >Y..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.93%)</title><rect x="1090.7" y="501" width="11.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1093.75" y="511.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (111,111,110 samples, 10.28%)</title><rect x="21.0" y="517" width="121.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="24.03" y="527.5" >sim::Identifier..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.87%)</title><rect x="991.5" y="405" width="22.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="994.50" y="415.5" >[..</text>
</g>
<g >
<title>malloc (40,404,040 samples, 3.74%)</title><rect x="285.7" y="453" width="44.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="288.70" y="463.5" >malloc</text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 10.28%)</title><rect x="21.0" y="533" width="121.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="543.5" >[libc.so.6]</text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 2.80%)</title><rect x="1057.7" y="501" width="33.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1060.66" y="511.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="485" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="318.8" y="261" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="321.79" y="271.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.93%)</title><rect x="649.6" y="485" width="11.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="652.63" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 3.74%)</title><rect x="362.9" y="405" width="44.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.90" y="415.5" >[lib..</text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 1.87%)</title><rect x="208.5" y="469" width="22.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="211.50" y="479.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 3.74%)</title><rect x="605.5" y="437" width="44.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="608.51" y="447.5" >[[ke..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="277" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="325" width="22.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1148.89" y="335.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="277" width="22.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1148.89" y="287.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="341" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.87%)</title><rect x="1123.8" y="261" width="22.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.83" y="271.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="133" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="277" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="287.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.93%)</title><rect x="550.4" y="485" width="11.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="553.37" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 3.74%)</title><rect x="969.4" y="469" width="44.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="972.44" y="479.5" >std:..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="453" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="463.5" >YAML:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="341" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="351.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 2.80%)</title><rect x="980.5" y="453" width="33.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="983.47" y="463.5" >op..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="581" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 1.87%)</title><rect x="120.3" y="453" width="22.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="123.28" y="463.5" >c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="277" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="287.5" >[..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.93%)</title><rect x="782.0" y="485" width="11.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="784.96" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 3.74%)</title><rect x="605.5" y="421" width="44.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="608.51" y="431.5" >[[ke..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="405" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.93%)</title><rect x="21.0" y="469" width="11.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="24.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="149" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="159.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (70,707,070 samples, 6.54%)</title><rect x="1112.8" y="533" width="77.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1115.80" y="543.5" >sim::Yam..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="421" width="55.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1115.80" y="431.5" >YAML:..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.87%)</title><rect x="1024.6" y="453" width="22.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1027.58" y="463.5" >m..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="421" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="550.4" y="453" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="553.37" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="357" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="453" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="638.6" y="229" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="641.60" y="239.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.93%)</title><rect x="21.0" y="453" width="11.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="24.03" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="437" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 6.54%)</title><rect x="329.8" y="421" width="77.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="332.81" y="431.5" >[libc.so..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="485" width="11.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1181.97" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="309" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="319.5" >[..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="550.4" y="469" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="553.37" y="479.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 2.80%)</title><rect x="693.7" y="469" width="33.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="696.74" y="479.5" >op..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="389" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="181" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="715.8" y="421" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="718.79" y="431.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (888,888,880 samples, 82.24%)</title><rect x="142.3" y="517" width="970.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="145.34" y="527.5" >sim::Simulator::recalculate_paths</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="616.5" y="357" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="619.54" y="367.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="37" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="261" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="271.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 6.54%)</title><rect x="329.8" y="453" width="77.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="332.81" y="463.5" >operator..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="309" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="319.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="318.8" y="245" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="321.79" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="293" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="303.5" >[..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (70,707,070 samples, 6.54%)</title><rect x="329.8" y="469" width="77.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="332.81" y="479.5" >std::_Ha..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="357" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.93%)</title><rect x="1112.8" y="341" width="11.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1115.80" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.93%)</title><rect x="1046.6" y="501" width="11.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1049.64" y="511.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 6.54%)</title><rect x="572.4" y="469" width="77.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="575.43" y="479.5" >malloc</text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 10.28%)</title><rect x="21.0" y="549" width="121.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="559.5" >[libc.so.6]</text>
</g>
<g >
<title>malloc (30,303,030 samples, 2.80%)</title><rect x="980.5" y="437" width="33.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="983.47" y="447.5" >ma..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="469" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="939.36" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="936.4" y="309" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="939.36" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (50,505,050 samples, 4.67%)</title><rect x="1112.8" y="469" width="55.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1115.80" y="479.5" >YAML:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="245" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="197" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="207.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (575,757,570 samples, 53.27%)</title><rect x="418.0" y="501" width="628.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="421.04" y="511.5" >sim::bfs[abi:cxx11]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="351.9" y="405" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.87" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="627.6" y="277" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="630.57" y="287.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="373" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="383.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1035.6" y="405" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1038.61" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.87%)</title><rect x="1145.9" y="261" width="22.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1148.89" y="271.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="117" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="127.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.93%)</title><rect x="1179.0" y="501" width="11.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1181.97" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,070,707,060 samples, 99.07%)</title><rect x="21.0" y="565" width="1169.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.03" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.87%)</title><rect x="307.8" y="293" width="22.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="310.76" y="303.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 2.80%)</title><rect x="296.7" y="405" width="33.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="299.73" y="415.5" >[[..</text>
</g>
<g >
<title>_start (1,070,707,060 samples, 99.07%)</title><rect x="21.0" y="597" width="1169.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="24.03" y="607.5" >_start</text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.93%)</title><rect x="726.8" y="469" width="11.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="729.82" y="479.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 3.74%)</title><rect x="285.7" y="469" width="44.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="288.70" y="479.5" >oper..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="469" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 2.80%)</title><rect x="980.5" y="421" width="33.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="983.47" y="431.5" >[l..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="10.0" y="325" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.93%)</title><rect x="1167.9" y="453" width="11.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1170.94" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="1134.9" y="53" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.86" y="63.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.93%)</title><rect x="274.7" y="469" width="11.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="277.67" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.93%)</title><rect x="958.4" y="405" width="11.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="961.41" y="415.5" ></text>
</g>
</g>
</svg>
