<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>sim::Link::~Link (10,101,010 samples, 0.50%)</title><rect x="21.7" y="437" width="5.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="24.74" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.50%)</title><rect x="661.6" y="293" width="5.9" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="664.64" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.50%)</title><rect x="908.2" y="213" width="5.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="911.21" y="223.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.00%)</title><rect x="849.5" y="245" width="11.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="852.50" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 1.99%)</title><rect x="550.1" y="437" width="23.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="553.10" y="447.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="984.5" y="181" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="987.53" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="902.3" y="165" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="905.34" y="175.5" ></text>
</g>
<g >
<title>YAML::Load (676,767,670 samples, 33.33%)</title><rect x="661.6" y="469" width="393.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="664.64" y="479.5" >YAML::Load</text>
</g>
<g >
<title>operator new (50,505,050 samples, 2.49%)</title><rect x="743.8" y="261" width="29.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="746.83" y="271.5" >op..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="761.4" y="165" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="764.44" y="175.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (111,111,110 samples, 5.47%)</title><rect x="1055.0" y="469" width="64.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1057.98" y="479.5" >std::_S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.49%)</title><rect x="1002.1" y="165" width="29.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1005.14" y="175.5" >in..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="714.5" y="245" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="717.48" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.50%)</title><rect x="1125.4" y="389" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1128.42" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.49%)</title><rect x="890.6" y="229" width="17.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="893.60" y="239.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.50%)</title><rect x="955.2" y="181" width="5.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="958.17" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="261" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="271.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.50%)</title><rect x="321.1" y="421" width="5.9" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="324.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1125.4" y="421" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1128.42" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="867.1" y="165" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="870.11" y="175.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="696.9" y="213" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="699.87" y="223.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 1.00%)</title><rect x="614.7" y="421" width="11.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="617.68" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.50%)</title><rect x="626.4" y="469" width="5.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="629.42" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (343,434,340 samples, 16.92%)</title><rect x="849.5" y="293" width="199.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="852.50" y="303.5" >YAML::SingleDocParser::Han..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="373" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (646,464,640 samples, 31.84%)</title><rect x="673.4" y="341" width="375.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="676.38" y="351.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="181" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="191.5" ></text>
</g>
<g >
<title>void std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::_M_push_back_aux&lt;YAML::Token const&amp;&gt; (10,101,010 samples, 0.50%)</title><rect x="726.2" y="293" width="5.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="729.22" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="33.5" y="437" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.48" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.00%)</title><rect x="849.5" y="261" width="11.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="852.50" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="69" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="79.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (80,808,080 samples, 3.98%)</title><rect x="990.4" y="197" width="47.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="993.40" y="207.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="405" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="469" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="565" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 1.49%)</title><rect x="908.2" y="245" width="17.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="911.21" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="309" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="319.5" ></text>
</g>
<g >
<title>YAML::LoadFile (676,767,670 samples, 33.33%)</title><rect x="661.6" y="485" width="393.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="664.64" y="495.5" >YAML::LoadFile</text>
</g>
<g >
<title>malloc (50,505,050 samples, 2.49%)</title><rect x="743.8" y="245" width="29.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="746.83" y="255.5" >ma..</text>
</g>
<g >
<title>sim::FlowParser::parse_tcp_flow (30,303,030 samples, 1.49%)</title><rect x="1148.9" y="389" width="17.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1151.91" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.49%)</title><rect x="755.6" y="213" width="17.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="758.57" y="223.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 1.99%)</title><rect x="685.1" y="277" width="23.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="688.12" y="287.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="702.7" y="197" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.74" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (40,404,040 samples, 1.99%)</title><rect x="925.8" y="213" width="23.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="928.82" y="223.5" >Y..</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.50%)</title><rect x="485.5" y="405" width="5.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="488.52" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (60,606,060 samples, 2.99%)</title><rect x="685.1" y="293" width="35.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="688.12" y="303.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="767.3" y="69" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="770.31" y="79.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (30,303,030 samples, 1.49%)</title><rect x="420.9" y="469" width="17.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="423.95" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.48%)</title><rect x="802.5" y="277" width="41.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="805.54" y="287.5" >YAM..</text>
</g>
<g >
<title>sim::AddDataToConnection::operator (10,101,010 samples, 0.50%)</title><rect x="415.1" y="469" width="5.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="418.07" y="479.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.50%)</title><rect x="591.2" y="357" width="5.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="594.19" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.49%)</title><rect x="826.0" y="181" width="17.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="829.02" y="191.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.50%)</title><rect x="1166.5" y="389" width="5.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1169.52" y="399.5" ></text>
</g>
<g >
<title>sim::Link::arrive (30,303,030 samples, 1.49%)</title><rect x="420.9" y="453" width="17.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="423.95" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.49%)</title><rect x="861.2" y="261" width="17.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="864.24" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="101" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1040.36" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="133" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="143.5" ></text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.50%)</title><rect x="432.7" y="405" width="5.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="435.69" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="890.6" y="181" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="893.60" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="421" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.00%)</title><rect x="1107.8" y="309" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1110.81" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="325" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.98%)</title><rect x="673.4" y="325" width="58.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="676.38" y="335.5" >YAML::..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (111,111,110 samples, 5.47%)</title><rect x="1055.0" y="421" width="64.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1057.98" y="431.5" >std::_R..</text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 2.49%)</title><rect x="626.4" y="485" width="29.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="629.42" y="495.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="632.3" y="405" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="635.29" y="415.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.50%)</title><rect x="150.9" y="437" width="5.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="153.90" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::get_id[abi:cxx11] (10,101,010 samples, 0.50%)</title><rect x="614.7" y="389" width="5.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="617.68" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="261" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.50%)</title><rect x="491.4" y="437" width="5.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="494.39" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="884.7" y="213" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="887.73" y="223.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="861.2" y="197" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="864.24" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (70,707,070 samples, 3.48%)</title><rect x="1078.5" y="389" width="41.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1081.46" y="399.5" >std..</text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.50%)</title><rect x="585.3" y="373" width="5.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="588.32" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="453" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="389" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="399.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.50%)</title><rect x="344.6" y="421" width="5.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="347.63" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="767.3" y="101" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="770.31" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="69" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="767.3" y="117" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="770.31" y="127.5" ></text>
</g>
<g >
<title>sim::Host::process (50,505,050 samples, 2.49%)</title><rect x="485.5" y="453" width="29.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="488.52" y="463.5" >si..</text>
</g>
<g >
<title>sim::ConnectionImpl::send_data (10,101,010 samples, 0.50%)</title><rect x="503.1" y="421" width="5.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="506.13" y="431.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.49%)</title><rect x="579.5" y="437" width="17.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="582.45" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1143.0" y="373" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.03" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="357" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="117" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1040.36" y="127.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.50%)</title><rect x="585.3" y="389" width="5.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="588.32" y="399.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_scalar (10,101,010 samples, 0.50%)</title><rect x="779.1" y="293" width="5.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="782.05" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.00%)</title><rect x="673.4" y="293" width="11.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="676.38" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 2.49%)</title><rect x="878.9" y="245" width="29.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="881.86" y="255.5" >YA..</text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.50%)</title><rect x="150.9" y="389" width="5.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="153.90" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.00%)</title><rect x="362.2" y="357" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.24" y="367.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.50%)</title><rect x="503.1" y="373" width="5.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="506.13" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (80,808,080 samples, 3.98%)</title><rect x="925.8" y="245" width="47.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="928.82" y="255.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="501" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::Process::operator (20,202,020 samples, 1.00%)</title><rect x="385.7" y="485" width="11.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="388.72" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="133" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1040.36" y="143.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (292,929,290 samples, 14.43%)</title><rect x="168.5" y="453" width="170.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="171.51" y="463.5" >std::ostream&amp; std::ost..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.00%)</title><rect x="849.5" y="197" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="852.50" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="896.5" y="197" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="899.47" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.49%)</title><rect x="755.6" y="181" width="17.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="758.57" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="437" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.50%)</title><rect x="514.9" y="437" width="5.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="517.88" y="447.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.50%)</title><rect x="327.0" y="421" width="5.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="330.01" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.50%)</title><rect x="21.7" y="453" width="5.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="24.74" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 1.99%)</title><rect x="949.3" y="213" width="23.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="952.30" y="223.5" >Y..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.50%)</title><rect x="162.6" y="437" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="165.64" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.50%)</title><rect x="509.0" y="389" width="5.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="512.00" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.50%)</title><rect x="972.8" y="229" width="5.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="975.79" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="156.8" y="421" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="159.77" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="421" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="37" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="591.2" y="309" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="594.19" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 1.00%)</title><rect x="661.6" y="325" width="11.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="664.64" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1125.4" y="357" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1128.42" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (545,454,540 samples, 26.87%)</title><rect x="732.1" y="325" width="317.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="735.09" y="335.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.99%)</title><rect x="1084.3" y="341" width="35.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1087.33" y="351.5" >[l..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.50%)</title><rect x="591.2" y="389" width="5.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="594.19" y="399.5" ></text>
</g>
<g >
<title>YAML::Parser::~Parser (10,101,010 samples, 0.50%)</title><rect x="1049.1" y="453" width="5.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1052.10" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (50,505,050 samples, 2.49%)</title><rect x="344.6" y="469" width="29.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="347.63" y="479.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="579.5" y="421" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="582.45" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="661.6" y="277" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="664.64" y="287.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (393,939,390 samples, 19.40%)</title><rect x="397.5" y="485" width="228.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="400.46" y="495.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 32.84%)</title><rect x="661.6" y="373" width="387.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="664.64" y="383.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.50%)</title><rect x="344.6" y="373" width="5.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="347.63" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1125.4" y="405" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1128.42" y="415.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.50%)</title><rect x="344.6" y="405" width="5.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="347.63" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="213" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="223.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="961.0" y="149" width="5.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="964.04" y="159.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.50%)</title><rect x="1031.5" y="181" width="5.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1034.49" y="191.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="649.9" y="421" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="652.90" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="21.7" y="517" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.74" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="984.5" y="149" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="987.53" y="159.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="149" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1040.36" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="649.9" y="389" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="652.90" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="121.5" y="453" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="124.54" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1148.9" y="341" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.91" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="197" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="966.9" y="149" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="969.92" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="245" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="649.9" y="437" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="652.90" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="796.7" y="245" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (10,101,010 samples, 0.50%)</title><rect x="162.6" y="453" width="5.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="165.64" y="463.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.50%)</title><rect x="462.0" y="437" width="5.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="465.04" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::AdvanceCurrent (10,101,010 samples, 0.50%)</title><rect x="955.2" y="149" width="5.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="958.17" y="159.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="896.5" y="181" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="899.47" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.50%)</title><rect x="632.3" y="453" width="5.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="635.29" y="463.5" ></text>
</g>
<g >
<title>parse_value_unit (10,101,010 samples, 0.50%)</title><rect x="1154.8" y="357" width="5.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1157.78" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="937.6" y="133" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="940.56" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="261" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 7.46%)</title><rect x="233.1" y="373" width="88.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="236.08" y="383.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.49%)</title><rect x="755.6" y="197" width="17.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="758.57" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="767.3" y="85" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="770.31" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="485.5" y="389" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="488.52" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="649.9" y="405" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="652.90" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.50%)</title><rect x="649.9" y="453" width="5.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="652.90" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.50%)</title><rect x="972.8" y="245" width="5.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="975.79" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="149" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="159.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="197" width="5.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1040.36" y="207.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.50%)</title><rect x="344.6" y="389" width="5.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="347.63" y="399.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.50%)</title><rect x="790.8" y="293" width="5.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="793.80" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="667.5" y="229" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="670.51" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="165" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="175.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="1148.9" y="357" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1151.91" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.50%)</title><rect x="503.1" y="389" width="5.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="506.13" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="937.6" y="181" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="940.56" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="277" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.87" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (111,111,110 samples, 5.47%)</title><rect x="978.7" y="245" width="64.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="981.66" y="255.5" >YAML::S..</text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 1.49%)</title><rect x="127.4" y="453" width="17.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="130.41" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="937.6" y="149" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="940.56" y="159.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [5]&gt; (10,101,010 samples, 0.50%)</title><rect x="1160.6" y="357" width="5.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1163.65" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.49%)</title><rect x="826.0" y="197" width="17.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="829.02" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="420.9" y="437" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="423.95" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="357" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (20,202,020 samples, 1.00%)</title><rect x="708.6" y="261" width="11.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="711.61" y="271.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (20,202,020 samples, 1.00%)</title><rect x="538.4" y="421" width="11.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="541.36" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="831.9" y="165" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="834.89" y="175.5" ></text>
</g>
<g >
<title>parse_size (10,101,010 samples, 0.50%)</title><rect x="1154.8" y="373" width="5.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1157.78" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.00%)</title><rect x="39.4" y="437" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.35" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="121.5" y="437" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="124.54" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 1.49%)</title><rect x="908.2" y="229" width="17.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="911.21" y="239.5" ></text>
</g>
<g >
<title>cfree (60,606,060 samples, 2.99%)</title><rect x="1084.3" y="357" width="35.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1087.33" y="367.5" >cf..</text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.50%)</title><rect x="150.9" y="373" width="5.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="153.90" y="383.5" ></text>
</g>
<g >
<title>sim::SendData::operator (90,909,090 samples, 4.48%)</title><rect x="573.6" y="469" width="52.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="576.58" y="479.5" >sim::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.99%)</title><rect x="1008.0" y="149" width="23.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1011.01" y="159.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="229" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="239.5" ></text>
</g>
<g >
<title>sim::FlowParser::TcpCCParser::parse_i_tcp_cc (10,101,010 samples, 0.50%)</title><rect x="1160.6" y="373" width="5.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.65" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="1049.1" y="421" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1052.10" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="620.5" y="405" width="5.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="623.55" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="229" width="5.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1040.36" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 1.00%)</title><rect x="661.6" y="341" width="11.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="664.64" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="101" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="33.5" y="453" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.48" y="463.5" ></text>
</g>
<g >
<title>sim::get_flow_id (10,101,010 samples, 0.50%)</title><rect x="561.8" y="405" width="5.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="564.84" y="415.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (111,111,110 samples, 5.47%)</title><rect x="1055.0" y="485" width="64.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1057.98" y="495.5" >YAML::N..</text>
</g>
<g >
<title>YAML::Scanner::~Scanner (10,101,010 samples, 0.50%)</title><rect x="1049.1" y="437" width="5.9" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1052.10" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="245" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.99%)</title><rect x="808.4" y="213" width="35.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="811.41" y="223.5" >in..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1154.8" y="341" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.78" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.99%)</title><rect x="685.1" y="261" width="23.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="688.12" y="271.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="341" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.00%)</title><rect x="849.5" y="229" width="11.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="852.50" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 32.84%)</title><rect x="661.6" y="357" width="387.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="664.64" y="367.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 1.99%)</title><rect x="350.5" y="421" width="23.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="353.50" y="431.5" >[..</text>
</g>
<g >
<title>YAML::Stream::AdvanceCurrent (10,101,010 samples, 0.50%)</title><rect x="949.3" y="181" width="5.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="952.30" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.50%)</title><rect x="638.2" y="453" width="5.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="641.16" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (10,101,010 samples, 0.50%)</title><rect x="1143.0" y="405" width="5.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1146.03" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.00%)</title><rect x="39.4" y="453" width="11.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="42.35" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="485" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.50%)</title><rect x="444.4" y="437" width="5.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="447.43" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.50%)</title><rect x="720.3" y="261" width="5.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="723.35" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="165" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1040.36" y="175.5" ></text>
</g>
<g >
<title>sim::TcpFlow::get_id[abi:cxx11] (10,101,010 samples, 0.50%)</title><rect x="1172.4" y="405" width="5.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1175.39" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 9.45%)</title><rect x="209.6" y="389" width="111.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="212.60" y="399.5" >[libc.so.6]</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="614.7" y="373" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="617.68" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="867.1" y="181" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="870.11" y="191.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.50%)</title><rect x="332.9" y="421" width="5.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="335.89" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="293" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="325" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.87" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="790.8" y="277" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="793.80" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="469" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="405" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="415.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.50%)</title><rect x="914.1" y="213" width="5.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="917.08" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (70,707,070 samples, 3.48%)</title><rect x="1078.5" y="373" width="41.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1081.46" y="383.5" >std..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="632.3" y="389" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="635.29" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.50%)</title><rect x="591.2" y="373" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="594.19" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="1019.8" y="117" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.75" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="526.6" y="389" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="529.62" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="145.0" y="421" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="148.02" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 4.98%)</title><rect x="978.7" y="213" width="58.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="981.66" y="223.5" >YAML::..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="156.8" y="389" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="159.77" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (212,121,210 samples, 10.45%)</title><rect x="197.9" y="421" width="123.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="200.86" y="431.5" >[libstdc++.so.6..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="85" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="95.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="796.7" y="229" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="761.4" y="133" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="764.44" y="143.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.99%)</title><rect x="808.4" y="245" width="35.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="811.41" y="255.5" >in..</text>
</g>
<g >
<title>sim::TcpFlow::get_id[abi:cxx11] (10,101,010 samples, 0.50%)</title><rect x="561.8" y="389" width="5.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="564.84" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="614.7" y="357" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="617.68" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="277" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="287.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse_send_data (20,202,020 samples, 1.00%)</title><rect x="1119.6" y="437" width="11.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1122.55" y="447.5" ></text>
</g>
<g >
<title>sim::Simulator::start (484,848,480 samples, 23.88%)</title><rect x="374.0" y="501" width="281.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="376.98" y="511.5" >sim::Simulator::start</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="884.7" y="197" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="887.73" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="165" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="175.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.50%)</title><rect x="150.9" y="405" width="5.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="153.90" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="591.2" y="341" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="594.19" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="667.5" y="277" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="670.51" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.50%)</title><rect x="462.0" y="421" width="5.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="465.04" y="431.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (20,202,020 samples, 1.00%)</title><rect x="426.8" y="437" width="11.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="429.82" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; YAML::Node::as&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="1178.3" y="405" width="5.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1181.26" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (2,010,100,990 samples, 99.00%)</title><rect x="21.7" y="549" width="1168.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="24.74" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.50%)</title><rect x="920.0" y="213" width="5.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="922.95" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.49%)</title><rect x="861.2" y="277" width="17.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="864.24" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (20,202,020 samples, 1.00%)</title><rect x="1066.7" y="405" width="11.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1069.72" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 1.00%)</title><rect x="450.3" y="421" width="11.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="453.30" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="101" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="111.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 4.48%)</title><rect x="1131.3" y="437" width="52.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1134.29" y="447.5" >sim::..</text>
</g>
<g >
<title>sim::Link::transmit (50,505,050 samples, 2.49%)</title><rect x="438.6" y="453" width="29.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="441.56" y="463.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="1019.8" y="101" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.75" y="111.5" ></text>
</g>
<g >
<title>sim::write_to_csv (494,949,490 samples, 24.38%)</title><rect x="51.1" y="469" width="287.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="54.09" y="479.5" >sim::write_to_csv</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="409.2" y="453" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="412.20" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="213" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1137.2" y="405" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.16" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="133" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="143.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.50%)</title><rect x="1060.8" y="405" width="5.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1063.85" y="415.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.50%)</title><rect x="485.5" y="421" width="5.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="488.52" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="902.3" y="149" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="905.34" y="159.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="996.3" y="165" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="999.27" y="175.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (111,111,110 samples, 5.47%)</title><rect x="1119.6" y="485" width="64.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1122.55" y="495.5" >std::_F..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (40,404,040 samples, 1.99%)</title><rect x="350.5" y="437" width="23.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="353.50" y="447.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="341" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (252,525,250 samples, 12.44%)</title><rect x="192.0" y="437" width="146.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="194.99" y="447.5" >std::ostreambuf_it..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (70,707,070 samples, 3.48%)</title><rect x="1078.5" y="405" width="41.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1081.46" y="415.5" >std..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="984.5" y="165" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="987.53" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="1072.6" y="373" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1075.59" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="661.6" y="261" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="664.64" y="271.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (80,808,080 samples, 3.98%)</title><rect x="579.5" y="453" width="46.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="582.45" y="463.5" >sim:..</text>
</g>
<g >
<title>sim::TcpFlow::send_data (10,101,010 samples, 0.50%)</title><rect x="503.1" y="405" width="5.9" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="506.13" y="415.5" ></text>
</g>
<g >
<title>sim::Process::operator (181,818,180 samples, 8.96%)</title><rect x="467.9" y="469" width="105.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="470.91" y="479.5" >sim::Process..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="156.8" y="405" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="159.77" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.50%)</title><rect x="873.0" y="229" width="5.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="875.99" y="239.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 1.00%)</title><rect x="849.5" y="277" width="11.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="852.50" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="501" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.99%)</title><rect x="685.1" y="245" width="23.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="688.12" y="255.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="696.9" y="229" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="699.87" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.49%)</title><rect x="1013.9" y="133" width="17.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1016.88" y="143.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (70,707,070 samples, 3.48%)</title><rect x="732.1" y="277" width="41.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="735.09" y="287.5" >YAM..</text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.49%)</title><rect x="532.5" y="437" width="17.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="535.49" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.49%)</title><rect x="356.4" y="373" width="17.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.37" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (111,111,110 samples, 5.47%)</title><rect x="1055.0" y="437" width="64.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1057.98" y="447.5" >std::_S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="277" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.98%)</title><rect x="978.7" y="229" width="58.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="981.66" y="239.5" >YAML::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="229" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="239.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (90,909,090 samples, 4.48%)</title><rect x="1131.3" y="469" width="52.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1134.29" y="479.5" >sim::..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="181" width="5.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1040.36" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.50%)</title><rect x="338.8" y="469" width="5.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="341.76" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.50%)</title><rect x="526.6" y="405" width="5.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="529.62" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="890.6" y="197" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="893.60" y="207.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 1.00%)</title><rect x="520.7" y="437" width="11.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="523.75" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (10,101,010 samples, 0.50%)</title><rect x="632.3" y="469" width="5.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="635.29" y="479.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="644.0" y="437" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="647.03" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="117" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="127.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.50%)</title><rect x="526.6" y="421" width="5.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="529.62" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="961.0" y="181" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="964.04" y="191.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 1.00%)</title><rect x="374.0" y="485" width="11.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="376.98" y="495.5" ></text>
</g>
<g >
<title>void std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::_M_push_back_aux&lt;YAML::Token&gt; (10,101,010 samples, 0.50%)</title><rect x="978.7" y="149" width="5.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="981.66" y="159.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.50%)</title><rect x="873.0" y="213" width="5.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="875.99" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.50%)</title><rect x="1125.4" y="373" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1128.42" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.49%)</title><rect x="890.6" y="213" width="17.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="893.60" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="517" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="533" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>sim::get_flow_id (10,101,010 samples, 0.50%)</title><rect x="614.7" y="405" width="5.8" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="617.68" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="409.2" y="469" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="412.20" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="532.5" y="421" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="535.49" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="156.8" y="373" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="159.77" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="85" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1040.36" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="277" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.50%)</title><rect x="638.2" y="437" width="5.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="641.16" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="961.0" y="165" width="11.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="964.04" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="373" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndent (10,101,010 samples, 0.50%)</title><rect x="978.7" y="165" width="5.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="981.66" y="175.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 1.00%)</title><rect x="585.3" y="421" width="11.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="588.32" y="431.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.00%)</title><rect x="849.5" y="213" width="11.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="852.50" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.99%)</title><rect x="350.5" y="389" width="23.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.50" y="399.5" >[..</text>
</g>
<g >
<title>vsnprintf (191,919,190 samples, 9.45%)</title><rect x="209.6" y="405" width="111.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="212.60" y="415.5" >vsnprintf</text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (595,959,590 samples, 29.35%)</title><rect x="27.6" y="501" width="346.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="30.61" y="511.5" >sim::MetricsCollector::export_metrics_to_files</text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 4.48%)</title><rect x="1131.3" y="453" width="52.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1134.29" y="463.5" >std::..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="644.0" y="453" width="5.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="647.03" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.50%)</title><rect x="720.3" y="277" width="5.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="723.35" y="287.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (30,303,030 samples, 1.49%)</title><rect x="638.2" y="469" width="17.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="641.16" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="293" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.87" y="303.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (50,505,050 samples, 2.49%)</title><rect x="438.6" y="469" width="29.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="441.56" y="479.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 2.99%)</title><rect x="1084.3" y="325" width="35.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1087.33" y="335.5" >[l..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="632.3" y="421" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="635.29" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="453" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="21.7" y="501" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.74" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="117" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="127.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="33.5" y="469" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="36.48" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="937.6" y="165" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="940.56" y="175.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [10]&gt; (10,101,010 samples, 0.50%)</title><rect x="1131.3" y="405" width="5.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1134.29" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.50%)</title><rect x="591.2" y="405" width="5.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="594.19" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.50%)</title><rect x="485.5" y="437" width="5.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="488.52" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="984.5" y="117" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="987.53" y="127.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.50%)</title><rect x="150.9" y="421" width="5.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="153.90" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.00%)</title><rect x="538.4" y="389" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="541.36" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="549" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.50%)</title><rect x="773.2" y="277" width="5.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="776.18" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="790.8" y="261" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="793.80" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.50%)</title><rect x="503.1" y="357" width="5.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="506.13" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (292,929,290 samples, 14.43%)</title><rect x="878.9" y="277" width="170.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="881.86" y="287.5" >YAML::SingleDocParser:..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="145.0" y="405" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="148.02" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.99%)</title><rect x="925.8" y="197" width="23.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="928.82" y="207.5" >i..</text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.50%)</title><rect x="509.0" y="405" width="5.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="512.00" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="1119.6" y="421" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1122.55" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 1.00%)</title><rect x="538.4" y="405" width="11.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="541.36" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="21.7" y="469" width="5.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="24.74" y="479.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="620.5" y="389" width="5.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="623.55" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (50,505,050 samples, 2.49%)</title><rect x="344.6" y="485" width="29.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="347.63" y="495.5" >si..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 1.99%)</title><rect x="949.3" y="197" width="23.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="952.30" y="207.5" >Y..</text>
</g>
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.50%)</title><rect x="802.5" y="229" width="5.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="805.54" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (80,808,080 samples, 3.98%)</title><rect x="925.8" y="229" width="47.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="928.82" y="239.5" >YAML..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.50%)</title><rect x="186.1" y="437" width="5.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="189.12" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.50%)</title><rect x="720.3" y="293" width="5.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="723.35" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.50%)</title><rect x="509.0" y="421" width="5.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="512.00" y="431.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.50%)</title><rect x="1037.4" y="213" width="5.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1040.36" y="223.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (545,454,540 samples, 26.87%)</title><rect x="27.6" y="485" width="317.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="30.61" y="495.5" >sim::LinksQueueSizeStorage::export_to_files</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="229" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="239.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (10,101,010 samples, 0.50%)</title><rect x="21.7" y="485" width="5.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="24.74" y="495.5" ></text>
</g>
<g >
<title>all (2,030,303,010 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="181" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="191.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 1.99%)</title><rect x="350.5" y="405" width="23.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="353.50" y="415.5" >v..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="53" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="63.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.50%)</title><rect x="802.5" y="245" width="5.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="805.54" y="255.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="955.2" y="165" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="958.17" y="175.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="1148.9" y="373" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1151.91" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="357" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushToken (10,101,010 samples, 0.50%)</title><rect x="873.0" y="197" width="5.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="875.99" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="33.5" y="421" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.48" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="437" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (353,535,350 samples, 17.41%)</title><rect x="843.6" y="309" width="205.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="846.63" y="319.5" >YAML::SingleDocParser::Hand..</text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (40,404,040 samples, 1.99%)</title><rect x="1148.9" y="405" width="23.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1151.91" y="415.5" >s..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.00%)</title><rect x="978.7" y="197" width="11.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="981.66" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="341" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.50%)</title><rect x="714.5" y="229" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="717.48" y="239.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (20,202,020 samples, 1.00%)</title><rect x="450.3" y="437" width="11.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="453.30" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.50%)</title><rect x="796.7" y="261" width="5.8" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="799.67" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.50%)</title><rect x="978.7" y="181" width="5.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="981.66" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="149" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="855.4" y="85" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="858.37" y="95.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (80,808,080 samples, 3.98%)</title><rect x="796.7" y="293" width="46.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="799.67" y="303.5" >YAML..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.50%)</title><rect x="796.7" y="277" width="5.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="799.67" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="667.5" y="293" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="670.51" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="632.3" y="437" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="635.29" y="447.5" ></text>
</g>
<g >
<title>main (1,999,999,980 samples, 98.51%)</title><rect x="27.6" y="517" width="1162.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="30.61" y="527.5" >main</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="867.1" y="197" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="870.11" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="309" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.50%)</title><rect x="861.2" y="213" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="864.24" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="245" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.50%)</title><rect x="591.2" y="325" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="594.19" y="335.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 1.00%)</title><rect x="133.3" y="437" width="11.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="136.28" y="447.5" ></text>
</g>
<g >
<title>nons (2,030,303,010 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >nons</text>
</g>
<g >
<title>_start (2,010,100,990 samples, 99.00%)</title><rect x="21.7" y="565" width="1168.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="24.74" y="575.5" >_start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="761.4" y="149" width="11.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="764.44" y="159.5" ></text>
</g>
<g >
<title>sim::TcpFlow::get_fct (10,101,010 samples, 0.50%)</title><rect x="655.8" y="501" width="5.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="658.77" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.49%)</title><rect x="861.2" y="245" width="17.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="864.24" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.00%)</title><rect x="661.6" y="309" width="11.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="664.64" y="319.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.50%)</title><rect x="344.6" y="437" width="5.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="347.63" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="325" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.00%)</title><rect x="673.4" y="213" width="11.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="676.38" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 32.84%)</title><rect x="661.6" y="421" width="387.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="664.64" y="431.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.50%)</title><rect x="1043.2" y="245" width="5.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1046.23" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 2.49%)</title><rect x="878.9" y="261" width="29.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="881.86" y="271.5" >YA..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.48%)</title><rect x="990.4" y="181" width="41.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="993.40" y="191.5" >YAM..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="702.7" y="181" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.74" y="191.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.50%)</title><rect x="585.3" y="405" width="5.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="588.32" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (90,909,090 samples, 4.48%)</title><rect x="732.1" y="309" width="52.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="735.09" y="319.5" >YAML:..</text>
</g>
<g >
<title>YAML::Scanner::empty (80,808,080 samples, 3.98%)</title><rect x="796.7" y="309" width="46.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="799.67" y="319.5" >YAML..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.50%)</title><rect x="996.3" y="149" width="5.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="999.27" y="159.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (90,909,090 samples, 4.48%)</title><rect x="1131.3" y="421" width="52.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1134.29" y="431.5" >sim::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="796.7" y="213" width="5.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="223.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (80,808,080 samples, 3.98%)</title><rect x="732.1" y="293" width="47.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="735.09" y="303.5" >YAML..</text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (10,101,010 samples, 0.50%)</title><rect x="561.8" y="421" width="5.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="564.84" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (30,303,030 samples, 1.49%)</title><rect x="497.3" y="437" width="17.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="500.26" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (60,606,060 samples, 2.99%)</title><rect x="808.4" y="229" width="35.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="811.41" y="239.5" >in..</text>
</g>
<g >
<title>sim::Switch::process (101,010,100 samples, 4.98%)</title><rect x="514.9" y="453" width="58.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="517.88" y="463.5" >sim::S..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.50%)</title><rect x="1143.0" y="389" width="5.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1146.03" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,010,100,990 samples, 99.00%)</title><rect x="21.7" y="533" width="1168.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.74" y="543.5" >[libc.so.6]</text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;&amp;, std::weak_ptr&lt;sim::ISwitch&gt;&amp;&gt; (20,202,020 samples, 1.00%)</title><rect x="426.8" y="421" width="11.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="429.82" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="867.1" y="213" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="870.11" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 1.99%)</title><rect x="602.9" y="437" width="23.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="605.94" y="447.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.99%)</title><rect x="749.7" y="229" width="23.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="752.70" y="239.5" >[..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (666,666,660 samples, 32.84%)</title><rect x="661.6" y="437" width="387.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="664.64" y="447.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (20,202,020 samples, 1.00%)</title><rect x="150.9" y="453" width="11.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="153.90" y="463.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (20,202,020 samples, 1.00%)</title><rect x="784.9" y="309" width="11.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="787.93" y="319.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse (20,202,020 samples, 1.00%)</title><rect x="1119.6" y="453" width="11.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1122.55" y="463.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (898,989,890 samples, 44.28%)</title><rect x="661.6" y="501" width="522.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="664.64" y="511.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>sim::ScenarioParser::parse (20,202,020 samples, 1.00%)</title><rect x="1119.6" y="469" width="11.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1122.55" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.99%)</title><rect x="297.7" y="341" width="23.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="300.66" y="351.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="344.6" y="293" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="347.63" y="303.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.00%)</title><rect x="861.2" y="229" width="11.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="864.24" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (242,424,240 samples, 11.94%)</title><rect x="908.2" y="261" width="140.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="911.21" y="271.5" >YAML::SingleDocPa..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="357" width="5.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1187.13" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.50%)</title><rect x="878.9" y="213" width="5.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="881.86" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 4.98%)</title><rect x="673.4" y="309" width="58.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="676.38" y="319.5" >YAML::..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.50%)</title><rect x="145.0" y="437" width="5.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="148.02" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.50%)</title><rect x="344.6" y="453" width="5.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="347.63" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (111,111,110 samples, 5.47%)</title><rect x="1055.0" y="453" width="64.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1057.98" y="463.5" >std::_S..</text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.50%)</title><rect x="567.7" y="421" width="5.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="570.71" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.00%)</title><rect x="878.9" y="229" width="11.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="881.86" y="239.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.48%)</title><rect x="802.5" y="261" width="41.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="805.54" y="271.5" >YAM..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="667.5" y="261" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="670.51" y="271.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 32.84%)</title><rect x="661.6" y="405" width="387.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="664.64" y="415.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="261" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.87" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="53" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="63.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.00%)</title><rect x="39.4" y="469" width="11.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="42.35" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.50%)</title><rect x="145.0" y="453" width="5.9" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="148.02" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="15.9" y="309" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="18.87" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="984.5" y="133" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="987.53" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.50%)</title><rect x="156.8" y="437" width="5.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="159.77" y="447.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.50%)</title><rect x="462.0" y="405" width="5.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="465.04" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 32.84%)</title><rect x="661.6" y="389" width="387.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="664.64" y="399.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (40,404,040 samples, 1.99%)</title><rect x="350.5" y="453" width="23.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="353.50" y="463.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.50%)</title><rect x="1184.1" y="485" width="5.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1187.13" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.50%)</title><rect x="150.9" y="197" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="153.90" y="207.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 1.00%)</title><rect x="1066.7" y="389" width="11.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1069.72" y="399.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (666,666,660 samples, 32.84%)</title><rect x="661.6" y="453" width="387.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="664.64" y="463.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.00%)</title><rect x="10.0" y="389" width="11.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.50%)</title><rect x="597.1" y="437" width="5.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="600.06" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="943.4" y="117" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="946.43" y="127.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.50%)</title><rect x="667.5" y="245" width="5.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="670.51" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 6.97%)</title><rect x="239.0" y="357" width="82.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="241.96" y="367.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (20,202,020 samples, 1.00%)</title><rect x="708.6" y="277" width="11.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="711.61" y="287.5" ></text>
</g>
</g>
</svg>
