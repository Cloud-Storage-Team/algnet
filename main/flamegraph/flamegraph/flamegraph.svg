<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>[libc.so.6] (282,828,280 samples, 1.58%)</title><rect x="802.2" y="485" width="18.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="805.20" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="453" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.67" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (90,909,090 samples, 0.51%)</title><rect x="864.0" y="485" width="5.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="866.96" y="495.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="874.6" y="485" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="877.58" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.17%)</title><rect x="300.2" y="405" width="2.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="303.19" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="101" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="294.2" y="421" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="297.21" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="282.3" y="389" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.26" y="399.5" ></text>
</g>
<g >
<title>sim::Event::Event (424,242,420 samples, 2.36%)</title><rect x="1057.9" y="501" width="27.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1060.86" y="511.5" >s..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.67" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="295.5" y="389" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.54" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="309" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.03" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="170.0" y="485" width="2.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="173.03" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 1.07%)</title><rect x="39.9" y="453" width="12.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.88" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.23%)</title><rect x="299.5" y="469" width="2.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="302.52" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="308.8" y="501" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="311.82" y="511.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.45%)</title><rect x="1085.7" y="533" width="5.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1088.75" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="10.7" y="517" width="0.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.66" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="860.0" y="485" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="862.97" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.61" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="1134.9" y="453" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.88" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (90,909,090 samples, 0.51%)</title><rect x="321.4" y="517" width="6.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="324.44" y="527.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1109.7" y="501" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1112.65" y="511.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (393,939,390 samples, 2.19%)</title><rect x="776.3" y="469" width="25.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="779.30" y="479.5" >v..</text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.51%)</title><rect x="163.4" y="421" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="166.39" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="261" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1185.70" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="295.5" y="373" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.54" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,020,202,010 samples, 5.68%)</title><rect x="925.7" y="501" width="67.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="928.71" y="511.5" >std::_R..</text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="533" width="6.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.03" y="543.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1147.5" y="517" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1150.50" y="527.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="278.3" y="485" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="281.27" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1095.7" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.71" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="389" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="399.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,373,737,360 samples, 7.65%)</title><rect x="995.4" y="517" width="90.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="998.44" y="527.5" >void sim::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1170.7" y="341" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.74" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="10.7" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.66" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (171,717,170 samples, 0.96%)</title><rect x="310.1" y="517" width="11.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="313.15" y="527.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="517" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1191.67" y="527.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (434,343,430 samples, 2.42%)</title><rect x="24.6" y="549" width="28.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="27.61" y="559.5" >si..</text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.62%)</title><rect x="290.2" y="485" width="7.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="293.23" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="1108.3" y="485" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1111.32" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="865.3" y="421" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.28" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.28%)</title><rect x="280.9" y="469" width="3.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="283.93" y="479.5" ></text>
</g>
<g >
<title>Logger::warn (2,393,939,370 samples, 13.34%)</title><rect x="381.9" y="501" width="157.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="384.86" y="511.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="581" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1145.5" y="501" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.51" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="865.3" y="389" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.28" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.35%)</title><rect x="130.2" y="517" width="15.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="133.19" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="869.3" y="453" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="872.27" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.34%)</title><rect x="25.3" y="501" width="4.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="28.27" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.51%)</title><rect x="32.6" y="485" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.58" y="495.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="874.6" y="453" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="877.58" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 1.13%)</title><rect x="10.7" y="533" width="13.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.66" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="290.9" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="293.89" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (10,101,010 samples, 0.06%)</title><rect x="173.4" y="501" width="0.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="176.35" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="341" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.03" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.28%)</title><rect x="1154.1" y="517" width="3.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1157.14" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="309" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="289.6" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="292.56" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (262,626,260 samples, 1.46%)</title><rect x="154.8" y="501" width="17.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="157.76" y="511.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="868.6" y="453" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="871.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1133.6" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.56" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1118.9" y="453" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1121.95" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.45%)</title><rect x="1182.7" y="405" width="5.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.70" y="415.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 1.97%)</title><rect x="122.9" y="533" width="23.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="125.89" y="543.5" >c..</text>
</g>
<g >
<title>sim::Process::operator (101,010,100 samples, 0.56%)</title><rect x="75.7" y="549" width="6.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="78.74" y="559.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.73%)</title><rect x="278.3" y="501" width="8.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="281.27" y="511.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="863.3" y="485" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="866.29" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="295.5" y="357" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.54" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="284.9" y="469" width="2.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="287.91" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (90,909,090 samples, 0.51%)</title><rect x="638.2" y="485" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="641.18" y="495.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.06%)</title><rect x="180.7" y="517" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="183.66" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="261" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="405" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="16.0" y="469" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.98" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1170.7" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.74" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1173.4" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.40" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="282.3" y="405" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.26" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="291.6" y="453" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="294.55" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="293" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="1148.2" y="485" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.17" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="415.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="304.8" y="469" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="307.83" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="869.9" y="485" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="872.93" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="335.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (343,434,340 samples, 1.91%)</title><rect x="252.4" y="517" width="22.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="255.37" y="527.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="261" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="325" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1185.70" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="421" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.28%)</title><rect x="865.3" y="437" width="3.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="868.28" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="282.3" y="421" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.26" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1152.8" y="517" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1155.81" y="527.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.34%)</title><rect x="25.3" y="437" width="4.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="28.27" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.11%)</title><rect x="1158.1" y="517" width="1.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1161.13" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="469" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.01" y="479.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.34%)</title><rect x="25.3" y="469" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="28.27" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="1096.4" y="469" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1099.37" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="27.9" y="165" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.93" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="19.3" y="453" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.30" y="463.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.06%)</title><rect x="169.4" y="453" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="172.37" y="463.5" ></text>
</g>
<g >
<title>malloc (111,111,110 samples, 0.62%)</title><rect x="614.9" y="485" width="7.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="617.94" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1118.9" y="469" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1121.95" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (434,343,430 samples, 2.42%)</title><rect x="24.6" y="533" width="28.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="27.61" y="543.5" >si..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="485" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.01" y="495.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="279.6" y="485" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="282.60" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.06%)</title><rect x="858.6" y="501" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="861.64" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="10.7" y="501" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.66" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.73%)</title><rect x="42.5" y="421" width="8.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.54" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="533" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.01" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="309" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="319.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.17%)</title><rect x="1182.7" y="341" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.70" y="351.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="874.6" y="469" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="877.58" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 1.80%)</title><rect x="539.2" y="501" width="21.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="542.24" y="511.5" >[..</text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.39%)</title><rect x="1134.9" y="469" width="4.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1137.88" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="517" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.03" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="294.9" y="453" width="2.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="297.87" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="325" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.03" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="300.2" y="389" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="303.19" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="290.9" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="293.89" y="447.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.28%)</title><rect x="1168.8" y="501" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.75" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.06%)</title><rect x="1176.7" y="533" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.72" y="543.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.28%)</title><rect x="16.0" y="485" width="3.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.98" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="31.2" y="501" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.25" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="405" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="415.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (858,585,850 samples, 4.78%)</title><rect x="1124.3" y="549" width="56.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1127.26" y="559.5" >sim::..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1176.1" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.06" y="479.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="276.9" y="501" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="279.94" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="293" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="485" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.03" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="143.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (30,303,030 samples, 0.17%)</title><rect x="302.2" y="469" width="2.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="305.18" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.51%)</title><rect x="163.4" y="405" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="166.39" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (70,707,070 samples, 0.39%)</title><rect x="19.3" y="501" width="4.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="22.30" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="373" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="33.9" y="421" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.91" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="23.9" y="533" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="26.94" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.51" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="469" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.06%)</title><rect x="860.6" y="469" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="863.64" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.11%)</title><rect x="1186.7" y="341" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.68" y="351.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (343,434,340 samples, 1.91%)</title><rect x="516.7" y="485" width="22.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="519.66" y="495.5" >v..</text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 1.80%)</title><rect x="574.4" y="485" width="21.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.43" y="495.5" >[..</text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.06%)</title><rect x="1091.7" y="501" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1094.72" y="511.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.06%)</title><rect x="31.9" y="501" width="0.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="34.91" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.34%)</title><rect x="25.3" y="517" width="4.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="28.27" y="527.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1153.5" y="517" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1156.48" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="1180.7" y="549" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.70" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="437" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1124.9" y="533" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1127.92" y="543.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (20,202,020 samples, 0.11%)</title><rect x="305.5" y="485" width="1.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="308.50" y="495.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (50,505,050 samples, 0.28%)</title><rect x="151.4" y="485" width="3.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="154.44" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1150.8" y="469" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.82" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="291.6" y="437" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="294.55" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="869.9" y="469" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="872.93" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="306.2" y="469" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="309.16" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="993.4" y="501" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="996.44" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1154.8" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.81" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="33.9" y="437" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.91" y="447.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (17,151,514,980 samples, 95.55%)</title><rect x="54.5" y="565" width="1127.5" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="57.49" y="575.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::Host::~Host (121,212,120 samples, 0.68%)</title><rect x="11.3" y="501" width="8.0" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.33" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="341" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="351.5" ></text>
</g>
<g >
<title>operator delete (121,212,120 samples, 0.68%)</title><rect x="225.8" y="517" width="8.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="228.81" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="294.2" y="437" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="297.21" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="1136.2" y="437" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.21" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="389" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.03" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.61" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="299.5" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="302.52" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="453" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="463.5" ></text>
</g>
<g >
<title>cfree (303,030,300 samples, 1.69%)</title><rect x="820.8" y="485" width="19.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="823.79" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="276.9" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="279.94" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="197" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="207.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (50,505,050 samples, 0.28%)</title><rect x="178.0" y="533" width="3.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="181.00" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1129.6" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.57" y="479.5" ></text>
</g>
<g >
<title>malloc (111,111,110 samples, 0.62%)</title><rect x="595.7" y="501" width="7.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="598.68" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="168.7" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="171.71" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.96%)</title><rect x="829.4" y="469" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="832.43" y="479.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.39%)</title><rect x="19.3" y="485" width="4.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.30" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.06%)</title><rect x="1179.4" y="533" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1182.38" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (60,606,060 samples, 0.34%)</title><rect x="1159.5" y="517" width="3.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1162.45" y="527.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.06%)</title><rect x="179.3" y="501" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="182.33" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="1128.2" y="517" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1131.24" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="1128.9" y="517" width="1.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1131.91" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="1096.4" y="453" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1099.37" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="37" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="47.5" ></text>
</g>
<g >
<title>sim::Link::arrive (404,040,400 samples, 2.25%)</title><rect x="147.5" y="517" width="26.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="150.46" y="527.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="302.8" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="305.84" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="925.0" y="501" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="928.05" y="511.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="180.0" y="485" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="182.99" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.18%)</title><rect x="10.7" y="581" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.66" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="225.1" y="517" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="228.15" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>cfree (535,353,530 samples, 2.98%)</title><rect x="560.5" y="501" width="35.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="563.49" y="511.5" >cf..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (202,020,200 samples, 1.13%)</title><rect x="39.9" y="501" width="13.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="42.88" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.51%)</title><rect x="1102.3" y="421" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.35" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.90%)</title><rect x="860.0" y="501" width="10.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="862.97" y="511.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="1186.7" y="325" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.68" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.68%)</title><rect x="161.4" y="453" width="8.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="164.40" y="463.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="549" width="6.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.03" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.51%)</title><rect x="1102.3" y="453" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1105.35" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="155.4" y="485" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="158.42" y="495.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.17%)</title><rect x="1145.5" y="517" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1148.51" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.06%)</title><rect x="1185.4" y="357" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1188.35" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.5" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.49" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1091.1" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1094.06" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.11%)</title><rect x="1186.7" y="357" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.68" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="29.3" y="517" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="32.26" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="421" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.06%)</title><rect x="1180.0" y="533" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1183.04" y="543.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (60,606,060 samples, 0.34%)</title><rect x="174.0" y="517" width="4.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="177.02" y="527.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.06%)</title><rect x="10.7" y="485" width="0.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.66" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1150.8" y="437" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.82" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.17%)</title><rect x="1177.4" y="533" width="2.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1180.38" y="543.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.28%)</title><rect x="336.7" y="517" width="3.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="339.71" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.17%)</title><rect x="300.2" y="421" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="303.19" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1170.7" y="325" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.74" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="862.6" y="485" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="865.63" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="160.1" y="485" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="163.07" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="357" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (262,626,260 samples, 1.46%)</title><rect x="235.1" y="517" width="17.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="238.11" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="867.3" y="373" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="870.28" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="1119.6" y="501" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1122.61" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 0.79%)</title><rect x="1164.8" y="517" width="9.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1167.77" y="527.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 1.13%)</title><rect x="609.0" y="501" width="13.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="611.96" y="511.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1154.1" y="485" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.14" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="325" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.11%)</title><rect x="172.0" y="501" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="175.03" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="860.0" y="469" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="862.97" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.45%)</title><rect x="164.1" y="389" width="5.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.06" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1150.8" y="453" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.82" y="463.5" ></text>
</g>
<g >
<title>strlen@plt (40,404,040 samples, 0.23%)</title><rect x="856.0" y="485" width="2.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="858.99" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="10.7" y="469" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.66" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="300.2" y="437" width="2.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="303.19" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="156.1" y="469" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="159.09" y="479.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="1100.4" y="485" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1103.35" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="277.6" y="501" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="280.61" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="869.9" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="872.93" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="1098.4" y="485" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1101.36" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="127.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="549" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.67" y="559.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 0.28%)</title><rect x="1182.7" y="373" width="3.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.70" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (80,808,080 samples, 0.45%)</title><rect x="864.6" y="469" width="5.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="867.62" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="629" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.06%)</title><rect x="1186.7" y="309" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.68" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="221.8" y="517" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="224.83" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (141,414,140 samples, 0.79%)</title><rect x="160.7" y="485" width="9.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="163.74" y="495.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.39%)</title><rect x="299.5" y="485" width="4.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="302.52" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="17.3" y="453" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.30" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="501" width="6.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.03" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="295.5" y="421" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="298.54" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="307.5" y="485" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="310.49" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="1163.4" y="517" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1166.44" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 0.28%)</title><rect x="1182.7" y="389" width="3.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.70" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="405" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="415.5" ></text>
</g>
<g >
<title>sim::is_valid_link (30,303,030 samples, 0.17%)</title><rect x="1126.3" y="517" width="1.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1129.25" y="527.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,777,777,620 samples, 87.90%)</title><rect x="87.0" y="549" width="1037.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="90.03" y="559.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="285.6" y="453" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="288.58" y="463.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1128.9" y="485" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1131.91" y="495.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.28%)</title><rect x="1120.9" y="533" width="3.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1123.94" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.23%)</title><rect x="281.6" y="453" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="284.59" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (202,020,200 samples, 1.13%)</title><rect x="39.9" y="517" width="13.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="42.88" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="341" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1124.3" y="533" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.26" y="543.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (111,111,110 samples, 0.62%)</title><rect x="1101.0" y="485" width="7.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1104.02" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="19.3" y="469" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.30" y="479.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (454,545,450 samples, 2.53%)</title><rect x="1091.1" y="517" width="29.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1094.06" y="527.5" >si..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="861.3" y="485" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="864.30" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="373" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="383.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="30.6" y="517" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="33.59" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="389" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.11%)</title><rect x="53.2" y="565" width="1.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="56.16" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.17%)</title><rect x="1172.1" y="501" width="2.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1175.07" y="511.5" ></text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.06%)</title><rect x="24.6" y="469" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="27.61" y="479.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.45%)</title><rect x="1052.5" y="485" width="5.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1055.54" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="373" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.03" y="383.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="293" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1185.70" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="421" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.23%)</title><rect x="1182.7" y="357" width="2.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.70" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.34%)</title><rect x="165.4" y="373" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="168.39" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.11%)</title><rect x="377.9" y="501" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="380.88" y="511.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1047.9" y="501" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1050.90" y="511.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1091.1" y="501" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1094.06" y="511.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.51%)</title><rect x="32.6" y="469" width="6.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="35.58" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1135.5" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1138.55" y="223.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.06%)</title><rect x="24.6" y="501" width="0.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="27.61" y="511.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (131,313,130 samples, 0.73%)</title><rect x="288.9" y="501" width="8.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="291.90" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.06%)</title><rect x="294.2" y="405" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="297.21" y="415.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 1.13%)</title><rect x="842.7" y="485" width="13.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="845.71" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.23%)</title><rect x="284.2" y="485" width="2.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="287.25" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="300.2" y="453" width="2.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="303.19" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="437" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.03" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="296.9" y="469" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="299.87" y="479.5" ></text>
</g>
<g >
<title>sim::Process::~Process (70,707,070 samples, 0.39%)</title><rect x="82.4" y="549" width="4.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="85.38" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="517" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.01" y="527.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.39%)</title><rect x="1148.2" y="501" width="4.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1151.17" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="38.6" y="485" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="41.55" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.5" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.51" y="367.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.34%)</title><rect x="25.3" y="485" width="4.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="28.27" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="158.7" y="469" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="161.75" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (40,404,040 samples, 0.23%)</title><rect x="1174.1" y="517" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.06" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="861.3" y="469" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="864.30" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,939,393,760 samples, 99.94%)</title><rect x="10.7" y="597" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.66" y="607.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::Link::get_packet (3,595,959,560 samples, 20.03%)</title><rect x="622.2" y="501" width="236.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="625.25" y="511.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="865.3" y="405" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.28" y="415.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.06%)</title><rect x="303.5" y="453" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="306.51" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="229" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.45%)</title><rect x="33.2" y="453" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.24" y="463.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.11%)</title><rect x="994.1" y="501" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="997.11" y="511.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.06%)</title><rect x="1099.7" y="485" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1102.69" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="1157.5" y="517" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1160.46" y="527.5" ></text>
</g>
<g >
<title>Logger::info (2,404,040,380 samples, 13.39%)</title><rect x="644.2" y="485" width="158.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="647.16" y="495.5" >Logger::info</text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.23%)</title><rect x="1131.6" y="501" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1134.56" y="511.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.56%)</title><rect x="1101.7" y="469" width="6.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1104.68" y="479.5" ></text>
</g>
<g >
<title>Logger::warn (40,404,040 samples, 0.23%)</title><rect x="222.5" y="517" width="2.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="225.49" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.39%)</title><rect x="1103.7" y="389" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1106.67" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Link (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="501" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1191.67" y="511.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.28%)</title><rect x="1168.8" y="485" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.75" y="495.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (20,202,020 samples, 0.11%)</title><rect x="275.0" y="517" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="277.95" y="527.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="549" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.01" y="559.5" ></text>
</g>
<g >
<title>read (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="213" width="0.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1185.70" y="223.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.06%)</title><rect x="24.6" y="485" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="27.61" y="495.5" ></text>
</g>
<g >
<title>all (17,949,494,770 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="501" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.01" y="511.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.06%)</title><rect x="156.1" y="453" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="159.09" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1186.7" y="293" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.68" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (252,525,250 samples, 1.41%)</title><rect x="1093.1" y="501" width="16.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1096.05" y="511.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (565,656,560 samples, 3.15%)</title><rect x="1139.5" y="533" width="37.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1142.53" y="543.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="304.2" y="469" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="307.17" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="373" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.03" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (20,202,020 samples, 0.11%)</title><rect x="304.2" y="485" width="1.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="307.17" y="495.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,757,575,620 samples, 76.65%)</title><rect x="181.3" y="533" width="904.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="184.32" y="543.5" >sim::Process::operator</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.39%)</title><rect x="1093.7" y="485" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1096.71" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (80,808,080 samples, 0.45%)</title><rect x="1134.2" y="501" width="5.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1137.22" y="511.5" ></text>
</g>
<g >
<title>_start (17,939,393,760 samples, 99.94%)</title><rect x="10.7" y="629" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.66" y="639.5" >_start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="146.8" y="517" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="149.79" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="299.5" y="453" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="302.52" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1133.6" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.56" y="447.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.45%)</title><rect x="56.5" y="549" width="5.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="59.48" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="52.5" y="485" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="55.50" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="453" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.03" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.61" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.11%)</title><rect x="295.5" y="405" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="298.54" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1173.4" y="469" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.40" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.06%)</title><rect x="858.6" y="485" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="861.64" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="290.2" y="469" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="293.23" y="479.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (30,303,030 samples, 0.17%)</title><rect x="1155.5" y="501" width="2.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1158.47" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.3" y="309" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.34" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.23%)</title><rect x="922.4" y="501" width="2.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="925.39" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.51%)</title><rect x="290.9" y="469" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="293.89" y="479.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="1092.4" y="501" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1095.39" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="50.5" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.51" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="245" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="255.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="860.6" y="485" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="863.64" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.51%)</title><rect x="1102.3" y="437" width="6.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1105.35" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (191,919,190 samples, 1.07%)</title><rect x="39.9" y="485" width="12.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="42.88" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.67" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (141,414,140 samples, 0.79%)</title><rect x="1110.3" y="501" width="9.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1113.32" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.11%)</title><rect x="1186.7" y="373" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.68" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.06%)</title><rect x="309.5" y="501" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="312.48" y="511.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="533" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1191.67" y="543.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.06%)</title><rect x="1184.7" y="341" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1187.69" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="170.7" y="469" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="173.70" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="27.3" y="181" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.27" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1133.6" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.56" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="22.6" y="437" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="25.62" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="37.9" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.89" y="415.5" ></text>
</g>
<g >
<title>main (17,727,272,550 samples, 98.76%)</title><rect x="24.6" y="581" width="1165.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.61" y="591.5" >main</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="859.3" y="501" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="862.31" y="511.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.06%)</title><rect x="1101.0" y="469" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1104.02" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1176.1" y="485" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.06" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="306.2" y="453" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="309.16" y="463.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.23%)</title><rect x="1131.6" y="485" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1134.56" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1128.9" y="501" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1131.91" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1187.3" y="293" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.34" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.79%)</title><rect x="160.7" y="469" width="9.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="163.74" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.11%)</title><rect x="278.3" y="469" width="1.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="281.27" y="479.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1154.1" y="501" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.14" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1107.0" y="373" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.99" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.28%)</title><rect x="865.3" y="453" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="868.28" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="305.5" y="469" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="308.50" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="85" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="95.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.23%)</title><rect x="281.6" y="437" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="284.59" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.45%)</title><rect x="1103.0" y="405" width="5.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1106.01" y="415.5" ></text>
</g>
<g >
<title>vsnprintf (191,919,190 samples, 1.07%)</title><rect x="39.9" y="469" width="12.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="42.88" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1132.2" y="469" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.23" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (111,111,110 samples, 0.62%)</title><rect x="32.6" y="501" width="7.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="35.58" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.28%)</title><rect x="151.4" y="469" width="3.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="154.44" y="479.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.17%)</title><rect x="148.1" y="501" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="151.12" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="284.2" y="469" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="287.25" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1176.1" y="501" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.06" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1173.4" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.40" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.06%)</title><rect x="23.9" y="549" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="26.94" y="559.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.28%)</title><rect x="156.8" y="485" width="3.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="159.75" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (70,707,070 samples, 0.39%)</title><rect x="150.1" y="501" width="4.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="153.11" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="565" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,969,696,870 samples, 55.54%)</title><rect x="340.0" y="517" width="655.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="343.03" y="527.5" >sim::Switch::process</text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.39%)</title><rect x="1134.9" y="485" width="4.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.88" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1183.4" y="325" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.36" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="245" width="0.7" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1185.70" y="255.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="229" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1185.70" y="239.5" ></text>
</g>
<g >
<title>sim::YamlParser::~YamlParser (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="565" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.34" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.67" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (70,707,070 samples, 0.39%)</title><rect x="870.6" y="501" width="4.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="873.60" y="511.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.06%)</title><rect x="180.0" y="501" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="182.99" y="511.5" ></text>
</g>
<g >
<title>sim::TcpTahoeCC::get_cwnd (10,101,010 samples, 0.06%)</title><rect x="308.2" y="501" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="311.15" y="511.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="294.9" y="437" width="2.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="297.87" y="447.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (141,414,140 samples, 0.79%)</title><rect x="66.4" y="549" width="9.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="69.44" y="559.5" ></text>
</g>
<g >
<title>sim::SendData::operator (454,545,450 samples, 2.53%)</title><rect x="1091.1" y="533" width="29.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1094.06" y="543.5" >si..</text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.34%)</title><rect x="25.3" y="453" width="4.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="28.27" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="277" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="178.7" y="517" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="181.67" y="527.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (131,313,130 samples, 0.73%)</title><rect x="31.2" y="517" width="8.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="34.25" y="527.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="286.9" y="501" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="289.90" y="511.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.17%)</title><rect x="840.7" y="485" width="2.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="843.71" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.51%)</title><rect x="1182.0" y="421" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.03" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::FlagInfo&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::FlagInfo&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,101,010 samples, 0.06%)</title><rect x="306.8" y="485" width="0.7" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="309.83" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (20,202,020 samples, 0.11%)</title><rect x="287.6" y="501" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="290.57" y="511.5" ></text>
</g>
<g >
<title>operator new (131,313,130 samples, 0.73%)</title><rect x="1049.2" y="501" width="8.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1052.22" y="511.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.23%)</title><rect x="292.2" y="453" width="2.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="295.22" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1138.9" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.87" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="207.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::set_flag (10,101,010 samples, 0.06%)</title><rect x="289.6" y="485" width="0.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="292.56" y="495.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.06%)</title><rect x="172.7" y="485" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="175.69" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (434,343,430 samples, 2.42%)</title><rect x="24.6" y="565" width="28.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="27.61" y="575.5" >si..</text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.06%)</title><rect x="1182.0" y="405" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.03" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1145.5" y="485" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.51" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="24.6" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.61" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="213" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="304.8" y="453" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="307.83" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 1.07%)</title><rect x="11.3" y="517" width="12.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.33" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="992.8" y="501" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="995.78" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="229" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="357" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 0.79%)</title><rect x="1130.2" y="517" width="9.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1133.24" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.18%)</title><rect x="10.7" y="565" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.66" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="389" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="148.8" y="485" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="151.78" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1184.0" y="277" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.02" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="39.2" y="485" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="42.22" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (212,121,210 samples, 1.18%)</title><rect x="1125.6" y="533" width="13.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1128.59" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.0" y="613" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1120.3" y="501" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1123.28" y="511.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.23%)</title><rect x="379.2" y="501" width="2.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="382.21" y="511.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 1.13%)</title><rect x="10.7" y="549" width="13.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.66" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.34%)</title><rect x="25.3" y="357" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.27" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (50,505,050 samples, 0.28%)</title><rect x="280.9" y="485" width="3.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="283.93" y="495.5" ></text>
</g>
<g >
<title>nons (17,949,494,770 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >nons</text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.51%)</title><rect x="603.0" y="501" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="605.99" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="25.9" y="245" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.94" y="255.5" ></text>
</g>
<g >
<title>sim::Host::process (515,151,510 samples, 2.87%)</title><rect x="276.3" y="517" width="33.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="279.28" y="527.5" >si..</text>
</g>
<g >
<title>sim::Link::Arrive::operator (484,848,480 samples, 2.70%)</title><rect x="146.1" y="533" width="31.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="149.13" y="543.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.5" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.51" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main (17,939,393,760 samples, 99.94%)</title><rect x="10.7" y="613" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.66" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.56%)</title><rect x="162.7" y="437" width="6.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="165.73" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1137.88" y="239.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.06%)</title><rect x="1118.9" y="485" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1121.95" y="495.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (161,616,160 samples, 0.90%)</title><rect x="297.5" y="501" width="10.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="300.53" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.17%)</title><rect x="1170.1" y="437" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1173.08" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.06%)</title><rect x="24.6" y="517" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="27.61" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.90%)</title><rect x="41.9" y="437" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.87" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.23%)</title><rect x="1169.4" y="469" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.41" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1152.1" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1155.15" y="479.5" ></text>
</g>
<g >
<title>sim::Event::get_time (70,707,070 samples, 0.39%)</title><rect x="61.8" y="549" width="4.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="64.80" y="559.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::SimplePacketQueue (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="485" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.67" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="309" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1185.70" y="319.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.90%)</title><rect x="845.4" y="469" width="10.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="848.36" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1151.5" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.49" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (30,303,030 samples, 0.17%)</title><rect x="1186.0" y="389" width="2.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.02" y="399.5" ></text>
</g>
<g >
<title>sim::Link::transmit (20,202,020 samples, 0.11%)</title><rect x="179.3" y="517" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="182.33" y="527.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (141,414,140 samples, 0.79%)</title><rect x="327.4" y="517" width="9.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="330.41" y="527.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="233.8" y="517" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="236.78" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1146.8" y="469" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1149.84" y="479.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.62%)</title><rect x="1182.0" y="565" width="7.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.03" y="575.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (717,171,710 samples, 4.00%)</title><rect x="875.2" y="501" width="47.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="878.24" y="511.5" >sim:..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="864.0" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="866.96" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="1097.7" y="469" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1100.70" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1173.4" y="485" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.40" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="277" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.70" y="287.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.39%)</title><rect x="1148.2" y="517" width="4.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1151.17" y="527.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (20,202,020 samples, 0.11%)</title><rect x="51.2" y="421" width="1.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="54.17" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.7" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.70" y="175.5" ></text>
</g>
</g>
</svg>
