<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="278.7" y="405" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="281.71" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="33.1" y="421" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="36.13" y="431.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.09%)</title><rect x="1007.2" y="405" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1010.19" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.09%)</title><rect x="20.5" y="405" width="1.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="23.46" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="373" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.90" y="383.5" ></text>
</g>
<g >
<title>Logger::info (2,050,505,030 samples, 9.47%)</title><rect x="648.7" y="389" width="111.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="651.73" y="399.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="149" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="159.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1187.8" y="245" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.80" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="351.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="393.8" y="405" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="396.79" y="415.5" ></text>
</g>
<g >
<title>sim::Event::Event (30,303,030 samples, 0.14%)</title><rect x="334.3" y="421" width="1.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="337.32" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="175.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.23%)</title><rect x="281.5" y="373" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="284.46" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="299.1" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="302.08" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.31%)</title><rect x="20.5" y="469" width="15.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="23.46" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>Logger::warn (40,404,040 samples, 0.19%)</title><rect x="328.3" y="421" width="2.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="331.26" y="431.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.14%)</title><rect x="1185.6" y="245" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.59" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="277" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.19%)</title><rect x="813.4" y="389" width="2.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="816.37" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1177.9" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.89" y="383.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.14%)</title><rect x="1126.1" y="437" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1129.13" y="447.5" ></text>
</g>
<g >
<title>_IO_file_fopen (80,808,080 samples, 0.37%)</title><rect x="21.6" y="373" width="4.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="24.56" y="383.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.89%)</title><rect x="1094.2" y="389" width="10.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1097.19" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.09%)</title><rect x="33.1" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="36.13" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.30" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="297.4" y="421" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="300.43" y="431.5" ></text>
</g>
<g >
<title>cfree (707,070,700 samples, 3.27%)</title><rect x="233.0" y="437" width="38.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="236.01" y="447.5" >cfree</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="133" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="296.3" y="405" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="299.33" y="415.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="443.9" y="389" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="446.90" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="293" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="303.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (787,878,780 samples, 3.64%)</title><rect x="336.0" y="421" width="42.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="338.97" y="431.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1155.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1158.31" y="239.5" ></text>
</g>
<g >
<title>Logger::warn (2,393,939,370 samples, 11.06%)</title><rect x="444.4" y="405" width="130.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="447.45" y="415.5" >Logger::warn</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="837.0" y="389" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="840.05" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="357" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="367.5" ></text>
</g>
<g >
<title>cfree (383,838,380 samples, 1.77%)</title><rect x="789.7" y="389" width="20.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="792.69" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (30,303,030 samples, 0.14%)</title><rect x="291.9" y="373" width="1.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="294.92" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1142.1" y="405" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1145.10" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.09%)</title><rect x="1186.1" y="181" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.15" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="26.0" y="421" width="0.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="28.97" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="843.7" y="373" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="846.65" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="283.1" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="286.11" y="111.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1147.30" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (121,212,120 samples, 0.56%)</title><rect x="412.0" y="421" width="6.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="414.96" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.47%)</title><rect x="27.1" y="373" width="5.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="30.07" y="383.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 0.14%)</title><rect x="43.6" y="453" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="46.59" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.12%)</title><rect x="599.7" y="389" width="13.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="602.72" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (161,616,160 samples, 0.75%)</title><rect x="1140.4" y="437" width="8.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1143.44" y="447.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.37%)</title><rect x="272.1" y="373" width="4.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="275.10" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.20" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (60,606,060 samples, 0.28%)</title><rect x="1183.9" y="293" width="3.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.94" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1117.3" y="373" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1120.32" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.23%)</title><rect x="1158.6" y="421" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1161.61" y="431.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="399.8" y="373" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="402.85" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1186.7" y="149" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.70" y="159.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="398.7" y="357" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="401.74" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1121.2" y="373" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1124.17" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.19%)</title><rect x="842.0" y="405" width="2.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="845.00" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="181" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.04" y="191.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (141,414,140 samples, 0.65%)</title><rect x="279.8" y="405" width="7.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="282.81" y="415.5" ></text>
</g>
<g >
<title>sim::Host::~Host (101,010,100 samples, 0.47%)</title><rect x="10.6" y="405" width="5.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.55" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1119.5" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1122.52" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1177.9" y="357" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.89" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (10,101,010 samples, 0.05%)</title><rect x="1179.5" y="437" width="0.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1182.54" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="287.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (111,111,110 samples, 0.51%)</title><rect x="287.5" y="389" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="290.52" y="399.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.01%)</title><rect x="1136.6" y="453" width="47.3" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1139.59" y="463.5" >sim:..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.47%)</title><rect x="27.1" y="389" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="30.07" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.07%)</title><rect x="258.9" y="421" width="12.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="261.88" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="293" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="303.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="453" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.45" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="245" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.37%)</title><rect x="16.1" y="357" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.06" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.28%)</title><rect x="1144.8" y="405" width="3.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1147.85" y="415.5" ></text>
</g>
<g >
<title>cfree (343,434,340 samples, 1.59%)</title><rect x="594.2" y="405" width="18.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="597.22" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="1118.4" y="373" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1121.42" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.23%)</title><rect x="284.8" y="373" width="2.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="287.76" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.09%)</title><rect x="838.1" y="357" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="841.15" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="271.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,767,676,620 samples, 68.22%)</title><rect x="299.6" y="437" width="805.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="302.63" y="447.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.23%)</title><rect x="23.2" y="133" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.22" y="143.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (30,303,030 samples, 0.14%)</title><rect x="911.9" y="405" width="1.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="914.93" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="840.3" y="373" width="1.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="843.35" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.09%)</title><rect x="1175.7" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.68" y="367.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (30,303,030 samples, 0.14%)</title><rect x="398.7" y="389" width="1.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="401.74" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1155.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1158.31" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="117" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="127.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="838.7" y="309" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="841.70" y="319.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="1124.5" y="405" width="1.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1127.48" y="415.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="276.0" y="341" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="278.95" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="1117.3" y="389" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1120.32" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.23%)</title><rect x="839.2" y="389" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="842.25" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="389" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="373" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.20" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.14%)</title><rect x="1185.6" y="261" width="1.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1188.59" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1160.8" y="405" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1163.82" y="415.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.23%)</title><rect x="612.9" y="405" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="615.94" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.09%)</title><rect x="1184.5" y="229" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.49" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="32.6" y="389" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="35.58" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.09%)</title><rect x="35.9" y="469" width="1.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="38.88" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.04" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="282.6" y="133" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.56" y="143.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.61%)</title><rect x="1115.7" y="405" width="7.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1118.66" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="213" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="223.5" ></text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.05%)</title><rect x="295.8" y="405" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="298.78" y="415.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (242,424,240 samples, 1.12%)</title><rect x="747.3" y="373" width="13.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="750.29" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="437" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.90" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="325" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1159.2" y="405" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.16" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="282.6" y="117" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.56" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="223.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="275.4" y="325" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="278.40" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="32.0" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.03" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.4" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.42" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.84%)</title><rect x="10.6" y="469" width="9.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.55" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.03" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (151,515,150 samples, 0.70%)</title><rect x="287.5" y="405" width="8.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="290.52" y="415.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.37%)</title><rect x="16.1" y="389" width="4.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.06" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="207.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.09%)</title><rect x="1175.7" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.68" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.09%)</title><rect x="1157.5" y="421" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1160.51" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="223.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (363,636,360 samples, 1.68%)</title><rect x="277.6" y="437" width="19.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="280.61" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.05%)</title><rect x="1148.2" y="421" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1151.15" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.20" y="415.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="34.8" y="421" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="37.78" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="341" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.19%)</title><rect x="293.6" y="389" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="296.57" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="207.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="271.5" y="421" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="274.55" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 0.19%)</title><rect x="297.4" y="437" width="2.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="300.43" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="34.2" y="405" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="37.23" y="415.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.05%)</title><rect x="1178.4" y="437" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1181.44" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="395.4" y="389" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="398.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,242,424,230 samples, 5.74%)</title><rect x="844.2" y="405" width="67.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="847.20" y="415.5" >sim::Ro..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (161,616,160 samples, 0.75%)</title><rect x="1168.0" y="421" width="8.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1170.97" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="276.5" y="373" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="279.50" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (20,202,020 samples, 0.09%)</title><rect x="1187.2" y="293" width="1.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.25" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="165" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="213" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.14%)</title><rect x="1122.8" y="405" width="1.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1125.82" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="255.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::create_new_data_packet (90,909,090 samples, 0.42%)</title><rect x="272.1" y="421" width="5.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="275.10" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.05%)</title><rect x="1160.3" y="405" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1163.27" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="277" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="284.2" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="287.21" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (101,010,100 samples, 0.47%)</title><rect x="400.9" y="421" width="5.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="403.95" y="431.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.23%)</title><rect x="615.7" y="405" width="2.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="618.69" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.23%)</title><rect x="281.5" y="341" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="284.46" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="261" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1190.25" y="271.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="626.7" y="405" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="629.71" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (60,606,060 samples, 0.28%)</title><rect x="1183.9" y="277" width="3.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.94" y="287.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.09%)</title><rect x="330.5" y="421" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="333.47" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="403.40" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.19%)</title><rect x="1120.6" y="389" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1123.62" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.23%)</title><rect x="1145.4" y="357" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.40" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::~TcpFlow (80,808,080 samples, 0.37%)</title><rect x="16.1" y="405" width="4.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="19.06" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1186.7" y="165" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.70" y="175.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="399.3" y="357" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="402.30" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.09%)</title><rect x="396.0" y="373" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="398.99" y="383.5" ></text>
</g>
<g >
<title>malloc (121,212,120 samples, 0.56%)</title><rect x="620.1" y="389" width="6.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="623.10" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.19%)</title><rect x="1161.4" y="421" width="2.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1164.37" y="431.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="279.3" y="405" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="282.26" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1153.7" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.66" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="275.4" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="278.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="261" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1159.7" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.72" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1159.7" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.72" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (232,323,230 samples, 1.07%)</title><rect x="562.3" y="389" width="12.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="565.28" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.09%)</title><rect x="231.9" y="437" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="234.90" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.14%)</title><rect x="326.6" y="421" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="329.61" y="431.5" ></text>
</g>
<g >
<title>sim::Event::get_time (20,202,020 samples, 0.09%)</title><rect x="45.2" y="453" width="1.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="48.24" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1177.9" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.89" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.51%)</title><rect x="1183.9" y="469" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.94" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.42%)</title><rect x="27.6" y="341" width="5.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.62" y="351.5" ></text>
</g>
<g >
<title>sim::Generate::operator (111,111,110 samples, 0.51%)</title><rect x="271.5" y="437" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="274.55" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="396.0" y="357" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="398.99" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="239.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (232,323,230 samples, 1.07%)</title><rect x="1113.5" y="421" width="12.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1116.46" y="431.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="245" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.25" y="255.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::try_to_put_data_to_device (10,101,010 samples, 0.05%)</title><rect x="277.1" y="421" width="0.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="280.06" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="838.7" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="841.70" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="197" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 0.14%)</title><rect x="1183.9" y="261" width="1.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1186.94" y="271.5" ></text>
</g>
<g >
<title>_start (21,636,363,420 samples, 99.95%)</title><rect x="10.6" y="533" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.55" y="543.5" >_start</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.37%)</title><rect x="1183.9" y="309" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.31%)</title><rect x="20.5" y="453" width="15.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="23.46" y="463.5" ></text>
</g>
<g >
<title>sim::SendData::operator (232,323,230 samples, 1.07%)</title><rect x="1113.5" y="437" width="12.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1116.46" y="447.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="1113.5" y="405" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1116.46" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.4" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.42" y="79.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.09%)</title><rect x="273.8" y="325" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="276.75" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="271.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (111,111,110 samples, 0.51%)</title><rect x="27.1" y="421" width="6.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="30.07" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="394.3" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="397.34" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.45" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="309" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="319.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.28%)</title><rect x="1154.2" y="421" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.21" y="431.5" ></text>
</g>
<g >
<title>operator new (151,515,150 samples, 0.70%)</title><rect x="618.4" y="405" width="8.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="621.45" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.09%)</title><rect x="1114.6" y="389" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1117.56" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.03" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="397.6" y="389" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="400.64" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="40.3" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.28" y="463.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1153.7" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1156.66" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="149" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="159.5" ></text>
</g>
<g >
<title>operator new (333,333,330 samples, 1.54%)</title><rect x="815.6" y="389" width="18.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="818.57" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="277" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1120.1" y="389" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1123.07" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="245" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="255.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="1122.3" y="357" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1125.27" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="26.5" y="405" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="29.52" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.09%)</title><rect x="294.7" y="373" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="297.68" y="383.5" ></text>
</g>
<g >
<title>malloc (292,929,290 samples, 1.35%)</title><rect x="817.8" y="373" width="15.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="820.77" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="197" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1119.5" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1122.52" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="239.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.09%)</title><rect x="833.7" y="389" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="836.74" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="357" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1191.90" y="367.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.23%)</title><rect x="810.6" y="389" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="813.62" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.19%)</title><rect x="440.6" y="405" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="443.59" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="394.9" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="397.89" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1116.8" y="389" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1119.77" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="272.1" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="275.10" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="373" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.03" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="283.1" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="286.11" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="383.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.23%)</title><rect x="331.6" y="421" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="334.57" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.09%)</title><rect x="274.9" y="341" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="277.85" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.37%)</title><rect x="21.6" y="309" width="4.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.56" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.84%)</title><rect x="10.6" y="485" width="9.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.55" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="165" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="293" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="229" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="239.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.09%)</title><rect x="835.9" y="405" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="838.94" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="357" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,080,808,070 samples, 4.99%)</title><rect x="46.3" y="453" width="59.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="49.34" y="463.5" >sim::E..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 0.09%)</title><rect x="398.7" y="373" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="401.74" y="383.5" ></text>
</g>
<g >
<title>sim::Link::arrive (363,636,360 samples, 1.68%)</title><rect x="277.6" y="421" width="19.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="280.61" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="181" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.03" y="303.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (272,727,270 samples, 1.26%)</title><rect x="378.9" y="421" width="14.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="381.92" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="400.4" y="373" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="403.40" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="273.2" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="276.20" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1138.8" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.79" y="447.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (181,818,180 samples, 0.84%)</title><rect x="10.6" y="453" width="9.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.55" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.09%)</title><rect x="1166.9" y="421" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1169.87" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="405" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1166.02" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="299.1" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="302.08" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.14%)</title><rect x="1175.1" y="405" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1178.13" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (30,303,030 samples, 0.14%)</title><rect x="1176.8" y="421" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.78" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="18.8" y="341" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.81" y="351.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.09%)</title><rect x="20.5" y="357" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="23.46" y="367.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="421" width="5.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.94" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.4" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.42" y="95.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="389" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.03" y="399.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.09%)</title><rect x="1175.7" y="373" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.68" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (80,808,080 samples, 0.37%)</title><rect x="1143.7" y="421" width="4.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1146.75" y="431.5" ></text>
</g>
<g >
<title>_IO_file_open (80,808,080 samples, 0.37%)</title><rect x="21.6" y="357" width="4.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="24.56" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="290.3" y="373" width="1.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="293.27" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,717,171,700 samples, 7.93%)</title><rect x="913.6" y="405" width="93.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="916.58" y="415.5" >std::_Rb_tr..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="239.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="437" width="5.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.94" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="400.4" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="403.40" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1114.0" y="405" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1117.01" y="415.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.09%)</title><rect x="843.1" y="389" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="846.10" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="421" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.32" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1121.7" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1124.72" y="367.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (60,606,060 samples, 0.28%)</title><rect x="284.2" y="389" width="3.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="287.21" y="399.5" ></text>
</g>
<g >
<title>all (21,646,464,430 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,777,777,670 samples, 49.79%)</title><rect x="420.8" y="421" width="587.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="423.77" y="431.5" >sim::Switch::process</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="15.5" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.51" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.09%)</title><rect x="1186.1" y="213" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.15" y="223.5" ></text>
</g>
<g >
<title>sim::Host::process (131,313,130 samples, 0.61%)</title><rect x="393.8" y="421" width="7.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="396.79" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.63%)</title><rect x="574.9" y="405" width="19.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.95" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (181,818,180 samples, 0.84%)</title><rect x="10.6" y="437" width="9.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.55" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.30" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="229" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.09%)</title><rect x="20.5" y="421" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="23.46" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="245" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="836.5" y="389" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="839.50" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.28%)</title><rect x="29.3" y="325" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.27" y="335.5" ></text>
</g>
<g >
<title>sim::Generate::operator (10,101,010 samples, 0.05%)</title><rect x="105.3" y="453" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="108.26" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="399.3" y="341" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="402.30" y="351.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.45" y="447.5" ></text>
</g>
<g >
<title>sim::Link::transmit (30,303,030 samples, 0.14%)</title><rect x="298.0" y="421" width="1.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="300.98" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="271.5" ></text>
</g>
<g >
<title>main (21,454,545,240 samples, 99.11%)</title><rect x="20.5" y="485" width="1169.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="23.46" y="495.5" >main</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (40,404,040 samples, 0.19%)</title><rect x="418.6" y="421" width="2.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="421.57" y="431.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.23%)</title><rect x="1145.4" y="373" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.40" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="274.9" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="277.85" y="335.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1148.7" y="421" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1151.70" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.03" y="351.5" ></text>
</g>
<g >
<title>sim::Process::~Process (161,616,160 samples, 0.75%)</title><rect x="1104.7" y="437" width="8.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1107.65" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="397.1" y="373" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="400.09" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::try_to_put_data_to_device (90,909,090 samples, 0.42%)</title><rect x="272.1" y="405" width="5.0" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="275.10" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1139.9" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.89" y="447.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.23%)</title><rect x="40.8" y="453" width="2.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="43.84" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1119.0" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1121.97" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="181" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="191.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1173.5" y="405" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.48" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1159.7" y="389" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.72" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="26.5" y="421" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="29.52" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="398.2" y="405" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="401.19" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1183.9" y="245" width="1.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.94" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.09%)</title><rect x="1182.8" y="437" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1185.84" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (80,808,080 samples, 0.37%)</title><rect x="21.6" y="421" width="4.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="24.56" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="272.7" y="357" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="275.65" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.42%)</title><rect x="27.6" y="357" width="5.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.62" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.6" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.60" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (21,040,403,830 samples, 97.20%)</title><rect x="37.0" y="469" width="1146.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="39.98" y="479.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (90,909,090 samples, 0.42%)</title><rect x="272.1" y="389" width="5.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="275.10" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="839.8" y="373" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="842.80" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.05%)</title><rect x="1179.0" y="437" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1181.99" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.09%)</title><rect x="1141.0" y="421" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1143.99" y="431.5" ></text>
</g>
<g >
<title>sim::Process::~Process (212,121,210 samples, 0.98%)</title><rect x="113.5" y="453" width="11.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="116.52" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.09%)</title><rect x="1186.1" y="197" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.15" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (535,353,530 samples, 2.47%)</title><rect x="760.5" y="389" width="29.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="763.51" y="399.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.28%)</title><rect x="1154.2" y="389" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.21" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.09%)</title><rect x="1121.7" y="373" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1124.72" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1165.8" y="405" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1168.77" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="325" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (21,636,363,420 samples, 99.95%)</title><rect x="10.6" y="517" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.55" y="527.5" >__libc_start_main</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1155.9" y="373" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.86" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (111,111,110 samples, 0.51%)</title><rect x="27.1" y="405" width="6.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="30.07" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (282,828,280 samples, 1.31%)</title><rect x="20.5" y="437" width="15.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="23.46" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="35.3" y="421" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="38.33" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="389" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.90" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1116.8" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1119.77" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.37%)</title><rect x="21.6" y="325" width="4.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.56" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.03%)</title><rect x="798.5" y="373" width="12.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="801.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1153.7" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.66" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,808,080,770 samples, 17.59%)</title><rect x="627.3" y="405" width="207.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="630.26" y="415.5" >sim::Link::get_packet</text>
</g>
<g >
<title>sim::Link::get_packet (101,010,100 samples, 0.47%)</title><rect x="406.5" y="421" width="5.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="409.45" y="431.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (141,414,140 samples, 0.65%)</title><rect x="1127.8" y="437" width="7.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1130.78" y="447.5" ></text>
</g>
<g >
<title>open64 (80,808,080 samples, 0.37%)</title><rect x="21.6" y="341" width="4.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="24.56" y="351.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.23%)</title><rect x="1145.4" y="389" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1148.40" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="1117.9" y="389" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1120.87" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="181" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="396.5" y="357" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="399.54" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="309" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="405" width="5.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.94" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.28%)</title><rect x="22.7" y="149" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.66" y="159.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (50,505,050 samples, 0.23%)</title><rect x="281.5" y="389" width="2.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="284.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="23.8" y="117" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.77" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="405" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.90" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="400.4" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.40" y="271.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="453" width="5.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.94" y="463.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.05%)</title><rect x="1142.1" y="421" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1145.10" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1143.2" y="421" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1146.20" y="431.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="276.0" y="357" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="278.95" y="367.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.09%)</title><rect x="1114.6" y="405" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1117.56" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="282.0" y="261" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="285.01" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="396.5" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="399.54" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (21,636,363,420 samples, 99.95%)</title><rect x="10.6" y="501" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.55" y="511.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.23%)</title><rect x="273.2" y="357" width="2.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="276.20" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1142.6" y="421" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1145.65" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.05%)</title><rect x="400.4" y="389" width="0.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="403.40" y="399.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.23%)</title><rect x="281.5" y="357" width="2.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="284.46" y="367.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (535,353,530 samples, 2.47%)</title><rect x="1149.3" y="437" width="29.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1152.25" y="447.5" >si..</text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.09%)</title><rect x="834.8" y="405" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="837.84" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="394.9" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="397.89" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (18,555,555,370 samples, 85.72%)</title><rect x="125.1" y="453" width="1011.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="128.08" y="463.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="421" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.90" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="341" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="351.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1139.3" y="437" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1142.34" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="373" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="383.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (80,808,080 samples, 0.37%)</title><rect x="21.6" y="405" width="4.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="24.56" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="273.2" y="341" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="276.20" y="351.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.28%)</title><rect x="1154.2" y="405" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.21" y="415.5" ></text>
</g>
<g >
<title>operator new (232,323,230 samples, 1.07%)</title><rect x="1092.0" y="405" width="12.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1094.99" y="415.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="296.9" y="405" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="299.88" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="335.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,767,676,750 samples, 8.17%)</title><rect x="1008.3" y="421" width="96.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1011.29" y="431.5" >void sim::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.28%)</title><rect x="22.7" y="165" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.66" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="837.6" y="373" width="1.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="840.60" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="20.5" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="23.46" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.37%)</title><rect x="16.1" y="373" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.06" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (50,505,050 samples, 0.23%)</title><rect x="1163.6" y="421" width="2.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1166.57" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.23%)</title><rect x="1180.1" y="437" width="2.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.09" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (40,404,040 samples, 0.19%)</title><rect x="398.7" y="405" width="2.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="401.74" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1119.5" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1122.52" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1174.6" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.58" y="287.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.09%)</title><rect x="1125.0" y="389" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1128.03" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="213" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="223.5" ></text>
</g>
<g >
<title>nons (21,646,464,430 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >nons</text>
</g>
<g >
<title>fopen (80,808,080 samples, 0.37%)</title><rect x="21.6" y="389" width="4.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="24.56" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1187.8" y="261" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.80" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="207.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.09%)</title><rect x="1135.5" y="437" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1138.49" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.05%)</title><rect x="291.4" y="357" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="294.37" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="1154.2" y="261" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.21" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.42%)</title><rect x="837.0" y="405" width="5.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="840.05" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="838.7" y="341" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="841.70" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 0.84%)</title><rect x="10.6" y="421" width="9.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.55" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="309" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.35" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.4" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.42" y="63.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.28%)</title><rect x="645.4" y="389" width="3.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="648.43" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="295.2" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="298.23" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.23%)</title><rect x="395.4" y="405" width="2.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="398.44" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="229" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.25" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.42%)</title><rect x="1183.9" y="325" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.94" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="197" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.04" y="207.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="213" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.25" y="223.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="453" width="0.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.90" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.4" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.42" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.09%)</title><rect x="1186.1" y="229" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.15" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1187.8" y="277" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.80" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.1" y="197" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.11" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.09%)</title><rect x="1174.0" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.14%)</title><rect x="442.8" y="405" width="1.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="445.80" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.05%)</title><rect x="1187.2" y="277" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1190.25" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.09%)</title><rect x="1119.0" y="357" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1121.97" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="283.7" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="286.66" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="400.4" y="341" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="403.40" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1163.0" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.02" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.09%)</title><rect x="20.5" y="389" width="1.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="23.46" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.05%)</title><rect x="1187.8" y="229" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1190.80" y="239.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1177.9" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.89" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1091.4" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.44" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1165.8" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.77" y="399.5" ></text>
</g>
<g >
<title>sim::Process::operator (141,414,140 samples, 0.65%)</title><rect x="105.8" y="453" width="7.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="108.81" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1176.2" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.23" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.09%)</title><rect x="20.5" y="373" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="23.46" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="32.0" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.03" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.1" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.05" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="288.6" y="373" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="291.62" y="383.5" ></text>
</g>
</g>
</svg>
