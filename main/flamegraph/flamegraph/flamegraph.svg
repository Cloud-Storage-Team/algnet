<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1654.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1637" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1637" > </text>
<g id="frames">
<g >
<title>YAML::Stream::peek (10,101,010 samples, 0.48%)</title><rect x="830.4" y="1285" width="5.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="833.38" y="1295.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 0.95%)</title><rect x="695.5" y="1269" width="11.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="698.52" y="1279.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (20,202,020 samples, 0.95%)</title><rect x="695.5" y="1237" width="11.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="698.52" y="1247.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (20,202,020 samples, 0.95%)</title><rect x="571.9" y="1397" width="11.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="574.90" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="293" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1141" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="15.6" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.62" y="1407.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.95%)</title><rect x="678.7" y="1317" width="11.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="681.67" y="1327.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="875.3" y="1189" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.33" y="1199.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.95%)</title><rect x="678.7" y="1333" width="11.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="681.67" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="741" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="751.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1493" width="11.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="18.62" y="1503.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="555.0" y="1445" width="11.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="558.05" y="1455.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1509" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.62" y="1519.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.48%)</title><rect x="459.5" y="1461" width="5.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="462.52" y="1471.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="785.4" y="1269" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="788.43" y="1279.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1221" width="5.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1018.81" y="1231.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="26.9" y="1445" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.86" y="1455.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1429" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1024.43" y="1439.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1205" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1215.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.48%)</title><rect x="476.4" y="1381" width="5.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="479.38" y="1391.5" ></text>
</g>
<g >
<title>nons (2,121,212,100 samples, 100.00%)</title><rect x="10.0" y="1589" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="1599.5" >nons</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1413" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1423.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.43%)</title><rect x="954.0" y="1141" width="16.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="957.00" y="1151.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (313,131,310 samples, 14.76%)</title><rect x="156.1" y="1461" width="174.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="159.10" y="1471.5" >std::ostream&amp; std::ost..</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.48%)</title><rect x="510.1" y="1445" width="5.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="513.10" y="1455.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="909.0" y="1253" width="5.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="912.05" y="1263.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1429" width="11.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="355.76" y="1439.5" ></text>
</g>
<g >
<title>sim::RoundRobinMPLB::add_flow (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1413" width="5.6" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1181.76" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1285" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1295.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="577.5" y="1317" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="580.52" y="1327.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (515,151,510 samples, 24.29%)</title><rect x="734.9" y="1333" width="286.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="737.86" y="1343.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="501" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 1.90%)</title><rect x="566.3" y="1429" width="22.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="569.29" y="1439.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1157" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1167.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.48%)</title><rect x="976.5" y="1189" width="5.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="979.48" y="1199.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 1.90%)</title><rect x="864.1" y="1269" width="22.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="867.10" y="1279.5" >Y..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.48%)</title><rect x="678.7" y="1269" width="5.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="681.67" y="1279.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.48%)</title><rect x="347.1" y="1413" width="5.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="350.14" y="1423.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 0.95%)</title><rect x="695.5" y="1253" width="11.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="698.52" y="1263.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1381" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1391.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1317" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1327.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 2.38%)</title><rect x="605.6" y="1493" width="28.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="608.62" y="1503.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1125" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1135.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 1.90%)</title><rect x="864.1" y="1253" width="22.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="867.10" y="1263.5" >Y..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 31.43%)</title><rect x="650.6" y="1413" width="370.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="653.57" y="1423.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (979,797,970 samples, 46.19%)</title><rect x="645.0" y="1509" width="545.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="647.95" y="1519.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>cfree (30,303,030 samples, 1.43%)</title><rect x="122.4" y="1445" width="16.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="125.38" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="933" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="943.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1205" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1215.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.48%)</title><rect x="139.2" y="1461" width="5.7" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="142.24" y="1471.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (50,505,050 samples, 2.38%)</title><rect x="403.3" y="1477" width="28.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="406.33" y="1487.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="532.6" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="535.57" y="1407.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1237" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1247.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.43%)</title><rect x="493.2" y="1445" width="16.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="496.24" y="1455.5" ></text>
</g>
<g >
<title>sim::Process::~Process (10,101,010 samples, 0.48%)</title><rect x="380.9" y="1493" width="5.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="383.86" y="1503.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="785.4" y="1221" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="788.43" y="1231.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="982.1" y="1157" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.10" y="1167.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (30,303,030 samples, 1.43%)</title><rect x="364.0" y="1493" width="16.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="367.00" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1333" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1343.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (282,828,280 samples, 13.33%)</title><rect x="864.1" y="1285" width="157.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="867.10" y="1295.5" >YAML::SingleDocParse..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1173" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="906.43" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="684.3" y="1253" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="687.29" y="1263.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.43%)</title><rect x="122.4" y="1429" width="16.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="125.38" y="1439.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (30,303,030 samples, 1.43%)</title><rect x="347.1" y="1461" width="16.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="350.14" y="1471.5" ></text>
</g>
<g >
<title>all (2,121,212,100 samples, 100%)</title><rect x="10.0" y="1605" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1615.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (121,212,120 samples, 5.71%)</title><rect x="1049.5" y="1397" width="67.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1052.52" y="1407.5" >std::_S..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1125" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1135.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 4.29%)</title><rect x="1133.8" y="1445" width="50.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1136.81" y="1455.5" >sim::..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1189" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1221" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1231.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (40,404,040 samples, 1.90%)</title><rect x="566.3" y="1445" width="22.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="569.29" y="1455.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1365" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1375.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1333" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1343.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.43%)</title><rect x="847.2" y="1285" width="16.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="850.24" y="1295.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1189" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="906.43" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1285" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="549" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1349" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="647.95" y="1359.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1141" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1151.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [3]&gt; (10,101,010 samples, 0.48%)</title><rect x="1167.5" y="1381" width="5.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1170.52" y="1391.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1381" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="647.95" y="1391.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1461" width="11.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.62" y="1471.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.48%)</title><rect x="937.1" y="1157" width="5.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="940.14" y="1167.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.48%)</title><rect x="347.1" y="1429" width="5.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.14" y="1439.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.48%)</title><rect x="779.8" y="1253" width="5.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="782.81" y="1263.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 1.43%)</title><rect x="588.8" y="1445" width="16.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="591.76" y="1455.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.48%)</title><rect x="673.0" y="1349" width="5.7" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="676.05" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="165" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="175.5" ></text>
</g>
<g >
<title>sim::SendData::operator (70,707,070 samples, 3.33%)</title><rect x="566.3" y="1477" width="39.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="569.29" y="1487.5" >sim..</text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1445" width="5.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="147.86" y="1455.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1205" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1215.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1093" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1103.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 10.95%)</title><rect x="195.4" y="1381" width="129.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="198.43" y="1391.5" >[libc.so.6]</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (20,202,020 samples, 0.95%)</title><rect x="1038.3" y="1381" width="11.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1041.29" y="1391.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1141" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1189" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="69" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="79.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.76%)</title><rect x="779.8" y="1317" width="56.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="782.81" y="1327.5" >YAML:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1173" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="853" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="863.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 0.95%)</title><rect x="892.2" y="1253" width="11.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="895.19" y="1263.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.95%)</title><rect x="779.8" y="1285" width="11.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="782.81" y="1295.5" ></text>
</g>
<g >
<title>YAML::LoadFile (686,868,680 samples, 32.38%)</title><rect x="645.0" y="1493" width="382.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="647.95" y="1503.5" >YAML::LoadFile</text>
</g>
<g >
<title>sim::ConnectionImpl::send_data (10,101,010 samples, 0.48%)</title><rect x="476.4" y="1429" width="5.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="479.38" y="1439.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="116.8" y="1429" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="119.76" y="1439.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (20,202,020 samples, 0.95%)</title><rect x="532.6" y="1429" width="11.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="535.57" y="1439.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.48%)</title><rect x="836.0" y="1285" width="5.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="839.00" y="1295.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="403.3" y="1413" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="406.33" y="1423.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (70,707,070 samples, 3.33%)</title><rect x="976.5" y="1237" width="39.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="979.48" y="1247.5" >YAM..</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1269" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="737.86" y="1279.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.48%)</title><rect x="847.2" y="1237" width="5.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="850.24" y="1247.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1301" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1311.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1365" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1375.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="622.5" y="1429" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="625.48" y="1439.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.95%)</title><rect x="892.2" y="1237" width="11.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="895.19" y="1247.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1445" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1024.43" y="1455.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.95%)</title><rect x="420.2" y="1429" width="11.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="423.19" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1301" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1311.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1349" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.76" y="1359.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1024.43" y="1407.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="38.1" y="1461" width="11.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="41.10" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1013" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1023.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.48%)</title><rect x="622.5" y="1445" width="5.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="625.48" y="1455.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.48%)</title><rect x="482.0" y="1429" width="5.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="485.00" y="1439.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1237" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1247.5" >i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="53" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="63.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="864.1" y="1205" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="867.10" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="181" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1093" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1103.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (111,111,110 samples, 5.24%)</title><rect x="1128.2" y="1477" width="61.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1131.19" y="1487.5" >sim::Y..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (30,303,030 samples, 1.43%)</title><rect x="611.2" y="1461" width="16.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="614.24" y="1471.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1173" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1183.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="768.6" y="1269" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="771.57" y="1279.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="622.5" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="625.48" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="709" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="719.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.48%)</title><rect x="920.3" y="1205" width="5.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="923.29" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="517" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1205" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1215.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.48%)</title><rect x="105.5" y="1461" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="108.52" y="1471.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="571.9" y="1349" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="574.90" y="1359.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="852.9" y="1205" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="855.86" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="149" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1253" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1263.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 4.29%)</title><rect x="1133.8" y="1461" width="50.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1136.81" y="1471.5" >std::..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="1156.3" y="1413" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.29" y="1423.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.48%)</title><rect x="335.9" y="1477" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="338.90" y="1487.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1173" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.38%)</title><rect x="942.8" y="1173" width="28.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="945.76" y="1183.5" >i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="37" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="789" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1205" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1215.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1173" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1183.5" >i..</text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.48%)</title><rect x="487.6" y="1429" width="5.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="490.62" y="1439.5" ></text>
</g>
<g >
<title>sim::Switch::process (101,010,100 samples, 4.76%)</title><rect x="487.6" y="1461" width="56.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="490.62" y="1471.5" >sim::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1221" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1231.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1477" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1487.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="875.3" y="1221" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.33" y="1231.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1301" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="389" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="906.43" y="1135.5" ></text>
</g>
<g >
<title>YAML::Stream::AdvanceCurrent (10,101,010 samples, 0.48%)</title><rect x="931.5" y="1173" width="5.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="934.52" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="858.5" y="1189" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="861.48" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1045" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1055.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1333" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1343.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1301" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1311.5" ></text>
</g>
<g >
<title>sim::Host::process (30,303,030 samples, 1.43%)</title><rect x="470.8" y="1461" width="16.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="473.76" y="1471.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.33%)</title><rect x="791.0" y="1285" width="39.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="794.05" y="1295.5" >YAM..</text>
</g>
<g >
<title>sim::Host::send_packet (70,707,070 samples, 3.33%)</title><rect x="566.3" y="1461" width="39.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="569.29" y="1471.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1381" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1391.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (90,909,090 samples, 4.29%)</title><rect x="920.3" y="1237" width="50.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="923.29" y="1247.5" >YAML:..</text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1461" width="5.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="147.86" y="1471.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1381" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.76" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1269" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1279.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1221" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1231.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.48%)</title><rect x="431.4" y="1445" width="5.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="434.43" y="1455.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.48%)</title><rect x="1117.0" y="1413" width="5.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1119.95" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1413" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1423.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.38%)</title><rect x="706.8" y="1269" width="28.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="709.76" y="1279.5" >i..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1237" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="737.86" y="1247.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1413" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1024.43" y="1423.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1301" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="664.81" y="1311.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1429" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="325" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1349" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1359.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (20,202,020 samples, 0.95%)</title><rect x="819.1" y="1269" width="11.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="822.14" y="1279.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 1.43%)</title><rect x="656.2" y="1333" width="16.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="659.19" y="1343.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (80,808,080 samples, 3.81%)</title><rect x="925.9" y="1205" width="45.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="928.90" y="1215.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="358.4" y="1157" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="361.38" y="1167.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1157" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1167.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1189" width="5.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1018.81" y="1199.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (595,959,590 samples, 28.10%)</title><rect x="689.9" y="1349" width="331.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="692.90" y="1359.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.48%)</title><rect x="633.7" y="1509" width="5.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="636.71" y="1519.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 1.90%)</title><rect x="993.3" y="1205" width="22.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="996.33" y="1215.5" >Y..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="555.0" y="1429" width="11.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="558.05" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="965" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="975.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 1.43%)</title><rect x="976.5" y="1205" width="16.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="979.48" y="1215.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.48%)</title><rect x="841.6" y="1285" width="5.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="844.62" y="1295.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1109" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1119.5" ></text>
</g>
<g >
<title>main (2,090,909,070 samples, 98.57%)</title><rect x="26.9" y="1525" width="1163.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="29.86" y="1535.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1301" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1311.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (131,313,130 samples, 6.19%)</title><rect x="1117.0" y="1493" width="73.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1119.95" y="1503.5" >std::_Fu..</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.48%)</title><rect x="847.2" y="1253" width="5.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="850.24" y="1263.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1173" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="900.81" y="1183.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (676,767,670 samples, 31.90%)</title><rect x="645.0" y="1445" width="376.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="647.95" y="1455.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>sim::TcpFlow::update (30,303,030 samples, 1.43%)</title><rect x="470.8" y="1445" width="16.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="473.76" y="1455.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="319.0" y="1333" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="322.05" y="1343.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1189" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1199.5" >i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1141" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1151.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (262,626,260 samples, 12.38%)</title><rect x="178.6" y="1429" width="146.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="181.57" y="1439.5" >[libstdc++.so.6.0...</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="1161.9" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.90" y="1407.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1077" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1087.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (30,303,030 samples, 1.43%)</title><rect x="403.3" y="1445" width="16.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="406.33" y="1455.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1135.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1397" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1407.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1301" width="11.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="737.86" y="1311.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 1.90%)</title><rect x="1094.5" y="1317" width="22.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1097.48" y="1327.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="661" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="38.1" y="1445" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.10" y="1455.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (606,060,600 samples, 28.57%)</title><rect x="26.9" y="1509" width="337.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="29.86" y="1519.5" >sim::MetricsCollector::export_metrics_to_files</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (20,202,020 samples, 0.95%)</title><rect x="571.9" y="1413" width="11.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="574.90" y="1423.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 3.81%)</title><rect x="976.5" y="1253" width="44.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="979.48" y="1263.5" >YAML..</text>
</g>
<g >
<title>sim::Process::operator (202,020,200 samples, 9.52%)</title><rect x="453.9" y="1477" width="112.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="456.90" y="1487.5" >sim::Process:..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (50,505,050 samples, 2.38%)</title><rect x="791.0" y="1269" width="28.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="794.05" y="1279.5" >Y..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="768.6" y="1253" width="11.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="771.57" y="1263.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="836.0" y="1269" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="839.00" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="581" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="613" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1157" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.95%)</title><rect x="1038.3" y="1413" width="11.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1041.29" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1237" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1247.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1237" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="906.43" y="1247.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1285" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1295.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 1.43%)</title><rect x="864.1" y="1237" width="16.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="867.10" y="1247.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (70,707,070 samples, 3.33%)</title><rect x="695.5" y="1301" width="39.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="698.52" y="1311.5" >YAM..</text>
</g>
<g >
<title>sim::TcpFlow::send_data (10,101,010 samples, 0.48%)</title><rect x="476.4" y="1413" width="5.6" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="479.38" y="1423.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.95%)</title><rect x="852.9" y="1253" width="11.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="855.86" y="1263.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 0.95%)</title><rect x="864.1" y="1221" width="11.2" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="867.10" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1029" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1039.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="869.7" y="1157" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="872.71" y="1167.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.48%)</title><rect x="21.2" y="1397" width="5.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="24.24" y="1407.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (70,707,070 samples, 3.33%)</title><rect x="976.5" y="1221" width="39.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="979.48" y="1231.5" >YAM..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (30,303,030 samples, 1.43%)</title><rect x="656.2" y="1317" width="16.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="659.19" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="997" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1007.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.38%)</title><rect x="706.8" y="1253" width="28.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="709.76" y="1263.5" >i..</text>
</g>
<g >
<title>[libc.so.6] (2,111,111,090 samples, 99.52%)</title><rect x="15.6" y="1541" width="1174.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.62" y="1551.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1221" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="906.43" y="1231.5" ></text>
</g>
<g >
<title>sim::Summary::write_to_csv (10,101,010 samples, 0.48%)</title><rect x="639.3" y="1509" width="5.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="642.33" y="1519.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1397" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1407.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="358.4" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="361.38" y="1135.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 2.38%)</title><rect x="515.7" y="1445" width="28.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="518.71" y="1455.5" >s..</text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (20,202,020 samples, 0.95%)</title><rect x="420.2" y="1445" width="11.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="423.19" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="133" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1269" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1279.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.48%)</title><rect x="161.7" y="1445" width="5.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="164.71" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="405" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="415.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (20,202,020 samples, 0.95%)</title><rect x="1161.9" y="1413" width="11.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1164.90" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1429" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1439.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (101,010,100 samples, 4.76%)</title><rect x="1060.8" y="1381" width="56.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1063.76" y="1391.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1237" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1247.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="684.3" y="1285" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="687.29" y="1295.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1141" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1541" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1551.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1397" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1407.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="965.2" y="1125" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="968.24" y="1135.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.48%)</title><rect x="779.8" y="1237" width="5.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="782.81" y="1247.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1493" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1503.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.95%)</title><rect x="409.0" y="1413" width="11.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="411.95" y="1423.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (70,707,070 samples, 3.33%)</title><rect x="695.5" y="1317" width="39.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="698.52" y="1327.5" >YAM..</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 1.43%)</title><rect x="656.2" y="1349" width="16.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="659.19" y="1359.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="622.5" y="1381" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="625.48" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="357" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="358.4" y="1141" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="361.38" y="1151.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.48%)</title><rect x="937.1" y="1173" width="5.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="940.14" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1077" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1087.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (161,616,160 samples, 7.62%)</title><rect x="1027.0" y="1461" width="90.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1030.05" y="1471.5" >std::_Sp_c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1157" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1167.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1413" width="5.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="647.95" y="1423.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.48%)</title><rect x="324.7" y="1429" width="5.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="327.67" y="1439.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (30,303,030 samples, 1.43%)</title><rect x="611.2" y="1477" width="16.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="614.24" y="1487.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="347.1" y="1381" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.14" y="1391.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.48%)</title><rect x="678.7" y="1285" width="5.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="681.67" y="1295.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="723.6" y="1205" width="11.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="726.62" y="1215.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.48%)</title><rect x="15.6" y="1413" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.62" y="1423.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.48%)</title><rect x="465.1" y="1461" width="5.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="468.14" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="469" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1141" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="906.43" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1141" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="725" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="735.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.95%)</title><rect x="555.0" y="1461" width="11.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="558.05" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="421" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1317" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1327.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.95%)</title><rect x="571.9" y="1381" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="574.90" y="1391.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1221" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="245" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="358.4" y="1109" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="361.38" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1253" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1263.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1573" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1583.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.48%)</title><rect x="476.4" y="1365" width="5.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="479.38" y="1375.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1173" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1077" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1087.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="111.1" y="1461" width="11.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="114.14" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1253" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1263.5" ></text>
</g>
<g >
<title>__libc_start_main (2,111,111,090 samples, 99.52%)</title><rect x="15.6" y="1557" width="1174.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="18.62" y="1567.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1061" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1071.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="577.5" y="1333" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="580.52" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="261" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1461" width="5.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1024.43" y="1471.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.48%)</title><rect x="1021.4" y="1477" width="5.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1024.43" y="1487.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1029" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1039.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1205" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="565" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.48%)</title><rect x="779.8" y="1269" width="5.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="782.81" y="1279.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.48%)</title><rect x="678.7" y="1253" width="5.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="681.67" y="1263.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.48%)</title><rect x="330.3" y="1445" width="5.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="333.29" y="1455.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.43%)</title><rect x="999.0" y="1157" width="16.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1001.95" y="1167.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.48%)</title><rect x="701.1" y="1221" width="5.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="704.14" y="1231.5" ></text>
</g>
<g >
<title>_start (2,111,111,090 samples, 99.52%)</title><rect x="15.6" y="1573" width="1174.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="18.62" y="1583.5" >_start</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (60,606,060 samples, 2.86%)</title><rect x="746.1" y="1317" width="33.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="749.10" y="1327.5" >YA..</text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 0.95%)</title><rect x="678.7" y="1301" width="11.2" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="681.67" y="1311.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::begin (10,101,010 samples, 0.48%)</title><rect x="1133.8" y="1429" width="5.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1136.81" y="1439.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 31.43%)</title><rect x="650.6" y="1381" width="370.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="653.57" y="1391.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1189" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1199.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.48%)</title><rect x="970.9" y="1237" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="973.86" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="533" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="543.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (10,101,010 samples, 0.48%)</title><rect x="49.3" y="1477" width="5.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="52.33" y="1487.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (333,333,330 samples, 15.71%)</title><rect x="836.0" y="1317" width="185.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="839.00" y="1327.5" >YAML::SingleDocParser::H..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1173" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="869.7" y="1189" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="872.71" y="1199.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="21.2" y="1381" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.24" y="1391.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="32.5" y="1429" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.48" y="1439.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1253" width="11.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="737.86" y="1263.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1205" width="5.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1018.81" y="1215.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (50,505,050 samples, 2.38%)</title><rect x="751.7" y="1285" width="28.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="754.71" y="1295.5" >Y..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1221" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="883.95" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="869" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="879.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (242,424,240 samples, 11.43%)</title><rect x="886.6" y="1269" width="134.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="889.57" y="1279.5" >YAML::SingleDocPa..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="498.9" y="1397" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="501.86" y="1407.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.48%)</title><rect x="150.5" y="1461" width="5.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="153.48" y="1471.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1061" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1071.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 4.76%)</title><rect x="779.8" y="1301" width="56.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="782.81" y="1311.5" >YAML:..</text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 4.76%)</title><rect x="1060.8" y="1349" width="56.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1063.76" y="1359.5" >[libc..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1109" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1119.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="650.6" y="1333" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="653.57" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="229" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="987.7" y="1093" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="990.71" y="1103.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.95%)</title><rect x="892.2" y="1221" width="11.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="895.19" y="1231.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1237" width="5.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="883.95" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="373" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="987.7" y="1109" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="990.71" y="1119.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.48%)</title><rect x="650.6" y="1317" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="653.57" y="1327.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1333" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="647.95" y="1343.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="15.6" y="1381" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.62" y="1391.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1365" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.76" y="1375.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (161,616,160 samples, 7.62%)</title><rect x="1027.0" y="1493" width="90.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1030.05" y="1503.5" >YAML::Node..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1109" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1119.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1109" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1119.5" ></text>
</g>
<g >
<title>vsnprintf (262,626,260 samples, 12.38%)</title><rect x="178.6" y="1413" width="146.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="181.57" y="1423.5" >vsnprintf</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="858.5" y="1173" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="861.48" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="785.4" y="1237" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="788.43" y="1247.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.95%)</title><rect x="26.9" y="1477" width="11.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="29.86" y="1487.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1173" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1018.81" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="982.1" y="1125" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.10" y="1135.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 2.38%)</title><rect x="942.8" y="1189" width="28.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="945.76" y="1199.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1317" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1327.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 4.76%)</title><rect x="1060.8" y="1333" width="56.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1063.76" y="1343.5" >[libc..</text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (40,404,040 samples, 1.90%)</title><rect x="341.5" y="1477" width="22.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="344.52" y="1487.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="437" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1285" width="11.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="737.86" y="1295.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (80,808,080 samples, 3.81%)</title><rect x="1139.4" y="1429" width="45.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1142.43" y="1439.5" >sim:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="982.1" y="1141" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.10" y="1151.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1189" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1199.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 1.90%)</title><rect x="431.4" y="1477" width="22.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="434.43" y="1487.5" >s..</text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.48%)</title><rect x="937.1" y="1141" width="5.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="940.14" y="1151.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="881.0" y="1157" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="883.95" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="347.1" y="1365" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.14" y="1375.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse (20,202,020 samples, 0.95%)</title><rect x="1117.0" y="1461" width="11.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1119.95" y="1471.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="785.4" y="1253" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="788.43" y="1263.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 2.38%)</title><rect x="296.6" y="1349" width="28.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="299.57" y="1359.5" >[..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 1.90%)</title><rect x="993.3" y="1189" width="22.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="996.33" y="1199.5" >Y..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (161,616,160 samples, 7.62%)</title><rect x="1027.0" y="1429" width="90.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1030.05" y="1439.5" >std::_Rb_t..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="26.9" y="1461" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.86" y="1471.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 4.76%)</title><rect x="914.7" y="1253" width="56.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="917.67" y="1263.5" >YAML:..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (121,212,120 samples, 5.71%)</title><rect x="1049.5" y="1413" width="67.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1052.52" y="1423.5" >std::_S..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 31.43%)</title><rect x="650.6" y="1397" width="370.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="653.57" y="1407.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::Scheduler::tick (393,939,390 samples, 18.57%)</title><rect x="386.5" y="1493" width="219.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="389.48" y="1503.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1205" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="906.43" y="1215.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.48%)</title><rect x="504.5" y="1397" width="5.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="507.48" y="1407.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="622.5" y="1413" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="625.48" y="1423.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.48%)</title><rect x="920.3" y="1221" width="5.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="923.29" y="1231.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1445" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="821" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="831.5" ></text>
</g>
<g >
<title>YAML::Scanner::pop (10,101,010 samples, 0.48%)</title><rect x="970.9" y="1253" width="5.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="973.86" y="1263.5" ></text>
</g>
<g >
<title>__dynamic_cast (10,101,010 samples, 0.48%)</title><rect x="1117.0" y="1429" width="5.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1119.95" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="949" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="959.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1013" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1023.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::get_flows (10,101,010 samples, 0.48%)</title><rect x="633.7" y="1493" width="5.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="636.71" y="1503.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1365" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="647.95" y="1375.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1317" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1327.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="712.4" y="1237" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="715.38" y="1247.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="869.7" y="1173" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="872.71" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1221" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1231.5" ></text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.48%)</title><rect x="976.5" y="1173" width="5.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="979.48" y="1183.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="982.1" y="1173" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.10" y="1183.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.48%)</title><rect x="487.6" y="1397" width="5.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="490.62" y="1407.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.48%)</title><rect x="330.3" y="1461" width="5.6" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="333.29" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="901" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="911.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.48%)</title><rect x="628.1" y="1477" width="5.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="631.10" y="1487.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (30,303,030 samples, 1.43%)</title><rect x="437.0" y="1445" width="16.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="440.05" y="1455.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 1.43%)</title><rect x="347.1" y="1445" width="16.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="350.14" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1349" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1359.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1237" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="664.81" y="1247.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1237" width="5.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1018.81" y="1247.5" ></text>
</g>
<g >
<title>sim::write_to_csv (505,050,500 samples, 23.81%)</title><rect x="55.0" y="1477" width="280.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="57.95" y="1487.5" >sim::write_to_csv</text>
</g>
<g >
<title>sim::LinkQueue::push (30,303,030 samples, 1.43%)</title><rect x="493.2" y="1429" width="16.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="496.24" y="1439.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.48%)</title><rect x="583.1" y="1413" width="5.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="586.14" y="1423.5" ></text>
</g>
<g >
<title>cfree (101,010,100 samples, 4.76%)</title><rect x="1060.8" y="1365" width="56.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1063.76" y="1375.5" >cfree</text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 12.38%)</title><rect x="178.6" y="1397" width="146.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="181.57" y="1407.5" >[libc.so.6]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1429" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1439.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1253" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1263.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (20,202,020 samples, 0.95%)</title><rect x="1038.3" y="1397" width="11.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1041.29" y="1407.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.48%)</title><rect x="1043.9" y="1365" width="5.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1046.90" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="677" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1045" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1055.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.43%)</title><rect x="437.0" y="1429" width="16.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="440.05" y="1439.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1509" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1519.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="997" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1007.5" ></text>
</g>
<g >
<title>sim::TcpFlowParser::parse_tcp_flow (10,101,010 samples, 0.48%)</title><rect x="1167.5" y="1397" width="5.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1170.52" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="773" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1093" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1103.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1349" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1359.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="437.0" y="1413" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="440.05" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1221" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="485" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="885" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="895.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1237" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="777.19" y="1247.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1253" width="5.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="906.43" y="1263.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="1004.6" y="1141" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1007.57" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="805" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1141" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1018.81" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1077" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1087.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.48%)</title><rect x="487.6" y="1413" width="5.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="490.62" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1205" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1215.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1269" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1279.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.48%)</title><rect x="650.6" y="1349" width="5.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="653.57" y="1359.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1557" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1567.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1205" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="900.81" y="1215.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (70,707,070 samples, 3.33%)</title><rect x="695.5" y="1333" width="39.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="698.52" y="1343.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1205" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="117" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1013" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1023.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1269" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="664.81" y="1279.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.48%)</title><rect x="841.6" y="1253" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="844.62" y="1263.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1109" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1119.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1525" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1535.5" ></text>
</g>
<g >
<title>YAML::Load (676,767,670 samples, 31.90%)</title><rect x="645.0" y="1477" width="376.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="647.95" y="1487.5" >YAML::Load</text>
</g>
<g >
<title>sim::Link::~Link (10,101,010 samples, 0.48%)</title><rect x="15.6" y="1429" width="5.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="18.62" y="1439.5" ></text>
</g>
<g >
<title>sim::Simulator::start (484,848,480 samples, 22.86%)</title><rect x="364.0" y="1509" width="269.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="367.00" y="1519.5" >sim::Simulator::start</text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.48%)</title><rect x="448.3" y="1413" width="5.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="451.29" y="1423.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (565,656,560 samples, 26.67%)</title><rect x="26.9" y="1493" width="314.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="29.86" y="1503.5" >sim::LinksQueueSizeStorage::export_to_files</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="645.0" y="1397" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="647.95" y="1407.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.95%)</title><rect x="38.1" y="1477" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="41.10" y="1487.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (161,616,160 samples, 7.62%)</title><rect x="1027.0" y="1445" width="90.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1030.05" y="1455.5" >std::_Sp_c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1157" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1167.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 10.00%)</title><rect x="206.7" y="1365" width="118.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="209.67" y="1375.5" >[libc.so.6]</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="684.3" y="1269" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="687.29" y="1279.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [10]&gt; (10,101,010 samples, 0.48%)</title><rect x="1150.7" y="1413" width="5.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1153.67" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="453" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="85" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="95.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1189" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="900.81" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1189" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1199.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="661.8" y="1285" width="11.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="664.81" y="1295.5" ></text>
</g>
<g >
<title>sim::Switch::~Switch (10,101,010 samples, 0.48%)</title><rect x="21.2" y="1429" width="5.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="24.24" y="1439.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.48%)</title><rect x="1055.1" y="1381" width="5.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1058.14" y="1391.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.95%)</title><rect x="852.9" y="1237" width="11.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="855.86" y="1247.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (20,202,020 samples, 0.95%)</title><rect x="734.9" y="1317" width="11.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="737.86" y="1327.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.48%)</title><rect x="639.3" y="1493" width="5.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="642.33" y="1503.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1525" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.62" y="1535.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (676,767,670 samples, 31.90%)</title><rect x="645.0" y="1461" width="376.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="647.95" y="1471.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="560.7" y="1413" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="563.67" y="1423.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.48%)</title><rect x="532.6" y="1413" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="535.57" y="1423.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="875.3" y="1205" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.33" y="1215.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (292,929,290 samples, 13.81%)</title><rect x="167.3" y="1445" width="163.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="170.33" y="1455.5" >std::ostreambuf_itera..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1333" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1343.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.95%)</title><rect x="111.1" y="1445" width="11.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="114.14" y="1455.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.48%)</title><rect x="341.5" y="1461" width="5.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="344.52" y="1471.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::owner_less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_M_emplace_unique&lt;std::shared_ptr&lt;sim::IFlow&gt; const&amp;&gt; (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1397" width="5.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1181.76" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="101" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="852.9" y="1221" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="855.86" y="1231.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.48%)</title><rect x="504.5" y="1413" width="5.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="507.48" y="1423.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (70,707,070 samples, 3.33%)</title><rect x="695.5" y="1285" width="39.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="698.52" y="1295.5" >YAM..</text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.48%)</title><rect x="673.0" y="1333" width="5.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="676.05" y="1343.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="875.3" y="1173" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="878.33" y="1183.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1269" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="917" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="927.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.43%)</title><rect x="847.2" y="1269" width="16.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="850.24" y="1279.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="774.2" y="1093" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="777.19" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="629" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="639.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 0.95%)</title><rect x="931.5" y="1189" width="11.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="934.52" y="1199.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.48%)</title><rect x="487.6" y="1445" width="5.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="490.62" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="981" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="991.5" ></text>
</g>
<g >
<title>writev (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1413" width="11.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="355.76" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1365" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1375.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="1015.8" y="1157" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1018.81" y="1167.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="841.6" y="1269" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="844.62" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="277" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="287.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.95%)</title><rect x="571.9" y="1365" width="11.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="574.90" y="1375.5" ></text>
</g>
<g >
<title>sim::ScenarioParser::parse (20,202,020 samples, 0.95%)</title><rect x="1117.0" y="1477" width="11.2" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1119.95" y="1487.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1189" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1199.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="982.1" y="1189" width="11.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="985.10" y="1199.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;* std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.48%)</title><rect x="633.7" y="1477" width="5.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="636.71" y="1487.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.43%)</title><rect x="999.0" y="1173" width="16.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1001.95" y="1183.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [3]&gt; (10,101,010 samples, 0.48%)</title><rect x="1167.5" y="1365" width="5.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1170.52" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="757" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="767.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::add_object (10,101,010 samples, 0.48%)</title><rect x="1173.1" y="1413" width="5.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1176.14" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1173" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1183.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.48%)</title><rect x="566.3" y="1413" width="5.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="569.29" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="341" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="351.5" ></text>
</g>
<g >
<title>sim::Link::arrive (50,505,050 samples, 2.38%)</title><rect x="403.3" y="1461" width="28.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="406.33" y="1471.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1381" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1391.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="903.4" y="1157" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="906.43" y="1167.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (676,767,670 samples, 31.90%)</title><rect x="645.0" y="1429" width="376.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="647.95" y="1439.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 1.90%)</title><rect x="431.4" y="1461" width="22.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="434.43" y="1471.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="197" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="597" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1045" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="309" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="319.5" ></text>
</g>
<g >
<title>sim::ActionParser::parse_send_data (20,202,020 samples, 0.95%)</title><rect x="1117.0" y="1445" width="11.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1119.95" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="645" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1285" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1295.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.95%)</title><rect x="723.6" y="1221" width="11.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="726.62" y="1231.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.95%)</title><rect x="678.7" y="1349" width="11.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="681.67" y="1359.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.48%)</title><rect x="347.1" y="1397" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.14" y="1407.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="796.7" y="1253" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="799.67" y="1263.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1461" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1471.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="667.4" y="1125" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="670.43" y="1135.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.48%)</title><rect x="1184.4" y="1461" width="5.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1187.38" y="1471.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="785.4" y="1205" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="788.43" y="1215.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1413" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="213" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.43%)</title><rect x="403.3" y="1429" width="16.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="406.33" y="1439.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1445" width="11.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="18.62" y="1455.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (60,606,060 samples, 2.86%)</title><rect x="746.1" y="1301" width="33.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="749.10" y="1311.5" >YA..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="729.2" y="1189" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="732.24" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1365" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1375.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="897.8" y="1061" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="900.81" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1285" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="1295.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1317" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1327.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.95%)</title><rect x="543.8" y="1461" width="11.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="546.81" y="1471.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.48%)</title><rect x="414.6" y="1397" width="5.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="417.57" y="1407.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (40,404,040 samples, 1.90%)</title><rect x="341.5" y="1493" width="22.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="344.52" y="1503.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 1.43%)</title><rect x="122.4" y="1461" width="16.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="125.38" y="1471.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="740.5" y="1029" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.48" y="1039.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.48%)</title><rect x="442.7" y="1413" width="5.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="445.67" y="1423.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.95%)</title><rect x="15.6" y="1477" width="11.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="18.62" y="1487.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1269" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1279.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="965.2" y="1109" width="5.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="968.24" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="1397" width="5.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1125.57" y="1407.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.48%)</title><rect x="858.5" y="1157" width="5.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="861.48" y="1167.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 1.90%)</title><rect x="948.4" y="1157" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="951.38" y="1167.5" >i..</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.48%)</title><rect x="498.9" y="1413" width="5.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="501.86" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="10.0" y="1349" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1359.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.48%)</title><rect x="21.2" y="1413" width="5.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="24.24" y="1423.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (666,666,660 samples, 31.43%)</title><rect x="650.6" y="1365" width="370.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="653.57" y="1375.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (80,808,080 samples, 3.81%)</title><rect x="925.9" y="1221" width="45.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="928.90" y="1231.5" >YAML..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (161,616,160 samples, 7.62%)</title><rect x="1027.0" y="1477" width="90.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1030.05" y="1487.5" >std::_Sp_c..</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.48%)</title><rect x="538.2" y="1413" width="5.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="541.19" y="1423.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="1178.8" y="1221" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.76" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="693" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="703.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.48%)</title><rect x="746.1" y="1285" width="5.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="749.10" y="1295.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (333,333,330 samples, 15.71%)</title><rect x="836.0" y="1301" width="185.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="839.00" y="1311.5" >YAML::SingleDocParser::H..</text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.48%)</title><rect x="476.4" y="1397" width="5.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="479.38" y="1407.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1189" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1199.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.48%)</title><rect x="144.9" y="1333" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="147.86" y="1343.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.95%)</title><rect x="352.8" y="1381" width="11.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.76" y="1391.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.48%)</title><rect x="836.0" y="1253" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="839.00" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.48%)</title><rect x="1122.6" y="837" width="5.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1125.57" y="847.5" ></text>
</g>
</g>
</svg>
