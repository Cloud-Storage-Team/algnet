<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="373" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="383.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [5]&gt; (10,101,010 samples, 0.63%)</title><rect x="1137.7" y="389" width="7.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1140.72" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (30,303,030 samples, 1.90%)</title><rect x="256.5" y="501" width="22.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="259.46" y="511.5" >s..</text>
</g>
<g >
<title>YAML::Scanner::VerifySimpleKey (10,101,010 samples, 0.63%)</title><rect x="547.7" y="309" width="7.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="550.72" y="319.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 3.80%)</title><rect x="577.6" y="277" width="44.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="580.59" y="287.5" >malloc</text>
</g>
<g >
<title>sim::write_to_csv (222,222,220 samples, 13.92%)</title><rect x="32.4" y="501" width="164.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="35.41" y="511.5" >sim::write_to_csv</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="389" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="861.4" y="197" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="864.39" y="207.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 1.27%)</title><rect x="361.0" y="469" width="14.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="364.01" y="479.5" ></text>
</g>
<g >
<title>sim::Simulator::add_connection (10,101,010 samples, 0.63%)</title><rect x="1100.4" y="469" width="7.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1103.38" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.63%)</title><rect x="473.0" y="277" width="7.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="476.04" y="287.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.63%)</title><rect x="338.6" y="421" width="7.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="341.61" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="495.4" y="261" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="498.44" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.63%)</title><rect x="973.4" y="213" width="7.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="976.42" y="223.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.63%)</title><rect x="965.9" y="213" width="7.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="968.95" y="223.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.63%)</title><rect x="375.9" y="437" width="7.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="378.95" y="447.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.63%)</title><rect x="353.5" y="389" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="356.54" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (101,010,100 samples, 6.33%)</title><rect x="1107.8" y="485" width="74.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1110.85" y="495.5" >std::_Fu..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 1.90%)</title><rect x="824.1" y="261" width="22.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="827.05" y="271.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (90,909,090 samples, 5.70%)</title><rect x="876.3" y="197" width="67.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="879.33" y="207.5" >int YAM..</text>
</g>
<g >
<title>YAML::Scanner::empty (90,909,090 samples, 5.70%)</title><rect x="488.0" y="357" width="67.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="490.97" y="367.5" >YAML::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="165" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="213" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="223.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.27%)</title><rect x="1145.2" y="373" width="14.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.19" y="383.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.63%)</title><rect x="741.9" y="277" width="7.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="744.90" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="211.6" y="421" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="214.65" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (111,111,110 samples, 6.96%)</title><rect x="868.9" y="245" width="82.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="871.86" y="255.5" >YAML::Sca..</text>
</g>
<g >
<title>__libc_start_main (1,585,858,570 samples, 99.37%)</title><rect x="17.5" y="581" width="1172.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="20.47" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="54.8" y="485" width="7.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="57.81" y="495.5" ></text>
</g>
<g >
<title>sim::ConnectionImpl::send_packets (10,101,010 samples, 0.63%)</title><rect x="375.9" y="485" width="7.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="378.95" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,585,858,570 samples, 99.37%)</title><rect x="17.5" y="565" width="1172.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.47" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.63%)</title><rect x="741.9" y="309" width="7.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="744.90" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="1115.3" y="437" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1118.32" y="447.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.63%)</title><rect x="263.9" y="437" width="7.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="266.92" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="133" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="69" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="245" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="816.6" y="165" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="819.58" y="175.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 1.27%)</title><rect x="301.3" y="469" width="14.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="304.27" y="479.5" ></text>
</g>
<g >
<title>std::ostream::put (20,202,020 samples, 1.27%)</title><rect x="181.8" y="485" width="14.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="184.77" y="495.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (40,404,040 samples, 2.53%)</title><rect x="331.1" y="469" width="29.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="334.14" y="479.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="458.1" y="325" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="461.10" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="325" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="181" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="398.4" y="453" width="7.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="401.35" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="501" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="511.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.63%)</title><rect x="667.2" y="277" width="7.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="670.22" y="287.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.63%)</title><rect x="741.9" y="293" width="7.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="744.90" y="303.5" ></text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.63%)</title><rect x="435.7" y="533" width="7.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="438.70" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="861.4" y="229" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="864.39" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="485" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.06%)</title><rect x="114.6" y="405" width="59.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="117.56" y="415.5" >[libc...</text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (252,525,250 samples, 15.82%)</title><rect x="32.4" y="533" width="186.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="35.41" y="543.5" >sim::MetricsCollector::e..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.63%)</title><rect x="674.7" y="277" width="7.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="677.68" y="287.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.63%)</title><rect x="204.2" y="437" width="7.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="207.18" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="357" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="413.3" y="453" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="416.29" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="398.4" y="469" width="7.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="401.35" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="261" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.63%)</title><rect x="450.6" y="277" width="7.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="453.63" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="458.1" y="293" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="461.10" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (151,515,150 samples, 9.49%)</title><rect x="69.7" y="485" width="112.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="72.75" y="495.5" >std::ostream&amp;..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="181" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="101" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="958.5" y="133" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="961.48" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 4.43%)</title><rect x="1048.1" y="357" width="52.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1051.10" y="367.5" >[libc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="357" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="367.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.90%)</title><rect x="465.6" y="325" width="22.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="468.57" y="335.5" >Y..</text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.63%)</title><rect x="540.3" y="309" width="7.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="543.25" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="779.2" y="229" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="782.24" y="239.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (50,505,050 samples, 3.16%)</title><rect x="1122.8" y="437" width="37.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1125.78" y="447.5" >sim..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (50,505,050 samples, 3.16%)</title><rect x="502.9" y="309" width="37.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="505.91" y="319.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="117" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="165" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="85" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="293" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="303.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (212,121,210 samples, 13.29%)</title><rect x="234.1" y="517" width="156.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="237.05" y="527.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (90,909,090 samples, 5.70%)</title><rect x="555.2" y="341" width="67.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="558.19" y="351.5" >YAML::N..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.63%)</title><rect x="271.4" y="437" width="7.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="274.39" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="325" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="853.9" y="197" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="856.92" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="495.4" y="277" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="498.44" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="437" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (727,272,720 samples, 45.57%)</title><rect x="443.2" y="421" width="537.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.16" y="431.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 1.27%)</title><rect x="346.1" y="453" width="14.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="349.08" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="245" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="255.5" ></text>
</g>
<g >
<title>sim::Host::process (30,303,030 samples, 1.90%)</title><rect x="278.9" y="485" width="22.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="281.86" y="495.5" >s..</text>
</g>
<g >
<title>sim::Simulator::start (282,828,280 samples, 17.72%)</title><rect x="226.6" y="533" width="209.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="229.58" y="543.5" >sim::Simulator::start</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="117" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="127.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (232,323,230 samples, 14.56%)</title><rect x="32.4" y="517" width="171.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="35.41" y="527.5" >sim::LinksQueueSizeSto..</text>
</g>
<g >
<title>sim::SendData::operator (60,606,060 samples, 3.80%)</title><rect x="331.1" y="501" width="44.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="334.14" y="511.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="133" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="143.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.63%)</title><rect x="256.5" y="469" width="7.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="259.46" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.63%)</title><rect x="390.9" y="501" width="7.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="393.89" y="511.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="47.3" y="485" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="50.34" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="165" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="517" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="117" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="325" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="47.3" y="469" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="50.34" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="277" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="533" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (727,272,720 samples, 45.57%)</title><rect x="443.2" y="469" width="537.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="446.16" y="479.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.63%)</title><rect x="84.7" y="469" width="7.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="87.68" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="229" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (20,202,020 samples, 1.27%)</title><rect x="1025.7" y="405" width="14.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1028.70" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="133" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="353.5" y="373" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="356.54" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; YAML::Node::as&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.63%)</title><rect x="1160.1" y="437" width="7.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1163.13" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.63%)</title><rect x="450.6" y="309" width="7.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="453.63" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="261" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 1.27%)</title><rect x="465.6" y="293" width="14.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="468.57" y="303.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.63%)</title><rect x="62.3" y="421" width="7.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="65.28" y="431.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.63%)</title><rect x="62.3" y="437" width="7.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="65.28" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.63%)</title><rect x="1107.8" y="421" width="7.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1110.85" y="431.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.63%)</title><rect x="204.2" y="453" width="7.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="207.18" y="463.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.63%)</title><rect x="62.3" y="453" width="7.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="65.28" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="229" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="239.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 1.90%)</title><rect x="824.1" y="277" width="22.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="827.05" y="287.5" >Y..</text>
</g>
<g >
<title>cfree (70,707,070 samples, 4.43%)</title><rect x="1048.1" y="389" width="52.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1051.10" y="399.5" >cfree</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="741.9" y="245" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="744.90" y="255.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (727,272,720 samples, 45.57%)</title><rect x="443.2" y="453" width="537.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.16" y="463.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="779.2" y="213" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="782.24" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="405" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="480.5" y="277" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="483.51" y="287.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.63%)</title><rect x="973.4" y="197" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="976.42" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.63%)</title><rect x="249.0" y="453" width="7.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="251.99" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 6.33%)</title><rect x="99.6" y="453" width="74.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="102.62" y="463.5" >[libstdc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="309" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.63%)</title><rect x="450.6" y="293" width="7.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="453.63" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="517.8" y="261" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="520.85" y="271.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="421" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (70,707,070 samples, 4.43%)</title><rect x="1048.1" y="421" width="52.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1051.10" y="431.5" >std::..</text>
</g>
<g >
<title>YAML::Load (727,272,720 samples, 45.57%)</title><rect x="443.2" y="501" width="537.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="446.16" y="511.5" >YAML::Load</text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.63%)</title><rect x="286.3" y="437" width="7.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="289.33" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="53" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="63.5" ></text>
</g>
<g >
<title>nons (1,595,959,580 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="101" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 1.27%)</title><rect x="316.2" y="469" width="14.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="319.20" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.63%)</title><rect x="353.5" y="437" width="7.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="356.54" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="413.3" y="469" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="416.29" y="479.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (60,606,060 samples, 3.80%)</title><rect x="390.9" y="517" width="44.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="393.89" y="527.5" >sim:..</text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.63%)</title><rect x="196.7" y="501" width="7.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="199.71" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="437" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="229" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="744.90" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="801.6" y="213" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="804.65" y="223.5" >i..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.63%)</title><rect x="62.3" y="469" width="7.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="65.28" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.63%)</title><rect x="211.6" y="469" width="7.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="214.65" y="479.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.63%)</title><rect x="211.6" y="437" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="214.65" y="447.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (101,010,100 samples, 6.33%)</title><rect x="1107.8" y="469" width="74.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1110.85" y="479.5" >sim::Con..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="629.9" y="293" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="632.87" y="303.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="495.4" y="309" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="498.44" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="501" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sim::TcpFlow::get_id[abi:cxx11] (10,101,010 samples, 0.63%)</title><rect x="308.7" y="421" width="7.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="311.73" y="431.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.63%)</title><rect x="502.9" y="277" width="7.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="505.91" y="287.5" ></text>
</g>
<g >
<title>main (1,565,656,550 samples, 98.10%)</title><rect x="32.4" y="549" width="1157.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="35.41" y="559.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="165" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="175.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 2.53%)</title><rect x="794.2" y="245" width="29.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="797.18" y="255.5" >YA..</text>
</g>
<g >
<title>sim::LinkQueue::push (10,101,010 samples, 0.63%)</title><rect x="338.6" y="453" width="7.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="341.61" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="951.0" y="197" width="14.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="954.01" y="207.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (20,202,020 samples, 1.27%)</title><rect x="204.2" y="517" width="14.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="207.18" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 1.90%)</title><rect x="443.2" y="341" width="22.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="446.16" y="351.5" >Y..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.90%)</title><rect x="951.0" y="229" width="22.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="954.01" y="239.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="261" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="197" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="841.99" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="229" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="239.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10,101,010 samples, 0.63%)</title><rect x="1100.4" y="485" width="7.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1103.38" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (50,505,050 samples, 3.16%)</title><rect x="786.7" y="261" width="37.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="789.71" y="271.5" >YAM..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="469" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="479.5" ></text>
</g>
<g >
<title>all (1,595,959,580 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="219.1" y="501" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="222.11" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.63%)</title><rect x="286.3" y="421" width="7.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="289.33" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="421" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="431.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [5]&gt; (10,101,010 samples, 0.63%)</title><rect x="1137.7" y="373" width="7.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1140.72" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.27%)</title><rect x="17.5" y="533" width="14.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.47" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="165" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="175.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.63%)</title><rect x="271.4" y="453" width="7.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="274.39" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.63%)</title><rect x="973.4" y="245" width="7.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="976.42" y="255.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.63%)</title><rect x="204.2" y="485" width="7.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="207.18" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.90%)</title><rect x="465.6" y="341" width="22.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="468.57" y="351.5" >Y..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (151,515,150 samples, 9.49%)</title><rect x="988.4" y="453" width="112.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="991.35" y="463.5" >std::_Rb_tree..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="219.1" y="485" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="222.11" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (60,606,060 samples, 3.80%)</title><rect x="443.2" y="373" width="44.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="446.16" y="383.5" >YAML..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (727,272,720 samples, 45.57%)</title><rect x="443.2" y="437" width="537.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.16" y="447.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>YAML::Scanner::empty (161,616,160 samples, 10.13%)</title><rect x="622.4" y="341" width="119.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="625.41" y="351.5" >YAML::Scanner:..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.63%)</title><rect x="794.2" y="213" width="7.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="797.18" y="223.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.63%)</title><rect x="831.5" y="229" width="7.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="834.52" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="181" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="191.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (323,232,320 samples, 20.25%)</title><rect x="741.9" y="341" width="239.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="744.90" y="351.5" >YAML::SingleDocParser::HandleBl..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="373" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.63%)</title><rect x="54.8" y="469" width="7.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="57.81" y="479.5" ></text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.63%)</title><rect x="204.2" y="405" width="7.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="207.18" y="415.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.27%)</title><rect x="1145.2" y="389" width="14.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1148.19" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="293" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.63%)</title><rect x="420.8" y="485" width="7.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="423.76" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.63%)</title><rect x="1018.2" y="421" width="7.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1021.23" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="853.9" y="181" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="856.92" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.63%)</title><rect x="211.6" y="485" width="7.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="214.65" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="37" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="47.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="839.0" y="213" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="841.99" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="861.4" y="181" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="864.39" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="101" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="111.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.53%)</title><rect x="510.4" y="293" width="29.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="513.38" y="303.5" >in..</text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.63%)</title><rect x="1137.7" y="357" width="7.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1140.72" y="367.5" ></text>
</g>
<g >
<title>sim::Link::arrive (30,303,030 samples, 1.90%)</title><rect x="234.1" y="485" width="22.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="237.05" y="495.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="197" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.06%)</title><rect x="114.6" y="389" width="59.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="117.56" y="399.5" >[libc...</text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.63%)</title><rect x="764.3" y="245" width="7.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="767.30" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.63%)</title><rect x="263.9" y="453" width="7.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="266.92" y="463.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.63%)</title><rect x="555.2" y="309" width="7.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="558.19" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="517" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="980.9" y="469" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="983.89" y="479.5" ></text>
</g>
<g >
<title>sim::StartConnection::operator (10,101,010 samples, 0.63%)</title><rect x="375.9" y="501" width="7.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="378.95" y="511.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.63%)</title><rect x="226.6" y="517" width="7.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="229.58" y="527.5" ></text>
</g>
<g >
<title>_start (1,585,858,570 samples, 99.37%)</title><rect x="17.5" y="597" width="1172.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="20.47" y="607.5" >_start</text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.63%)</title><rect x="794.2" y="197" width="7.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="797.18" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="117" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="127.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="801.6" y="197" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="804.65" y="207.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="229" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="239.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.63%)</title><rect x="712.0" y="245" width="7.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="715.03" y="255.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (30,303,030 samples, 1.90%)</title><rect x="234.1" y="501" width="22.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="237.05" y="511.5" >s..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (101,010,100 samples, 6.33%)</title><rect x="868.9" y="229" width="74.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="871.86" y="239.5" >YAML::Sc..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="629.9" y="277" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="632.87" y="287.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="133" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="143.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="532.8" y="213" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="535.78" y="223.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (151,515,150 samples, 9.49%)</title><rect x="988.4" y="517" width="112.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="991.35" y="527.5" >YAML::Node::~..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="69" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="85" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 1.27%)</title><rect x="17.5" y="501" width="14.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="20.47" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.63%)</title><rect x="980.9" y="485" width="7.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="983.89" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="801.6" y="229" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="804.65" y="239.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="480.5" y="261" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="483.51" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="293" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (727,272,720 samples, 45.57%)</title><rect x="443.2" y="389" width="537.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.16" y="399.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>sim::Process::operator (70,707,070 samples, 4.43%)</title><rect x="278.9" y="501" width="52.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="281.86" y="511.5" >sim::..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.63%)</title><rect x="353.5" y="421" width="7.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="356.54" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.63%)</title><rect x="346.1" y="437" width="7.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="349.08" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="861.4" y="165" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="864.39" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="211.6" y="389" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="214.65" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (111,111,110 samples, 6.96%)</title><rect x="652.3" y="309" width="82.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="655.28" y="319.5" >YAML::Sca..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="197" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 3.16%)</title><rect x="906.2" y="165" width="37.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="909.20" y="175.5" >int..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="480.5" y="245" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="483.51" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="149" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (70,707,070 samples, 4.43%)</title><rect x="1048.1" y="405" width="52.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1051.10" y="415.5" >std::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="495.4" y="293" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="498.44" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.63%)</title><rect x="980.9" y="501" width="7.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="983.89" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="373" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="453" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="549" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="853.9" y="213" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="856.92" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="629.9" y="245" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="632.87" y="255.5" >i..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.63%)</title><rect x="1010.8" y="437" width="7.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1013.76" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="951.0" y="181" width="14.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="954.01" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 3.16%)</title><rect x="697.1" y="261" width="37.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="700.09" y="271.5" >int..</text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.63%)</title><rect x="204.2" y="421" width="7.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="207.18" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="245" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="165" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="175.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [10]&gt; (10,101,010 samples, 0.63%)</title><rect x="1107.8" y="437" width="7.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1110.85" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="525.3" y="245" width="15.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="528.32" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (141,414,140 samples, 8.86%)</title><rect x="846.5" y="277" width="104.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="849.46" y="287.5" >YAML::Scanne..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="389" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 7.59%)</title><rect x="92.2" y="469" width="89.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="95.15" y="479.5" >std::ostre..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (323,232,320 samples, 20.25%)</title><rect x="741.9" y="325" width="239.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="744.90" y="335.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="341" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 4.43%)</title><rect x="1048.1" y="373" width="52.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1051.10" y="383.5" >[libc..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="629.9" y="229" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="632.87" y="239.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="517.8" y="277" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="520.85" y="287.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="277" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (20,202,020 samples, 1.27%)</title><rect x="204.2" y="501" width="14.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="207.18" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="47.3" y="453" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.34" y="463.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (727,272,720 samples, 45.57%)</title><rect x="443.2" y="485" width="537.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="446.16" y="495.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.63%)</title><rect x="1130.3" y="405" width="7.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1133.25" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="213" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="223.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.63%)</title><rect x="375.9" y="421" width="7.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="378.95" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.63%)</title><rect x="338.6" y="437" width="7.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="341.61" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::process (40,404,040 samples, 2.53%)</title><rect x="301.3" y="485" width="29.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="304.27" y="495.5" >si..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (151,515,150 samples, 9.49%)</title><rect x="988.4" y="469" width="112.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="991.35" y="479.5" >std::_Sp_coun..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="271.4" y="421" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="274.39" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.27%)</title><rect x="17.5" y="549" width="14.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.47" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="149" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (20,202,020 samples, 1.27%)</title><rect x="1025.7" y="421" width="14.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1028.70" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (303,030,300 samples, 18.99%)</title><rect x="756.8" y="309" width="224.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="759.84" y="319.5" >YAML::SingleDocParser::Handle..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="485" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>YAML::LoadFile (737,373,730 samples, 46.20%)</title><rect x="443.2" y="517" width="545.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="446.16" y="527.5" >YAML::LoadFile</text>
</g>
<g >
<title>sim::get_flow_id (10,101,010 samples, 0.63%)</title><rect x="308.7" y="437" width="7.5" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="311.73" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.90%)</title><rect x="951.0" y="261" width="22.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="954.01" y="271.5" >Y..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (161,616,160 samples, 10.13%)</title><rect x="622.4" y="325" width="119.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="625.41" y="335.5" >YAML::Scanner:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="936.1" y="149" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="939.08" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="181" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="191.5" ></text>
</g>
<g >
<title>sim::Simulator::get_connections (10,101,010 samples, 0.63%)</title><rect x="219.1" y="533" width="7.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="222.11" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="245" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="719.5" y="245" width="14.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="722.49" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Speed&lt;GBit, Second&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Speed&lt;GBit, Second&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="1182.5" y="405" width="7.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.53" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="771.8" y="245" width="14.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="774.77" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="861.4" y="213" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="864.39" y="223.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (90,909,090 samples, 5.70%)</title><rect x="555.2" y="325" width="67.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="558.19" y="335.5" >YAML::N..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="801.6" y="181" width="22.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="804.65" y="191.5" >i..</text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (40,404,040 samples, 2.53%)</title><rect x="405.8" y="501" width="29.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="408.82" y="511.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="54.8" y="453" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.81" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.63%)</title><rect x="943.5" y="229" width="7.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="946.54" y="239.5" ></text>
</g>
<g >
<title>sim::TcpFlow::Timeout::operator (10,101,010 samples, 0.63%)</title><rect x="383.4" y="501" width="7.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="386.42" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (40,404,040 samples, 2.53%)</title><rect x="951.0" y="277" width="29.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="954.01" y="287.5" >YA..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="149" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.63%)</title><rect x="211.6" y="453" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="214.65" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="219.1" y="517" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="222.11" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="727.0" y="213" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="729.96" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="565" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.63%)</title><rect x="353.5" y="405" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="356.54" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.63%)</title><rect x="24.9" y="469" width="7.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="27.94" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="197" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="249.0" y="437" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="251.99" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="181" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="191.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 1.27%)</title><rect x="465.6" y="309" width="14.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="468.57" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (60,606,060 samples, 3.80%)</title><rect x="443.2" y="357" width="44.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="446.16" y="367.5" >YAML..</text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.63%)</title><rect x="375.9" y="453" width="7.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="378.95" y="463.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (10,101,010 samples, 0.63%)</title><rect x="249.0" y="469" width="7.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="251.99" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="1010.8" y="421" width="7.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1013.76" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet (10,101,010 samples, 0.63%)</title><rect x="375.9" y="469" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="378.95" y="479.5" ></text>
</g>
<g >
<title>sim::FlowParser::TcpCCParser::parse_i_tcp_cc (30,303,030 samples, 1.90%)</title><rect x="1137.7" y="405" width="22.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1140.72" y="415.5" >s..</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (999,999,990 samples, 62.66%)</title><rect x="443.2" y="533" width="739.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="446.16" y="543.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="398.4" y="485" width="7.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="401.35" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (727,272,720 samples, 45.57%)</title><rect x="443.2" y="405" width="537.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.16" y="415.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="309" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.63%)</title><rect x="502.9" y="293" width="7.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="505.91" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="117" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="127.5" ></text>
</g>
<g >
<title>YAML::Scanner::VerifySimpleKey (10,101,010 samples, 0.63%)</title><rect x="734.4" y="293" width="7.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="737.43" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="980.9" y="437" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="983.89" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (151,515,150 samples, 9.49%)</title><rect x="988.4" y="485" width="112.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="991.35" y="495.5" >std::_Sp_coun..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 4.43%)</title><rect x="682.2" y="277" width="52.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="685.15" y="287.5" >int Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="951.0" y="165" width="14.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="954.01" y="175.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 6.33%)</title><rect x="99.6" y="437" width="74.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="102.62" y="447.5" >vsnprintf</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="85" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="95.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="480.5" y="309" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="483.51" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="101" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="111.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="741.9" y="261" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="744.90" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (10,101,010 samples, 0.63%)</title><rect x="428.2" y="485" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="431.23" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="533" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.63%)</title><rect x="980.9" y="453" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="983.89" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.63%)</title><rect x="286.3" y="453" width="7.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="289.33" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (90,909,090 samples, 5.70%)</title><rect x="876.3" y="213" width="67.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="879.33" y="223.5" >int YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="357" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (80,808,080 samples, 5.06%)</title><rect x="1040.6" y="437" width="59.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1043.63" y="447.5" >std::_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="839.0" y="149" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="841.99" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 1.27%)</title><rect x="1167.6" y="453" width="14.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1170.59" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="727.0" y="229" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="729.96" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (151,515,150 samples, 9.49%)</title><rect x="988.4" y="501" width="112.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="991.35" y="511.5" >std::_Sp_coun..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (575,757,570 samples, 36.08%)</title><rect x="555.2" y="357" width="425.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="558.19" y="367.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (60,606,060 samples, 3.80%)</title><rect x="502.9" y="325" width="44.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="505.91" y="335.5" >YAML..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (212,121,210 samples, 13.29%)</title><rect x="824.1" y="293" width="156.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="827.05" y="303.5" >YAML::SingleDocParse..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="309" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.63%)</title><rect x="413.3" y="485" width="7.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="416.29" y="495.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (20,202,020 samples, 1.27%)</title><rect x="17.5" y="517" width="14.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="20.47" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 1.90%)</title><rect x="846.5" y="245" width="22.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="849.46" y="255.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.27%)</title><rect x="1145.2" y="357" width="14.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.19" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="958.5" y="149" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="961.48" y="159.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.63%)</title><rect x="204.2" y="469" width="7.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="207.18" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="341" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.63%)</title><rect x="174.3" y="453" width="7.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="177.30" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (30,303,030 samples, 1.90%)</title><rect x="1018.2" y="437" width="22.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1021.23" y="447.5" >s..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (101,010,100 samples, 6.33%)</title><rect x="659.7" y="293" width="74.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="662.75" y="303.5" >YAML::Sc..</text>
</g>
<g >
<title>sim::YamlParser::process_connection (111,111,110 samples, 6.96%)</title><rect x="1100.4" y="501" width="82.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1103.38" y="511.5" >sim::Yaml..</text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.63%)</title><rect x="734.4" y="309" width="7.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="737.43" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (90,909,090 samples, 5.70%)</title><rect x="488.0" y="341" width="67.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="490.97" y="351.5" >YAML::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.27%)</title><rect x="607.5" y="197" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.47" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="453" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (90,909,090 samples, 5.70%)</title><rect x="756.8" y="293" width="67.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="759.84" y="303.5" >YAML::S..</text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.63%)</title><rect x="547.7" y="325" width="7.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="550.72" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.63%)</title><rect x="368.5" y="453" width="7.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="371.48" y="463.5" ></text>
</g>
<g >
<title>sim::Switch::~Switch (10,101,010 samples, 0.63%)</title><rect x="24.9" y="453" width="7.5" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="27.94" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="341" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="197" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="458.1" y="309" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="461.10" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="204.2" y="213" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.18" y="223.5" ></text>
</g>
<g >
<title>sim::SimplePacketReordering::add_record (10,101,010 samples, 0.63%)</title><rect x="293.8" y="453" width="7.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="296.80" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="213" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (40,404,040 samples, 2.53%)</title><rect x="622.4" y="309" width="29.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="625.41" y="319.5" >YA..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 41.77%)</title><rect x="488.0" y="373" width="492.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="490.97" y="383.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="597" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 3.80%)</title><rect x="577.6" y="293" width="44.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="580.59" y="303.5" >oper..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="133" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="469" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (10,101,010 samples, 0.63%)</title><rect x="973.4" y="261" width="7.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="976.42" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="581" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.27%)</title><rect x="951.0" y="213" width="14.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="954.01" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.90%)</title><rect x="629.9" y="261" width="22.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="632.87" y="271.5" >i..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 4.43%)</title><rect x="891.3" y="181" width="52.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="894.27" y="191.5" >int Y..</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 3.80%)</title><rect x="577.6" y="261" width="44.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="580.59" y="271.5" >[lib..</text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (10,101,010 samples, 0.63%)</title><rect x="308.7" y="453" width="7.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="311.73" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="741.9" y="101" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="744.90" y="111.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.63%)</title><rect x="794.2" y="229" width="7.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="797.18" y="239.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (60,606,060 samples, 3.80%)</title><rect x="331.1" y="485" width="44.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="334.14" y="495.5" >sim:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="149" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="159.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (90,909,090 samples, 5.70%)</title><rect x="756.8" y="277" width="67.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="759.84" y="287.5" >YAML::S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="816.6" y="149" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="819.58" y="159.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (111,111,110 samples, 6.96%)</title><rect x="1100.4" y="517" width="82.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1103.38" y="527.5" >std::_Fun..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="77.2" y="469" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.22" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="149" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="159.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (20,202,020 samples, 1.27%)</title><rect x="263.9" y="469" width="15.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="266.92" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="10.0" y="389" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 2.53%)</title><rect x="1070.5" y="341" width="29.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1073.51" y="351.5" >[l..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;* std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.63%)</title><rect x="435.7" y="501" width="7.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="438.70" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="211.6" y="405" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="214.65" y="415.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (80,808,080 samples, 5.06%)</title><rect x="1107.8" y="453" width="59.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1110.85" y="463.5" >sim::C..</text>
</g>
<g >
<title>sim::ConnectionImpl::get_flows (10,101,010 samples, 0.63%)</title><rect x="435.7" y="517" width="7.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="438.70" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (141,414,140 samples, 8.86%)</title><rect x="846.5" y="261" width="104.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="849.46" y="271.5" >YAML::Scanne..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (80,808,080 samples, 5.06%)</title><rect x="562.7" y="309" width="59.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="565.66" y="319.5" >YAML::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="614.9" y="53" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.94" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="62.3" y="213" width="7.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.28" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="980.9" y="421" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="983.89" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.27%)</title><rect x="159.4" y="373" width="14.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="162.37" y="383.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (30,303,030 samples, 1.90%)</title><rect x="824.1" y="245" width="22.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="827.05" y="255.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.27%)</title><rect x="525.3" y="229" width="15.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="528.32" y="239.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_tcp_flow (40,404,040 samples, 2.53%)</title><rect x="1130.3" y="421" width="29.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1133.25" y="431.5" >si..</text>
</g>
<g >
<title>sim::TcpFlow::update (30,303,030 samples, 1.90%)</title><rect x="278.9" y="469" width="22.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="281.86" y="479.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="973.4" y="181" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="976.42" y="191.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.63%)</title><rect x="749.4" y="309" width="7.4" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="752.37" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 1.27%)</title><rect x="17.5" y="485" width="14.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="20.47" y="495.5" ></text>
</g>
<g >
<title>sim::Simulator::get_devices (10,101,010 samples, 0.63%)</title><rect x="398.4" y="501" width="7.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="401.35" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="458.1" y="277" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="461.10" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.63%)</title><rect x="973.4" y="229" width="7.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="976.42" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.90%)</title><rect x="951.0" y="245" width="22.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="954.01" y="255.5" >Y..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.63%)</title><rect x="24.9" y="437" width="7.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="27.94" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 1.27%)</title><rect x="846.5" y="229" width="14.9" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="849.46" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.63%)</title><rect x="495.4" y="325" width="7.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="498.44" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 1.27%)</title><rect x="443.2" y="325" width="14.9" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="446.16" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.63%)</title><rect x="1018.2" y="405" width="7.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1021.23" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.63%)</title><rect x="674.7" y="261" width="7.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="677.68" y="271.5" ></text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.63%)</title><rect x="62.3" y="405" width="7.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="65.28" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.63%)</title><rect x="480.5" y="293" width="7.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="483.51" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.63%)</title><rect x="62.3" y="485" width="7.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="65.28" y="495.5" ></text>
</g>
<g >
<title>sim::Link::transmit (30,303,030 samples, 1.90%)</title><rect x="256.5" y="485" width="22.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="259.46" y="495.5" >s..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.63%)</title><rect x="839.0" y="229" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="841.99" y="239.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (40,404,040 samples, 2.53%)</title><rect x="756.8" y="261" width="29.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="759.84" y="271.5" >YA..</text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 6.33%)</title><rect x="99.6" y="421" width="74.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="102.62" y="431.5" >[libc.so..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.63%)</title><rect x="450.6" y="181" width="7.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="453.63" y="191.5" ></text>
</g>
</g>
</svg>
