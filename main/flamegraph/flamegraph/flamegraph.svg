<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1181.5" y="373" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.52" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="207.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (161,616,160 samples, 0.88%)</title><rect x="1109.1" y="373" width="10.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1112.07" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (434,343,430 samples, 2.38%)</title><rect x="141.2" y="373" width="28.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="144.18" y="383.5" >s..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.28%)</title><rect x="32.2" y="357" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.19" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="10.7" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.65" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (18,242,424,060 samples, 99.89%)</title><rect x="11.3" y="485" width="1178.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.31" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.28%)</title><rect x="17.2" y="357" width="3.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.18" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="149" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="11.3" y="389" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.31" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="63.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="311.5" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="314.53" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.06%)</title><rect x="298.5" y="293" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="301.47" y="303.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="1119.5" y="373" width="1.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1122.51" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.22%)</title><rect x="1183.5" y="229" width="2.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.47" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="34.8" y="277" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.80" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="277" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="137.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="140.27" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="18.5" y="325" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.48" y="335.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="647.0" y="357" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="649.99" y="367.5" ></text>
</g>
<g >
<title>nons (18,262,626,080 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >nons</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.06%)</title><rect x="1182.8" y="245" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1185.82" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="136.0" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="138.96" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.28%)</title><rect x="352.6" y="389" width="3.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="355.64" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.17%)</title><rect x="289.3" y="341" width="2.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="292.34" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.44%)</title><rect x="20.4" y="325" width="5.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.44" y="335.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="261" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1185.17" y="271.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="310.2" y="309" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="313.22" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.22%)</title><rect x="11.3" y="437" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.31" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.88%)</title><rect x="42.6" y="293" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.63" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="293.3" y="293" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.25" y="303.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.06%)</title><rect x="1093.4" y="389" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1096.41" y="399.5" ></text>
</g>
<g >
<title>_start (18,242,424,060 samples, 99.89%)</title><rect x="11.3" y="501" width="1178.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.31" y="511.5" >_start</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.11%)</title><rect x="1186.1" y="229" width="1.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.08" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.22%)</title><rect x="1104.5" y="325" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1107.50" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.17%)</title><rect x="167.3" y="357" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="170.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="32.2" y="309" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.19" y="319.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (222,222,220 samples, 1.22%)</title><rect x="11.3" y="421" width="14.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.31" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (424,242,420 samples, 2.32%)</title><rect x="25.7" y="405" width="27.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="28.66" y="415.5" >s..</text>
</g>
<g >
<title>main (18,020,201,840 samples, 98.67%)</title><rect x="25.7" y="453" width="1164.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="28.66" y="463.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.22%)</title><rect x="878.7" y="325" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="881.68" y="335.5" ></text>
</g>
<g >
<title>Logger::info (2,252,525,230 samples, 12.33%)</title><rect x="647.6" y="357" width="145.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="650.64" y="367.5" >Logger::info</text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1192.35" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.33%)</title><rect x="26.3" y="133" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.32" y="143.5" ></text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.22%)</title><rect x="59.6" y="421" width="2.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="62.60" y="431.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (898,989,890 samples, 4.92%)</title><rect x="1124.1" y="421" width="58.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1127.08" y="431.5" >sim::S..</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1161.3" y="373" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.28" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="301.7" y="309" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.74" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.22%)</title><rect x="1157.4" y="357" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.37" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="175.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="389" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.35" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (20,202,020 samples, 0.11%)</title><rect x="148.4" y="309" width="1.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="151.36" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="314.53" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (494,949,490 samples, 2.71%)</title><rect x="883.9" y="373" width="32.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="886.90" y="383.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="325" width="6.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.17" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="308.9" y="309" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="311.92" y="319.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (70,707,070 samples, 0.39%)</title><rect x="25.7" y="389" width="4.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="28.66" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1101.2" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.24" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1147.6" y="309" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.58" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="191.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.33%)</title><rect x="1141.7" y="357" width="3.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1144.70" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="303.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.22%)</title><rect x="396.4" y="373" width="2.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="399.37" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="310.9" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="313.87" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="290.0" y="325" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="292.99" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.16%)</title><rect x="39.4" y="325" width="13.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.37" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="36.1" y="373" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="39.11" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="873.5" y="357" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="876.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="175.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.66%)</title><rect x="288.7" y="373" width="7.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="291.68" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="239.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,606,060 samples, 0.33%)</title><rect x="73.3" y="421" width="3.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="76.31" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="1126.0" y="405" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.04" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (141,414,140 samples, 0.77%)</title><rect x="296.5" y="373" width="9.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="299.52" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="137.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="140.27" y="239.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="288.0" y="373" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="291.03" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.22%)</title><rect x="1186.1" y="261" width="2.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.08" y="271.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 0.17%)</title><rect x="303.0" y="341" width="2.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="306.04" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="213" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.17" y="223.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.06%)</title><rect x="1148.9" y="389" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1151.88" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="373" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.69" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (20,202,020 samples, 0.11%)</title><rect x="77.2" y="421" width="1.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="80.22" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.17%)</title><rect x="1100.6" y="325" width="1.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1103.59" y="335.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="145.8" y="341" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="148.75" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="213" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="1108.4" y="325" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1111.42" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="117" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.04" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.44%)</title><rect x="20.4" y="341" width="5.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.44" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="485" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="147.1" y="325" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="150.06" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.27%)</title><rect x="118.3" y="389" width="15.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="121.34" y="399.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.11%)</title><rect x="1165.2" y="373" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1168.20" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1101.9" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1104.89" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="79.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.06%)</title><rect x="166.6" y="325" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="169.64" y="335.5" ></text>
</g>
<g >
<title>malloc (303,030,300 samples, 1.66%)</title><rect x="604.6" y="357" width="19.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.57" y="367.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="304.3" y="325" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="307.35" y="335.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="312.2" y="341" width="1.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="315.18" y="351.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="881.3" y="325" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="884.29" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="143.1" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="146.14" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.22%)</title><rect x="17.8" y="341" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.83" y="351.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (575,757,570 samples, 3.15%)</title><rect x="133.4" y="405" width="37.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="136.35" y="415.5" >sim..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.06%)</title><rect x="1169.8" y="389" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1172.77" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1188.0" y="133" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.04" y="143.5" ></text>
</g>
<g >
<title>_IO_file_open (70,707,070 samples, 0.39%)</title><rect x="25.7" y="325" width="4.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="28.66" y="335.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,202,020,060 samples, 77.77%)</title><rect x="170.6" y="405" width="917.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="173.55" y="415.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="213" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.39" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="293" width="6.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.17" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.33%)</title><rect x="146.4" y="357" width="3.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="149.40" y="367.5" ></text>
</g>
<g >
<title>YAML::Load (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="405" width="6.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.17" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="165" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.39" y="175.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="149.7" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="152.67" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="1169.1" y="389" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1172.12" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1161.9" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.94" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="165" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="175.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,242,424,230 samples, 6.80%)</title><rect x="1007.9" y="389" width="80.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1010.91" y="399.5" >void sim:..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 0.22%)</title><rect x="1137.8" y="389" width="2.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1140.79" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.39%)</title><rect x="1170.4" y="389" width="4.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1173.42" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1144.3" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.31" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="291.3" y="357" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="294.29" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1159.3" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.33" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (222,222,220 samples, 1.22%)</title><rect x="152.9" y="357" width="14.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="155.93" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="136.6" y="357" width="1.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="139.62" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="295.2" y="245" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.21" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="293" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1129.3" y="405" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1132.30" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.68" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1154.8" y="357" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.76" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (50,505,050 samples, 0.28%)</title><rect x="147.1" y="341" width="3.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="150.06" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (80,808,080 samples, 0.44%)</title><rect x="20.4" y="373" width="5.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="23.44" y="383.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.33%)</title><rect x="1141.7" y="373" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.70" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="1101.9" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1104.89" y="319.5" ></text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.55%)</title><rect x="62.2" y="421" width="6.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="65.21" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.1" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.08" y="255.5" ></text>
</g>
<g >
<title>_IO_file_fopen (70,707,070 samples, 0.39%)</title><rect x="25.7" y="341" width="4.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="28.66" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.17%)</title><rect x="1100.6" y="341" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1103.59" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.28%)</title><rect x="1145.6" y="373" width="3.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1148.62" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="150.3" y="357" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="153.32" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="389" width="0.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="137.3" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="140.27" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.22%)</title><rect x="147.7" y="325" width="2.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="150.71" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.22%)</title><rect x="27.6" y="85" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.62" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.22%)</title><rect x="1183.5" y="245" width="2.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.47" y="255.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.28%)</title><rect x="1120.8" y="405" width="3.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1123.82" y="415.5" ></text>
</g>
<g >
<title>YAML::LoadFile (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="421" width="6.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.17" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="357" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.69" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.88%)</title><rect x="871.5" y="373" width="10.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="874.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.11%)</title><rect x="580.4" y="357" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="287.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="593.5" y="373" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="596.47" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (101,010,100 samples, 0.55%)</title><rect x="333.1" y="389" width="6.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="336.06" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1161.3" y="357" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1164.28" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="11.3" y="341" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="14.31" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="341" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="1098.6" y="357" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1101.63" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="28.9" y="53" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.93" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="127.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.17%)</title><rect x="1138.4" y="357" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1141.44" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="311.5" y="341" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="314.53" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.06%)</title><rect x="1162.6" y="373" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1165.59" y="383.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,070,706,970 samples, 55.14%)</title><rect x="357.2" y="389" width="650.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="360.21" y="399.5" >sim::Switch::process</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (70,707,070 samples, 0.39%)</title><rect x="136.6" y="373" width="4.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="139.62" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="373" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Event::Event (262,626,260 samples, 1.44%)</title><rect x="1071.2" y="373" width="17.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1074.22" y="383.5" ></text>
</g>
<g >
<title>strlen@plt (40,404,040 samples, 0.22%)</title><rect x="1005.3" y="373" width="2.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1008.30" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.11%)</title><rect x="867.6" y="357" width="1.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="870.59" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="149" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.39" y="159.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1182.8" y="229" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.82" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="145.1" y="341" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="148.10" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.28%)</title><rect x="293.3" y="325" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="296.25" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="134.0" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="137.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="271.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.44%)</title><rect x="1088.2" y="405" width="5.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1091.19" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="501" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="290.6" y="309" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="293.64" y="319.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="134.7" y="373" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="137.66" y="383.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.06%)</title><rect x="1163.9" y="373" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1166.89" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.17%)</title><rect x="289.3" y="357" width="2.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="292.34" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="229" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="239.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.11%)</title><rect x="1186.1" y="245" width="1.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.08" y="255.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="405" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.35" y="415.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1096.0" y="373" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1099.02" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (30,303,030 samples, 0.17%)</title><rect x="54.4" y="437" width="1.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="57.38" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (181,818,180 samples, 1.00%)</title><rect x="155.5" y="341" width="11.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="158.54" y="351.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="197" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.39" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="137.3" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="140.27" y="191.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.22%)</title><rect x="308.9" y="341" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="311.92" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="286.7" y="373" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="289.73" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (252,525,250 samples, 1.38%)</title><rect x="316.7" y="389" width="16.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="319.75" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.22%)</title><rect x="220.8" y="389" width="2.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="223.81" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.06%)</title><rect x="298.5" y="277" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="301.47" y="287.5" ></text>
</g>
<g >
<title>sim::is_valid_link (80,808,080 samples, 0.44%)</title><rect x="1132.6" y="389" width="5.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1135.57" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.68" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.22%)</title><rect x="143.8" y="357" width="2.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="146.79" y="367.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1176.9" y="373" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.95" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="261" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (222,222,220 samples, 1.22%)</title><rect x="11.3" y="405" width="14.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.31" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.28%)</title><rect x="1099.3" y="357" width="3.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1102.28" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="341" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="207.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.28%)</title><rect x="1145.6" y="341" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.62" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.17%)</title><rect x="874.8" y="357" width="1.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="877.77" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1144.3" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.31" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (212,121,210 samples, 1.16%)</title><rect x="39.4" y="341" width="13.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="42.37" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="300.4" y="293" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="303.43" y="303.5" ></text>
</g>
<g >
<title>cfree (303,030,300 samples, 1.66%)</title><rect x="573.9" y="373" width="19.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="576.89" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1095.4" y="373" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1098.37" y="383.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.33%)</title><rect x="596.7" y="373" width="4.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="599.74" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="261" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.69" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="245" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="255.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="301.7" y="325" width="1.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="304.74" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="255.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.06%)</title><rect x="1159.3" y="325" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1162.33" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.22%)</title><rect x="842.8" y="357" width="2.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="845.79" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.11%)</title><rect x="312.2" y="325" width="1.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="315.18" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="305.0" y="357" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="308.00" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="298.5" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="301.47" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.1" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.08" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="1178.9" y="405" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.90" y="415.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.11%)</title><rect x="882.6" y="357" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="885.60" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="310.9" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="313.87" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1108.4" y="357" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1111.42" y="367.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.06%)</title><rect x="314.1" y="341" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="317.14" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.44%)</title><rect x="1103.2" y="357" width="5.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1106.20" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="310.9" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="313.87" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="405" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::basic_filebuf (10,101,010 samples, 0.06%)</title><rect x="53.1" y="405" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="56.08" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="300.4" y="309" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="303.43" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (474,747,470 samples, 2.60%)</title><rect x="252.1" y="389" width="30.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="255.13" y="399.5" >si..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="357" width="6.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.17" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="213" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="111.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="302.4" y="309" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="305.39" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.11%)</title><rect x="915.9" y="373" width="1.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="918.88" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="297.2" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="300.17" y="335.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.17%)</title><rect x="223.4" y="389" width="2.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="226.42" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.11%)</title><rect x="873.5" y="341" width="1.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="876.46" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="373" width="6.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1185.17" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (50,505,050 samples, 0.28%)</title><rect x="1175.0" y="389" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.99" y="399.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.28%)</title><rect x="1145.6" y="357" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1148.62" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (80,808,080 samples, 0.44%)</title><rect x="1103.2" y="341" width="5.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1106.20" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="311.5" y="309" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="314.53" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="255.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.50%)</title><rect x="297.2" y="341" width="5.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="300.17" y="351.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="245" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1185.17" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.06%)</title><rect x="301.1" y="277" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="304.08" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="1102.5" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1105.54" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>operator new (111,111,110 samples, 0.61%)</title><rect x="231.3" y="389" width="7.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="234.25" y="399.5" ></text>
</g>
<g >
<title>cfree (383,838,380 samples, 2.10%)</title><rect x="108.6" y="405" width="24.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="111.55" y="415.5" >c..</text>
</g>
<g >
<title>all (18,262,626,080 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.4" y="149" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="159.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.06%)</title><rect x="1186.1" y="213" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.08" y="223.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.06%)</title><rect x="869.5" y="357" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="872.55" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="47.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.06%)</title><rect x="310.9" y="277" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="313.87" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="293" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.69" y="303.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.22%)</title><rect x="399.0" y="373" width="2.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="401.98" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1094.7" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1097.71" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="875.4" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="878.42" y="351.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.06%)</title><rect x="1107.1" y="325" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1110.11" y="335.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="1094.1" y="373" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1097.06" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="437" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1158.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1161.67" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="880.6" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="883.64" y="271.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.06%)</title><rect x="11.3" y="357" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.31" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.03" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1104.5" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1107.50" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="255.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="421" width="0.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.69" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (70,707,070 samples, 0.39%)</title><rect x="30.9" y="389" width="4.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="33.88" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (444,444,440 samples, 2.43%)</title><rect x="25.7" y="437" width="28.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="28.66" y="447.5" >si..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.06%)</title><rect x="876.1" y="325" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="879.07" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1176.9" y="341" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.95" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (20,202,020 samples, 0.11%)</title><rect x="315.4" y="373" width="1.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="318.44" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="229" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.39" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1174.3" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.34" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.06%)</title><rect x="1097.3" y="357" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1100.32" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="290.6" y="277" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="293.64" y="287.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="421" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.35" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.22%)</title><rect x="1183.5" y="261" width="2.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.47" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.22%)</title><rect x="11.3" y="453" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.31" y="463.5" ></text>
</g>
<g >
<title>sim::Event::Event (212,121,210 samples, 1.16%)</title><rect x="238.4" y="389" width="13.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="241.43" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1145.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.97" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="878.0" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.03" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="207.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (20,202,020 samples, 0.11%)</title><rect x="355.9" y="389" width="1.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="358.91" y="399.5" ></text>
</g>
<g >
<title>fopen (70,707,070 samples, 0.39%)</title><rect x="25.7" y="357" width="4.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="28.66" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (16,181,818,020 samples, 88.61%)</title><rect x="78.5" y="421" width="1045.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="81.53" y="431.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>pthread_once@plt (10,101,010 samples, 0.06%)</title><rect x="1107.8" y="325" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1110.77" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="137.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="140.27" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.17%)</title><rect x="1164.5" y="389" width="2.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1167.55" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="229" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.17" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (18,242,424,060 samples, 99.89%)</title><rect x="11.3" y="469" width="1178.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.31" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.06%)</title><rect x="314.1" y="357" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="317.14" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="341" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.69" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.77%)</title><rect x="156.8" y="293" width="9.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="159.85" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.66%)</title><rect x="158.2" y="277" width="7.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="161.15" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="127.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.28%)</title><rect x="32.2" y="341" width="3.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="35.19" y="351.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (121,212,120 samples, 0.66%)</title><rect x="1182.2" y="437" width="7.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1185.17" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="335.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.28%)</title><rect x="1156.7" y="373" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1159.71" y="383.5" ></text>
</g>
<g >
<title>operator new (363,636,360 samples, 1.99%)</title><rect x="600.7" y="373" width="23.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="603.65" y="383.5" >o..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.11%)</title><rect x="143.8" y="341" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="146.79" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.22%)</title><rect x="1143.0" y="341" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.01" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1184.8" y="165" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.78" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (222,222,220 samples, 1.22%)</title><rect x="38.7" y="357" width="14.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="41.72" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="288.7" y="357" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="291.68" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (50,505,050 samples, 0.28%)</title><rect x="293.3" y="341" width="3.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="296.25" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="309.6" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="312.57" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.06%)</title><rect x="151.6" y="357" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="154.63" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="299.1" y="325" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="302.13" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.39%)</title><rect x="291.9" y="357" width="4.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="294.95" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.17%)</title><rect x="1166.5" y="389" width="2.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1169.50" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1165.2" y="357" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.20" y="367.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.06%)</title><rect x="299.8" y="309" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="302.78" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="880.0" y="277" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="882.99" y="287.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.06%)</title><rect x="1130.0" y="405" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1132.96" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="135.3" y="373" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="138.31" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="469" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.33%)</title><rect x="1156.1" y="389" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1159.06" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (272,727,270 samples, 1.49%)</title><rect x="35.5" y="389" width="17.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="38.45" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1159.3" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.33" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (282,828,280 samples, 1.55%)</title><rect x="555.6" y="373" width="18.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="558.62" y="383.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.06%)</title><rect x="288.7" y="325" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="291.68" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (20,202,020 samples, 0.11%)</title><rect x="282.8" y="389" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="285.81" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,808,080,770 samples, 20.85%)</title><rect x="624.1" y="373" width="246.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="627.15" y="383.5" >sim::Link::get_packet</text>
</g>
<g >
<title>sim::Host::enqueue_packet (131,313,130 samples, 0.72%)</title><rect x="296.5" y="357" width="8.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="299.52" y="367.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.06%)</title><rect x="288.7" y="341" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="291.68" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (252,525,250 samples, 1.38%)</title><rect x="36.8" y="373" width="16.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="39.76" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.22%)</title><rect x="27.6" y="101" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.62" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="357" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.17%)</title><rect x="1105.2" y="309" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1108.15" y="319.5" ></text>
</g>
<g >
<title>Logger::warn (2,383,838,360 samples, 13.05%)</title><rect x="401.6" y="373" width="154.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="404.59" y="383.5" >Logger::warn</text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 1.77%)</title><rect x="793.2" y="357" width="20.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="796.19" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.17%)</title><rect x="299.8" y="325" width="1.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="302.78" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.69" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (70,707,070 samples, 0.39%)</title><rect x="1160.0" y="389" width="4.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1162.98" y="399.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.06%)</title><rect x="1097.3" y="373" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1100.32" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="298.5" y="325" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="301.47" y="335.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (222,222,220 samples, 1.22%)</title><rect x="541.3" y="357" width="14.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="544.26" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.17%)</title><rect x="881.9" y="373" width="2.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="884.95" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.06%)</title><rect x="307.6" y="357" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="310.61" y="367.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.11%)</title><rect x="870.2" y="373" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="873.20" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1176.9" y="357" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.95" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (10,101,010 samples, 0.06%)</title><rect x="1168.5" y="389" width="0.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1171.46" y="399.5" ></text>
</g>
<g >
<title>open64 (70,707,070 samples, 0.39%)</title><rect x="25.7" y="309" width="4.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="28.66" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_from (40,404,040 samples, 0.22%)</title><rect x="1135.2" y="373" width="2.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1138.18" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="191.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="405" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.69" y="415.5" ></text>
</g>
<g >
<title>malloc (343,434,340 samples, 1.88%)</title><rect x="845.4" y="341" width="22.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="848.40" y="351.5" >m..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="197" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1185.17" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (30,303,030 samples, 0.17%)</title><rect x="1180.2" y="405" width="2.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1183.21" y="415.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="876.7" y="357" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="879.73" y="367.5" ></text>
</g>
<g >
<title>sim::Link::arrive (535,353,530 samples, 2.93%)</title><rect x="134.7" y="389" width="34.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="137.66" y="399.5" >si..</text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="314.8" y="373" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="317.79" y="383.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="389" width="6.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1185.17" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="292.6" y="341" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="295.60" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.06%)</title><rect x="154.9" y="341" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="157.89" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1154.1" y="373" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.10" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="301.1" y="229" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="304.08" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="101" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.22%)</title><rect x="27.6" y="69" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.62" y="79.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (282,828,280 samples, 1.55%)</title><rect x="1131.3" y="405" width="18.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1134.26" y="415.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.22%)</title><rect x="1137.8" y="373" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.79" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (131,313,130 samples, 0.72%)</title><rect x="1140.4" y="389" width="8.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1143.40" y="399.5" ></text>
</g>
<g >
<title>__uselocale@plt (10,101,010 samples, 0.06%)</title><rect x="166.0" y="325" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="168.98" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.44%)</title><rect x="1183.5" y="277" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.47" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.11%)</title><rect x="595.4" y="373" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="598.43" y="383.5" ></text>
</g>
<g >
<title>sim::Host::~Host (131,313,130 samples, 0.72%)</title><rect x="12.0" y="373" width="8.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.96" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="164.0" y="245" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.03" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="271.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (444,444,440 samples, 2.43%)</title><rect x="25.7" y="421" width="28.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="28.66" y="431.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="223.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.06%)</title><rect x="1131.9" y="389" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1134.91" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (141,414,140 samples, 0.77%)</title><rect x="305.7" y="373" width="9.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="308.65" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1118.9" y="341" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1121.86" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="297.8" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="300.82" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="149.7" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="152.67" y="287.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="874.1" y="325" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="877.12" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="325" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.69" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="310.2" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="313.22" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="453" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.22%)</title><rect x="878.7" y="309" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="881.68" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="293.3" y="277" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.25" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 1.49%)</title><rect x="823.9" y="341" width="17.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="826.86" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="307.0" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="309.96" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.06%)</title><rect x="308.3" y="341" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="311.26" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="303.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.06%)</title><rect x="873.5" y="325" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="876.46" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (60,606,060 samples, 0.33%)</title><rect x="31.5" y="373" width="4.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="34.54" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="341" width="6.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.17" y="351.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (444,444,440 samples, 2.43%)</title><rect x="1149.5" y="405" width="28.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1152.54" y="415.5" >si..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1181.5" y="389" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.52" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="245" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.39" y="255.5" ></text>
</g>
<g >
<title>sim::Host::process (505,050,500 samples, 2.77%)</title><rect x="284.1" y="389" width="32.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="287.12" y="399.5" >si..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (70,707,070 samples, 0.39%)</title><rect x="25.7" y="373" width="4.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="28.66" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.06%)</title><rect x="1186.7" y="213" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1189.74" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="175.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.06%)</title><rect x="308.9" y="293" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="311.92" y="303.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.17%)</title><rect x="1154.1" y="389" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1157.10" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="58.9" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="61.95" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.68" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.06%)</title><rect x="11.3" y="373" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.31" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="883.3" y="341" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="886.25" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1106.5" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.46" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="389" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::SendData::operator (424,242,420 samples, 2.32%)</title><rect x="1093.4" y="405" width="27.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1096.41" y="415.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.06%)</title><rect x="1108.4" y="341" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1111.42" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (151,515,150 samples, 0.83%)</title><rect x="156.2" y="325" width="9.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="159.19" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.61%)</title><rect x="158.8" y="261" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="161.81" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1159.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1162.33" y="319.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.22%)</title><rect x="1055.6" y="373" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1058.55" y="383.5" ></text>
</g>
<g >
<title>cfree (424,242,420 samples, 2.32%)</title><rect x="814.1" y="357" width="27.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="817.07" y="367.5" >c..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1173.7" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.68" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.06%)</title><rect x="1178.3" y="405" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1181.25" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="841.5" y="357" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="844.48" y="367.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.44%)</title><rect x="20.4" y="357" width="5.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="23.44" y="367.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.39%)</title><rect x="226.7" y="389" width="4.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="229.68" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.06%)</title><rect x="868.9" y="357" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="871.89" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="310.2" y="325" width="1.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="313.22" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (40,404,040 samples, 0.22%)</title><rect x="311.5" y="357" width="2.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="314.53" y="367.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.06%)</title><rect x="286.1" y="373" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="289.07" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="277" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1185.17" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (70,707,070 samples, 0.39%)</title><rect x="68.7" y="421" width="4.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="71.74" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.06%)</title><rect x="145.1" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="148.10" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="310.9" y="229" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="313.87" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1145.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.97" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.39%)</title><rect x="877.4" y="341" width="4.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="880.38" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.06%)</title><rect x="308.9" y="325" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="311.92" y="335.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (20,202,020 samples, 0.11%)</title><rect x="169.2" y="389" width="1.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="172.25" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="32.2" y="325" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.19" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="872.8" y="357" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="875.81" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.22%)</title><rect x="293.9" y="261" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.90" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.06%)</title><rect x="313.5" y="341" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="316.48" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="1174.3" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.34" y="367.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.11%)</title><rect x="1118.2" y="357" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1121.21" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1105.8" y="277" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1108.81" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="421" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (212,121,210 samples, 1.16%)</title><rect x="12.0" y="389" width="13.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.96" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="138.6" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="141.57" y="351.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 1.11%)</title><rect x="1058.2" y="373" width="13.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1061.16" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="1004.6" y="373" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1007.65" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.06%)</title><rect x="1182.8" y="261" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.82" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1182.2" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1185.17" y="95.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.06%)</title><rect x="1098.6" y="341" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1101.63" y="351.5" ></text>
</g>
<g >
<title>operator new (343,434,340 samples, 1.88%)</title><rect x="845.4" y="357" width="22.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="848.40" y="367.5" >o..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.17%)</title><rect x="1184.1" y="197" width="2.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.13" y="207.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="30.2" y="389" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="33.23" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.88%)</title><rect x="42.6" y="309" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.63" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.06%)</title><rect x="1163.2" y="373" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1166.24" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (17,424,242,250 samples, 95.41%)</title><rect x="56.3" y="437" width="1125.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="59.34" y="447.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.06%)</title><rect x="149.7" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="152.67" y="319.5" ></text>
</g>
<g >
<title>vsnprintf (141,414,140 samples, 0.77%)</title><rect x="156.8" y="309" width="9.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="159.85" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1095.4" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.37" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="225.4" y="389" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="228.38" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.06%)</title><rect x="1185.4" y="133" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.43" y="143.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (50,505,050 samples, 0.28%)</title><rect x="137.9" y="357" width="3.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="140.92" y="367.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (424,242,420 samples, 2.32%)</title><rect x="765.8" y="341" width="27.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="768.77" y="351.5" >v..</text>
</g>
<g >
<title>std::_Rb_tree_increment (1,353,535,340 samples, 7.41%)</title><rect x="917.2" y="373" width="87.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="920.19" y="383.5" >std::_Rb_t..</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="1145.6" y="325" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.62" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.06%)</title><rect x="1130.6" y="405" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1133.61" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1187.4" y="181" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.39" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.06%)</title><rect x="314.1" y="325" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="317.14" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="311.5" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.53" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="32.2" y="293" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.19" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="136.0" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="138.96" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (101,010,100 samples, 0.55%)</title><rect x="1182.2" y="309" width="6.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.17" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.06%)</title><rect x="1174.3" y="373" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1177.34" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 0.22%)</title><rect x="1183.5" y="213" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.47" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1173.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.03" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="309" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.69" y="319.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.28%)</title><rect x="293.3" y="309" width="3.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="296.25" y="319.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.28%)</title><rect x="308.3" y="357" width="3.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="311.26" y="367.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.06%)</title><rect x="1159.3" y="341" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1162.33" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.17%)</title><rect x="1184.1" y="181" width="2.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.13" y="191.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1174.3" y="341" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.34" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.06%)</title><rect x="53.7" y="405" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="56.73" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="197" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="207.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.17%)</title><rect x="167.3" y="341" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="170.29" y="351.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.06%)</title><rect x="152.3" y="357" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="155.28" y="367.5" ></text>
</g>
<g >
<title>Speed&lt;GBit, Second&gt; parse_with_default&lt;Speed&lt;GBit, Second&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.35" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="1178.3" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1181.25" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.06%)</title><rect x="876.1" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="879.07" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.06%)</title><rect x="1182.8" y="277" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.82" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="296.5" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="299.52" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.39%)</title><rect x="25.7" y="181" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.66" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="24.4" y="309" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.36" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.17%)</title><rect x="139.2" y="341" width="2.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="142.23" y="351.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.06%)</title><rect x="1096.7" y="373" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1099.67" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.06%)</title><rect x="1146.9" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1149.92" y="143.5" ></text>
</g>
<g >
<title>malloc (141,414,140 samples, 0.77%)</title><rect x="1062.1" y="357" width="9.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1065.08" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.28%)</title><rect x="49.8" y="277" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="52.81" y="287.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.06%)</title><rect x="309.6" y="325" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="312.57" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (202,020,200 samples, 1.11%)</title><rect x="339.6" y="389" width="13.0" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="342.59" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.06%)</title><rect x="143.1" y="357" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="146.14" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="136.6" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="139.62" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.94%)</title><rect x="1098.0" y="373" width="11.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1100.98" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.06%)</title><rect x="1178.3" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.25" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.06%)</title><rect x="1101.9" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1104.89" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.06%)</title><rect x="1188.7" y="277" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1191.69" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1144.3" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1147.31" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.22%)</title><rect x="878.7" y="293" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.68" y="303.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (414,141,410 samples, 2.27%)</title><rect x="1094.1" y="389" width="26.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1097.06" y="399.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1139.1" y="341" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.09" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.06%)</title><rect x="290.6" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="293.64" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.28%)</title><rect x="27.0" y="117" width="3.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.97" y="127.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.39%)</title><rect x="877.4" y="357" width="4.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="880.38" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.17%)</title><rect x="1105.2" y="293" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1108.15" y="303.5" ></text>
</g>
</g>
</svg>
