<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1150.8" y="421" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.76" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="207.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (888,888,880 samples, 4.18%)</title><rect x="1135.6" y="453" width="49.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1138.62" y="463.5" >sim:..</text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (161,616,160 samples, 0.76%)</title><rect x="1137.3" y="421" width="9.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1140.31" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="29.1" y="357" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.06" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="16.7" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.73" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="23.5" y="117" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.45" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="325" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="133" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="245" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.24%)</title><rect x="1154.7" y="405" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1157.68" y="415.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="438.3" y="405" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="441.28" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1089.7" y="405" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1092.66" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1163.7" y="405" width="0.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1166.65" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="405" width="4.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1187.95" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="383.9" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.90" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (30,303,030 samples, 0.14%)</title><rect x="415.9" y="421" width="1.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="418.85" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1182.7" y="437" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.71" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.79" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (151,515,150 samples, 0.71%)</title><rect x="1121.0" y="405" width="8.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1124.05" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="453" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.44" y="463.5" ></text>
</g>
<g >
<title>sim::Process::~Process (191,919,190 samples, 0.90%)</title><rect x="103.1" y="453" width="10.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="106.05" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.19%)</title><rect x="283.0" y="373" width="2.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="286.00" y="383.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.5" y="389" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1132.46" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1186.1" y="261" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.08" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="396.8" y="373" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="399.79" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="816.7" y="357" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="819.66" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,404,040 samples, 0.19%)</title><rect x="394.0" y="357" width="2.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="396.99" y="367.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.14%)</title><rect x="38.6" y="453" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="41.59" y="463.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.43%)</title><rect x="1103.7" y="437" width="5.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1106.67" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="117" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1138.4" y="405" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1141.43" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="1122.2" y="373" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1125.17" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="31.3" y="325" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.30" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,808,080 samples, 0.38%)</title><rect x="384.5" y="405" width="4.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="387.46" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::weak_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="11.1" y="341" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="14.12" y="351.5" ></text>
</g>
<g >
<title>sim::Generate::operator (242,424,240 samples, 1.14%)</title><rect x="257.8" y="437" width="13.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="260.77" y="447.5" ></text>
</g>
<g >
<title>sim::Event::get_time (30,303,030 samples, 0.14%)</title><rect x="45.3" y="453" width="1.7" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="48.32" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::SimplePacketQueue (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1192.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.05%)</title><rect x="284.7" y="341" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="287.68" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,444,444,410 samples, 16.20%)</title><rect x="621.0" y="405" width="191.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="624.02" y="415.5" >sim::Link::get_packet</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.24%)</title><rect x="1186.6" y="293" width="2.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.64" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1121.6" y="389" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1124.61" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.90%)</title><rect x="11.1" y="469" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (60,606,060 samples, 0.29%)</title><rect x="1160.9" y="421" width="3.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1163.85" y="431.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.05%)</title><rect x="21.8" y="357" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="24.77" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (282,828,280 samples, 1.33%)</title><rect x="568.9" y="405" width="15.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="571.89" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="181" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.76" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.35" y="223.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="296.5" y="389" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="299.45" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="389" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="335.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.10%)</title><rect x="635.0" y="389" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="638.04" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.14%)</title><rect x="887.3" y="389" width="1.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="890.29" y="399.5" ></text>
</g>
<g >
<title>malloc (171,717,170 samples, 0.81%)</title><rect x="1094.1" y="389" width="9.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1097.14" y="399.5" ></text>
</g>
<g >
<title>sim::Host::~Host (90,909,090 samples, 0.43%)</title><rect x="12.2" y="405" width="5.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.24" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (90,909,090 samples, 0.43%)</title><rect x="263.4" y="421" width="5.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="266.38" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (60,606,060 samples, 0.29%)</title><rect x="1132.3" y="437" width="3.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1135.26" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="389" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (40,404,040 samples, 0.19%)</title><rect x="394.0" y="389" width="2.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="396.99" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.10%)</title><rect x="1183.3" y="437" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1186.27" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.14%)</title><rect x="1139.5" y="389" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.55" y="399.5" ></text>
</g>
<g >
<title>open64 (80,808,080 samples, 0.38%)</title><rect x="22.3" y="341" width="4.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="25.33" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (111,111,110 samples, 0.52%)</title><rect x="276.3" y="405" width="6.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="279.27" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.79" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="272.3" y="421" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="275.35" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="788.6" y="389" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="791.63" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1128.3" y="373" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1131.34" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="287.5" ></text>
</g>
<g >
<title>Logger::warn (2,333,333,310 samples, 10.97%)</title><rect x="439.4" y="405" width="129.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="442.40" y="415.5" >Logger::warn</text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 0.19%)</title><rect x="294.8" y="421" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="297.77" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.5" y="405" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1132.46" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (272,727,270 samples, 1.28%)</title><rect x="21.8" y="437" width="15.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="24.77" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.14%)</title><rect x="1185.0" y="293" width="1.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.95" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (21,242,424,030 samples, 99.90%)</title><rect x="11.1" y="517" width="1178.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.12" y="527.5" >__libc_start_main</text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="382.8" y="405" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="385.78" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="264.5" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="267.50" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1170.4" y="405" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.38" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.33%)</title><rect x="22.9" y="149" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.89" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1128.9" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.90" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="399.79" y="335.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 1.14%)</title><rect x="1090.2" y="405" width="13.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1093.22" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1171.5" y="373" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.76%)</title><rect x="779.7" y="373" width="8.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="782.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="17.3" y="357" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (404,040,400 samples, 1.90%)</title><rect x="748.3" y="389" width="22.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="751.27" y="399.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="389.5" y="405" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="392.51" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="405" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.39" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.33%)</title><rect x="1141.8" y="341" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.79" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 1.24%)</title><rect x="233.7" y="421" width="14.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="236.67" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.44" y="383.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="437" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.44" y="447.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.05%)</title><rect x="1146.3" y="421" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1149.28" y="431.5" ></text>
</g>
<g >
<title>_IO_file_open (80,808,080 samples, 0.38%)</title><rect x="22.3" y="357" width="4.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="25.33" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="405" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="309" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="319.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="290.3" y="373" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="293.29" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (919,191,910 samples, 4.32%)</title><rect x="47.0" y="453" width="51.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="50.00" y="463.5" >sim::..</text>
</g>
<g >
<title>nons (21,262,626,050 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >nons</text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="388.9" y="405" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="391.95" y="415.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="267.3" y="341" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="270.30" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="191.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="275.7" y="405" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="278.71" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="341" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.52" y="223.5" ></text>
</g>
<g >
<title>sim::SendData::operator (393,939,390 samples, 1.85%)</title><rect x="1108.7" y="437" width="21.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1111.72" y="447.5" >s..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="385.6" y="373" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="388.58" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="264.5" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="267.50" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (101,010,100 samples, 0.48%)</title><rect x="287.5" y="389" width="5.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="290.48" y="399.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,767,676,750 samples, 8.31%)</title><rect x="1005.6" y="421" width="98.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1008.57" y="431.5" >void sim::S..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="386.7" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="389.70" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="165" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="175.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.10%)</title><rect x="1119.4" y="405" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1122.37" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="25.7" y="53" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.70" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="239.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.24%)</title><rect x="1177.1" y="389" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.11" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (50,505,050 samples, 0.24%)</title><rect x="1154.7" y="421" width="2.8" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1157.68" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (50,505,050 samples, 0.24%)</title><rect x="397.9" y="421" width="2.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="400.91" y="431.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (383,838,380 samples, 1.81%)</title><rect x="1108.7" y="421" width="21.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1111.72" y="431.5" >s..</text>
</g>
<g >
<title>_start (21,242,424,030 samples, 99.90%)</title><rect x="11.1" y="533" width="1178.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.12" y="543.5" >_start</text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (111,111,110 samples, 0.52%)</title><rect x="1112.1" y="389" width="6.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1115.08" y="399.5" ></text>
</g>
<g >
<title>sim::Event::Event (20,202,020 samples, 0.10%)</title><rect x="338.5" y="421" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="341.49" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.9" y="149" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.88" y="159.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1136.7" y="421" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1139.75" y="431.5" ></text>
</g>
<g >
<title>utils::create_all_directories (20,202,020 samples, 0.10%)</title><rect x="35.8" y="421" width="1.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="38.79" y="431.5" ></text>
</g>
<g >
<title>sim::Host::process (272,727,270 samples, 1.28%)</title><rect x="382.8" y="421" width="15.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="385.78" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1163.7" y="389" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1166.65" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="818.9" y="389" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="821.90" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="1122.2" y="389" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1125.17" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="390.6" y="373" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="393.63" y="383.5" ></text>
</g>
<g >
<title>sim::Link::Link (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="405" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1192.44" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.10%)</title><rect x="1157.5" y="421" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1160.49" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="277" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.64" y="287.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="271.8" y="421" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="274.79" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="223.5" ></text>
</g>
<g >
<title>fstatat64 (20,202,020 samples, 0.10%)</title><rect x="35.8" y="389" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="38.79" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="817.2" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="820.22" y="351.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1181.6" y="421" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.59" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1121.6" y="373" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1124.61" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="239.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.38%)</title><rect x="604.8" y="405" width="4.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.76" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (40,404,040 samples, 0.19%)</title><rect x="400.7" y="421" width="2.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="403.72" y="431.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.14%)</title><rect x="1139.5" y="373" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1142.55" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to (50,505,050 samples, 0.24%)</title><rect x="1151.9" y="421" width="2.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1154.88" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="396.8" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="399.79" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.79" y="223.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (333,333,330 samples, 1.57%)</title><rect x="364.3" y="421" width="18.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="367.28" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="813.9" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="816.86" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="11.1" y="405" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.12" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (90,909,090 samples, 0.43%)</title><rect x="1185.0" y="469" width="5.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.95" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="262.8" y="421" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="265.82" y="431.5" ></text>
</g>
<g >
<title>cfree (363,636,360 samples, 1.71%)</title><rect x="584.6" y="405" width="20.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="587.58" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (414,141,410 samples, 1.95%)</title><rect x="271.2" y="437" width="23.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="274.23" y="447.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="383.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="393.4" y="357" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="396.43" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.19%)</title><rect x="283.0" y="389" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="286.00" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,181,818,170 samples, 5.56%)</title><rect x="819.5" y="405" width="65.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="822.46" y="415.5" >sim::Ro..</text>
</g>
<g >
<title>Logger::get_instance (90,909,090 samples, 0.43%)</title><rect x="433.2" y="405" width="5.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="436.23" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="266.2" y="325" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="269.18" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="818.9" y="373" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="821.90" y="383.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.14%)</title><rect x="1130.6" y="437" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1133.58" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1163.7" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.65" y="383.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (40,404,040 samples, 0.19%)</title><rect x="394.0" y="373" width="2.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="396.99" y="383.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="1111.0" y="405" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1113.96" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (80,808,080 samples, 0.38%)</title><rect x="17.3" y="405" width="4.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="20.29" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 0.86%)</title><rect x="11.7" y="421" width="10.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.68" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="175.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.29%)</title><rect x="1122.7" y="389" width="3.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1125.73" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.48%)</title><rect x="813.9" y="405" width="5.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="816.86" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="23.5" y="101" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.45" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="255.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 1.52%)</title><rect x="770.7" y="389" width="17.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="773.69" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="270.7" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="273.67" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (90,909,090 samples, 0.43%)</title><rect x="263.4" y="405" width="5.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="266.38" y="415.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.38%)</title><rect x="17.3" y="389" width="4.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.29" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (191,919,190 samples, 0.90%)</title><rect x="11.1" y="437" width="10.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.12" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="501" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.24%)</title><rect x="609.2" y="405" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="612.25" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.29%)</title><rect x="264.5" y="373" width="3.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="267.50" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="33.0" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.98" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.8" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.79" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1172.1" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.06" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="1120.5" y="405" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1123.49" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="293" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="1155.2" y="341" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.24" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="191.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="357" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="367.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="818.3" y="389" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="821.34" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="261" width="2.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.20" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="816.1" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="819.10" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1150.8" y="405" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.76" y="415.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="391.7" y="357" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="394.75" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (80,808,080 samples, 0.38%)</title><rect x="22.3" y="421" width="4.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="25.33" y="431.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (191,919,190 samples, 0.90%)</title><rect x="1136.7" y="437" width="10.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1139.75" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1137.9" y="405" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1140.87" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1186.1" y="213" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.08" y="223.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.10%)</title><rect x="1118.2" y="389" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1121.25" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="197" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1156.9" y="389" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.93" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.19%)</title><rect x="1158.6" y="421" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1161.61" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.3" y="37" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.26" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1172.1" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.06" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="271.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (232,323,230 samples, 1.09%)</title><rect x="735.4" y="373" width="12.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="738.38" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.56" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="216.3" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="219.29" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1130.0" y="421" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1133.02" y="431.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.29%)</title><rect x="390.6" y="389" width="3.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="393.63" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="265.1" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="268.06" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="270.7" y="389" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="273.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="229" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="239.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="275.1" y="405" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="278.15" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1186.1" y="229" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.08" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.35" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="223.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.90%)</title><rect x="11.1" y="453" width="10.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.12" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="453" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="396.8" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="399.79" y="367.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="421" width="4.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1187.95" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="197" width="2.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.20" y="207.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (80,808,080 samples, 0.38%)</title><rect x="22.3" y="405" width="4.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="25.33" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::weak_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="11.1" y="357" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="14.12" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.29%)</title><rect x="1126.1" y="389" width="3.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1129.10" y="399.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.48%)</title><rect x="328.4" y="421" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="331.40" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="21.8" y="389" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="24.77" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.05%)</title><rect x="282.4" y="405" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="285.44" y="415.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.14%)</title><rect x="15.6" y="389" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.61" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="11.1" y="421" width="0.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.12" y="431.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (282,828,280 samples, 1.33%)</title><rect x="553.2" y="389" width="15.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="556.19" y="399.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="812.2" y="405" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="815.18" y="415.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.10%)</title><rect x="812.7" y="405" width="1.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="815.74" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="1119.9" y="389" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1122.93" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="303.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="1004.5" y="405" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1007.45" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.19%)</title><rect x="391.2" y="373" width="2.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="394.19" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="296.5" y="405" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="299.45" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (40,404,040 samples, 0.19%)</title><rect x="1164.2" y="421" width="2.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1167.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.14%)</title><rect x="1185.0" y="277" width="1.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.95" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="386.7" y="373" width="1.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="389.70" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="285.2" y="389" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="288.24" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (121,212,120 samples, 0.57%)</title><rect x="1166.5" y="421" width="6.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1169.46" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (121,212,120 samples, 0.57%)</title><rect x="1173.2" y="421" width="6.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.18" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.19%)</title><rect x="1154.7" y="357" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.68" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="1142.9" y="325" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.91" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 0.10%)</title><rect x="1185.0" y="245" width="1.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1187.95" y="255.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="294.2" y="421" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="297.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="181" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.90%)</title><rect x="11.1" y="485" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;sim::Link&gt; sim::IdentifieableParser::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="421" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1192.44" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="175.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (10,101,010 samples, 0.05%)</title><rect x="268.4" y="421" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="271.42" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.19%)</title><rect x="24.6" y="85" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.57" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="309" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="261" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="335.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (585,858,580 samples, 2.76%)</title><rect x="1147.4" y="437" width="32.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1150.40" y="447.5" >si..</text>
</g>
<g >
<title>sim::Scheduler::tick (18,414,141,230 samples, 86.60%)</title><rect x="113.7" y="453" width="1021.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="116.71" y="463.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="245" width="2.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.20" y="255.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="392.3" y="357" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="395.31" y="367.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (40,404,040 samples, 0.19%)</title><rect x="886.7" y="405" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="889.73" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1128.9" y="373" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1131.90" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.44" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.29%)</title><rect x="23.5" y="133" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.45" y="143.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 0.57%)</title><rect x="27.4" y="405" width="6.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="30.38" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.05%)</title><rect x="1119.4" y="389" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1122.37" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1140.1" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.11" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (80,808,080 samples, 0.38%)</title><rect x="1141.2" y="389" width="4.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1144.23" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="303.5" ></text>
</g>
<g >
<title>operator new (343,434,340 samples, 1.62%)</title><rect x="792.0" y="389" width="19.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="795.00" y="399.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="261" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.64" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.39" y="383.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.19%)</title><rect x="1154.7" y="389" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.68" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1179.3" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.35" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (70,707,070 samples, 0.33%)</title><rect x="278.5" y="373" width="3.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="281.51" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="1125.5" y="357" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1128.53" y="367.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.05%)</title><rect x="326.7" y="421" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="329.72" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="271.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.43%)</title><rect x="40.3" y="453" width="5.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="43.27" y="463.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (171,717,170 samples, 0.81%)</title><rect x="248.2" y="437" width="9.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="251.24" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="277" width="2.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.20" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::~RoutingModule (10,101,010 samples, 0.05%)</title><rect x="11.1" y="373" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="14.12" y="383.5" ></text>
</g>
<g >
<title>cfree (565,656,560 samples, 2.66%)</title><rect x="216.9" y="437" width="31.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="219.85" y="447.5" >cf..</text>
</g>
<g >
<title>Logger::info (2,020,202,000 samples, 9.50%)</title><rect x="636.2" y="389" width="112.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="639.16" y="399.5" >Logger::info</text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.10%)</title><rect x="1118.2" y="405" width="1.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1121.25" y="415.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="1109.3" y="405" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1112.28" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.14%)</title><rect x="1126.7" y="373" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1129.66" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.14%)</title><rect x="288.6" y="373" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="291.60" y="383.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1162.5" y="405" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1165.53" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (21,242,424,030 samples, 99.90%)</title><rect x="11.1" y="501" width="1178.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.12" y="511.5" >[libc.so.6]</text>
</g>
<g >
<title>fopen (80,808,080 samples, 0.38%)</title><rect x="22.3" y="389" width="4.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="25.33" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1109.8" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.84" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.05%)</title><rect x="21.8" y="421" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="24.77" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="351.5" ></text>
</g>
<g >
<title>malloc (141,414,140 samples, 0.67%)</title><rect x="613.2" y="389" width="7.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="616.17" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="36.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.35" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="213" width="2.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.20" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="33.0" y="309" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.98" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="335.5" ></text>
</g>
<g >
<title>operator new (161,616,160 samples, 0.76%)</title><rect x="612.1" y="405" width="8.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="615.05" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="255.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.19%)</title><rect x="1170.9" y="405" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.94" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (50,505,050 samples, 0.24%)</title><rect x="1179.9" y="437" width="2.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.91" y="447.5" ></text>
</g>
<g >
<title>YAML::LoadFile (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="453" width="4.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.95" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.14%)</title><rect x="265.6" y="341" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="268.62" y="351.5" ></text>
</g>
<g >
<title>all (21,262,626,050 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1110.4" y="389" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1113.40" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,595,959,490 samples, 49.83%)</title><rect x="417.5" y="421" width="588.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="420.53" y="431.5" >sim::Switch::process</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="385.0" y="389" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="388.02" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="421" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.39" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="291.4" y="373" width="1.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="294.41" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.39" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="271.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="388.4" y="389" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="391.38" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.10%)</title><rect x="1185.0" y="261" width="1.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.95" y="271.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 0.19%)</title><rect x="1187.2" y="229" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.20" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="392.3" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="395.31" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1150.8" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.76" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="303.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1170.9" y="389" width="2.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.94" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="390.1" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="393.07" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (444,444,440 samples, 2.09%)</title><rect x="339.6" y="421" width="24.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="342.62" y="431.5" >s..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1125.5" y="373" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.53" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Switch, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.05%)</title><rect x="11.1" y="389" width="0.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="14.12" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="421" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>YAML::Load (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="437" width="4.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1187.95" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.05%)</title><rect x="1145.7" y="389" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1148.71" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="469" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="384.5" y="389" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="387.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="239.5" ></text>
</g>
<g >
<title>sim::Link::arrive (383,838,380 samples, 1.81%)</title><rect x="272.9" y="421" width="21.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="275.91" y="431.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="396.8" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="399.79" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="387.3" y="357" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="390.26" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1178.2" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.23" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="397.4" y="373" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="400.35" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.38%)</title><rect x="1185.0" y="373" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="383.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="437" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1187.39" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (60,606,060 samples, 0.29%)</title><rect x="403.0" y="421" width="3.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="405.96" y="431.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1186.1" y="245" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.08" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (131,313,130 samples, 0.62%)</title><rect x="26.8" y="421" width="7.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="29.82" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="284.7" y="357" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="287.68" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="517" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="274.0" y="405" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="277.03" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.05%)</title><rect x="21.8" y="373" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="24.77" y="383.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="1146.8" y="421" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1149.84" y="431.5" ></text>
</g>
<g >
<title>_IO_file_fopen (80,808,080 samples, 0.38%)</title><rect x="22.3" y="373" width="4.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="25.33" y="383.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.24%)</title><rect x="1177.1" y="405" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.11" y="415.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (121,212,120 samples, 0.57%)</title><rect x="1111.5" y="405" width="6.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1114.52" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="255.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (181,818,180 samples, 0.86%)</title><rect x="283.0" y="405" width="10.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="286.00" y="415.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1117.7" y="373" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1120.69" y="383.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,535,353,390 samples, 68.36%)</title><rect x="297.0" y="437" width="806.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="300.01" y="447.5" >sim::Process::operator</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.05%)</title><rect x="21.8" y="405" width="0.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="24.77" y="415.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (20,202,020 samples, 0.10%)</title><rect x="1118.2" y="373" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1121.25" y="383.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (40,404,040 samples, 0.19%)</title><rect x="269.0" y="421" width="2.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="271.98" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="277" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="287.5" ></text>
</g>
<g >
<title>malloc (323,232,320 samples, 1.52%)</title><rect x="793.1" y="373" width="18.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="796.12" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="35.8" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.79" y="303.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,686,868,480 samples, 97.29%)</title><rect x="36.9" y="469" width="1148.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="39.91" y="479.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="533" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.43%)</title><rect x="28.5" y="389" width="5.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="31.50" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="33.5" y="389" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="36.54" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.38%)</title><rect x="17.3" y="373" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.29" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="285.8" y="389" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="288.80" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::status (20,202,020 samples, 0.10%)</title><rect x="35.8" y="405" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="38.79" y="415.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="265.1" y="357" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="268.06" y="367.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (272,727,270 samples, 1.28%)</title><rect x="21.8" y="453" width="15.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="24.77" y="463.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.38%)</title><rect x="334.0" y="421" width="4.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="337.01" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.14%)</title><rect x="20.1" y="341" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.09" y="351.5" ></text>
</g>
<g >
<title>Logger::warn (20,202,020 samples, 0.10%)</title><rect x="327.3" y="421" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="330.28" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,080,808,060 samples, 9.79%)</title><rect x="889.0" y="405" width="115.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="891.97" y="415.5" >std::_Rb_tree_..</text>
</g>
<g >
<title>sim::TcpFlow::update (141,414,140 samples, 0.67%)</title><rect x="390.1" y="405" width="7.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="393.07" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (30,303,030 samples, 0.14%)</title><rect x="396.2" y="389" width="1.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="399.23" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="817.8" y="389" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="820.78" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.05%)</title><rect x="284.1" y="357" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="287.12" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="16.2" y="373" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.17" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="816.7" y="373" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="819.66" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1111.5" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1114.52" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (20,202,020 samples, 0.10%)</title><rect x="293.1" y="405" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="296.09" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.5" y="229" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.52" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::FlagInfo&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::FlagInfo&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,101,010 samples, 0.05%)</title><rect x="267.9" y="389" width="0.5" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="270.86" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="16.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.73" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.33%)</title><rect x="29.6" y="341" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.62" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="223.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.29%)</title><rect x="264.5" y="389" width="3.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="267.50" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (171,717,170 samples, 0.81%)</title><rect x="406.3" y="421" width="9.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="409.32" y="431.5" ></text>
</g>
<g >
<title>sim::Process::operator (90,909,090 samples, 0.43%)</title><rect x="98.0" y="453" width="5.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="101.01" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="485" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.33%)</title><rect x="1141.8" y="357" width="3.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1144.79" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1163.1" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.09" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="278.0" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="280.95" y="335.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="286.4" y="389" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="289.36" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1125.5" y="341" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.14%)</title><rect x="25.1" y="69" width="1.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.14" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (131,313,130 samples, 0.62%)</title><rect x="1139.0" y="405" width="7.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1141.99" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="393.4" y="373" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="396.43" y="383.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.19%)</title><rect x="1154.7" y="373" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.68" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1172.6" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.62" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="270.7" y="405" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="273.67" y="415.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.24%)</title><rect x="789.2" y="389" width="2.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="792.19" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.24%)</title><rect x="385.6" y="389" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="388.58" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="884.5" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="887.49" y="207.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (70,707,070 samples, 0.33%)</title><rect x="278.5" y="389" width="3.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="281.51" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.68" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.44" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.09%)</title><rect x="591.9" y="389" width="12.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="594.87" y="399.5" ></text>
</g>
<g >
<title>main (21,050,504,840 samples, 99.00%)</title><rect x="21.8" y="485" width="1168.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.77" y="495.5" >main</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1110.4" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1113.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="213" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="223.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.24%)</title><rect x="815.0" y="389" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="817.98" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.24%)</title><rect x="1177.1" y="373" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.11" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.7" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.67" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (30,303,030 samples, 0.14%)</title><rect x="885.0" y="405" width="1.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="888.05" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1151.3" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.32" y="383.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="286.9" y="389" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="289.92" y="399.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="811.1" y="389" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="814.05" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.38%)</title><rect x="22.3" y="325" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.33" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1150.8" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.76" y="383.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.33%)</title><rect x="1141.8" y="373" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.79" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.10%)</title><rect x="277.4" y="389" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="280.39" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1172.1" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1175.06" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.14%)</title><rect x="34.1" y="421" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="37.10" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (50,505,050 samples, 0.24%)</title><rect x="294.2" y="437" width="2.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="297.21" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1117.7" y="357" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1120.69" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (272,727,270 samples, 1.28%)</title><rect x="21.8" y="469" width="15.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="24.77" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.10%)</title><rect x="34.7" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="37.67" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="21.8" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="24.77" y="271.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.14%)</title><rect x="1187.8" y="165" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.76" y="175.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1109.8" y="405" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1112.84" y="415.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1186.6" y="245" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.64" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.38%)</title><rect x="29.1" y="373" width="4.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="32.06" y="383.5" ></text>
</g>
</g>
</svg>
