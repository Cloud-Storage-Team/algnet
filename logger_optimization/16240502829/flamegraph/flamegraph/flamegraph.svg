<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,100,000 samples, 0.50%)</title><rect x="1182.5" y="341" width="5.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,300,000 samples, 0.08%)</title><rect x="27.3" y="213" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.30" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,100,000 samples, 0.01%)</title><rect x="1188.0" y="165" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.01" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,800,000 samples, 0.05%)</title><rect x="497.9" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="500.94" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (5,600,000 samples, 0.03%)</title><rect x="782.0" y="405" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="785.00" y="415.5" ></text>
</g>
<g >
<title>Logger::info (30,500,000 samples, 0.17%)</title><rect x="595.5" y="437" width="2.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="598.52" y="447.5" ></text>
</g>
<g >
<title>utils::create_all_directories (6,300,000 samples, 0.03%)</title><rect x="46.6" y="453" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="49.63" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (6,600,000 samples, 0.04%)</title><rect x="352.9" y="373" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="355.88" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (31,700,000 samples, 0.18%)</title><rect x="32.4" y="117" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.36" y="127.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (3,000,000 samples, 0.02%)</title><rect x="362.1" y="437" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="365.10" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="1140.3" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.32" y="287.5" ></text>
</g>
<g >
<title>malloc (15,200,000 samples, 0.08%)</title><rect x="1147.6" y="405" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1150.61" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (102,200,000 samples, 0.56%)</title><rect x="1181.8" y="389" width="6.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.76" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (16,400,000 samples, 0.09%)</title><rect x="1105.0" y="389" width="1.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1107.97" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,000,000 samples, 0.04%)</title><rect x="33.9" y="85" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.90" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,600,000 samples, 0.01%)</title><rect x="347.6" y="405" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.62" y="415.5" ></text>
</g>
<g >
<title>sim::Process::operator (10,914,000,000 samples, 60.32%)</title><rect x="366.3" y="469" width="711.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="369.28" y="479.5" >sim::Process::operator</text>
</g>
<g >
<title>malloc (418,100,000 samples, 2.31%)</title><rect x="1050.8" y="421" width="27.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1053.80" y="431.5" >m..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="46.8" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.81" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,700,000 samples, 0.03%)</title><rect x="1142.4" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.38" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="511.3" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.35" y="303.5" ></text>
</g>
<g >
<title>_IO_file_open (93,600,000 samples, 0.52%)</title><rect x="28.3" y="389" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="31.32" y="399.5" ></text>
</g>
<g >
<title>malloc (4,300,000 samples, 0.02%)</title><rect x="329.6" y="373" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="332.63" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,200,000 samples, 0.01%)</title><rect x="1186.5" y="213" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.49" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (238,200,000 samples, 1.32%)</title><rect x="11.0" y="501" width="15.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,900,000 samples, 0.09%)</title><rect x="1163.5" y="341" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.47" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (2,100,000 samples, 0.01%)</title><rect x="331.1" y="389" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="334.06" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (11,100,000 samples, 0.06%)</title><rect x="781.3" y="389" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="784.28" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3,700,000 samples, 0.02%)</title><rect x="517.3" y="437" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="520.29" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="437" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="447.5" ></text>
</g>
<g >
<title>malloc (36,400,000 samples, 0.20%)</title><rect x="1044.4" y="437" width="2.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1047.43" y="447.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1,600,000 samples, 0.01%)</title><rect x="360.2" y="437" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="363.23" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (25,900,000 samples, 0.14%)</title><rect x="1186.6" y="277" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.63" y="287.5" ></text>
</g>
<g >
<title>Logger::get_instance (36,800,000 samples, 0.20%)</title><rect x="690.6" y="421" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="693.55" y="431.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_flows (3,400,000 samples, 0.02%)</title><rect x="1189.1" y="485" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.07" y="495.5" ></text>
</g>
<g >
<title>operator new (39,200,000 samples, 0.22%)</title><rect x="1140.6" y="453" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.60" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,400,000 samples, 0.01%)</title><rect x="1181.0" y="469" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1183.99" y="479.5" ></text>
</g>
<g >
<title>operator new (6,100,000 samples, 0.03%)</title><rect x="336.3" y="437" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="339.29" y="447.5" ></text>
</g>
<g >
<title>malloc (33,000,000 samples, 0.18%)</title><rect x="1162.4" y="421" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1165.39" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (5,500,000 samples, 0.03%)</title><rect x="1100.8" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1103.83" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (172,700,000 samples, 0.95%)</title><rect x="1086.1" y="421" width="11.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1089.14" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (11,700,000 samples, 0.06%)</title><rect x="328.3" y="389" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="331.35" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (7,200,000 samples, 0.04%)</title><rect x="1151.3" y="437" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1154.25" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,900,000 samples, 0.03%)</title><rect x="1109.9" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.87" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (3,000,000 samples, 0.02%)</title><rect x="1182.3" y="293" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.27" y="303.5" ></text>
</g>
<g >
<title>open64 (93,400,000 samples, 0.52%)</title><rect x="28.3" y="373" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="31.33" y="383.5" ></text>
</g>
<g >
<title>malloc (5,200,000 samples, 0.03%)</title><rect x="347.8" y="405" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="350.78" y="415.5" ></text>
</g>
<g >
<title>operator new (1,900,000 samples, 0.01%)</title><rect x="507.5" y="405" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="510.52" y="415.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (452,300,000 samples, 2.50%)</title><rect x="1083.7" y="453" width="29.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1086.66" y="463.5" >si..</text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (13,600,000 samples, 0.08%)</title><rect x="1113.8" y="469" width="0.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1116.83" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,100,000 samples, 0.06%)</title><rect x="1128.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.30" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (36,400,000 samples, 0.20%)</title><rect x="1182.6" y="309" width="2.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.56" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (39,900,000 samples, 0.22%)</title><rect x="326.5" y="405" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="329.53" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (9,500,000 samples, 0.05%)</title><rect x="1185.4" y="229" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.38" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="1130.6" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.62" y="303.5" ></text>
</g>
<g >
<title>operator new (2,600,000 samples, 0.01%)</title><rect x="1180.8" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.82" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (5,400,000 samples, 0.03%)</title><rect x="1097.9" y="421" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1100.91" y="431.5" ></text>
</g>
<g >
<title>malloc (2,700,000 samples, 0.01%)</title><rect x="777.2" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="780.22" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (1,600,000 samples, 0.01%)</title><rect x="1186.1" y="309" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1189.13" y="319.5" ></text>
</g>
<g >
<title>operator new (2,100,000 samples, 0.01%)</title><rect x="1144.0" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.00" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (127,700,000 samples, 0.71%)</title><rect x="522.7" y="453" width="8.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="525.71" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (5,900,000 samples, 0.03%)</title><rect x="1186.2" y="277" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.25" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,500,000 samples, 0.01%)</title><rect x="340.1" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.06" y="287.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (7,300,000 samples, 0.04%)</title><rect x="1096.7" y="389" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1099.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="10.8" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.79" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="34.2" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.24" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="1130.6" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.57" y="335.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (3,400,000 samples, 0.02%)</title><rect x="1123.4" y="437" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1126.38" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,100,000 samples, 0.51%)</title><rect x="28.4" y="357" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.35" y="367.5" ></text>
</g>
<g >
<title>sim::Switch::process (6,700,000 samples, 0.04%)</title><rect x="1113.4" y="469" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1116.39" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (317,200,000 samples, 1.75%)</title><rect x="26.6" y="485" width="20.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="29.56" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="26.9" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.90" y="335.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (4,400,000 samples, 0.02%)</title><rect x="26.8" y="437" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="29.79" y="447.5" ></text>
</g>
<g >
<title>cfree (913,400,000 samples, 5.05%)</title><rect x="693.5" y="421" width="59.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="696.51" y="431.5" >cfree</text>
</g>
<g >
<title>sim::Process::Process (2,600,000 samples, 0.01%)</title><rect x="337.9" y="421" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="340.91" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (15,200,000 samples, 0.08%)</title><rect x="514.5" y="389" width="1.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="517.48" y="399.5" ></text>
</g>
<g >
<title>operator new (1,800,000 samples, 0.01%)</title><rect x="1105.7" y="357" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1108.71" y="367.5" ></text>
</g>
<g >
<title>malloc (3,300,000 samples, 0.02%)</title><rect x="511.3" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="514.27" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (32,100,000 samples, 0.18%)</title><rect x="1186.2" y="309" width="2.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.24" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_from (2,700,000 samples, 0.01%)</title><rect x="1122.2" y="453" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1125.17" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,900,000 samples, 0.01%)</title><rect x="1085.7" y="437" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1088.74" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="335.8" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.77" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,900,000 samples, 0.02%)</title><rect x="1120.4" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1123.43" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (8,600,000 samples, 0.05%)</title><rect x="1106.0" y="405" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1109.04" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (4,100,000 samples, 0.02%)</title><rect x="327.7" y="357" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="330.70" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (1,900,000 samples, 0.01%)</title><rect x="1181.8" y="325" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1184.84" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (22,200,000 samples, 0.12%)</title><rect x="26.8" y="453" width="1.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="29.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,900,000 samples, 0.02%)</title><rect x="1128.7" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.70" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (4,900,000 samples, 0.03%)</title><rect x="508.6" y="373" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="511.61" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (14,700,000 samples, 0.08%)</title><rect x="11.7" y="389" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.68" y="399.5" ></text>
</g>
<g >
<title>operator delete (2,200,000 samples, 0.01%)</title><rect x="1120.6" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1123.62" y="479.5" ></text>
</g>
<g >
<title>malloc@plt (12,100,000 samples, 0.07%)</title><rect x="637.0" y="437" width="0.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="640.00" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,900,000 samples, 0.02%)</title><rect x="1186.4" y="245" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.45" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="383.5" ></text>
</g>
<g >
<title>YAML::LoadFile (102,300,000 samples, 0.57%)</title><rect x="1181.8" y="485" width="6.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1184.76" y="495.5" ></text>
</g>
<g >
<title>operator new (292,600,000 samples, 1.62%)</title><rect x="755.8" y="421" width="19.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="758.82" y="431.5" ></text>
</g>
<g >
<title>__libc_start_main (18,077,900,000 samples, 99.92%)</title><rect x="11.0" y="549" width="1179.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.99" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (4,700,000 samples, 0.03%)</title><rect x="513.6" y="389" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="516.63" y="399.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (126,000,000 samples, 0.70%)</title><rect x="1181.8" y="501" width="8.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1184.76" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6,000,000 samples, 0.03%)</title><rect x="1128.6" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.56" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (29,100,000 samples, 0.16%)</title><rect x="1130.7" y="357" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1133.74" y="367.5" ></text>
</g>
<g >
<title>operator new (13,100,000 samples, 0.07%)</title><rect x="1124.7" y="421" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1127.68" y="431.5" ></text>
</g>
<g >
<title>fclose (4,200,000 samples, 0.02%)</title><rect x="26.8" y="421" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="29.81" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.01%)</title><rect x="26.9" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.90" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,500,000 samples, 0.11%)</title><rect x="1183.4" y="261" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.36" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (22,100,000 samples, 0.12%)</title><rect x="42.6" y="341" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.62" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (2,100,000 samples, 0.01%)</title><rect x="1181.8" y="341" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1184.83" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (13,200,000 samples, 0.07%)</title><rect x="359.1" y="437" width="0.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="362.06" y="447.5" ></text>
</g>
<g >
<title>operator delete (1,800,000 samples, 0.01%)</title><rect x="1140.5" y="453" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1143.49" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (2,200,000 samples, 0.01%)</title><rect x="1183.2" y="245" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1186.21" y="255.5" ></text>
</g>
<g >
<title>cfree (2,000,000 samples, 0.01%)</title><rect x="507.3" y="405" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="510.35" y="415.5" ></text>
</g>
<g >
<title>operator new (68,400,000 samples, 0.38%)</title><rect x="423.9" y="453" width="4.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="426.93" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (22,600,000 samples, 0.12%)</title><rect x="1152.9" y="453" width="1.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1155.92" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,700,000 samples, 0.02%)</title><rect x="1085.0" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1088.04" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (4,200,000 samples, 0.02%)</title><rect x="507.9" y="389" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="510.93" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (73,600,000 samples, 0.41%)</title><rect x="349.2" y="421" width="4.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="352.23" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (7,500,000 samples, 0.04%)</title><rect x="504.4" y="437" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="507.37" y="447.5" ></text>
</g>
<g >
<title>sim::SendData::operator (462,700,000 samples, 2.56%)</title><rect x="1083.2" y="469" width="30.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1086.19" y="479.5" >si..</text>
</g>
<g >
<title>Logger::warn (33,800,000 samples, 0.19%)</title><rect x="415.8" y="453" width="2.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="418.85" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,300,000 samples, 0.08%)</title><rect x="1141.7" y="405" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.69" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,800,000 samples, 0.02%)</title><rect x="1184.4" y="181" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.45" y="191.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (6,500,000 samples, 0.04%)</title><rect x="1181.2" y="469" width="0.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1184.24" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,000,000 samples, 0.04%)</title><rect x="1188.4" y="437" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.43" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1,600,000 samples, 0.01%)</title><rect x="327.8" y="341" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="330.82" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="511.4" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.35" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (7,400,000 samples, 0.04%)</title><rect x="354.0" y="421" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="357.03" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="1130.6" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.57" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,371,900,000 samples, 7.58%)</title><rect x="833.1" y="437" width="89.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="836.06" y="447.5" >std::_Rb_t..</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (5,200,000 samples, 0.03%)</title><rect x="329.2" y="405" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="332.22" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,500,000 samples, 0.01%)</title><rect x="1128.8" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.79" y="191.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (18,000,000 samples, 0.10%)</title><rect x="34.6" y="453" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="37.57" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_from (7,300,000 samples, 0.04%)</title><rect x="1144.9" y="453" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1147.91" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (4,200,000 samples, 0.02%)</title><rect x="1144.5" y="437" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1147.50" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (7,400,000 samples, 0.04%)</title><rect x="1188.4" y="405" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.45" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (2,600,000 samples, 0.01%)</title><rect x="501.9" y="373" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="504.91" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (16,600,000 samples, 0.09%)</title><rect x="348.1" y="421" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="351.14" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (105,000,000 samples, 0.58%)</title><rect x="778.0" y="437" width="6.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="781.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,500,000 samples, 0.06%)</title><rect x="1174.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="1140.3" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.34" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,000,000 samples, 0.10%)</title><rect x="1173.5" y="389" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.51" y="399.5" ></text>
</g>
<g >
<title>cfree (2,400,000 samples, 0.01%)</title><rect x="347.6" y="421" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="350.56" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,000,000 samples, 0.11%)</title><rect x="1179.7" y="469" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1182.68" y="479.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,300,000 samples, 0.06%)</title><rect x="831.9" y="389" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="834.93" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,500,000 samples, 0.02%)</title><rect x="339.9" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.93" y="351.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (9,900,000 samples, 0.05%)</title><rect x="1189.3" y="485" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.29" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,900,000 samples, 0.01%)</title><rect x="1110.8" y="437" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1113.76" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (28,600,000 samples, 0.16%)</title><rect x="1162.7" y="405" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.68" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,900,000 samples, 0.06%)</title><rect x="1187.4" y="213" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.44" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,000,000 samples, 0.04%)</title><rect x="1142.2" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.17" y="287.5" ></text>
</g>
<g >
<title>operator new (11,600,000 samples, 0.06%)</title><rect x="1185.2" y="261" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.24" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="46.8" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.84" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,100,000 samples, 0.01%)</title><rect x="356.9" y="405" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="359.86" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (17,400,000 samples, 0.10%)</title><rect x="27.1" y="437" width="1.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="30.10" y="447.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (5,700,000 samples, 0.03%)</title><rect x="361.3" y="453" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="364.31" y="463.5" ></text>
</g>
<g >
<title>cfree (8,200,000 samples, 0.05%)</title><rect x="1120.1" y="469" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1123.09" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,200,000 samples, 0.01%)</title><rect x="45.9" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="48.88" y="447.5" ></text>
</g>
<g >
<title>cfree (15,800,000 samples, 0.09%)</title><rect x="11.6" y="405" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.60" y="415.5" ></text>
</g>
<g >
<title>brk (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="405" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1143.28" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (8,100,000 samples, 0.04%)</title><rect x="1101.2" y="405" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1104.19" y="415.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,600,000 samples, 0.01%)</title><rect x="328.0" y="373" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="330.96" y="383.5" ></text>
</g>
<g >
<title>cfree (2,100,000 samples, 0.01%)</title><rect x="499.0" y="405" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="501.98" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,000,000 samples, 0.01%)</title><rect x="328.1" y="389" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="331.07" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (24,900,000 samples, 0.14%)</title><rect x="11.0" y="437" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.04" y="447.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (3,700,000 samples, 0.02%)</title><rect x="777.2" y="405" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="780.16" y="415.5" ></text>
</g>
<g >
<title>malloc (2,500,000 samples, 0.01%)</title><rect x="778.6" y="405" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="781.56" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,200,000 samples, 0.02%)</title><rect x="49.8" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="52.85" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (3,400,000 samples, 0.02%)</title><rect x="357.9" y="389" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="360.87" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (88,500,000 samples, 0.49%)</title><rect x="28.7" y="229" width="5.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.65" y="239.5" ></text>
</g>
<g >
<title>malloc (1,800,000 samples, 0.01%)</title><rect x="1105.7" y="341" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1108.71" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,200,000 samples, 0.07%)</title><rect x="27.4" y="181" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.44" y="191.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (3,100,000 samples, 0.02%)</title><rect x="47.3" y="501" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="50.29" y="511.5" ></text>
</g>
<g >
<title>operator new (4,300,000 samples, 0.02%)</title><rect x="329.6" y="389" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="332.63" y="399.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (7,700,000 samples, 0.04%)</title><rect x="361.8" y="453" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="364.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,200,000 samples, 0.07%)</title><rect x="27.4" y="197" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.37" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,100,000 samples, 0.51%)</title><rect x="28.4" y="341" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.35" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="46.3" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.35" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (17,400,000 samples, 0.10%)</title><rect x="1187.0" y="245" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.01" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,600,000 samples, 0.02%)</title><rect x="340.0" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.99" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="1130.6" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.63" y="255.5" ></text>
</g>
<g >
<title>malloc (11,100,000 samples, 0.06%)</title><rect x="1185.3" y="245" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.27" y="255.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (37,500,000 samples, 0.21%)</title><rect x="511.5" y="405" width="2.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="514.49" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,600,000 samples, 0.03%)</title><rect x="1185.6" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.63" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (36,400,000 samples, 0.20%)</title><rect x="1182.6" y="325" width="2.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.56" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,400,000 samples, 0.22%)</title><rect x="1147.1" y="437" width="2.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1150.11" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,000,000 samples, 0.02%)</title><rect x="1185.7" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.73" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (45,900,000 samples, 0.25%)</title><rect x="31.4" y="133" width="3.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.43" y="143.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (4,400,000 samples, 0.02%)</title><rect x="510.7" y="421" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="513.67" y="431.5" ></text>
</g>
<g >
<title>Logger::get_instance (94,800,000 samples, 0.52%)</title><rect x="589.3" y="437" width="6.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="592.34" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (46,600,000 samples, 0.26%)</title><rect x="1107.5" y="421" width="3.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1110.53" y="431.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1,700,000 samples, 0.01%)</title><rect x="349.0" y="405" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="351.99" y="415.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,400,000 samples, 0.01%)</title><rect x="358.1" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="361.13" y="431.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,700,000 samples, 0.11%)</title><rect x="776.1" y="437" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="779.05" y="447.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (9,300,000 samples, 0.05%)</title><rect x="1097.7" y="437" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1100.68" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,800,000 samples, 0.09%)</title><rect x="27.1" y="373" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.14" y="383.5" ></text>
</g>
<g >
<title>operator new (6,500,000 samples, 0.04%)</title><rect x="1181.2" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.24" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,300,000 samples, 0.02%)</title><rect x="1182.8" y="245" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.81" y="255.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (78,000,000 samples, 0.43%)</title><rect x="499.3" y="437" width="5.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="502.28" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.01%)</title><rect x="1140.3" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.29" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,500,000 samples, 0.05%)</title><rect x="1139.9" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.91" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,000,000 samples, 0.01%)</title><rect x="1143.2" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.17" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,600,000 samples, 0.10%)</title><rect x="1163.3" y="357" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,400,000 samples, 0.01%)</title><rect x="1154.2" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.17" y="431.5" ></text>
</g>
<g >
<title>sim::parse_flow_common (2,600,000 samples, 0.01%)</title><rect x="1189.1" y="453" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1192.11" y="463.5" ></text>
</g>
<g >
<title>cfree (7,400,000 samples, 0.04%)</title><rect x="365.4" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="368.40" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,400,000 samples, 0.07%)</title><rect x="1163.6" y="309" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.63" y="319.5" ></text>
</g>
<g >
<title>write (17,100,000 samples, 0.09%)</title><rect x="27.1" y="389" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="30.12" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (4,300,000 samples, 0.02%)</title><rect x="1188.6" y="389" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.65" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="303.5" ></text>
</g>
<g >
<title>malloc (48,700,000 samples, 0.27%)</title><rect x="1129.5" y="389" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1132.47" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (86,000,000 samples, 0.48%)</title><rect x="341.2" y="421" width="5.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="344.24" y="431.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,400,000 samples, 0.01%)</title><rect x="1109.4" y="405" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1112.36" y="415.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (4,300,000 samples, 0.02%)</title><rect x="1096.9" y="373" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1099.88" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (2,600,000 samples, 0.01%)</title><rect x="922.6" y="437" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="925.57" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,100,000 samples, 0.01%)</title><rect x="35.6" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="38.61" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,400,000 samples, 0.05%)</title><rect x="597.5" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.52" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,200,000 samples, 0.02%)</title><rect x="340.7" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.68" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (238,200,000 samples, 1.32%)</title><rect x="11.0" y="517" width="15.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="527.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (4,600,000 samples, 0.03%)</title><rect x="514.1" y="405" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="517.07" y="415.5" ></text>
</g>
<g >
<title>malloc (19,400,000 samples, 0.11%)</title><rect x="332.1" y="421" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="335.15" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (612,900,000 samples, 3.39%)</title><rect x="784.9" y="437" width="40.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="787.92" y="447.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="287.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (236,500,000 samples, 1.31%)</title><rect x="11.0" y="485" width="15.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.99" y="495.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (4,300,000 samples, 0.02%)</title><rect x="777.7" y="421" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="780.72" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,700,000 samples, 0.09%)</title><rect x="27.1" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.15" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,300,000 samples, 0.02%)</title><rect x="10.7" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.68" y="271.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,000,000 samples, 0.01%)</title><rect x="1182.3" y="277" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.33" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (7,900,000 samples, 0.04%)</title><rect x="1184.2" y="197" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.18" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,600,000 samples, 0.02%)</title><rect x="340.0" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.99" y="319.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (2,900,000 samples, 0.02%)</title><rect x="1146.9" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1149.90" y="463.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (102,200,000 samples, 0.56%)</title><rect x="1181.8" y="453" width="6.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1184.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="485" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,900,000 samples, 0.03%)</title><rect x="1128.6" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.57" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,800,000 samples, 0.09%)</title><rect x="27.1" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.14" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (6,600,000 samples, 0.04%)</title><rect x="327.5" y="373" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="330.53" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,200,000 samples, 0.02%)</title><rect x="336.0" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="339.00" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (17,400,000 samples, 0.10%)</title><rect x="357.0" y="405" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="359.99" y="415.5" ></text>
</g>
<g >
<title>malloc (4,500,000 samples, 0.02%)</title><rect x="513.6" y="341" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="516.63" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="340.6" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.62" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (13,600,000 samples, 0.08%)</title><rect x="11.7" y="373" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,800,000 samples, 0.04%)</title><rect x="1128.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.45" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="340.1" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.08" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="469" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="340.6" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.62" y="351.5" ></text>
</g>
<g >
<title>operator new (48,700,000 samples, 0.27%)</title><rect x="1129.5" y="405" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1132.47" y="415.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (25,100,000 samples, 0.14%)</title><rect x="1183.1" y="277" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.07" y="287.5" ></text>
</g>
<g >
<title>main (17,839,700,000 samples, 98.60%)</title><rect x="26.5" y="517" width="1163.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="29.53" y="527.5" >main</text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (4,500,000 samples, 0.02%)</title><rect x="364.6" y="437" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="367.55" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="340.8" y="213" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.79" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="405" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="415.5" ></text>
</g>
<g >
<title>sim::is_valid_link (25,800,000 samples, 0.14%)</title><rect x="1132.7" y="453" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1135.74" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="1130.6" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.60" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (986,800,000 samples, 5.45%)</title><rect x="60.5" y="485" width="64.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="63.48" y="495.5" >sim::Ev..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="421" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (107,300,000 samples, 0.59%)</title><rect x="19.4" y="437" width="7.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="22.35" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6,400,000 samples, 0.04%)</title><rect x="1164.1" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.09" y="207.5" ></text>
</g>
<g >
<title>malloc (2,600,000 samples, 0.01%)</title><rect x="781.7" y="341" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="784.66" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (167,800,000 samples, 0.93%)</title><rect x="505.4" y="437" width="11.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="508.41" y="447.5" ></text>
</g>
<g >
<title>operator new (34,100,000 samples, 0.19%)</title><rect x="1165.1" y="421" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.06" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,300,000 samples, 0.05%)</title><rect x="10.3" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.29" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (36,800,000 samples, 0.20%)</title><rect x="507.7" y="405" width="2.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="510.71" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,800,000 samples, 0.95%)</title><rect x="347.1" y="437" width="11.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="350.09" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (3,500,000 samples, 0.02%)</title><rect x="328.5" y="373" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="331.51" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="1130.6" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.63" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2,200,000 samples, 0.01%)</title><rect x="1179.5" y="469" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1182.54" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,700,000 samples, 0.01%)</title><rect x="1105.4" y="373" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1108.39" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (100,300,000 samples, 0.55%)</title><rect x="12.8" y="437" width="6.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="15.80" y="447.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,000,000 samples, 0.01%)</title><rect x="1107.4" y="421" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1110.40" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,200,000 samples, 0.08%)</title><rect x="1141.7" y="373" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.70" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (22,600,000 samples, 0.12%)</title><rect x="1186.7" y="261" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.68" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (317,900,000 samples, 1.76%)</title><rect x="26.6" y="501" width="20.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="29.56" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (82,300,000 samples, 0.45%)</title><rect x="29.1" y="197" width="5.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.06" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="340.8" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.75" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (34,100,000 samples, 0.19%)</title><rect x="1165.1" y="389" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.06" y="399.5" ></text>
</g>
<g >
<title>malloc (2,100,000 samples, 0.01%)</title><rect x="1100.6" y="405" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1103.62" y="415.5" ></text>
</g>
<g >
<title>malloc (14,200,000 samples, 0.08%)</title><rect x="340.3" y="389" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="343.32" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,500,000 samples, 0.01%)</title><rect x="1181.5" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.50" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="46.4" y="213" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.38" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (12,500,000 samples, 0.07%)</title><rect x="501.3" y="405" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="504.29" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (312,800,000 samples, 1.73%)</title><rect x="26.6" y="469" width="20.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="29.64" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,500,000 samples, 0.03%)</title><rect x="1132.3" y="341" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,500,000 samples, 0.02%)</title><rect x="780.5" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="783.46" y="415.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (3,700,000 samples, 0.02%)</title><rect x="331.0" y="405" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="333.95" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (4,600,000 samples, 0.03%)</title><rect x="779.0" y="405" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="782.05" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="511.4" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.35" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (9,900,000 samples, 0.05%)</title><rect x="774.9" y="421" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="777.90" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,900,000 samples, 0.04%)</title><rect x="693.0" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="695.99" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (5,500,000 samples, 0.03%)</title><rect x="348.2" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="351.20" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (92,500,000 samples, 0.51%)</title><rect x="28.4" y="309" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.39" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="389" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (7,400,000 samples, 0.04%)</title><rect x="1106.6" y="421" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1109.60" y="431.5" ></text>
</g>
<g >
<title>operator new (2,800,000 samples, 0.02%)</title><rect x="777.2" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="780.21" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (16,700,000 samples, 0.09%)</title><rect x="1124.4" y="437" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1127.44" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,100,000 samples, 0.06%)</title><rect x="1128.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.30" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,500,000 samples, 0.02%)</title><rect x="1182.8" y="261" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.79" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (28,300,000 samples, 0.16%)</title><rect x="1183.0" y="293" width="1.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.02" y="303.5" ></text>
</g>
<g >
<title>cfree (17,900,000 samples, 0.10%)</title><rect x="418.4" y="453" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="421.44" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="1130.6" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.63" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,900,000 samples, 0.01%)</title><rect x="1123.5" y="421" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1126.48" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,000,000 samples, 0.04%)</title><rect x="1188.4" y="469" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.43" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="514.3" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="517.26" y="319.5" ></text>
</g>
<g >
<title>operator delete (72,200,000 samples, 0.40%)</title><rect x="54.5" y="485" width="4.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="57.47" y="495.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2,200,000 samples, 0.01%)</title><rect x="354.6" y="421" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="357.64" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (7,300,000 samples, 0.04%)</title><rect x="364.8" y="437" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="367.85" y="447.5" ></text>
</g>
<g >
<title>operator new (15,800,000 samples, 0.09%)</title><rect x="1147.6" y="421" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.57" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,200,000 samples, 0.04%)</title><rect x="1128.5" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.49" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="46.8" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.76" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (18,000,000 samples, 0.10%)</title><rect x="1100.8" y="421" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1103.76" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (124,500,000 samples, 0.69%)</title><rect x="36.8" y="437" width="8.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="39.80" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,500,000 samples, 0.01%)</title><rect x="504.0" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="507.00" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,600,000 samples, 0.01%)</title><rect x="1129.0" y="373" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.96" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (75,500,000 samples, 0.42%)</title><rect x="29.5" y="181" width="4.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.50" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,900,000 samples, 0.02%)</title><rect x="36.4" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.37" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (8,100,000 samples, 0.04%)</title><rect x="353.5" y="405" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="356.50" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,600,000 samples, 0.03%)</title><rect x="1185.6" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.63" y="191.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (4,300,000 samples, 0.02%)</title><rect x="502.1" y="405" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="505.10" y="415.5" ></text>
</g>
<g >
<title>operator new (19,900,000 samples, 0.11%)</title><rect x="332.1" y="437" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="335.11" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (6,800,000 samples, 0.04%)</title><rect x="1182.6" y="293" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1185.58" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="340.7" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.72" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (3,600,000 samples, 0.02%)</title><rect x="781.6" y="373" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="784.60" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (8,800,000 samples, 0.05%)</title><rect x="324.2" y="453" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="327.17" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1185.8" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.81" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,600,000 samples, 0.03%)</title><rect x="1128.7" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.66" y="255.5" ></text>
</g>
<g >
<title>operator new (3,300,000 samples, 0.02%)</title><rect x="511.3" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="514.27" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,600,000 samples, 0.02%)</title><rect x="1185.8" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.76" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,800,000 samples, 0.05%)</title><rect x="10.3" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.33" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,800,000 samples, 0.03%)</title><rect x="46.7" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.72" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,700,000 samples, 0.09%)</title><rect x="27.1" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.15" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (388,400,000 samples, 2.15%)</title><rect x="609.2" y="421" width="25.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="612.17" y="431.5" >[..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (1,900,000 samples, 0.01%)</title><rect x="1181.8" y="309" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1184.84" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (4,600,000 samples, 0.03%)</title><rect x="513.6" y="373" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="516.63" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="1140.3" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.33" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="1142.4" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.42" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,700,000 samples, 0.01%)</title><rect x="1182.8" y="213" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.85" y="223.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (26,200,000 samples, 0.14%)</title><rect x="782.9" y="421" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="785.93" y="431.5" ></text>
</g>
<g >
<title>operator new (34,200,000 samples, 0.19%)</title><rect x="1162.3" y="437" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1165.31" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (4,800,000 samples, 0.03%)</title><rect x="365.9" y="453" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="368.88" y="463.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (17,391,800,000 samples, 96.12%)</title><rect x="47.5" y="501" width="1134.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="50.49" y="511.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>_IO_file_fopen (94,200,000 samples, 0.52%)</title><rect x="28.3" y="405" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="31.28" y="415.5" ></text>
</g>
<g >
<title>_start (18,078,000,000 samples, 99.92%)</title><rect x="11.0" y="565" width="1179.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.98" y="575.5" >_start</text>
</g>
<g >
<title>cfree (11,700,000 samples, 0.06%)</title><rect x="1139.7" y="453" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1142.70" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (5,900,000 samples, 0.03%)</title><rect x="777.0" y="421" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="780.01" y="431.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (180,700,000 samples, 1.00%)</title><rect x="1085.9" y="437" width="11.8" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1088.89" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,300,000 samples, 0.08%)</title><rect x="27.2" y="229" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.24" y="239.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (130,500,000 samples, 0.72%)</title><rect x="539.3" y="453" width="8.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="542.28" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (1,700,000 samples, 0.01%)</title><rect x="348.7" y="389" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="351.70" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (379,600,000 samples, 2.10%)</title><rect x="287.8" y="453" width="24.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="290.78" y="463.5" >[..</text>
</g>
<g >
<title>sim::Host::enqueue_packet (69,100,000 samples, 0.38%)</title><rect x="325.5" y="421" width="4.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="328.51" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="511.4" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.35" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (68,700,000 samples, 0.38%)</title><rect x="39.6" y="357" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.58" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (102,100,000 samples, 0.56%)</title><rect x="1181.8" y="373" width="6.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.76" y="383.5" ></text>
</g>
<g >
<title>operator new (5,600,000 samples, 0.03%)</title><rect x="347.8" y="421" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.75" y="431.5" ></text>
</g>
<g >
<title>operator new (4,500,000 samples, 0.02%)</title><rect x="353.0" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="356.02" y="367.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,300,000 samples, 0.01%)</title><rect x="35.9" y="453" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="38.88" y="463.5" ></text>
</g>
<g >
<title>operator delete (65,800,000 samples, 0.36%)</title><rect x="419.6" y="453" width="4.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="422.64" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (14,100,000 samples, 0.08%)</title><rect x="340.3" y="373" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="343.32" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="501" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,500,000 samples, 0.04%)</title><rect x="1181.2" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.24" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (6,700,000 samples, 0.04%)</title><rect x="348.6" y="405" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="351.55" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="10.8" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.75" y="255.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (125,200,000 samples, 0.69%)</title><rect x="531.0" y="453" width="8.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="534.03" y="463.5" ></text>
</g>
<g >
<title>cfree (558,700,000 samples, 3.09%)</title><rect x="598.1" y="437" width="36.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="601.07" y="447.5" >cfree</text>
</g>
<g >
<title>malloc@plt (20,500,000 samples, 0.11%)</title><rect x="1046.8" y="437" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1049.81" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,600,000 samples, 0.08%)</title><rect x="10.0" y="357" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,400,000 samples, 0.01%)</title><rect x="1185.8" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.84" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,200,000 samples, 0.02%)</title><rect x="1100.4" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1103.38" y="415.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (4,400,000 samples, 0.02%)</title><rect x="1149.5" y="421" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1152.45" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (86,500,000 samples, 0.48%)</title><rect x="28.8" y="213" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.78" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (8,300,000 samples, 0.05%)</title><rect x="504.9" y="437" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="507.86" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (14,800,000 samples, 0.08%)</title><rect x="1108.3" y="405" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1111.31" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_from (7,100,000 samples, 0.04%)</title><rect x="1133.7" y="437" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1136.74" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (13,400,000 samples, 0.07%)</title><rect x="516.4" y="437" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="519.35" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,200,000 samples, 0.09%)</title><rect x="27.2" y="261" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.18" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (6,700,000 samples, 0.04%)</title><rect x="511.1" y="405" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="514.05" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (3,800,000 samples, 0.02%)</title><rect x="1188.7" y="373" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.68" y="383.5" ></text>
</g>
<g >
<title>operator new (4,400,000 samples, 0.02%)</title><rect x="1085.4" y="437" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1088.44" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,300,000 samples, 0.03%)</title><rect x="339.9" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.88" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (8,700,000 samples, 0.05%)</title><rect x="499.7" y="421" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="502.69" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,400,000 samples, 0.05%)</title><rect x="27.7" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.69" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,000,000 samples, 0.01%)</title><rect x="1086.0" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1088.99" y="431.5" ></text>
</g>
<g >
<title>operator new (2,200,000 samples, 0.01%)</title><rect x="514.2" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="517.23" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (15,600,000 samples, 0.09%)</title><rect x="1187.1" y="229" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.13" y="239.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (616,000,000 samples, 3.40%)</title><rect x="1135.0" y="469" width="40.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1137.99" y="479.5" >sim..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (13,600,000 samples, 0.08%)</title><rect x="1183.8" y="229" width="0.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.81" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,300,000 samples, 0.03%)</title><rect x="1174.3" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.34" y="207.5" ></text>
</g>
<g >
<title>sim::Process::~Process (101,400,000 samples, 0.56%)</title><rect x="132.6" y="485" width="6.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="135.60" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,900,000 samples, 0.02%)</title><rect x="329.7" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="332.65" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4,900,000 samples, 0.03%)</title><rect x="1105.5" y="373" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1108.50" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,500,000 samples, 0.06%)</title><rect x="1142.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.01" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,700,000 samples, 0.01%)</title><rect x="1144.2" y="421" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1147.18" y="431.5" ></text>
</g>
<g >
<title>sim::Event::get_time (19,800,000 samples, 0.11%)</title><rect x="59.2" y="485" width="1.3" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="62.19" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (3,000,000 samples, 0.02%)</title><rect x="784.6" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="787.64" y="431.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (1,600,000 samples, 0.01%)</title><rect x="510.5" y="389" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="513.52" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (1,600,000 samples, 0.01%)</title><rect x="1188.8" y="357" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.82" y="367.5" ></text>
</g>
<g >
<title>malloc (12,700,000 samples, 0.07%)</title><rect x="753.1" y="421" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="756.08" y="431.5" ></text>
</g>
<g >
<title>cfree (850,500,000 samples, 4.70%)</title><rect x="257.1" y="469" width="55.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="260.07" y="479.5" >cfree</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,900,000 samples, 0.01%)</title><rect x="35.3" y="437" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="38.25" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (8,000,000 samples, 0.04%)</title><rect x="1188.4" y="453" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.43" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (12,300,000 samples, 0.07%)</title><rect x="509.2" y="389" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="512.25" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,400,000 samples, 0.04%)</title><rect x="1181.2" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.25" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (4,400,000 samples, 0.02%)</title><rect x="782.4" y="421" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="785.37" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (8,500,000 samples, 0.05%)</title><rect x="783.4" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="786.40" y="415.5" ></text>
</g>
<g >
<title>operator new (395,200,000 samples, 2.18%)</title><rect x="642.3" y="437" width="25.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="645.26" y="447.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,800,000 samples, 0.09%)</title><rect x="33.3" y="101" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.33" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (29,900,000 samples, 0.17%)</title><rect x="511.7" y="389" width="1.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="514.68" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,500,000 samples, 0.01%)</title><rect x="363.8" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.83" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,800,000 samples, 0.02%)</title><rect x="46.3" y="421" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="49.30" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="1130.6" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.63" y="287.5" ></text>
</g>
<g >
<title>sim::Generate::operator (2,200,000 samples, 0.01%)</title><rect x="124.8" y="485" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="127.84" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (23,000,000 samples, 0.13%)</title><rect x="1149.8" y="437" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1152.75" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (143,000,000 samples, 0.79%)</title><rect x="1158.0" y="453" width="9.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1161.00" y="463.5" ></text>
</g>
<g >
<title>cfree (5,100,000 samples, 0.03%)</title><rect x="335.9" y="437" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="338.88" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,100,000 samples, 0.03%)</title><rect x="1128.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.62" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (210,700,000 samples, 1.16%)</title><rect x="12.7" y="453" width="13.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.66" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (92,500,000 samples, 0.51%)</title><rect x="28.4" y="325" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.39" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (102,200,000 samples, 0.56%)</title><rect x="1181.8" y="437" width="6.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1184.76" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (33,600,000 samples, 0.19%)</title><rect x="1154.4" y="453" width="2.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1157.40" y="463.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (9,200,000 samples, 0.05%)</title><rect x="777.4" y="437" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="780.40" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (12,700,000 samples, 0.07%)</title><rect x="778.7" y="421" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="781.73" y="431.5" ></text>
</g>
<g >
<title>malloc (2,200,000 samples, 0.01%)</title><rect x="514.2" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="517.23" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="46.1" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="49.14" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="1127.0" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.01" y="431.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (4,400,000 samples, 0.02%)</title><rect x="832.3" y="373" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="835.32" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,000,000 samples, 0.01%)</title><rect x="506.4" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="509.40" y="431.5" ></text>
</g>
<g >
<title>operator new (2,600,000 samples, 0.01%)</title><rect x="781.7" y="357" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="784.66" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,800,000 samples, 0.02%)</title><rect x="1148.4" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.35" y="383.5" ></text>
</g>
<g >
<title>cfree (9,100,000 samples, 0.05%)</title><rect x="1155.9" y="437" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.88" y="447.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,377,800,000 samples, 13.14%)</title><rect x="923.0" y="453" width="155.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="926.00" y="463.5" >void sim::Scheduler..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (1,800,000 samples, 0.01%)</title><rect x="1182.3" y="261" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.34" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3,100,000 samples, 0.02%)</title><rect x="499.7" y="405" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="502.71" y="415.5" ></text>
</g>
<g >
<title>operator new (29,200,000 samples, 0.16%)</title><rect x="1127.2" y="421" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1130.18" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6,900,000 samples, 0.04%)</title><rect x="1142.2" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.24" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (3,800,000 samples, 0.02%)</title><rect x="326.8" y="389" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="329.77" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (3,400,000 samples, 0.02%)</title><rect x="1134.2" y="437" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1137.21" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (53,100,000 samples, 0.29%)</title><rect x="1184.9" y="325" width="3.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.95" y="335.5" ></text>
</g>
<g >
<title>cfree (2,000,000 samples, 0.01%)</title><rect x="325.7" y="405" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="328.70" y="415.5" ></text>
</g>
<g >
<title>std::locale::locale (1,800,000 samples, 0.01%)</title><rect x="1107.2" y="421" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1110.21" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (4,300,000 samples, 0.02%)</title><rect x="509.8" y="373" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="512.77" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="514.3" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="517.26" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,600,000 samples, 0.04%)</title><rect x="1084.2" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1087.22" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.01%)</title><rect x="340.7" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.72" y="303.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (29,200,000 samples, 0.16%)</title><rect x="1111.3" y="437" width="1.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1114.26" y="447.5" ></text>
</g>
<g >
<title>malloc (7,300,000 samples, 0.04%)</title><rect x="364.1" y="421" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="367.06" y="431.5" ></text>
</g>
<g >
<title>fopen (94,400,000 samples, 0.52%)</title><rect x="28.3" y="421" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="31.27" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (45,900,000 samples, 0.25%)</title><rect x="511.0" y="421" width="3.0" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="513.96" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (3,300,000 samples, 0.02%)</title><rect x="508.7" y="357" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="511.71" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,100,000 samples, 0.02%)</title><rect x="1128.8" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.75" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,400,000 samples, 0.01%)</title><rect x="357.7" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="360.72" y="399.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,800,000 samples, 0.02%)</title><rect x="1110.6" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1113.57" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,800,000 samples, 0.03%)</title><rect x="418.1" y="453" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="421.06" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="514.3" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="517.26" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,700,000 samples, 0.01%)</title><rect x="784.3" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="787.30" y="399.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (29,800,000 samples, 0.16%)</title><rect x="331.5" y="453" width="1.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="334.47" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,200,000 samples, 0.05%)</title><rect x="1163.9" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.91" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,800,000 samples, 0.02%)</title><rect x="46.8" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.78" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (91,400,000 samples, 0.51%)</title><rect x="28.5" y="261" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.46" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (2,000,000 samples, 0.01%)</title><rect x="1186.9" y="229" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.88" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,800,000 samples, 0.03%)</title><rect x="1156.1" y="421" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.09" y="431.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (16,900,000 samples, 0.09%)</title><rect x="1098.3" y="437" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1101.29" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (1,700,000 samples, 0.01%)</title><rect x="1182.6" y="277" width="0.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1185.64" y="287.5" ></text>
</g>
<g >
<title>operator new (14,200,000 samples, 0.08%)</title><rect x="340.3" y="405" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="343.32" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,700,000 samples, 0.01%)</title><rect x="784.5" y="389" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="787.51" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (38,300,000 samples, 0.21%)</title><rect x="1177.0" y="469" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1180.04" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,300,000 samples, 0.04%)</title><rect x="1176.5" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.52" y="447.5" ></text>
</g>
<g >
<title>operator new (1,600,000 samples, 0.01%)</title><rect x="1181.9" y="293" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.86" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,800,000 samples, 0.01%)</title><rect x="1146.8" y="453" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1149.77" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (33,700,000 samples, 0.19%)</title><rect x="1141.0" y="421" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.96" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (29,500,000 samples, 0.16%)</title><rect x="339.3" y="421" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="342.32" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4,600,000 samples, 0.03%)</title><rect x="1124.1" y="437" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1127.12" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (84,600,000 samples, 0.47%)</title><rect x="827.5" y="437" width="5.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="830.54" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,600,000 samples, 0.10%)</title><rect x="1163.3" y="389" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.29" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (23,100,000 samples, 0.13%)</title><rect x="502.8" y="421" width="1.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="505.80" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,500,000 samples, 0.04%)</title><rect x="1174.7" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (91,800,000 samples, 0.51%)</title><rect x="28.4" y="277" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.44" y="287.5" ></text>
</g>
<g >
<title>YAML::Stream::get (2,300,000 samples, 0.01%)</title><rect x="1183.2" y="261" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1186.20" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="34.2" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.15" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="511.3" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.31" y="319.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,600,000 samples, 0.01%)</title><rect x="329.9" y="389" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="332.91" y="399.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2,500,000 samples, 0.01%)</title><rect x="779.3" y="405" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="782.35" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,006,800,000 samples, 82.94%)</title><rect x="139.2" y="485" width="978.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="142.21" y="495.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.01%)</title><rect x="26.9" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.90" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (81,600,000 samples, 0.45%)</title><rect x="360.9" y="469" width="5.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="363.90" y="479.5" ></text>
</g>
<g >
<title>sim::Link::transmit (55,000,000 samples, 0.30%)</title><rect x="362.3" y="453" width="3.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="365.30" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (99,200,000 samples, 0.55%)</title><rect x="37.6" y="405" width="6.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="40.63" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,100,000 samples, 0.02%)</title><rect x="1182.8" y="229" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.82" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (54,700,000 samples, 0.30%)</title><rect x="1129.1" y="421" width="3.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1132.08" y="431.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (232,300,000 samples, 1.28%)</title><rect x="482.2" y="453" width="15.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="485.22" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,500,000 samples, 0.07%)</title><rect x="10.0" y="341" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.02" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,100,000 samples, 0.03%)</title><rect x="1142.4" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.36" y="255.5" ></text>
</g>
<g >
<title>malloc (335,800,000 samples, 1.86%)</title><rect x="646.1" y="421" width="21.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="649.13" y="431.5" >m..</text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (1,700,000 samples, 0.01%)</title><rect x="1186.3" y="261" width="0.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.30" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (15,600,000 samples, 0.09%)</title><rect x="1143.5" y="437" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1146.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,400,000 samples, 0.01%)</title><rect x="340.7" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.73" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="26.9" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.88" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (3,700,000 samples, 0.02%)</title><rect x="1182.3" y="309" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.27" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,600,000 samples, 0.03%)</title><rect x="1164.1" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.14" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,600,000 samples, 0.02%)</title><rect x="1185.8" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.76" y="127.5" ></text>
</g>
<g >
<title>cfree (11,400,000 samples, 0.06%)</title><rect x="1176.3" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1179.25" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (2,500,000 samples, 0.01%)</title><rect x="508.0" y="373" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="511.03" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,100,000 samples, 0.01%)</title><rect x="777.3" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="780.26" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (12,300,000 samples, 0.07%)</title><rect x="508.2" y="389" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="511.20" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (8,600,000 samples, 0.05%)</title><rect x="365.3" y="437" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="368.32" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="511.3" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.31" y="335.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (15,700,000 samples, 0.09%)</title><rect x="1185.0" y="293" width="1.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.04" y="303.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (17,800,000 samples, 0.10%)</title><rect x="831.4" y="405" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="834.44" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="511.4" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.35" y="255.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (17,000,000 samples, 0.09%)</title><rect x="1185.0" y="309" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.02" y="319.5" ></text>
</g>
<g >
<title>malloc (36,300,000 samples, 0.20%)</title><rect x="1140.8" y="437" width="2.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.79" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (7,800,000 samples, 0.04%)</title><rect x="775.5" y="421" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="778.54" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (43,000,000 samples, 0.24%)</title><rect x="779.6" y="421" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="782.56" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (3,800,000 samples, 0.02%)</title><rect x="509.4" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="512.44" y="383.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (22,500,000 samples, 0.12%)</title><rect x="1143.4" y="453" width="1.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1146.44" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,100,000 samples, 0.05%)</title><rect x="1142.1" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.10" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (2,500,000 samples, 0.01%)</title><rect x="1182.1" y="309" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1185.10" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,500,000 samples, 0.02%)</title><rect x="501.1" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="504.05" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="453" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (11,700,000 samples, 0.06%)</title><rect x="358.3" y="437" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="361.30" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (5,800,000 samples, 0.03%)</title><rect x="510.2" y="405" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="513.24" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,600,000 samples, 0.08%)</title><rect x="10.0" y="373" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="383.5" ></text>
</g>
<g >
<title>malloc (254,400,000 samples, 1.41%)</title><rect x="758.3" y="405" width="16.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="761.31" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (157,700,000 samples, 0.87%)</title><rect x="1122.5" y="453" width="10.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1125.46" y="463.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (3,200,000 samples, 0.02%)</title><rect x="1144.3" y="421" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1147.30" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (790,000,000 samples, 4.37%)</title><rect x="430.7" y="453" width="51.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="433.70" y="463.5" >sim::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,000,000 samples, 0.10%)</title><rect x="1173.5" y="357" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.51" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="340.8" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.77" y="239.5" ></text>
</g>
<g >
<title>sim::Switch::process (5,741,300,000 samples, 31.73%)</title><rect x="548.4" y="453" width="374.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="551.38" y="463.5" >sim::Switch::process</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (8,000,000 samples, 0.04%)</title><rect x="1188.4" y="421" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.43" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,500,000 samples, 0.02%)</title><rect x="359.9" y="437" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="362.92" y="447.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (11,700,000 samples, 0.06%)</title><rect x="1096.4" y="405" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1099.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,900,000 samples, 0.07%)</title><rect x="1173.8" y="309" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.85" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (625,600,000 samples, 3.46%)</title><rect x="712.3" y="405" width="40.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="715.28" y="415.5" >[li..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,300,000 samples, 0.06%)</title><rect x="1163.8" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.77" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (24,500,000 samples, 0.14%)</title><rect x="11.0" y="421" width="1.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="14.04" y="431.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (6,900,000 samples, 0.04%)</title><rect x="329.6" y="405" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="332.56" y="415.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (209,500,000 samples, 1.16%)</title><rect x="1120.9" y="469" width="13.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1123.89" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="511.3" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="514.31" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,100,000 samples, 0.03%)</title><rect x="350.9" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.93" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,600,000 samples, 0.10%)</title><rect x="1163.3" y="373" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.29" y="383.5" ></text>
</g>
<g >
<title>malloc (34,100,000 samples, 0.19%)</title><rect x="1165.1" y="405" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.06" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (14,300,000 samples, 0.08%)</title><rect x="25.3" y="405" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.35" y="415.5" ></text>
</g>
<g >
<title>operator new (7,600,000 samples, 0.04%)</title><rect x="364.0" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="367.04" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,700,000 samples, 0.06%)</title><rect x="667.3" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="670.33" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,500,000 samples, 0.02%)</title><rect x="513.6" y="325" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="516.63" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="367.5" ></text>
</g>
<g >
<title>malloc (28,200,000 samples, 0.16%)</title><rect x="1127.2" y="405" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1130.24" y="415.5" ></text>
</g>
<g >
<title>sim::Process::~Process (78,400,000 samples, 0.43%)</title><rect x="1078.1" y="469" width="5.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1081.07" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (39,800,000 samples, 0.22%)</title><rect x="824.9" y="437" width="2.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="827.90" y="447.5" ></text>
</g>
<g >
<title>operator new (2,600,000 samples, 0.01%)</title><rect x="778.6" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="781.56" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,400,000 samples, 0.08%)</title><rect x="1173.7" y="325" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.75" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_to (1,700,000 samples, 0.01%)</title><rect x="1122.3" y="453" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1125.35" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,100,000 samples, 0.02%)</title><rect x="1185.8" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.79" y="111.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,000,000 samples, 0.01%)</title><rect x="346.9" y="421" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="349.85" y="431.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (1,700,000 samples, 0.01%)</title><rect x="44.8" y="421" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="47.77" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (75,600,000 samples, 0.42%)</title><rect x="517.8" y="453" width="4.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="520.78" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3,000,000 samples, 0.02%)</title><rect x="832.6" y="405" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="835.64" y="415.5" ></text>
</g>
<g >
<title>cfree (4,100,000 samples, 0.02%)</title><rect x="1154.1" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1157.06" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="517" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (8,200,000 samples, 0.05%)</title><rect x="547.8" y="453" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="550.85" y="463.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (59,100,000 samples, 0.33%)</title><rect x="506.8" y="421" width="3.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="509.82" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (7,300,000 samples, 0.04%)</title><rect x="1187.7" y="197" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.67" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (8,300,000 samples, 0.05%)</title><rect x="501.6" y="389" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="504.56" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (9,800,000 samples, 0.05%)</title><rect x="45.2" y="437" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="48.17" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (17,400,000 samples, 0.10%)</title><rect x="27.1" y="405" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="30.10" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (18,077,900,000 samples, 99.92%)</title><rect x="11.0" y="533" width="1179.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="543.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::Switch::get_outlinks (71,000,000 samples, 0.39%)</title><rect x="1147.1" y="453" width="4.6" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1150.09" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (78,400,000 samples, 0.43%)</title><rect x="39.0" y="373" width="5.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.98" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,600,000 samples, 0.01%)</title><rect x="35.4" y="437" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="38.38" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,200,000 samples, 0.02%)</title><rect x="1182.7" y="277" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.75" y="287.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (49,100,000 samples, 0.27%)</title><rect x="1114.7" y="469" width="3.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1117.73" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,200,000 samples, 0.06%)</title><rect x="667.4" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="670.37" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (18,500,000 samples, 0.10%)</title><rect x="330.0" y="421" width="1.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="333.04" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,300,000 samples, 0.03%)</title><rect x="357.4" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="360.37" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,800,000 samples, 0.07%)</title><rect x="1173.9" y="293" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.85" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (101,400,000 samples, 0.56%)</title><rect x="1181.8" y="357" width="6.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.81" y="367.5" ></text>
</g>
<g >
<title>cfree (25,300,000 samples, 0.14%)</title><rect x="24.6" y="421" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="27.63" y="431.5" ></text>
</g>
<g >
<title>operator new (4,500,000 samples, 0.02%)</title><rect x="513.6" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="516.63" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="26.9" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.88" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (15,200,000 samples, 0.08%)</title><rect x="332.4" y="405" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="335.42" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,200,000 samples, 0.02%)</title><rect x="1186.4" y="261" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.43" y="271.5" ></text>
</g>
<g >
<title>malloc (4,400,000 samples, 0.02%)</title><rect x="353.0" y="341" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="356.03" y="351.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (19,700,000 samples, 0.11%)</title><rect x="336.8" y="437" width="1.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="339.80" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,500,000 samples, 0.03%)</title><rect x="27.9" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.88" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,400,000 samples, 0.06%)</title><rect x="1163.8" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.83" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (8,900,000 samples, 0.05%)</title><rect x="325.9" y="405" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="328.95" y="415.5" ></text>
</g>
<g >
<title>malloc (1,600,000 samples, 0.01%)</title><rect x="1144.0" y="405" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1147.03" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,600,000 samples, 0.01%)</title><rect x="513.8" y="309" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="516.76" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (100,300,000 samples, 0.55%)</title><rect x="12.8" y="389" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.80" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="549" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>writev (2,200,000 samples, 0.01%)</title><rect x="46.3" y="405" width="0.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="49.34" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (21,600,000 samples, 0.12%)</title><rect x="352.1" y="389" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="355.09" y="399.5" ></text>
</g>
<g >
<title>operator new (48,100,000 samples, 0.27%)</title><rect x="1172.0" y="437" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1175.03" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (102,200,000 samples, 0.56%)</title><rect x="1181.8" y="405" width="6.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.76" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,600,000 samples, 0.03%)</title><rect x="339.9" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.93" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (14,600,000 samples, 0.08%)</title><rect x="355.8" y="405" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="358.81" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1,700,000 samples, 0.01%)</title><rect x="1144.8" y="437" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1147.78" y="447.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (1,600,000 samples, 0.01%)</title><rect x="329.5" y="389" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="332.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,100,000 samples, 0.09%)</title><rect x="27.2" y="245" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.19" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,100,000 samples, 0.01%)</title><rect x="1097.5" y="421" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1100.49" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (136,400,000 samples, 0.75%)</title><rect x="36.0" y="453" width="8.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="39.03" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (3,400,000 samples, 0.02%)</title><rect x="360.6" y="453" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="363.61" y="463.5" ></text>
</g>
<g >
<title>malloc (2,100,000 samples, 0.01%)</title><rect x="1180.8" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.85" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,200,000 samples, 0.06%)</title><rect x="1142.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.03" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (1,900,000 samples, 0.01%)</title><rect x="1110.3" y="389" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1113.25" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (1,700,000 samples, 0.01%)</title><rect x="125.1" y="485" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="128.07" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,100,000 samples, 0.02%)</title><rect x="312.3" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="315.33" y="447.5" ></text>
</g>
<g >
<title>operator delete (68,100,000 samples, 0.38%)</title><rect x="637.8" y="437" width="4.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="640.82" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="340.6" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.62" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,700,000 samples, 0.01%)</title><rect x="44.3" y="421" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="47.30" y="431.5" ></text>
</g>
<g >
<title>Logger::get_instance (35,100,000 samples, 0.19%)</title><rect x="413.5" y="453" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="416.53" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,600,000 samples, 0.06%)</title><rect x="1173.9" y="277" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.93" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (6,600,000 samples, 0.04%)</title><rect x="1182.1" y="325" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.10" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (3,600,000 samples, 0.02%)</title><rect x="502.4" y="421" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="505.38" y="431.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (4,300,000 samples, 0.02%)</title><rect x="1143.2" y="453" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1146.16" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,800,000 samples, 0.03%)</title><rect x="46.7" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.72" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (47,100,000 samples, 0.26%)</title><rect x="355.1" y="421" width="3.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="358.06" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (24,700,000 samples, 0.14%)</title><rect x="1127.5" y="389" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.47" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (17,800,000 samples, 0.10%)</title><rect x="1183.5" y="245" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.54" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (6,100,000 samples, 0.03%)</title><rect x="1142.7" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.69" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,800,000 samples, 0.06%)</title><rect x="1121.4" y="453" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1124.39" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,800,000 samples, 0.02%)</title><rect x="1128.8" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.77" y="207.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1,900,000 samples, 0.01%)</title><rect x="1111.1" y="437" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1114.06" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,300,000 samples, 0.08%)</title><rect x="1141.7" y="389" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.69" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (3,500,000 samples, 0.02%)</title><rect x="499.9" y="405" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="502.91" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,900,000 samples, 0.03%)</title><rect x="1103.8" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1106.81" y="415.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (2,000,000 samples, 0.01%)</title><rect x="35.5" y="437" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="38.48" y="447.5" ></text>
</g>
<g >
<title>cfree (9,700,000 samples, 0.05%)</title><rect x="1084.7" y="437" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1087.65" y="447.5" ></text>
</g>
<g >
<title>YAML::Load (102,300,000 samples, 0.57%)</title><rect x="1181.8" y="469" width="6.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1184.76" y="479.5" ></text>
</g>
<g >
<title>sim::Event::Event (34,300,000 samples, 0.19%)</title><rect x="428.5" y="453" width="2.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="431.46" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="46.3" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.34" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,800,000 samples, 0.01%)</title><rect x="509.0" y="389" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="512.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="340.0" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.00" y="303.5" ></text>
</g>
<g >
<title>malloc (3,800,000 samples, 0.02%)</title><rect x="1085.5" y="421" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1088.48" y="431.5" ></text>
</g>
<g >
<title>operator new (458,900,000 samples, 2.54%)</title><rect x="1048.1" y="437" width="30.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1051.14" y="447.5" >op..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (19,000,000 samples, 0.11%)</title><rect x="780.8" y="405" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="783.76" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::TcpFlow&gt; (3,100,000 samples, 0.02%)</title><rect x="1189.1" y="469" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1192.08" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (92,400,000 samples, 0.51%)</title><rect x="28.4" y="293" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.40" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,700,000 samples, 0.03%)</title><rect x="340.9" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="343.89" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (32,100,000 samples, 0.18%)</title><rect x="514.0" y="421" width="2.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="516.95" y="431.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (89,200,000 samples, 0.49%)</title><rect x="312.6" y="469" width="5.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="315.56" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,400,000 samples, 0.02%)</title><rect x="334.0" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="337.02" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (8,400,000 samples, 0.05%)</title><rect x="1189.4" y="453" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.38" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (27,900,000 samples, 0.15%)</title><rect x="255.2" y="469" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="258.25" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="46.3" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.35" y="255.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (8,700,000 samples, 0.05%)</title><rect x="503.7" y="405" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="506.73" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,000,000 samples, 0.03%)</title><rect x="43.7" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.73" y="335.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (14,100,000 samples, 0.08%)</title><rect x="1185.1" y="277" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.08" y="287.5" ></text>
</g>
<g >
<title>malloc (46,700,000 samples, 0.26%)</title><rect x="1172.1" y="421" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.12" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,600,000 samples, 0.03%)</title><rect x="364.2" y="405" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="367.17" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_to (21,200,000 samples, 0.12%)</title><rect x="1145.4" y="453" width="1.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1148.38" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,700,000 samples, 0.03%)</title><rect x="1140.0" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.97" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (42,000,000 samples, 0.23%)</title><rect x="1164.5" y="437" width="2.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1167.55" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="46.8" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.76" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (1,600,000 samples, 0.01%)</title><rect x="26.4" y="485" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="29.42" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2,300,000 samples, 0.01%)</title><rect x="352.7" y="373" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="355.73" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (1,700,000 samples, 0.01%)</title><rect x="1156.5" y="437" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1159.48" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,500,000 samples, 0.04%)</title><rect x="1164.0" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.02" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,200,000 samples, 0.07%)</title><rect x="1163.6" y="293" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.65" y="303.5" ></text>
</g>
<g >
<title>cfree (7,000,000 samples, 0.04%)</title><rect x="775.6" y="405" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="778.60" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (77,900,000 samples, 0.43%)</title><rect x="827.8" y="421" width="5.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="830.76" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,300,000 samples, 0.03%)</title><rect x="339.9" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.88" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (48,700,000 samples, 0.27%)</title><rect x="1129.5" y="373" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.47" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (11,800,000 samples, 0.07%)</title><rect x="1147.8" y="389" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.83" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,200,000 samples, 0.04%)</title><rect x="1164.0" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.04" y="223.5" ></text>
</g>
<g >
<title>std::filesystem::status (5,300,000 samples, 0.03%)</title><rect x="46.7" y="437" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="49.69" y="447.5" ></text>
</g>
<g >
<title>__close_nocancel (3,400,000 samples, 0.02%)</title><rect x="26.9" y="405" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="29.85" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,600,000 samples, 0.50%)</title><rect x="28.5" y="245" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.52" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,900,000 samples, 0.01%)</title><rect x="328.9" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="331.90" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (32,000,000 samples, 0.18%)</title><rect x="1186.2" y="293" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.24" y="303.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (11,300,000 samples, 0.06%)</title><rect x="1112.4" y="421" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1115.42" y="431.5" ></text>
</g>
<g >
<title>malloc (38,000,000 samples, 0.21%)</title><rect x="634.5" y="437" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="637.52" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,700,000 samples, 0.02%)</title><rect x="28.0" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.99" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,500,000 samples, 0.02%)</title><rect x="775.8" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="778.83" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (24,900,000 samples, 0.14%)</title><rect x="11.0" y="453" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.04" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (102,900,000 samples, 0.57%)</title><rect x="37.4" y="421" width="6.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="40.39" y="431.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (976,400,000 samples, 5.40%)</title><rect x="1118.0" y="485" width="63.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1120.99" y="495.5" >sim::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,200,000 samples, 0.09%)</title><rect x="27.2" y="277" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.18" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,000,000 samples, 0.10%)</title><rect x="1173.5" y="373" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.51" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18,400,000 samples, 0.10%)</title><rect x="1151.7" y="453" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1154.72" y="463.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (1,800,000 samples, 0.01%)</title><rect x="1098.1" y="405" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1101.14" y="415.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (1,800,000 samples, 0.01%)</title><rect x="1188.2" y="261" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1191.17" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,200,000 samples, 0.01%)</title><rect x="341.4" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.43" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,400,000 samples, 0.02%)</title><rect x="1185.7" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.71" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="1130.6" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.57" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (19,600,000 samples, 0.11%)</title><rect x="1156.7" y="453" width="1.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1159.73" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (236,300,000 samples, 1.31%)</title><rect x="11.0" y="469" width="15.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.99" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (100,200,000 samples, 0.55%)</title><rect x="324.8" y="437" width="6.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="327.84" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (41,300,000 samples, 0.23%)</title><rect x="1172.5" y="405" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.47" y="415.5" ></text>
</g>
<g >
<title>fstatat64 (5,000,000 samples, 0.03%)</title><rect x="46.7" y="421" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="49.70" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,100,000 samples, 0.06%)</title><rect x="1128.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.30" y="351.5" ></text>
</g>
<g >
<title>malloc (12,000,000 samples, 0.07%)</title><rect x="1124.7" y="405" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1127.75" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (69,300,000 samples, 0.38%)</title><rect x="29.9" y="165" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.90" y="175.5" ></text>
</g>
<g >
<title>__default_morecore (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="421" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1143.28" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (9,600,000 samples, 0.05%)</title><rect x="1184.1" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.07" y="223.5" ></text>
</g>
<g >
<title>malloc (5,300,000 samples, 0.03%)</title><rect x="336.3" y="421" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="339.34" y="431.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (1,700,000 samples, 0.01%)</title><rect x="782.8" y="421" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="785.82" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (12,000,000 samples, 0.07%)</title><rect x="1148.7" y="421" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1151.67" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4,200,000 samples, 0.02%)</title><rect x="778.8" y="405" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="781.77" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (1,800,000 samples, 0.01%)</title><rect x="499.2" y="437" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="502.16" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,400,000 samples, 0.03%)</title><rect x="34.1" y="69" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.07" y="79.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (2,400,000 samples, 0.01%)</title><rect x="499.0" y="421" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="501.96" y="431.5" ></text>
</g>
<g >
<title>cfree (100,300,000 samples, 0.55%)</title><rect x="12.8" y="421" width="6.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.80" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (102,200,000 samples, 0.56%)</title><rect x="1181.8" y="421" width="6.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.76" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (27,800,000 samples, 0.15%)</title><rect x="1175.2" y="469" width="1.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1178.18" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,900,000 samples, 0.02%)</title><rect x="12.4" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.45" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,300,000 samples, 0.05%)</title><rect x="1174.1" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.08" y="255.5" ></text>
</g>
<g >
<title>sim::Generate::operator (230,500,000 samples, 1.27%)</title><rect x="318.4" y="469" width="15.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="321.38" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (9,400,000 samples, 0.05%)</title><rect x="1098.8" y="421" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1101.78" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (119,200,000 samples, 0.66%)</title><rect x="1167.4" y="453" width="7.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.39" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="533" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (95,200,000 samples, 0.53%)</title><rect x="28.2" y="453" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="31.24" y="463.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (5,800,000 samples, 0.03%)</title><rect x="1099.4" y="437" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1102.39" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,700,000 samples, 0.34%)</title><rect x="30.5" y="149" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.47" y="159.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (9,200,000 samples, 0.05%)</title><rect x="784.0" y="405" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="787.04" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (2,700,000 samples, 0.01%)</title><rect x="125.2" y="485" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="128.23" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,400,000 samples, 0.02%)</title><rect x="46.7" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.74" y="383.5" ></text>
</g>
<g >
<title>sim::Link::arrive (400,400,000 samples, 2.21%)</title><rect x="334.4" y="453" width="26.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="337.38" y="463.5" >s..</text>
</g>
<g >
<title>malloc (6,500,000 samples, 0.04%)</title><rect x="1181.2" y="437" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.24" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (33,000,000 samples, 0.18%)</title><rect x="351.3" y="405" width="2.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="354.35" y="415.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,700,000 samples, 0.01%)</title><rect x="354.9" y="421" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="357.88" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (136,500,000 samples, 0.75%)</title><rect x="338.1" y="437" width="8.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="341.08" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (97,300,000 samples, 0.54%)</title><rect x="37.7" y="389" width="6.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.74" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_from (3,800,000 samples, 0.02%)</title><rect x="1123.6" y="437" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1126.60" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (8,900,000 samples, 0.05%)</title><rect x="46.0" y="437" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="49.03" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,900,000 samples, 0.06%)</title><rect x="1142.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.98" y="351.5" ></text>
</g>
<g >
<title>YAML::Stream::get (2,800,000 samples, 0.02%)</title><rect x="1186.8" y="245" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.83" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6,400,000 samples, 0.04%)</title><rect x="1174.3" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.27" y="239.5" ></text>
</g>
<g >
<title>cfree (4,100,000 samples, 0.02%)</title><rect x="1100.3" y="421" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1103.32" y="431.5" ></text>
</g>
<g >
<title>all (18,093,100,000 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="46.3" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.35" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,100,000 samples, 0.08%)</title><rect x="1173.7" y="341" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.70" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (16,900,000 samples, 0.09%)</title><rect x="514.4" y="405" width="1.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="517.37" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8,800,000 samples, 0.05%)</title><rect x="515.5" y="405" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="518.47" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (2,600,000 samples, 0.01%)</title><rect x="510.8" y="405" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="513.79" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (5,100,000 samples, 0.03%)</title><rect x="498.8" y="437" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="501.78" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="46.8" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.76" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (32,600,000 samples, 0.18%)</title><rect x="500.3" y="421" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="503.26" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,900,000 samples, 0.01%)</title><rect x="26.2" y="389" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.15" y="399.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (8,000,000 samples, 0.04%)</title><rect x="1188.4" y="485" width="0.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.43" y="495.5" ></text>
</g>
<g >
<title>sim::Process::operator (109,400,000 samples, 0.60%)</title><rect x="125.5" y="485" width="7.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="128.46" y="495.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (6,100,000 samples, 0.03%)</title><rect x="358.7" y="421" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="361.66" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (29,700,000 samples, 0.16%)</title><rect x="17.4" y="373" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.41" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (1,654,300,000 samples, 9.14%)</title><rect x="668.2" y="437" width="107.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="671.16" y="447.5" >sim::Link::ge..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1140.3" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.28" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="46.9" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="49.93" y="271.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (9,700,000 samples, 0.05%)</title><rect x="1189.3" y="469" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.30" y="479.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (100,900,000 samples, 0.56%)</title><rect x="324.8" y="453" width="6.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="327.80" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,100,000 samples, 0.01%)</title><rect x="514.2" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="517.23" y="367.5" ></text>
</g>
<g >
<title>nons (18,093,100,000 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >nons</text>
</g>
<g >
<title>[libc.so.6] (3,200,000 samples, 0.02%)</title><rect x="511.3" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="514.28" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_devices (1,800,000 samples, 0.01%)</title><rect x="1188.9" y="485" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1191.95" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,000,000 samples, 0.03%)</title><rect x="1174.4" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.36" y="191.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (419,700,000 samples, 2.32%)</title><rect x="333.5" y="469" width="27.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="336.48" y="479.5" >s..</text>
</g>
<g >
<title>sim::Link::get_to (3,800,000 samples, 0.02%)</title><rect x="1134.6" y="469" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1137.64" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (109,600,000 samples, 0.61%)</title><rect x="1125.5" y="437" width="7.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1128.53" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,900,000 samples, 0.04%)</title><rect x="10.4" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.38" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,700,000 samples, 0.09%)</title><rect x="27.1" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.15" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,700,000 samples, 0.09%)</title><rect x="27.1" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.15" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (79,200,000 samples, 0.44%)</title><rect x="341.7" y="405" width="5.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="344.68" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (6,500,000 samples, 0.04%)</title><rect x="503.2" y="405" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="506.17" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (17,400,000 samples, 0.10%)</title><rect x="27.1" y="421" width="1.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="30.10" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,700,000 samples, 0.02%)</title><rect x="1142.4" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.45" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,600,000 samples, 0.01%)</title><rect x="1110.4" y="389" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1113.38" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="1128.8" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.84" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,600,000 samples, 0.01%)</title><rect x="34.4" y="453" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="37.44" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (16,100,000 samples, 0.09%)</title><rect x="327.0" y="389" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="330.02" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (6,700,000 samples, 0.04%)</title><rect x="1182.1" y="341" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.10" y="351.5" ></text>
</g>
<g >
<title>__uselocale (2,400,000 samples, 0.01%)</title><rect x="44.1" y="421" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="47.10" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,800,000 samples, 0.08%)</title><rect x="10.0" y="565" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,300,000 samples, 0.03%)</title><rect x="339.9" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.88" y="383.5" ></text>
</g>
<g >
<title>cfree (66,400,000 samples, 0.37%)</title><rect x="50.1" y="485" width="4.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="53.12" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,100,000 samples, 0.07%)</title><rect x="10.0" y="325" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.05" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,600,000 samples, 0.03%)</title><rect x="1185.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.63" y="223.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (5,500,000 samples, 0.03%)</title><rect x="1187.8" y="181" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.79" y="191.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (94,800,000 samples, 0.52%)</title><rect x="28.2" y="437" width="6.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="31.24" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (4,700,000 samples, 0.03%)</title><rect x="328.8" y="373" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="331.81" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (4,600,000 samples, 0.03%)</title><rect x="44.4" y="421" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="47.42" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="26.9" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.94" y="319.5" ></text>
</g>
<g >
<title>malloc@plt (29,200,000 samples, 0.16%)</title><rect x="753.9" y="421" width="1.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="756.91" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (71,600,000 samples, 0.40%)</title><rect x="1101.9" y="421" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1104.93" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,700,000 samples, 0.01%)</title><rect x="832.8" y="421" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="835.84" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,500,000 samples, 0.06%)</title><rect x="1141.9" y="357" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.94" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,700,000 samples, 0.01%)</title><rect x="1186.5" y="229" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.46" y="239.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,700,000 samples, 0.01%)</title><rect x="503.6" y="405" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="506.62" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (25,800,000 samples, 0.14%)</title><rect x="44.9" y="453" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="47.92" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (100,300,000 samples, 0.55%)</title><rect x="12.8" y="405" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.80" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (28,100,000 samples, 0.16%)</title><rect x="1104.2" y="405" width="1.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1107.21" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6,200,000 samples, 0.03%)</title><rect x="1174.3" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.28" y="223.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (168,500,000 samples, 0.93%)</title><rect x="1099.8" y="437" width="11.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1102.77" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3,100,000 samples, 0.02%)</title><rect x="1097.2" y="405" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1100.19" y="415.5" ></text>
</g>
<g >
<title>operator new (2,100,000 samples, 0.01%)</title><rect x="1100.6" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1103.62" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (16,200,000 samples, 0.09%)</title><rect x="1109.5" y="405" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1112.51" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (23,700,000 samples, 0.13%)</title><rect x="1165.7" y="373" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.74" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,800,000 samples, 0.08%)</title><rect x="1163.5" y="325" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.54" y="335.5" ></text>
</g>
<g >
<title>sim::Host::process (312,000,000 samples, 1.72%)</title><rect x="497.4" y="453" width="20.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="500.37" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (9,300,000 samples, 0.05%)</title><rect x="1124.9" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.93" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (3,600,000 samples, 0.02%)</title><rect x="1123.8" y="437" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1126.85" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,000,000 samples, 0.06%)</title><rect x="27.6" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.58" y="175.5" ></text>
</g>
</g>
</svg>
