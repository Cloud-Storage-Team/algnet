<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>_IO_file_open (95,200,000 samples, 0.53%)</title><rect x="26.3" y="421" width="6.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="29.27" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,200,000 samples, 0.11%)</title><rect x="25.0" y="357" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.97" y="367.5" ></text>
</g>
<g >
<title>cfree (1,600,000 samples, 0.01%)</title><rect x="327.8" y="437" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="330.78" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (78,100,000 samples, 0.44%)</title><rect x="327.1" y="485" width="5.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="330.09" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (366,500,000 samples, 2.05%)</title><rect x="295.7" y="485" width="24.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="298.72" y="495.5" >[..</text>
</g>
<g >
<title>sim::Link::get_from (1,700,000 samples, 0.01%)</title><rect x="1134.6" y="501" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1137.64" y="511.5" ></text>
</g>
<g >
<title>sim::Process::~Process (209,200,000 samples, 1.17%)</title><rect x="127.4" y="517" width="13.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="130.44" y="527.5" ></text>
</g>
<g >
<title>operator new (3,100,000 samples, 0.02%)</title><rect x="772.1" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="775.14" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="597" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::locale::~locale (1,700,000 samples, 0.01%)</title><rect x="348.7" y="453" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="351.65" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,700,000 samples, 0.02%)</title><rect x="506.0" y="421" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="509.00" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (7,500,000 samples, 0.04%)</title><rect x="1186.4" y="309" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.38" y="319.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (88,300,000 samples, 0.49%)</title><rect x="1095.4" y="469" width="5.9" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1098.43" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,100,000 samples, 0.09%)</title><rect x="1141.5" y="437" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.46" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="505.8" y="373" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="508.75" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (5,500,000 samples, 0.03%)</title><rect x="1188.6" y="453" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.62" y="463.5" ></text>
</g>
<g >
<title>Logger::get_instance (44,500,000 samples, 0.25%)</title><rect x="684.7" y="453" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="687.67" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (102,100,000 samples, 0.57%)</title><rect x="1181.9" y="469" width="6.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1184.87" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,500,000 samples, 0.11%)</title><rect x="24.9" y="389" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.95" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (32,900,000 samples, 0.18%)</title><rect x="338.7" y="453" width="2.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="341.66" y="463.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (2,600,000 samples, 0.01%)</title><rect x="1144.3" y="453" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1147.33" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,600,000 samples, 0.01%)</title><rect x="33.5" y="469" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="36.55" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (17,000,000 samples, 0.10%)</title><rect x="504.4" y="453" width="1.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="507.43" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="581" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>operator new (2,000,000 samples, 0.01%)</title><rect x="505.7" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="508.74" y="431.5" ></text>
</g>
<g >
<title>malloc (41,800,000 samples, 0.23%)</title><rect x="1172.2" y="453" width="2.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1175.15" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (14,000,000 samples, 0.08%)</title><rect x="330.0" y="421" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="332.97" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="24.8" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.80" y="351.5" ></text>
</g>
<g >
<title>cfree (553,100,000 samples, 3.10%)</title><rect x="584.2" y="469" width="36.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="587.17" y="479.5" >cfree</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (12,000,000 samples, 0.07%)</title><rect x="1183.9" y="261" width="0.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.92" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (14,000,000 samples, 0.08%)</title><rect x="1147.3" y="421" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.34" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (15,400,000 samples, 0.09%)</title><rect x="1103.7" y="453" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1106.70" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,800,000 samples, 0.02%)</title><rect x="1186.6" y="261" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.62" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,400,000 samples, 0.02%)</title><rect x="42.0" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="45.02" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (101,300,000 samples, 0.57%)</title><rect x="1181.9" y="389" width="6.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.92" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (138,300,000 samples, 0.77%)</title><rect x="530.8" y="485" width="9.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="533.75" y="495.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (603,800,000 samples, 3.38%)</title><rect x="1135.0" y="501" width="39.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1138.03" y="511.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="565" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,900,000 samples, 0.02%)</title><rect x="1185.9" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.87" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,700,000 samples, 0.02%)</title><rect x="1185.8" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.82" y="127.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,800,000 samples, 0.02%)</title><rect x="1184.5" y="213" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.53" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,000,000 samples, 0.04%)</title><rect x="1185.6" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.60" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,900,000 samples, 0.02%)</title><rect x="1144.1" y="453" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1147.13" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,000,000 samples, 0.08%)</title><rect x="1163.9" y="373" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.90" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,300,000 samples, 0.45%)</title><rect x="493.6" y="469" width="5.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="496.55" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (3,900,000 samples, 0.02%)</title><rect x="775.6" y="437" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="778.55" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (9,300,000 samples, 0.05%)</title><rect x="44.1" y="469" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="47.09" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9,000,000 samples, 0.05%)</title><rect x="504.8" y="421" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="507.79" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,400,000 samples, 0.02%)</title><rect x="1182.9" y="245" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.93" y="255.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (2,000,000 samples, 0.01%)</title><rect x="504.3" y="453" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="507.30" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (3,300,000 samples, 0.02%)</title><rect x="772.7" y="437" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="775.66" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,600,000 samples, 0.08%)</title><rect x="10.0" y="389" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.01" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,700,000 samples, 0.01%)</title><rect x="1146.4" y="469" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1149.43" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="338.4" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.43" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4,100,000 samples, 0.02%)</title><rect x="507.0" y="469" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="509.97" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (1,900,000 samples, 0.01%)</title><rect x="501.6" y="405" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="504.58" y="415.5" ></text>
</g>
<g >
<title>malloc (27,000,000 samples, 0.15%)</title><rect x="1127.2" y="437" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1130.24" y="447.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (14,600,000 samples, 0.08%)</title><rect x="1099.8" y="437" width="0.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1102.76" y="447.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (1,700,000 samples, 0.01%)</title><rect x="120.0" y="517" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="122.99" y="527.5" ></text>
</g>
<g >
<title>operator new (12,200,000 samples, 0.07%)</title><rect x="1124.6" y="453" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1127.61" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="1128.8" y="197" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.76" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,000,000 samples, 0.03%)</title><rect x="1185.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.73" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="44.8" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.83" y="415.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (8,200,000 samples, 0.05%)</title><rect x="770.9" y="469" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="773.93" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (113,700,000 samples, 0.64%)</title><rect x="1125.4" y="469" width="7.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1128.42" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.02%)</title><rect x="44.9" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.93" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (3,100,000 samples, 0.02%)</title><rect x="502.4" y="389" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="505.40" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (86,100,000 samples, 0.48%)</title><rect x="12.3" y="469" width="5.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="15.34" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (16,000,000 samples, 0.09%)</title><rect x="1124.4" y="469" width="1.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1127.36" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (7,000,000 samples, 0.04%)</title><rect x="1184.3" y="245" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.25" y="255.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (4,200,000 samples, 0.02%)</title><rect x="493.1" y="469" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="496.14" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (7,700,000 samples, 0.04%)</title><rect x="498.3" y="437" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="501.29" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,600,000 samples, 0.01%)</title><rect x="651.0" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="653.98" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (17,500,000 samples, 0.10%)</title><rect x="25.1" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.08" y="287.5" ></text>
</g>
<g >
<title>cfree (2,700,000 samples, 0.02%)</title><rect x="771.9" y="453" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="774.94" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,300,000 samples, 0.02%)</title><rect x="44.9" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.89" y="351.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (23,100,000 samples, 0.13%)</title><rect x="1183.2" y="309" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.19" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (4,300,000 samples, 0.02%)</title><rect x="45.3" y="533" width="0.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="48.30" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,500,000 samples, 0.05%)</title><rect x="10.3" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.34" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="338.4" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.41" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,300,000 samples, 0.06%)</title><rect x="1141.8" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.78" y="399.5" ></text>
</g>
<g >
<title>malloc (38,100,000 samples, 0.21%)</title><rect x="1140.6" y="469" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.57" y="479.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (1,900,000 samples, 0.01%)</title><rect x="1186.2" y="341" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1189.22" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="1185.9" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.92" y="95.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (3,700,000 samples, 0.02%)</title><rect x="1123.3" y="469" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1126.30" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,300,000 samples, 0.02%)</title><rect x="44.8" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.83" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (6,700,000 samples, 0.04%)</title><rect x="347.9" y="453" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="350.92" y="463.5" ></text>
</g>
<g >
<title>malloc (6,600,000 samples, 0.04%)</title><rect x="332.9" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="335.86" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,900,000 samples, 0.06%)</title><rect x="10.3" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.25" y="351.5" ></text>
</g>
<g >
<title>sim::SendData::operator (345,400,000 samples, 1.93%)</title><rect x="1093.0" y="501" width="22.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1095.96" y="511.5" >s..</text>
</g>
<g >
<title>auto sim::YamlParser::process_links (8,800,000 samples, 0.05%)</title><rect x="1189.4" y="501" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.35" y="511.5" ></text>
</g>
<g >
<title>malloc (32,300,000 samples, 0.18%)</title><rect x="1165.3" y="437" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.31" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (9,400,000 samples, 0.05%)</title><rect x="772.4" y="453" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="775.39" y="463.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (1,900,000 samples, 0.01%)</title><rect x="1101.7" y="437" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1104.72" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,600,000 samples, 0.03%)</title><rect x="1142.2" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.22" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="1174.1" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.12" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (17,900,000 samples, 0.10%)</title><rect x="1163.6" y="389" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.64" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (27,100,000 samples, 0.15%)</title><rect x="1131.1" y="389" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1134.06" y="399.5" ></text>
</g>
<g >
<title>operator new (4,100,000 samples, 0.02%)</title><rect x="357.2" y="469" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="360.15" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (6,300,000 samples, 0.04%)</title><rect x="1182.2" y="357" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.17" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (1,800,000 samples, 0.01%)</title><rect x="1182.4" y="293" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.36" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.02%)</title><rect x="1130.9" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.89" y="351.5" ></text>
</g>
<g >
<title>fopen (95,700,000 samples, 0.54%)</title><rect x="26.2" y="453" width="6.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="29.24" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (94,000,000 samples, 0.53%)</title><rect x="26.3" y="357" width="6.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.35" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (17,000,000 samples, 0.10%)</title><rect x="1187.2" y="277" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.24" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (7,000,000 samples, 0.04%)</title><rect x="1189.5" y="485" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.46" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,700,000 samples, 0.23%)</title><rect x="328.2" y="437" width="2.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="331.23" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (2,800,000 samples, 0.02%)</title><rect x="1123.8" y="469" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1126.79" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (32,000,000 samples, 0.18%)</title><rect x="1186.4" y="325" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.37" y="335.5" ></text>
</g>
<g >
<title>cfree (10,900,000 samples, 0.06%)</title><rect x="1139.5" y="485" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1142.52" y="495.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (3,800,000 samples, 0.02%)</title><rect x="1181.5" y="501" width="0.3" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1184.52" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1,800,000 samples, 0.01%)</title><rect x="505.4" y="421" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="508.39" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,900,000 samples, 0.02%)</title><rect x="1112.9" y="421" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1115.93" y="431.5" ></text>
</g>
<g >
<title>sim::parse_flow_common (2,500,000 samples, 0.01%)</title><rect x="1189.2" y="485" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1192.15" y="495.5" ></text>
</g>
<g >
<title>__uselocale (2,400,000 samples, 0.01%)</title><rect x="42.4" y="453" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="45.35" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (1,800,000 samples, 0.01%)</title><rect x="539.9" y="485" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="542.91" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,600,000 samples, 0.02%)</title><rect x="10.7" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.67" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,800,000 samples, 0.02%)</title><rect x="1182.9" y="261" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.91" y="271.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (1,900,000 samples, 0.01%)</title><rect x="33.8" y="469" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="36.76" y="479.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (1,800,000 samples, 0.01%)</title><rect x="331.2" y="421" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="334.24" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (3,900,000 samples, 0.02%)</title><rect x="351.9" y="421" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="354.88" y="431.5" ></text>
</g>
<g >
<title>operator new (3,900,000 samples, 0.02%)</title><rect x="347.1" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.06" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,300,000 samples, 0.03%)</title><rect x="1112.4" y="421" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1115.40" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (18,000,000 samples, 0.10%)</title><rect x="1143.3" y="469" width="1.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1146.31" y="479.5" ></text>
</g>
<g >
<title>cfree (2,900,000 samples, 0.02%)</title><rect x="341.6" y="453" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="344.64" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,400,000 samples, 0.03%)</title><rect x="345.2" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="348.20" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (3,500,000 samples, 0.02%)</title><rect x="328.5" y="421" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="331.52" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,700,000 samples, 0.03%)</title><rect x="1182.8" y="293" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.85" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="505.8" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="508.75" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (1,800,200,000 samples, 10.08%)</title><rect x="651.3" y="469" width="118.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="654.28" y="479.5" >sim::Link::get..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,100,000 samples, 0.11%)</title><rect x="1156.8" y="485" width="1.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1159.85" y="495.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (19,600,000 samples, 0.11%)</title><rect x="24.9" y="437" width="1.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="27.94" y="447.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (95,800,000 samples, 0.54%)</title><rect x="26.2" y="469" width="6.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="29.24" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,900,000 samples, 0.02%)</title><rect x="333.7" y="485" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="336.71" y="495.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (2,400,000 samples, 0.01%)</title><rect x="1182.3" y="325" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.32" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (2,400,000 samples, 0.01%)</title><rect x="774.9" y="405" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="777.90" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (6,100,000 samples, 0.03%)</title><rect x="503.8" y="437" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="506.83" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,200,000 samples, 0.02%)</title><rect x="44.8" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.83" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,200,000 samples, 0.03%)</title><rect x="1106.3" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.31" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (182,800,000 samples, 1.02%)</title><rect x="12.2" y="485" width="12.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.22" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,300,000 samples, 0.02%)</title><rect x="44.8" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.83" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (161,500,000 samples, 0.90%)</title><rect x="1122.3" y="485" width="10.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1125.32" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1162.3" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.33" y="431.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,600,000 samples, 0.01%)</title><rect x="496.7" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="499.66" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,500,000 samples, 0.03%)</title><rect x="773.9" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="776.90" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (3,500,000 samples, 0.02%)</title><rect x="1146.3" y="485" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1149.31" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,300,000 samples, 0.51%)</title><rect x="26.6" y="261" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.59" y="271.5" ></text>
</g>
<g >
<title>operator delete (69,200,000 samples, 0.39%)</title><rect x="406.5" y="485" width="4.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="409.50" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (17,900,000 samples, 0.10%)</title><rect x="1163.6" y="421" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.64" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (315,900,000 samples, 1.77%)</title><rect x="24.4" y="533" width="20.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="27.44" y="543.5" ></text>
</g>
<g >
<title>sim::Process::operator (11,033,800,000 samples, 61.76%)</title><rect x="358.5" y="501" width="728.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="361.51" y="511.5" >sim::Process::operator</text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,430,200,000 samples, 13.60%)</title><rect x="926.8" y="485" width="160.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="929.78" y="495.5" >void sim::Scheduler:..</text>
</g>
<g >
<title>sim::Link::get_from (1,800,000 samples, 0.01%)</title><rect x="1122.1" y="485" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1125.12" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,100,000 samples, 0.01%)</title><rect x="1111.8" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1114.79" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="1185.9" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.94" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,000,000 samples, 0.07%)</title><rect x="10.1" y="357" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.11" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,100,000 samples, 0.09%)</title><rect x="1141.5" y="421" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.46" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (914,300,000 samples, 5.12%)</title><rect x="59.4" y="517" width="60.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="62.43" y="527.5" >sim::E..</text>
</g>
<g >
<title>std::_Hash_bytes (2,600,000 samples, 0.01%)</title><rect x="828.3" y="437" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="831.27" y="447.5" ></text>
</g>
<g >
<title>YAML::LoadFile (102,300,000 samples, 0.57%)</title><rect x="1181.9" y="517" width="6.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1184.86" y="527.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (4,800,000 samples, 0.03%)</title><rect x="352.8" y="453" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="355.84" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,100,000 samples, 0.52%)</title><rect x="26.4" y="293" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.41" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,300,000 samples, 0.07%)</title><rect x="10.0" y="373" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.03" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,000,000 samples, 0.02%)</title><rect x="337.8" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.84" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (27,300,000 samples, 0.15%)</title><rect x="1106.7" y="437" width="1.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1109.66" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,000,000 samples, 0.01%)</title><rect x="338.0" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.98" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,400,000 samples, 0.01%)</title><rect x="1188.2" y="197" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.20" y="207.5" ></text>
</g>
<g >
<title>operator new (2,400,000 samples, 0.01%)</title><rect x="1181.1" y="485" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.06" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::get (2,800,000 samples, 0.02%)</title><rect x="1183.3" y="293" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1186.30" y="303.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (24,900,000 samples, 0.14%)</title><rect x="1143.3" y="485" width="1.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1146.26" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (24,700,000 samples, 0.14%)</title><rect x="16.4" y="405" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="338.0" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.00" y="319.5" ></text>
</g>
<g >
<title>fclose (3,600,000 samples, 0.02%)</title><rect x="24.7" y="453" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="27.70" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (5,100,000 samples, 0.03%)</title><rect x="1184.4" y="229" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.38" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (88,100,000 samples, 0.49%)</title><rect x="26.7" y="245" width="5.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.74" y="255.5" ></text>
</g>
<g >
<title>cfree (4,700,000 samples, 0.03%)</title><rect x="1103.2" y="453" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1106.17" y="463.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (3,800,000 samples, 0.02%)</title><rect x="24.7" y="469" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="27.68" y="479.5" ></text>
</g>
<g >
<title>sim::Link::arrive (305,200,000 samples, 1.71%)</title><rect x="334.0" y="485" width="20.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="337.04" y="495.5" ></text>
</g>
<g >
<title>sim::Event::get_time (18,800,000 samples, 0.11%)</title><rect x="58.2" y="517" width="1.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="61.18" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,900,000 samples, 0.02%)</title><rect x="44.9" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.85" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (2,600,000 samples, 0.01%)</title><rect x="1186.7" y="229" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.70" y="239.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (8,600,000 samples, 0.05%)</title><rect x="1101.3" y="469" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1104.28" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (3,900,000 samples, 0.02%)</title><rect x="505.6" y="437" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="508.61" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::TcpFlow&gt; (3,100,000 samples, 0.02%)</title><rect x="1189.1" y="501" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1192.11" y="511.5" ></text>
</g>
<g >
<title>operator new (1,900,000 samples, 0.01%)</title><rect x="331.4" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="334.39" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,800,000 samples, 0.03%)</title><rect x="1185.7" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.75" y="159.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2,200,000 samples, 0.01%)</title><rect x="348.5" y="453" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="351.45" y="463.5" ></text>
</g>
<g >
<title>malloc (3,800,000 samples, 0.02%)</title><rect x="1181.5" y="469" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.52" y="479.5" ></text>
</g>
<g >
<title>operator new (1,800,000 samples, 0.01%)</title><rect x="505.4" y="389" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="508.39" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,600,000 samples, 0.07%)</title><rect x="1164.0" y="341" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.99" y="351.5" ></text>
</g>
<g >
<title>cfree (21,200,000 samples, 0.12%)</title><rect x="22.7" y="453" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="25.74" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,200,000 samples, 0.07%)</title><rect x="1163.9" y="357" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.95" y="367.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (2,800,000 samples, 0.02%)</title><rect x="331.4" y="437" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="334.36" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (5,500,000 samples, 0.03%)</title><rect x="358.0" y="469" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="360.99" y="479.5" ></text>
</g>
<g >
<title>__default_morecore (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="453" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1143.10" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (2,100,000 samples, 0.01%)</title><rect x="1156.7" y="485" width="0.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1159.65" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (44,000,000 samples, 0.25%)</title><rect x="1176.8" y="501" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1179.78" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="389" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,000,000 samples, 0.02%)</title><rect x="1128.6" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.61" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,400,000 samples, 0.02%)</title><rect x="353.6" y="469" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="356.62" y="479.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (1,900,000 samples, 0.01%)</title><rect x="504.1" y="421" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="507.11" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (14,000,000 samples, 0.08%)</title><rect x="505.6" y="453" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="508.55" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,300,000 samples, 0.05%)</title><rect x="1173.8" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.84" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,900,000 samples, 0.01%)</title><rect x="338.9" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="341.93" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (24,900,000 samples, 0.14%)</title><rect x="339.2" y="437" width="1.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="342.18" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,850,300,000 samples, 99.92%)</title><rect x="11.0" y="565" width="1179.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>[libc.so.6] (28,400,000 samples, 0.16%)</title><rect x="263.1" y="501" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="266.07" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,900,000 samples, 0.01%)</title><rect x="1101.1" y="453" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1104.10" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,800,000 samples, 0.01%)</title><rect x="505.4" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="508.39" y="367.5" ></text>
</g>
<g >
<title>operator new (40,400,000 samples, 0.23%)</title><rect x="1140.4" y="485" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.42" y="495.5" ></text>
</g>
<g >
<title>sim::Process::Process (2,700,000 samples, 0.02%)</title><rect x="336.9" y="453" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="339.92" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (3,200,000 samples, 0.02%)</title><rect x="504.5" y="437" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="507.46" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (102,100,000 samples, 0.57%)</title><rect x="1181.9" y="405" width="6.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.87" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,200,000 samples, 0.10%)</title><rect x="25.0" y="309" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.03" y="319.5" ></text>
</g>
<g >
<title>malloc (38,400,000 samples, 0.21%)</title><rect x="1050.7" y="469" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1053.69" y="479.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (80,900,000 samples, 0.45%)</title><rect x="320.0" y="501" width="5.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="322.99" y="511.5" ></text>
</g>
<g >
<title>malloc (2,500,000 samples, 0.01%)</title><rect x="772.2" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="775.18" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,100,000 samples, 0.11%)</title><rect x="25.0" y="325" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.97" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (2,900,000 samples, 0.02%)</title><rect x="498.9" y="469" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="501.85" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (3,300,000 samples, 0.02%)</title><rect x="770.0" y="453" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="772.97" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (9,000,000 samples, 0.05%)</title><rect x="494.0" y="453" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="497.04" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,900,000 samples, 0.02%)</title><rect x="687.6" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="690.61" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (80,000,000 samples, 0.45%)</title><rect x="1095.7" y="453" width="5.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1098.65" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (88,100,000 samples, 0.49%)</title><rect x="507.6" y="485" width="5.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="510.60" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="44.5" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="287.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,600,000 samples, 0.01%)</title><rect x="348.8" y="453" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="351.76" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (203,100,000 samples, 1.14%)</title><rect x="11.0" y="533" width="13.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="543.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (3,500,000 samples, 0.02%)</title><rect x="1182.3" y="341" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.32" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,200,000 samples, 0.07%)</title><rect x="1164.0" y="325" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.02" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,500,000 samples, 0.03%)</title><rect x="1188.6" y="501" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.62" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="505.8" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="508.75" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="533" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,100,000 samples, 0.68%)</title><rect x="35.0" y="469" width="8.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="38.04" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="1130.8" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.84" y="383.5" ></text>
</g>
<g >
<title>operator new (17,600,000 samples, 0.10%)</title><rect x="1147.1" y="453" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.10" y="463.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (210,800,000 samples, 1.18%)</title><rect x="1120.7" y="501" width="13.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1123.72" y="511.5" ></text>
</g>
<g >
<title>malloc (17,000,000 samples, 0.10%)</title><rect x="1147.1" y="437" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1150.14" y="447.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_devices (1,700,000 samples, 0.01%)</title><rect x="1189.0" y="517" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1191.98" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,900,000 samples, 0.08%)</title><rect x="1173.4" y="421" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.41" y="431.5" ></text>
</g>
<g >
<title>main (17,647,200,000 samples, 98.78%)</title><rect x="24.4" y="549" width="1165.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.41" y="559.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,200,000 samples, 0.03%)</title><rect x="1128.5" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.53" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1,800,000 samples, 0.01%)</title><rect x="505.4" y="405" width="0.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="508.39" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1128.7" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.73" y="239.5" ></text>
</g>
<g >
<title>brk (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="437" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1143.10" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="1162.4" y="389" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.37" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,700,000 samples, 0.07%)</title><rect x="1173.6" y="357" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.62" y="367.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (2,100,000 samples, 0.01%)</title><rect x="770.8" y="437" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="773.79" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,800,000 samples, 0.02%)</title><rect x="42.7" y="453" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="45.66" y="463.5" ></text>
</g>
<g >
<title>malloc (11,200,000 samples, 0.06%)</title><rect x="1124.7" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1127.68" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,900,000 samples, 0.06%)</title><rect x="1164.2" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.17" y="303.5" ></text>
</g>
<g >
<title>sim::Link::transmit (38,400,000 samples, 0.21%)</title><rect x="355.8" y="485" width="2.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="358.82" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3,100,000 samples, 0.02%)</title><rect x="1100.7" y="437" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1103.73" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (51,300,000 samples, 0.29%)</title><rect x="1129.5" y="405" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.48" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,000,000 samples, 0.01%)</title><rect x="505.7" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="508.74" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (46,500,000 samples, 0.26%)</title><rect x="29.5" y="165" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.48" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (94,300,000 samples, 0.53%)</title><rect x="26.3" y="373" width="6.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.33" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,800,000 samples, 0.02%)</title><rect x="24.7" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.75" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (100,400,000 samples, 0.56%)</title><rect x="35.7" y="453" width="6.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="38.72" y="463.5" ></text>
</g>
<g >
<title>cfree (1,800,000 samples, 0.01%)</title><rect x="827.2" y="421" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="830.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="338.0" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.98" y="335.5" ></text>
</g>
<g >
<title>operator new (51,300,000 samples, 0.29%)</title><rect x="1129.5" y="437" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1132.48" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,700,000 samples, 0.05%)</title><rect x="1141.9" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.88" y="367.5" ></text>
</g>
<g >
<title>cfree (1,600,000 samples, 0.01%)</title><rect x="492.9" y="469" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="495.91" y="479.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (254,100,000 samples, 1.42%)</title><rect x="475.2" y="485" width="16.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="478.18" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,700,000 samples, 0.03%)</title><rect x="1185.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.69" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6,600,000 samples, 0.04%)</title><rect x="1151.0" y="469" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1153.96" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (63,700,000 samples, 0.36%)</title><rect x="1104.7" y="453" width="4.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1107.72" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1,600,000 samples, 0.01%)</title><rect x="33.7" y="469" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="36.65" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,700,000 samples, 0.01%)</title><rect x="1143.1" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1146.14" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,500,000 samples, 0.11%)</title><rect x="774.2" y="437" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="777.20" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3,700,000 samples, 0.02%)</title><rect x="772.4" y="437" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="775.42" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,800,000 samples, 0.03%)</title><rect x="1093.9" y="469" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1096.89" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (1,700,000 samples, 0.01%)</title><rect x="328.6" y="405" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="331.59" y="415.5" ></text>
</g>
<g >
<title>operator delete (71,000,000 samples, 0.40%)</title><rect x="53.5" y="517" width="4.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="56.47" y="527.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (5,100,000 samples, 0.03%)</title><rect x="1101.5" y="453" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1104.51" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,900,000 samples, 0.08%)</title><rect x="1173.4" y="405" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.41" y="415.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,000,000 samples, 0.01%)</title><rect x="34.2" y="485" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="37.15" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,000,000 samples, 0.02%)</title><rect x="335.7" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.67" y="463.5" ></text>
</g>
<g >
<title>YAML::Load (102,300,000 samples, 0.57%)</title><rect x="1181.9" y="501" width="6.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1184.86" y="511.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (4,100,000 samples, 0.02%)</title><rect x="494.3" y="437" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="497.28" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (1,900,000 samples, 0.01%)</title><rect x="1186.4" y="293" width="0.2" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.43" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (15,000,000 samples, 0.08%)</title><rect x="501.7" y="421" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="504.73" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (32,200,000 samples, 0.18%)</title><rect x="1186.4" y="341" width="2.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.35" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,800,000 samples, 0.02%)</title><rect x="1181.5" y="453" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.52" y="463.5" ></text>
</g>
<g >
<title>malloc (1,800,000 samples, 0.01%)</title><rect x="505.4" y="373" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="508.39" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (11,500,000 samples, 0.06%)</title><rect x="352.4" y="469" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="355.40" y="479.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (59,800,000 samples, 0.33%)</title><rect x="327.6" y="453" width="3.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="330.59" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (29,300,000 samples, 0.16%)</title><rect x="345.6" y="437" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="348.56" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_from (7,500,000 samples, 0.04%)</title><rect x="1144.9" y="485" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1147.90" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (5,300,000 samples, 0.03%)</title><rect x="1188.6" y="437" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.63" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,000,000 samples, 0.02%)</title><rect x="1182.9" y="277" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.89" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (112,600,000 samples, 0.63%)</title><rect x="499.3" y="469" width="7.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="502.28" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (1,800,000 samples, 0.01%)</title><rect x="769.9" y="453" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="772.85" y="463.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (2,000,000 samples, 0.01%)</title><rect x="332.2" y="485" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="335.24" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,000,000 samples, 0.01%)</title><rect x="338.4" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.41" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4,000,000 samples, 0.02%)</title><rect x="1124.0" y="469" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1127.04" y="479.5" ></text>
</g>
<g >
<title>malloc (289,000,000 samples, 1.62%)</title><rect x="750.8" y="437" width="19.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="753.76" y="447.5" ></text>
</g>
<g >
<title>operator new (12,100,000 samples, 0.07%)</title><rect x="1185.3" y="293" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.28" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,700,000 samples, 0.03%)</title><rect x="25.9" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.86" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (18,300,000 samples, 0.10%)</title><rect x="11.0" y="485" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.01" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (16,200,000 samples, 0.09%)</title><rect x="1183.6" y="277" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.65" y="287.5" ></text>
</g>
<g >
<title>malloc (3,700,000 samples, 0.02%)</title><rect x="347.1" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="350.07" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,400,000 samples, 0.06%)</title><rect x="1173.7" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.71" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (19,200,000 samples, 0.11%)</title><rect x="1111.9" y="437" width="1.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1114.93" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (35,800,000 samples, 0.20%)</title><rect x="1182.6" y="341" width="2.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.64" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (35,600,000 samples, 0.20%)</title><rect x="823.1" y="469" width="2.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="826.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1162.3" y="453" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.33" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,700,000 samples, 0.02%)</title><rect x="1164.6" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.58" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (7,600,000 samples, 0.04%)</title><rect x="1104.1" y="437" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1107.10" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,900,000 samples, 0.03%)</title><rect x="48.0" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.97" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,200,000 samples, 0.17%)</title><rect x="30.6" y="149" width="2.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="33.56" y="159.5" ></text>
</g>
<g >
<title>sim::Switch::process (5,843,100,000 samples, 32.71%)</title><rect x="540.7" y="485" width="385.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="543.68" y="495.5" >sim::Switch::process</text>
</g>
<g >
<title>malloc (1,900,000 samples, 0.01%)</title><rect x="331.4" y="405" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="334.39" y="415.5" ></text>
</g>
<g >
<title>malloc (3,700,000 samples, 0.02%)</title><rect x="357.2" y="453" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="360.18" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,800,000 samples, 0.01%)</title><rect x="1113.2" y="453" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1116.20" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,900,000 samples, 0.04%)</title><rect x="583.6" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="586.65" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,600,000 samples, 0.12%)</title><rect x="1166.1" y="405" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.08" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,600,000 samples, 0.03%)</title><rect x="1164.5" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.52" y="239.5" ></text>
</g>
<g >
<title>operator new (331,400,000 samples, 1.85%)</title><rect x="748.0" y="453" width="21.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="750.96" y="463.5" >o..</text>
</g>
<g >
<title>[libc.so.6] (203,100,000 samples, 1.14%)</title><rect x="11.0" y="549" width="13.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.99" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (93,900,000 samples, 0.53%)</title><rect x="18.0" y="469" width="6.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="21.04" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (18,600,000 samples, 0.10%)</title><rect x="346.3" y="421" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="349.27" y="431.5" ></text>
</g>
<g >
<title>operator new (28,500,000 samples, 0.16%)</title><rect x="1127.1" y="453" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1130.14" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,800,000 samples, 0.02%)</title><rect x="1142.3" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.27" y="239.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_flows (3,400,000 samples, 0.02%)</title><rect x="1189.1" y="517" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.10" y="527.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,400,000 samples, 0.23%)</title><rect x="825.8" y="453" width="2.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="828.78" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (111,500,000 samples, 0.62%)</title><rect x="1167.5" y="485" width="7.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.55" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (24,800,000 samples, 0.14%)</title><rect x="776.6" y="453" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="779.57" y="463.5" ></text>
</g>
<g >
<title>operator new (496,000,000 samples, 2.78%)</title><rect x="1054.5" y="469" width="32.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1057.53" y="479.5" >op..</text>
</g>
<g >
<title>malloc (2,800,000 samples, 0.02%)</title><rect x="1103.5" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1106.51" y="447.5" ></text>
</g>
<g >
<title>operator new (2,800,000 samples, 0.02%)</title><rect x="1143.9" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.88" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,400,000 samples, 0.52%)</title><rect x="26.4" y="309" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.39" y="319.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (17,203,300,000 samples, 96.29%)</title><rect x="45.6" y="533" width="1136.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="48.59" y="543.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (2,400,000 samples, 0.01%)</title><rect x="327.4" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="330.38" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (3,000,000 samples, 0.02%)</title><rect x="771.3" y="453" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="774.28" y="463.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (5,500,000 samples, 0.03%)</title><rect x="1188.6" y="517" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.62" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,600,000 samples, 0.01%)</title><rect x="1130.9" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.89" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (29,300,000 samples, 0.16%)</title><rect x="746.0" y="453" width="2.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="749.02" y="463.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (22,200,000 samples, 0.12%)</title><rect x="1186.9" y="293" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.90" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (7,400,000 samples, 0.04%)</title><rect x="497.7" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="500.69" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (7,800,000 samples, 0.04%)</title><rect x="1182.6" y="325" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1185.64" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,900,000 samples, 0.08%)</title><rect x="25.3" y="213" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.32" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,500,000 samples, 0.01%)</title><rect x="337.9" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.94" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,400,000 samples, 0.01%)</title><rect x="33.9" y="469" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="36.88" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (5,600,000 samples, 0.03%)</title><rect x="496.3" y="421" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="499.29" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="437" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (19,600,000 samples, 0.11%)</title><rect x="24.9" y="453" width="1.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="27.94" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,300,000 samples, 0.02%)</title><rect x="356.9" y="469" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.91" y="479.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (2,000,000 samples, 0.01%)</title><rect x="1187.1" y="261" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.10" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (42,300,000 samples, 0.24%)</title><rect x="773.0" y="453" width="2.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="776.01" y="463.5" ></text>
</g>
<g >
<title>malloc (49,500,000 samples, 0.28%)</title><rect x="620.7" y="469" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="623.70" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4,800,000 samples, 0.03%)</title><rect x="1103.8" y="437" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1106.78" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,200,000 samples, 0.01%)</title><rect x="770.0" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="773.04" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,700,000 samples, 0.06%)</title><rect x="496.0" y="437" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="498.96" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (709,100,000 samples, 3.97%)</title><rect x="698.3" y="437" width="46.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="701.33" y="447.5" >[lib..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (2,100,000 samples, 0.01%)</title><rect x="1183.3" y="277" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1186.34" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (3,100,000 samples, 0.02%)</title><rect x="506.7" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="509.71" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="373" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="383.5" ></text>
</g>
<g >
<title>cfree (868,400,000 samples, 4.86%)</title><rect x="687.8" y="453" width="57.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="690.80" y="463.5" >cfree</text>
</g>
<g >
<title>cfree (2,800,000 samples, 0.02%)</title><rect x="770.0" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="773.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="1130.8" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.84" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,800,000 samples, 0.02%)</title><rect x="498.5" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="501.45" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="405" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>operator new (82,700,000 samples, 0.46%)</title><rect x="411.1" y="485" width="5.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="414.07" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,900,000 samples, 0.06%)</title><rect x="1173.7" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.67" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,300,000 samples, 0.03%)</title><rect x="405.0" y="485" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="408.02" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,200,000 samples, 0.02%)</title><rect x="777.8" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="780.85" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="421" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (14,700,000 samples, 0.08%)</title><rect x="328.7" y="421" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="331.75" y="431.5" ></text>
</g>
<g >
<title>cfree (78,000,000 samples, 0.44%)</title><rect x="48.3" y="517" width="5.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="51.30" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,000,000 samples, 0.02%)</title><rect x="34.6" y="469" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.64" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (41,900,000 samples, 0.23%)</title><rect x="1146.6" y="469" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1149.59" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,600,000 samples, 0.03%)</title><rect x="1142.2" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.15" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (25,200,000 samples, 0.14%)</title><rect x="43.0" y="485" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="46.04" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (1,600,000 samples, 0.01%)</title><rect x="1146.2" y="485" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1149.20" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (3,400,000 samples, 0.02%)</title><rect x="503.2" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="506.17" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="335.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (1,800,000 samples, 0.01%)</title><rect x="776.4" y="453" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="779.45" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (12,400,000 samples, 0.07%)</title><rect x="1173.6" y="373" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.57" y="383.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (14,000,000 samples, 0.08%)</title><rect x="332.4" y="485" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="335.38" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,800,000 samples, 0.05%)</title><rect x="1141.9" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.94" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (38,400,000 samples, 0.21%)</title><rect x="501.2" y="437" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="504.16" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,000,000 samples, 0.06%)</title><rect x="11.5" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.53" y="431.5" ></text>
</g>
<g >
<title>fstatat64 (4,500,000 samples, 0.03%)</title><rect x="44.8" y="453" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="47.81" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (2,800,000 samples, 0.02%)</title><rect x="357.8" y="469" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="360.81" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,800,000 samples, 0.53%)</title><rect x="26.4" y="341" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.36" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (23,000,000 samples, 0.13%)</title><rect x="40.8" y="373" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.79" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (3,200,000 samples, 0.02%)</title><rect x="1102.3" y="453" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1105.27" y="463.5" ></text>
</g>
<g >
<title>cfree (7,500,000 samples, 0.04%)</title><rect x="1094.2" y="469" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1097.21" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,000,000 samples, 0.02%)</title><rect x="337.8" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.84" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (84,400,000 samples, 0.47%)</title><rect x="27.0" y="229" width="5.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.98" y="239.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,900,000 samples, 0.06%)</title><rect x="827.5" y="421" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="830.52" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (8,100,000 samples, 0.05%)</title><rect x="342.4" y="437" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="345.36" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (24,100,000 samples, 0.13%)</title><rect x="1149.4" y="469" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1152.37" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (15,300,000 samples, 0.09%)</title><rect x="1107.5" y="421" width="1.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1110.46" y="431.5" ></text>
</g>
<g >
<title>operator new (3,000,000 samples, 0.02%)</title><rect x="1103.5" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1106.50" y="463.5" ></text>
</g>
<g >
<title>std::locale::locale (1,700,000 samples, 0.01%)</title><rect x="1109.6" y="453" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1112.56" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="1130.9" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.94" y="255.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (1,700,000 samples, 0.01%)</title><rect x="1182.0" y="357" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1185.04" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (3,400,000 samples, 0.02%)</title><rect x="503.5" y="405" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="506.46" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,700,000 samples, 0.02%)</title><rect x="1112.8" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1115.75" y="431.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,300,000 samples, 0.06%)</title><rect x="1114.9" y="453" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1117.88" y="463.5" ></text>
</g>
<g >
<title>operator delete (2,000,000 samples, 0.01%)</title><rect x="1140.3" y="485" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1143.28" y="495.5" ></text>
</g>
<g >
<title>__libc_start_main (17,850,300,000 samples, 99.92%)</title><rect x="11.0" y="581" width="1179.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.99" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (23,700,000 samples, 0.13%)</title><rect x="24.7" y="485" width="1.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="27.67" y="495.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (23,500,000 samples, 0.13%)</title><rect x="497.2" y="453" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="500.25" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,000,000 samples, 0.01%)</title><rect x="45.0" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.98" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (5,500,000 samples, 0.03%)</title><rect x="502.2" y="405" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="505.24" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (23,300,000 samples, 0.13%)</title><rect x="1152.6" y="485" width="1.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1155.60" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1,900,000 samples, 0.01%)</title><rect x="501.5" y="405" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="504.45" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (9,600,000 samples, 0.05%)</title><rect x="1189.3" y="517" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.32" y="527.5" ></text>
</g>
<g >
<title>sim::Process::operator (104,600,000 samples, 0.59%)</title><rect x="120.5" y="517" width="6.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="123.53" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,200,000 samples, 0.11%)</title><rect x="25.0" y="341" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.97" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,600,000 samples, 0.01%)</title><rect x="1186.0" y="37" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.96" y="47.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,900,000 samples, 0.51%)</title><rect x="1182.6" y="373" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1185.60" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="338.0" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.97" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (4,200,000 samples, 0.02%)</title><rect x="120.2" y="517" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="123.18" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (1,800,000 samples, 0.01%)</title><rect x="1184.7" y="309" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1187.72" y="319.5" ></text>
</g>
<g >
<title>operator new (1,700,000 samples, 0.01%)</title><rect x="507.1" y="453" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="510.13" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,400,000 samples, 0.04%)</title><rect x="1174.4" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.39" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (21,100,000 samples, 0.12%)</title><rect x="1179.8" y="501" width="1.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1182.83" y="511.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,700,000 samples, 0.01%)</title><rect x="329.6" y="405" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="332.61" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,400,000 samples, 0.04%)</title><rect x="32.1" y="117" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.07" y="127.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,200,000 samples, 0.06%)</title><rect x="1100.1" y="421" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1103.05" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (86,000,000 samples, 0.48%)</title><rect x="12.4" y="421" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.35" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="1095.5" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.52" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,900,000 samples, 0.01%)</title><rect x="329.2" y="405" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="332.21" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (86,000,000 samples, 0.48%)</title><rect x="12.4" y="437" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.35" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (9,500,000 samples, 0.05%)</title><rect x="1139.6" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.62" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,500,000 samples, 0.04%)</title><rect x="338.2" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="341.16" y="415.5" ></text>
</g>
<g >
<title>malloc (2,500,000 samples, 0.01%)</title><rect x="1108.2" y="373" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1111.15" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (5,500,000 samples, 0.03%)</title><rect x="1188.6" y="485" width="0.4" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.62" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (19,200,000 samples, 0.11%)</title><rect x="342.3" y="453" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="345.27" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,700,000 samples, 0.03%)</title><rect x="1128.5" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.50" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (11,500,000 samples, 0.06%)</title><rect x="25.5" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.48" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="453" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (4,600,000 samples, 0.03%)</title><rect x="330.2" y="405" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="333.18" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (14,200,000 samples, 0.08%)</title><rect x="774.6" y="421" width="1.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="777.61" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (77,000,000 samples, 0.43%)</title><rect x="327.2" y="469" width="5.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="330.15" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (170,800,000 samples, 0.96%)</title><rect x="341.1" y="469" width="11.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="344.11" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (3,400,000 samples, 0.02%)</title><rect x="328.0" y="437" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="331.01" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.02%)</title><rect x="1128.7" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.70" y="271.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (132,500,000 samples, 0.74%)</title><rect x="34.3" y="485" width="8.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="37.29" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (7,700,000 samples, 0.04%)</title><rect x="1108.9" y="453" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1111.92" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,700,000 samples, 0.02%)</title><rect x="26.0" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.99" y="159.5" ></text>
</g>
<g >
<title>vsnprintf (96,400,000 samples, 0.54%)</title><rect x="36.0" y="437" width="6.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="38.98" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4,500,000 samples, 0.03%)</title><rect x="506.2" y="437" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="509.18" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (15,100,000 samples, 0.08%)</title><rect x="25.2" y="229" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.24" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,500,000 samples, 0.02%)</title><rect x="32.3" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.32" y="111.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (66,300,000 samples, 0.37%)</title><rect x="343.5" y="453" width="4.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="346.54" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="338.4" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.39" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,900,000 samples, 0.05%)</title><rect x="1173.8" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.80" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,478,700,000 samples, 8.28%)</title><rect x="828.7" y="469" width="97.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="831.70" y="479.5" >std::_Rb_tr..</text>
</g>
<g >
<title>YAML::Scanner::empty (6,300,000 samples, 0.04%)</title><rect x="1182.2" y="373" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.17" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,800,000 samples, 0.01%)</title><rect x="1128.9" y="405" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1131.88" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="303.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (19,600,000 samples, 0.11%)</title><rect x="24.9" y="469" width="1.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="27.94" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (318,200,000 samples, 1.78%)</title><rect x="333.4" y="501" width="21.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="336.38" y="511.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (1,900,000 samples, 0.01%)</title><rect x="1094.7" y="469" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1097.70" y="479.5" ></text>
</g>
<g >
<title>malloc (5,900,000 samples, 0.03%)</title><rect x="341.9" y="437" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="344.87" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,400,000 samples, 0.03%)</title><rect x="1185.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.71" y="191.5" ></text>
</g>
<g >
<title>cfree (2,800,000 samples, 0.02%)</title><rect x="358.2" y="453" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="361.17" y="463.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (2,500,000 samples, 0.01%)</title><rect x="1109.7" y="453" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1112.72" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,100,000 samples, 0.02%)</title><rect x="333.0" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="336.03" y="447.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (2,100,000 samples, 0.01%)</title><rect x="353.9" y="469" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="356.91" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (3,900,000 samples, 0.02%)</title><rect x="770.7" y="453" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="773.67" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,700,000 samples, 0.06%)</title><rect x="503.0" y="421" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="505.98" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="1128.7" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.73" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3,500,000 samples, 0.02%)</title><rect x="340.8" y="453" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="343.83" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,100,000 samples, 0.02%)</title><rect x="351.5" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.48" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,100,000 samples, 0.34%)</title><rect x="337.1" y="469" width="4.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="340.10" y="479.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,000,000 samples, 0.05%)</title><rect x="1115.8" y="501" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1118.79" y="511.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,900,000 samples, 0.01%)</title><rect x="651.2" y="469" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="654.15" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,000,000 samples, 0.04%)</title><rect x="1185.6" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.60" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,500,000 samples, 0.01%)</title><rect x="44.4" y="453" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="47.44" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (6,400,000 samples, 0.04%)</title><rect x="347.5" y="437" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="350.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,800,000 samples, 0.04%)</title><rect x="1142.0" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.01" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="1140.1" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.13" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,500,000 samples, 0.03%)</title><rect x="1186.6" y="293" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.58" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (79,200,000 samples, 0.44%)</title><rect x="27.3" y="213" width="5.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.32" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (34,800,000 samples, 0.19%)</title><rect x="1140.8" y="453" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.79" y="463.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (15,300,000 samples, 0.09%)</title><rect x="1116.5" y="501" width="1.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1119.52" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,100,000 samples, 0.01%)</title><rect x="1130.9" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.93" y="271.5" ></text>
</g>
<g >
<title>operator new (43,800,000 samples, 0.25%)</title><rect x="1172.0" y="469" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1175.02" y="479.5" ></text>
</g>
<g >
<title>malloc (2,100,000 samples, 0.01%)</title><rect x="1181.1" y="469" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.08" y="479.5" ></text>
</g>
<g >
<title>cfree (5,000,000 samples, 0.03%)</title><rect x="1153.8" y="469" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1156.75" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (1,900,000 samples, 0.01%)</title><rect x="351.8" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="354.76" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (31,300,000 samples, 0.18%)</title><rect x="1162.8" y="437" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.78" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (17,700,000 samples, 0.10%)</title><rect x="351.0" y="437" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="354.00" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (17,100,000 samples, 0.10%)</title><rect x="1185.1" y="341" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.09" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (102,100,000 samples, 0.57%)</title><rect x="1181.9" y="437" width="6.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.87" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,300,000 samples, 0.04%)</title><rect x="1142.5" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.52" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (14,900,000 samples, 0.08%)</title><rect x="1173.4" y="389" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.41" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (23,300,000 samples, 0.13%)</title><rect x="1127.5" y="421" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.48" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,700,000 samples, 0.06%)</title><rect x="1185.4" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.38" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1130.9" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.92" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2,800,000 samples, 0.02%)</title><rect x="496.8" y="453" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="499.83" y="463.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (335,800,000 samples, 1.88%)</title><rect x="1093.4" y="485" width="22.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1096.38" y="495.5" >s..</text>
</g>
<g >
<title>writev (1,900,000 samples, 0.01%)</title><rect x="44.5" y="437" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="47.48" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (3,400,000 samples, 0.02%)</title><rect x="499.0" y="469" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="502.05" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,700,000 samples, 0.02%)</title><rect x="337.9" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.93" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (8,300,000 samples, 0.05%)</title><rect x="777.7" y="437" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="780.66" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,100,000 samples, 0.02%)</title><rect x="44.8" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.84" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,400,000 samples, 0.04%)</title><rect x="492.4" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="495.42" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,400,000 samples, 0.01%)</title><rect x="1100.9" y="453" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1103.94" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,700,000 samples, 0.01%)</title><rect x="502.6" y="405" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="505.61" y="415.5" ></text>
</g>
<g >
<title>operator new (2,600,000 samples, 0.01%)</title><rect x="1108.1" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1111.14" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (93,800,000 samples, 0.53%)</title><rect x="36.1" y="421" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.15" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="405" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="415.5" ></text>
</g>
<g >
<title>operator new (3,800,000 samples, 0.02%)</title><rect x="775.2" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="778.19" y="399.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (18,300,000 samples, 0.10%)</title><rect x="827.0" y="437" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="830.03" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (2,500,000 samples, 0.01%)</title><rect x="1134.8" y="501" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1137.76" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,000,000 samples, 0.04%)</title><rect x="1185.6" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.60" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1162.3" y="437" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.33" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (48,200,000 samples, 0.27%)</title><rect x="825.5" y="469" width="3.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="828.52" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (2,900,000 samples, 0.02%)</title><rect x="494.1" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="497.09" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,600,000 samples, 0.03%)</title><rect x="1132.5" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.48" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (2,000,000 samples, 0.01%)</title><rect x="1095.3" y="469" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1098.27" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,300,000 samples, 0.04%)</title><rect x="1142.0" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.04" y="303.5" ></text>
</g>
<g >
<title>sim::Generate::operator (120,700,000 samples, 0.68%)</title><rect x="325.3" y="501" width="8.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="328.33" y="511.5" ></text>
</g>
<g >
<title>operator new (3,800,000 samples, 0.02%)</title><rect x="1181.5" y="485" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.52" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (135,800,000 samples, 0.76%)</title><rect x="521.7" y="485" width="9.0" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="524.70" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,100,000 samples, 0.01%)</title><rect x="350.9" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="353.86" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="338.3" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.34" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (102,100,000 samples, 0.57%)</title><rect x="1181.9" y="421" width="6.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.87" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (4,100,000 samples, 0.02%)</title><rect x="329.3" y="405" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="332.34" y="415.5" ></text>
</g>
<g >
<title>malloc (7,700,000 samples, 0.04%)</title><rect x="338.1" y="421" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="341.15" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (38,000,000 samples, 0.21%)</title><rect x="1154.1" y="485" width="2.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1157.14" y="495.5" ></text>
</g>
<g >
<title>operator new (6,900,000 samples, 0.04%)</title><rect x="332.8" y="469" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="335.84" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (33,300,000 samples, 0.19%)</title><rect x="494.6" y="453" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="497.63" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,400,000 samples, 0.03%)</title><rect x="1164.5" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.47" y="255.5" ></text>
</g>
<g >
<title>operator new (3,700,000 samples, 0.02%)</title><rect x="335.9" y="469" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="338.92" y="479.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (4,600,000 samples, 0.03%)</title><rect x="355.5" y="485" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="358.51" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="485" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="373" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (49,000,000 samples, 0.27%)</title><rect x="348.9" y="453" width="3.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="351.93" y="463.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (201,400,000 samples, 1.13%)</title><rect x="11.0" y="517" width="13.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.00" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (7,200,000 samples, 0.04%)</title><rect x="777.0" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="780.03" y="447.5" ></text>
</g>
<g >
<title>operator new (6,200,000 samples, 0.03%)</title><rect x="341.8" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="344.85" y="463.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (16,100,000 samples, 0.09%)</title><rect x="1185.1" y="325" width="1.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.11" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,100,000 samples, 0.28%)</title><rect x="1109.9" y="453" width="3.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1112.89" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (27,000,000 samples, 0.15%)</title><rect x="1174.9" y="501" width="1.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1177.94" y="511.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (2,600,000 samples, 0.01%)</title><rect x="1143.1" y="485" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1146.08" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (677,000,000 samples, 3.79%)</title><rect x="778.4" y="469" width="44.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="781.42" y="479.5" >sim:..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,300,000 samples, 0.01%)</title><rect x="778.2" y="453" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="781.21" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,400,000 samples, 0.01%)</title><rect x="1130.9" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.91" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="421" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,600,000 samples, 0.01%)</title><rect x="1127.0" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.98" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,700,000 samples, 0.04%)</title><rect x="10.4" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,500,000 samples, 0.11%)</title><rect x="24.9" y="405" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.95" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,600,000 samples, 0.09%)</title><rect x="31.5" y="133" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="34.46" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (2,500,000 samples, 0.01%)</title><rect x="329.4" y="389" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="332.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,900,000 samples, 0.06%)</title><rect x="25.6" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.58" y="191.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (102,100,000 samples, 0.57%)</title><rect x="1181.9" y="453" width="6.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.87" y="463.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (4,800,000 samples, 0.03%)</title><rect x="1149.0" y="453" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1152.04" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (2,200,000 samples, 0.01%)</title><rect x="43.9" y="469" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="46.94" y="479.5" ></text>
</g>
<g >
<title>nons (17,865,300,000 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="1128.7" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.65" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,100,000 samples, 0.04%)</title><rect x="1176.3" y="469" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.26" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (315,800,000 samples, 1.77%)</title><rect x="24.4" y="517" width="20.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="27.44" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (92,500,000 samples, 0.52%)</title><rect x="26.4" y="277" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.45" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (11,100,000 samples, 0.06%)</title><rect x="1121.3" y="485" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1124.29" y="495.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (12,300,000 samples, 0.07%)</title><rect x="336.3" y="469" width="0.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="339.29" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (2,000,000 samples, 0.01%)</title><rect x="493.4" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="496.42" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (102,200,000 samples, 0.57%)</title><rect x="1181.9" y="485" width="6.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1184.86" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,200,000 samples, 0.02%)</title><rect x="1148.0" y="405" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.99" y="415.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (59,200,000 samples, 0.33%)</title><rect x="500.4" y="453" width="3.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="503.39" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (19,300,000 samples, 0.11%)</title><rect x="25.0" y="373" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.96" y="383.5" ></text>
</g>
<g >
<title>malloc (456,000,000 samples, 2.55%)</title><rect x="1057.2" y="453" width="30.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1060.17" y="463.5" >ma..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,800,000 samples, 0.06%)</title><rect x="1164.1" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.11" y="319.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (12,600,000 samples, 0.07%)</title><rect x="504.7" y="437" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="507.67" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (2,400,000 samples, 0.01%)</title><rect x="1188.8" y="405" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.80" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_to (4,100,000 samples, 0.02%)</title><rect x="1134.2" y="469" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1137.24" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,800,000 samples, 0.02%)</title><rect x="24.7" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.75" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,000,000 samples, 0.02%)</title><rect x="337.8" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.84" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="44.9" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.91" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (5,000,000 samples, 0.03%)</title><rect x="1108.0" y="405" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1110.99" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,900,000 samples, 0.02%)</title><rect x="1162.3" y="469" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.29" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,400,000 samples, 0.05%)</title><rect x="1124.9" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.86" y="431.5" ></text>
</g>
<g >
<title>sim::Generate::operator (1,600,000 samples, 0.01%)</title><rect x="119.8" y="517" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="122.81" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,400,000 samples, 0.05%)</title><rect x="1128.3" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.32" y="415.5" ></text>
</g>
<g >
<title>malloc (11,900,000 samples, 0.07%)</title><rect x="1185.3" y="277" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.30" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (38,100,000 samples, 0.21%)</title><rect x="1172.4" y="437" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.40" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (11,600,000 samples, 0.06%)</title><rect x="23.4" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.38" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="405" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="415.5" ></text>
</g>
<g >
<title>malloc (51,300,000 samples, 0.29%)</title><rect x="1129.5" y="421" width="3.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1132.48" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (854,200,000 samples, 4.78%)</title><rect x="418.8" y="485" width="56.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="421.76" y="495.5" >sim::..</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (9,700,000 samples, 0.05%)</title><rect x="1101.8" y="469" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1104.84" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,800,000 samples, 0.02%)</title><rect x="1181.5" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.52" y="447.5" ></text>
</g>
<g >
<title>malloc (34,500,000 samples, 0.19%)</title><rect x="1162.6" y="453" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1165.57" y="463.5" ></text>
</g>
<g >
<title>write (19,500,000 samples, 0.11%)</title><rect x="24.9" y="421" width="1.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="27.95" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (9,400,000 samples, 0.05%)</title><rect x="43.3" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="46.29" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="338.5" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="341.54" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (14,780,800,000 samples, 82.73%)</title><rect x="141.3" y="517" width="976.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="144.26" y="527.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (24,000,000 samples, 0.13%)</title><rect x="1186.9" y="309" width="1.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.88" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,500,000 samples, 0.01%)</title><rect x="24.8" y="373" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.77" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,800,000 samples, 0.02%)</title><rect x="1103.3" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1106.30" y="447.5" ></text>
</g>
<g >
<title>malloc (2,300,000 samples, 0.01%)</title><rect x="1143.9" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1146.91" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (385,200,000 samples, 2.16%)</title><rect x="595.3" y="453" width="25.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="598.26" y="463.5" >[..</text>
</g>
<g >
<title>cfree (86,100,000 samples, 0.48%)</title><rect x="12.3" y="453" width="5.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.34" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (6,900,000 samples, 0.04%)</title><rect x="1108.5" y="437" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1111.47" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,700,000 samples, 0.02%)</title><rect x="1153.8" y="453" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.84" y="463.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (60,600,000 samples, 0.34%)</title><rect x="354.5" y="501" width="4.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="357.46" y="511.5" ></text>
</g>
<g >
<title>__close_nocancel (3,100,000 samples, 0.02%)</title><rect x="24.7" y="437" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="27.73" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,300,000 samples, 0.06%)</title><rect x="1141.8" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.84" y="383.5" ></text>
</g>
<g >
<title>all (17,865,300,000 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,000,000 samples, 0.02%)</title><rect x="495.7" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="498.74" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="338.3" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,900,000 samples, 0.03%)</title><rect x="1164.4" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.43" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,100,000 samples, 0.09%)</title><rect x="1141.5" y="405" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.46" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (11,100,000 samples, 0.06%)</title><rect x="1148.3" y="453" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1151.31" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,900,000 samples, 0.38%)</title><rect x="37.8" y="389" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.83" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_from (3,700,000 samples, 0.02%)</title><rect x="1123.5" y="469" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1126.54" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (32,200,000 samples, 0.18%)</title><rect x="1165.3" y="421" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.32" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,800,000 samples, 0.02%)</title><rect x="24.7" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.75" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,800,000 samples, 0.03%)</title><rect x="1128.6" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.56" y="335.5" ></text>
</g>
<g >
<title>operator new (7,700,000 samples, 0.04%)</title><rect x="338.1" y="437" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="341.15" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (9,700,000 samples, 0.05%)</title><rect x="540.0" y="485" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="543.03" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,400,000 samples, 0.01%)</title><rect x="651.0" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="653.99" y="431.5" ></text>
</g>
<g >
<title>malloc@plt (19,700,000 samples, 0.11%)</title><rect x="1053.2" y="469" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1056.23" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="389" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="399.5" ></text>
</g>
<g >
<title>cfree (10,800,000 samples, 0.06%)</title><rect x="11.5" y="437" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.48" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (58,200,000 samples, 0.33%)</title><rect x="1129.0" y="453" width="3.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1132.02" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,400,000 samples, 0.01%)</title><rect x="24.8" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.78" y="367.5" ></text>
</g>
<g >
<title>cfree (7,800,000 samples, 0.04%)</title><rect x="1119.7" y="501" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1122.72" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (93,800,000 samples, 0.53%)</title><rect x="26.4" y="325" width="6.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.36" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="338.3" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.34" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (122,700,000 samples, 0.69%)</title><rect x="1181.9" y="533" width="8.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1184.86" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,800,000 samples, 0.05%)</title><rect x="11.6" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.61" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (94,300,000 samples, 0.53%)</title><rect x="26.3" y="389" width="6.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.33" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (125,400,000 samples, 0.70%)</title><rect x="513.4" y="485" width="8.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="516.42" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (4,000,000 samples, 0.02%)</title><rect x="1144.5" y="469" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1147.52" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (39,300,000 samples, 0.22%)</title><rect x="1164.8" y="469" width="2.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1167.85" y="479.5" ></text>
</g>
<g >
<title>operator new (5,700,000 samples, 0.03%)</title><rect x="1094.9" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1097.89" y="479.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (11,000,000 samples, 0.06%)</title><rect x="770.2" y="469" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="773.21" y="479.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,900,000 samples, 0.03%)</title><rect x="326.7" y="485" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="329.68" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (5,100,000 samples, 0.03%)</title><rect x="330.6" y="405" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="333.55" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (17,700,000 samples, 0.10%)</title><rect x="11.0" y="453" width="1.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="14.03" y="463.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (5,800,000 samples, 0.03%)</title><rect x="357.4" y="469" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="360.42" y="479.5" ></text>
</g>
<g >
<title>operator new (1,700,000 samples, 0.01%)</title><rect x="501.0" y="437" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="503.99" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,400,000 samples, 0.05%)</title><rect x="1128.3" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.32" y="399.5" ></text>
</g>
<g >
<title>malloc (2,000,000 samples, 0.01%)</title><rect x="505.7" y="405" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="508.74" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (15,400,000 samples, 0.09%)</title><rect x="1187.3" y="261" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.34" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (15,400,000 samples, 0.09%)</title><rect x="349.8" y="437" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="352.77" y="447.5" ></text>
</g>
<g >
<title>malloc (5,300,000 samples, 0.03%)</title><rect x="1094.9" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1097.91" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4,900,000 samples, 0.03%)</title><rect x="775.1" y="405" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="778.11" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,000,000 samples, 0.02%)</title><rect x="1139.8" y="453" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.84" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::get (2,200,000 samples, 0.01%)</title><rect x="1187.1" y="277" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.09" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,300,000 samples, 0.03%)</title><rect x="1142.2" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1145.17" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="501" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>cfree (11,400,000 samples, 0.06%)</title><rect x="1155.8" y="469" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.80" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,400,000 samples, 0.02%)</title><rect x="1130.8" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.84" y="399.5" ></text>
</g>
<g >
<title>sim::Host::process (235,400,000 samples, 1.32%)</title><rect x="492.0" y="485" width="15.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="494.97" y="495.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (18,200,000 samples, 0.10%)</title><rect x="32.8" y="485" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="35.84" y="495.5" ></text>
</g>
<g >
<title>Logger::info (32,900,000 samples, 0.18%)</title><rect x="581.5" y="469" width="2.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="584.46" y="479.5" ></text>
</g>
<g >
<title>utils::create_all_directories (5,400,000 samples, 0.03%)</title><rect x="44.8" y="485" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="47.76" y="495.5" ></text>
</g>
<g >
<title>Logger::get_instance (33,100,000 samples, 0.19%)</title><rect x="400.6" y="485" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="403.65" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::status (4,600,000 samples, 0.03%)</title><rect x="44.8" y="469" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="47.81" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="469" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (6,100,000 samples, 0.03%)</title><rect x="775.8" y="453" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="778.81" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,000,000 samples, 0.04%)</title><rect x="1156.1" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.09" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,500,000 samples, 0.03%)</title><rect x="1188.6" y="469" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.62" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2,200,000 samples, 0.01%)</title><rect x="1179.7" y="501" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1182.68" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="1130.9" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1133.91" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (18,100,000 samples, 0.10%)</title><rect x="25.0" y="293" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.04" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (3,200,000 samples, 0.02%)</title><rect x="1102.5" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1105.48" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (96,600,000 samples, 0.54%)</title><rect x="26.2" y="485" width="6.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="29.24" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,300,000 samples, 0.01%)</title><rect x="12.0" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.04" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="1162.4" y="405" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.36" y="415.5" ></text>
</g>
<g >
<title>sim::Process::~Process (85,800,000 samples, 0.48%)</title><rect x="1087.3" y="501" width="5.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1090.29" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,600,000 samples, 0.03%)</title><rect x="1128.6" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.57" y="319.5" ></text>
</g>
<g >
<title>std::locale::~locale (1,900,000 samples, 0.01%)</title><rect x="343.2" y="421" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="346.21" y="431.5" ></text>
</g>
<g >
<title>operator new (35,400,000 samples, 0.20%)</title><rect x="1162.5" y="469" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1165.51" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,700,000 samples, 0.01%)</title><rect x="1140.1" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.13" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,300,000 samples, 0.01%)</title><rect x="10.8" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.75" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,800,000 samples, 0.02%)</title><rect x="1185.8" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.81" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,000,000 samples, 0.79%)</title><rect x="1158.2" y="485" width="9.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1161.18" y="495.5" ></text>
</g>
<g >
<title>cfree (2,200,000 samples, 0.01%)</title><rect x="493.8" y="453" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="496.80" y="463.5" ></text>
</g>
<g >
<title>sim::Event::Event (33,100,000 samples, 0.19%)</title><rect x="416.6" y="485" width="2.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="419.58" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,400,000 samples, 0.02%)</title><rect x="1120.0" y="485" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1123.01" y="495.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (6,600,000 samples, 0.04%)</title><rect x="342.9" y="437" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="345.90" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,800,000 samples, 0.01%)</title><rect x="1181.7" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.65" y="431.5" ></text>
</g>
<g >
<title>operator delete (64,800,000 samples, 0.36%)</title><rect x="624.3" y="469" width="4.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="627.32" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="338.4" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.41" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,400,000 samples, 0.06%)</title><rect x="1187.7" y="245" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.68" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,000,000 samples, 0.34%)</title><rect x="28.6" y="181" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.59" y="191.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (5,400,000 samples, 0.03%)</title><rect x="1182.8" y="309" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.80" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (18,700,000 samples, 0.10%)</title><rect x="1183.5" y="293" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.48" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (73,500,000 samples, 0.41%)</title><rect x="1146.5" y="485" width="4.9" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1149.55" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (6,600,000 samples, 0.04%)</title><rect x="1187.9" y="229" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.93" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1128.7" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.73" y="223.5" ></text>
</g>
<g >
<title>malloc (1,700,000 samples, 0.01%)</title><rect x="507.1" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="510.13" y="447.5" ></text>
</g>
<g >
<title>malloc@plt (4,800,000 samples, 0.03%)</title><rect x="624.0" y="469" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="626.97" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (58,900,000 samples, 0.33%)</title><rect x="577.6" y="469" width="3.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="580.57" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_to (12,200,000 samples, 0.07%)</title><rect x="1145.4" y="485" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1148.40" y="495.5" ></text>
</g>
<g >
<title>_IO_file_fopen (95,300,000 samples, 0.53%)</title><rect x="26.3" y="437" width="6.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="29.26" y="447.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (4,700,000 samples, 0.03%)</title><rect x="505.9" y="437" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="508.87" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (5,700,000 samples, 0.03%)</title><rect x="346.9" y="405" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="349.94" y="415.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (6,200,000 samples, 0.03%)</title><rect x="827.8" y="405" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="830.83" y="415.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (7,000,000 samples, 0.04%)</title><rect x="353.2" y="469" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="356.16" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,600,000 samples, 0.09%)</title><rect x="25.1" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.14" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,400,000 samples, 0.02%)</title><rect x="1094.5" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1097.48" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (53,800,000 samples, 0.30%)</title><rect x="1185.0" y="357" width="3.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.04" y="367.5" ></text>
</g>
<g >
<title>malloc (278,000,000 samples, 1.56%)</title><rect x="632.8" y="453" width="18.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="635.79" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_from (6,400,000 samples, 0.04%)</title><rect x="1133.8" y="469" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1136.82" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (16,200,000 samples, 0.09%)</title><rect x="1110.6" y="437" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1113.65" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (1,900,000 samples, 0.01%)</title><rect x="1182.0" y="373" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1185.03" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,400,000 samples, 0.05%)</title><rect x="1128.3" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1131.32" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,000,000 samples, 0.02%)</title><rect x="1174.2" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.19" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="517" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>operator delete (3,500,000 samples, 0.02%)</title><rect x="1120.2" y="501" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1123.23" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="44.5" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (7,700,000 samples, 0.04%)</title><rect x="331.6" y="453" width="0.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="334.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,800,000 samples, 0.01%)</title><rect x="44.5" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="47.48" y="271.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (5,600,000 samples, 0.03%)</title><rect x="355.0" y="485" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="358.04" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (2,100,000 samples, 0.01%)</title><rect x="1182.2" y="341" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1185.18" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,900,000 samples, 0.02%)</title><rect x="1188.8" y="421" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.78" y="431.5" ></text>
</g>
<g >
<title>Logger::warn (32,900,000 samples, 0.18%)</title><rect x="402.9" y="485" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="405.85" y="495.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (14,400,000 samples, 0.08%)</title><rect x="1185.1" y="309" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.13" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (1,800,000 samples, 0.01%)</title><rect x="1182.4" y="309" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1185.36" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="421" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (6,900,000 samples, 0.04%)</title><rect x="1100.3" y="405" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1103.27" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9,500,000 samples, 0.05%)</title><rect x="1141.9" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1144.90" y="351.5" ></text>
</g>
<g >
<title>operator new (1,700,000 samples, 0.01%)</title><rect x="1123.2" y="469" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1126.18" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,800,000 samples, 0.02%)</title><rect x="1174.1" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.14" y="239.5" ></text>
</g>
<g >
<title>cfree (5,600,000 samples, 0.03%)</title><rect x="335.5" y="469" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="338.49" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7,300,000 samples, 0.04%)</title><rect x="1173.9" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.91" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,200,000 samples, 0.01%)</title><rect x="1181.2" y="501" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1184.22" y="511.5" ></text>
</g>
<g >
<title>cfree (10,600,000 samples, 0.06%)</title><rect x="1176.0" y="485" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1179.02" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,300,000 samples, 0.02%)</title><rect x="1186.6" y="277" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.59" y="287.5" ></text>
</g>
<g >
<title>malloc (3,200,000 samples, 0.02%)</title><rect x="336.0" y="453" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="338.96" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16,000,000 samples, 0.09%)</title><rect x="25.2" y="245" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.18" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,200,000 samples, 0.01%)</title><rect x="1140.1" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.10" y="335.5" ></text>
</g>
<g >
<title>malloc (3,800,000 samples, 0.02%)</title><rect x="775.2" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="778.19" y="383.5" ></text>
</g>
<g >
<title>sim::is_valid_link (23,100,000 samples, 0.13%)</title><rect x="1133.0" y="485" width="1.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1135.99" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="1140.1" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.12" y="319.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (1,600,000 samples, 0.01%)</title><rect x="1116.4" y="501" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1119.39" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (76,300,000 samples, 0.43%)</title><rect x="37.3" y="405" width="5.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.30" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (17,900,000 samples, 0.10%)</title><rect x="1163.6" y="405" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1166.64" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,700,000 samples, 0.01%)</title><rect x="335.4" y="469" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.38" y="479.5" ></text>
</g>
<g >
<title>open64 (95,200,000 samples, 0.53%)</title><rect x="26.3" y="405" width="6.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="29.27" y="415.5" ></text>
</g>
<g >
<title>cfree (832,400,000 samples, 4.66%)</title><rect x="264.9" y="501" width="55.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="267.95" y="511.5" >cfree</text>
</g>
<g >
<title>operator new (32,300,000 samples, 0.18%)</title><rect x="1165.3" y="453" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.31" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18,200,000 samples, 0.10%)</title><rect x="1151.4" y="485" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1154.40" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (104,700,000 samples, 0.59%)</title><rect x="771.5" y="469" width="6.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="774.48" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (13,700,000 samples, 0.08%)</title><rect x="10.0" y="549" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,400,000 samples, 0.01%)</title><rect x="32.4" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="35.40" y="95.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (4,500,000 samples, 0.03%)</title><rect x="331.1" y="437" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="334.06" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (16,600,000 samples, 0.09%)</title><rect x="337.6" y="453" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="340.56" y="463.5" ></text>
</g>
<g >
<title>cfree (1,600,000 samples, 0.01%)</title><rect x="500.8" y="437" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="503.84" y="447.5" ></text>
</g>
<g >
<title>_start (17,850,300,000 samples, 99.92%)</title><rect x="11.0" y="597" width="1179.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.99" y="607.5" >_start</text>
</g>
<g >
<title>cfree (16,800,000 samples, 0.09%)</title><rect x="405.4" y="485" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="408.37" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (3,000,000 samples, 0.02%)</title><rect x="352.2" y="453" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="355.17" y="463.5" ></text>
</g>
<g >
<title>malloc (13,000,000 samples, 0.07%)</title><rect x="745.2" y="453" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="748.16" y="463.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (27,800,000 samples, 0.16%)</title><rect x="1113.7" y="469" width="1.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1116.73" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (3,300,000 samples, 0.02%)</title><rect x="1186.7" y="245" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.66" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (26,900,000 samples, 0.15%)</title><rect x="1183.2" y="325" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.16" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (35,800,000 samples, 0.20%)</title><rect x="1182.6" y="357" width="2.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1185.64" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,400,000 samples, 0.01%)</title><rect x="828.4" y="453" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="831.45" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (71,800,000 samples, 0.40%)</title><rect x="27.8" y="197" width="4.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.81" y="207.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (971,700,000 samples, 5.44%)</title><rect x="1117.6" y="517" width="64.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1120.59" y="527.5" >sim::Si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,900,000 samples, 0.01%)</title><rect x="1185.9" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.94" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (2,000,000 samples, 0.01%)</title><rect x="1115.6" y="485" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1118.63" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,200,000 samples, 0.90%)</title><rect x="1102.7" y="469" width="10.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1105.70" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (312,000,000 samples, 1.75%)</title><rect x="24.5" y="501" width="20.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="27.50" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (201,300,000 samples, 1.13%)</title><rect x="11.0" y="501" width="13.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.00" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (8,700,000 samples, 0.05%)</title><rect x="1164.2" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.25" y="287.5" ></text>
</g>
<g >
<title>operator new (341,400,000 samples, 1.91%)</title><rect x="628.6" y="469" width="22.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="631.60" y="479.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,700,000 samples, 0.03%)</title><rect x="1174.1" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.08" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,800,000 samples, 0.01%)</title><rect x="1123.3" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.33" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (4,800,000 samples, 0.03%)</title><rect x="1188.0" y="213" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.04" y="223.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (3,100,000 samples, 0.02%)</title><rect x="32.6" y="485" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="35.62" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (4,500,000 samples, 0.03%)</title><rect x="501.4" y="421" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="504.43" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (18,200,000 samples, 0.10%)</title><rect x="11.0" y="469" width="1.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.02" y="479.5" ></text>
</g>
</g>
</svg>
