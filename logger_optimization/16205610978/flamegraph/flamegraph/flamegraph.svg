<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="1115.2" y="293" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1118.23" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="197" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1108.2" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1111.22" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="325" width="0.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.42" y="335.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.30%)</title><rect x="258.9" y="293" width="3.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="261.85" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="245" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="16.4" y="293" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.43" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.50%)</title><rect x="1138.6" y="309" width="5.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1141.59" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.05%)</title><rect x="368.1" y="277" width="0.6" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="371.09" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (121,212,120 samples, 0.59%)</title><rect x="12.9" y="309" width="7.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="15.92" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="245" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.16" y="255.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="267.6" y="309" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="270.61" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.25%)</title><rect x="416.6" y="309" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="419.57" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,515,151,480 samples, 17.23%)</title><rect x="616.4" y="309" width="203.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="619.36" y="319.5" >sim::Link::get_packet</text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="181" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.16" y="191.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="365.8" y="277" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="368.75" y="287.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.35%)</title><rect x="601.8" y="309" width="4.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="604.75" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="1176.6" y="277" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.56" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (10,101,010 samples, 0.05%)</title><rect x="262.4" y="293" width="0.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="265.36" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="262.4" y="277" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="265.36" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1155.0" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.95" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="111.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.50%)</title><rect x="1184.2" y="373" width="5.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.16" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.05%)</title><rect x="276.4" y="293" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="279.38" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="293" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 0.15%)</title><rect x="259.4" y="277" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="262.44" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="117" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="127.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="260.6" y="261" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="263.60" y="271.5" ></text>
</g>
<g >
<title>nons (20,404,040,200 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >nons</text>
</g>
<g >
<title>_start (20,383,838,180 samples, 99.90%)</title><rect x="11.2" y="437" width="1178.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.17" y="447.5" >_start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1179.5" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.49" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1152.0" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1155.03" y="287.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (30,303,030 samples, 0.15%)</title><rect x="364.6" y="293" width="1.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="367.58" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (111,111,110 samples, 0.54%)</title><rect x="386.2" y="325" width="6.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="389.20" y="335.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.15%)</title><rect x="820.2" y="309" width="1.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="823.23" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1169.6" y="245" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.55" y="255.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="341" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1186.57" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="175.5" ></text>
</g>
<g >
<title>cfree (272,727,270 samples, 1.34%)</title><rect x="781.7" y="293" width="15.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="784.67" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1155.0" y="293" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.95" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="362.2" y="293" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="365.25" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.80" y="239.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="258.9" y="277" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="261.85" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (131,313,130 samples, 0.64%)</title><rect x="372.2" y="325" width="7.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="375.18" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.57" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="277" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="819.6" y="229" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="822.64" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 0.20%)</title><rect x="1185.3" y="117" width="2.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.33" y="127.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1109.4" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1112.39" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="275.2" y="261" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="278.21" y="271.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="341" width="5.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1187.16" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="827.8" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="830.82" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="1159.6" y="325" width="1.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1162.62" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.15%)</title><rect x="1157.9" y="309" width="1.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1160.87" y="319.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="357" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.42" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="365.2" y="261" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="368.17" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="262.9" y="293" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="265.94" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.80" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (60,606,060 samples, 0.30%)</title><rect x="1161.4" y="325" width="3.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1164.38" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.30%)</title><rect x="825.5" y="293" width="3.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="828.49" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="421" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>cfree (232,323,230 samples, 1.14%)</title><rect x="581.9" y="309" width="13.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="584.89" y="319.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="1126.9" y="261" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1129.91" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.35" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="361.7" y="277" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="364.66" y="287.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,121,211,920 samples, 98.61%)</title><rect x="20.5" y="373" width="1163.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="23.51" y="383.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="279.3" y="293" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="282.30" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="11.2" y="325" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.17" y="335.5" ></text>
</g>
<g >
<title>sim::Process::~Process (101,010,100 samples, 0.50%)</title><rect x="1100.6" y="341" width="5.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1103.62" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="261" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="191.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="825.5" y="277" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="828.49" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="63.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (40,404,040 samples, 0.20%)</title><rect x="883.9" y="309" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="886.90" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.8" y="245" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.75" y="255.5" ></text>
</g>
<g >
<title>main (20,222,222,020 samples, 99.11%)</title><rect x="20.5" y="389" width="1169.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="23.51" y="399.5" >main</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1115.8" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1118.81" y="303.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (40,404,040 samples, 0.20%)</title><rect x="1130.4" y="341" width="2.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1133.42" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="883.9" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="886.90" y="303.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.20%)</title><rect x="1149.1" y="325" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1152.11" y="335.5" ></text>
</g>
<g >
<title>std::locale::~locale (20,202,020 samples, 0.10%)</title><rect x="1117.0" y="261" width="1.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1119.98" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="255.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (50,505,050 samples, 0.25%)</title><rect x="253.6" y="341" width="2.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="256.59" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1115.8" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1118.81" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="19.9" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.93" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="133" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.9" y="213" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.85" y="223.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (222,222,220 samples, 1.09%)</title><rect x="744.3" y="277" width="12.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="747.29" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="269.4" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="272.37" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="275.8" y="293" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="278.79" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1170.80" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="205.1" y="341" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="208.11" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="277" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.16" y="287.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.10%)</title><rect x="306.8" y="325" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="309.75" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1184.7" y="117" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.74" y="127.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="101" width="0.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.16" y="111.5" ></text>
</g>
<g >
<title>sim::Generate::operator (10,101,010 samples, 0.05%)</title><rect x="90.0" y="357" width="0.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="93.03" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (40,404,040 samples, 0.20%)</title><rect x="826.7" y="277" width="2.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="829.65" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1137.4" y="309" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1140.43" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="127.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 0.20%)</title><rect x="1185.3" y="133" width="2.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.33" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="271.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1188.2" y="133" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.25" y="143.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1129.2" y="309" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1132.25" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="268.2" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="271.20" y="303.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="293" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1150.94" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.80" y="271.5" ></text>
</g>
<g >
<title>Logger::info (2,161,616,140 samples, 10.59%)</title><rect x="632.1" y="293" width="125.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="635.13" y="303.5" >Logger::info</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.25%)</title><rect x="822.6" y="293" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="825.56" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1178.3" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.32" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1149.7" y="293" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1152.69" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="293" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.16" y="303.5" ></text>
</g>
<g >
<title>sim::Link::arrive (262,626,260 samples, 1.29%)</title><rect x="265.9" y="325" width="15.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="268.86" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="293" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.10%)</title><rect x="1188.2" y="149" width="1.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.25" y="159.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.59%)</title><rect x="822.0" y="309" width="7.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="824.98" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.79%)</title><rect x="11.2" y="373" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.17" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="1125.7" y="277" width="1.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1128.74" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (50,505,050 samples, 0.25%)</title><rect x="1184.7" y="165" width="3.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.74" y="175.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="1108.8" y="309" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1111.80" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="797.4" y="293" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="800.45" y="303.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (272,727,270 samples, 1.34%)</title><rect x="265.3" y="341" width="15.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="268.28" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="272.3" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="275.29" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="229" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="264.1" y="277" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="267.11" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="824.9" y="245" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="827.90" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="117" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.83" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.84%)</title><rect x="585.4" y="293" width="9.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="588.40" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="12.3" y="261" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.34" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (20,202,020 samples, 0.10%)</title><rect x="366.3" y="293" width="1.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="369.34" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="239.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="364.0" y="293" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="367.00" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1179.5" y="325" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1182.49" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="85" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1187.16" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="223.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (90,909,090 samples, 0.45%)</title><rect x="258.3" y="309" width="5.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="261.27" y="319.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="263.5" y="293" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="266.52" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="229" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="239.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="365.8" y="245" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="368.75" y="255.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="1122.2" y="293" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1125.24" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (424,242,420 samples, 2.08%)</title><rect x="757.1" y="293" width="24.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="760.14" y="303.5" >[..</text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="360.5" y="277" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="363.50" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="261" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.16" y="271.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="282.8" y="325" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="285.80" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="357" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 1.24%)</title><rect x="546.8" y="293" width="14.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="549.84" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="437" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.25%)</title><rect x="272.9" y="293" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="275.87" y="303.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1148.5" y="325" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1151.52" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="95.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="279.9" y="309" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="282.88" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,383,838,180 samples, 99.90%)</title><rect x="11.2" y="405" width="1178.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.17" y="415.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 0.25%)</title><rect x="1184.7" y="181" width="3.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.74" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="261" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="275.2" y="245" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="278.21" y="255.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (50,505,050 samples, 0.25%)</title><rect x="1184.7" y="149" width="3.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.74" y="159.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.10%)</title><rect x="278.7" y="309" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="281.71" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.10%)</title><rect x="1181.8" y="341" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.82" y="351.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="260.0" y="261" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="263.02" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="389" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (10,101,010 samples, 0.05%)</title><rect x="12.3" y="277" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.34" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="365.2" y="277" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="368.17" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (90,909,090 samples, 0.45%)</title><rect x="258.3" y="325" width="5.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="261.27" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="79.5" ></text>
</g>
<g >
<title>Logger::warn (2,414,141,390 samples, 11.83%)</title><rect x="421.8" y="309" width="139.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="424.83" y="319.5" >Logger::warn</text>
</g>
<g >
<title>sim::Host::get_link_to_destination (80,808,080 samples, 0.40%)</title><rect x="1110.0" y="309" width="4.6" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1112.97" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="821.4" y="293" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="824.40" y="303.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="267.0" y="309" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="270.03" y="319.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="822.0" y="261" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="824.98" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1155.0" y="277" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.95" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.8" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.75" y="271.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (17,666,666,490 samples, 86.58%)</title><rect x="111.1" y="357" width="1021.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="114.06" y="367.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="309" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.30%)</title><rect x="1140.9" y="293" width="3.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1143.93" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1136.8" y="293" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1139.84" y="303.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.30%)</title><rect x="1140.9" y="261" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.93" y="271.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1147.4" y="325" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1150.36" y="335.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (70,707,070 samples, 0.35%)</title><rect x="281.6" y="341" width="4.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="284.63" y="351.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.05%)</title><rect x="281.0" y="341" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="284.05" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.20%)</title><rect x="881.6" y="309" width="2.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="884.56" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (40,404,040 samples, 0.20%)</title><rect x="17.6" y="293" width="2.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="20.59" y="303.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (40,404,040 samples, 0.20%)</title><rect x="1151.4" y="325" width="2.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1154.45" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.04%)</title><rect x="785.2" y="277" width="12.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="788.18" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1125.7" y="261" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1128.74" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="885.7" y="293" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="888.65" y="303.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.30%)</title><rect x="1140.9" y="277" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.93" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (80,808,080 samples, 0.40%)</title><rect x="1155.0" y="325" width="4.6" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1157.95" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="79.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="360.5" y="261" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="363.50" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="277" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="287.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="1114.6" y="309" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1117.64" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="819.6" y="245" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="822.64" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1177.1" y="261" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.15" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="885.1" y="277" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="888.07" y="287.5" ></text>
</g>
<g >
<title>sim::Generate::operator (151,515,150 samples, 0.74%)</title><rect x="256.5" y="341" width="8.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="259.51" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1153.2" y="293" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1156.20" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="197" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.16" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (161,616,160 samples, 0.79%)</title><rect x="11.2" y="341" width="9.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.17" y="351.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1188.2" y="101" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.25" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.15%)</title><rect x="1180.1" y="341" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.07" y="351.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.20%)</title><rect x="23.4" y="357" width="2.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="26.44" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.15%)</title><rect x="1185.9" y="85" width="1.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.91" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.30%)</title><rect x="1140.9" y="245" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.93" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.10%)</title><rect x="284.6" y="325" width="1.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="287.55" y="335.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="257.7" y="325" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="260.68" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.40%)</title><rect x="1184.7" y="213" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.74" y="223.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="819.6" y="261" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="822.64" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="101" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="111.5" ></text>
</g>
<g >
<title>malloc (111,111,110 samples, 0.54%)</title><rect x="595.3" y="309" width="6.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="598.33" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.05%)</title><rect x="19.9" y="309" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="22.93" y="319.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.8" y="293" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1132.83" y="303.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="341" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.42" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="822.0" y="277" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="824.98" y="287.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="819.6" y="309" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="822.64" y="319.5" ></text>
</g>
<g >
<title>sim::Event::get_time (30,303,030 samples, 0.15%)</title><rect x="28.1" y="357" width="1.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="31.11" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.79%)</title><rect x="11.2" y="389" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.17" y="399.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1136.8" y="309" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1139.84" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="259.4" y="245" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="262.44" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="358.7" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="361.74" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1177.1" y="245" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.15" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="1141.5" y="229" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.51" y="239.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 1.19%)</title><rect x="1086.6" y="309" width="14.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1089.60" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="12.3" y="213" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.34" y="223.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="263.5" y="309" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="266.52" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.57" y="303.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="357" width="5.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.16" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1108.2" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1111.22" y="319.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="11.2" y="277" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.17" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1164.3" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1167.30" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1169.6" y="293" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.55" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="325" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.20%)</title><rect x="25.8" y="357" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="28.77" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="265.3" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="268.28" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="229" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.16" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.05%)</title><rect x="280.5" y="309" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="283.47" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="85" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.83" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="85" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="95.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1128.7" y="309" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1131.66" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="223.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.15%)</title><rect x="1116.4" y="293" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1119.40" y="303.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.05%)</title><rect x="819.1" y="293" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="822.06" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="17.0" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.01" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="143.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 0.20%)</title><rect x="1185.3" y="101" width="2.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.33" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="18.8" y="229" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.76" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="53" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.08" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="824.9" y="261" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="827.90" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="405" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.15%)</title><rect x="630.4" y="293" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="633.38" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="278.7" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="281.71" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="366.3" y="277" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="369.34" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (30,303,030 samples, 0.15%)</title><rect x="1116.4" y="277" width="1.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1119.40" y="287.5" ></text>
</g>
<g >
<title>all (20,404,040,200 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="272.3" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="275.29" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.54%)</title><rect x="1165.5" y="325" width="6.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1168.47" y="335.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (161,616,160 samples, 0.79%)</title><rect x="1135.1" y="341" width="9.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1138.09" y="351.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1184.7" y="133" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.74" y="143.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="259.4" y="261" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="262.44" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="213" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="223.5" ></text>
</g>
<g >
<title>operator new (313,131,310 samples, 1.53%)</title><rect x="801.0" y="293" width="18.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="803.95" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="149" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="828.4" y="261" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="831.41" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="17.6" y="261" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.59" y="271.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1149.7" y="309" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1152.69" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (80,808,080 samples, 0.40%)</title><rect x="1110.0" y="293" width="4.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1112.97" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="819.6" y="213" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="822.64" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="260.6" y="245" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="263.60" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (30,303,030 samples, 0.15%)</title><rect x="1155.0" y="309" width="1.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1157.95" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (111,111,110 samples, 0.54%)</title><rect x="379.8" y="325" width="6.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="382.77" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="12.3" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.34" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="101" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.83" y="111.5" ></text>
</g>
<g >
<title>malloc (292,929,290 samples, 1.44%)</title><rect x="802.1" y="277" width="17.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="805.12" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="111.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.0" y="341" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1185.99" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="127.5" ></text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 0.40%)</title><rect x="91.8" y="357" width="4.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="94.78" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1147.4" y="309" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.36" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (111,111,110 samples, 0.54%)</title><rect x="272.3" y="309" width="6.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="275.29" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.4" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.36" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="37" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.08" y="47.5" ></text>
</g>
<g >
<title>operator new (181,818,180 samples, 0.89%)</title><rect x="605.8" y="309" width="10.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="608.84" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 0.10%)</title><rect x="884.5" y="293" width="1.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="887.49" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1154.4" y="309" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1157.37" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.10%)</title><rect x="1178.9" y="341" width="1.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1181.90" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="165" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="820.8" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="823.81" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.57" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="213" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.16" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="1118.7" y="277" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1121.73" y="287.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="117" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.16" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="181" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="191.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.25%)</title><rect x="1118.1" y="293" width="3.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1121.15" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (202,020,200 samples, 0.99%)</title><rect x="1115.8" y="309" width="11.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1118.81" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1086.0" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1089.02" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (20,202,020 samples, 0.10%)</title><rect x="1188.2" y="197" width="1.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.25" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="63.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (161,616,160 samples, 0.79%)</title><rect x="11.2" y="357" width="9.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.17" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (80,808,080 samples, 0.40%)</title><rect x="1122.8" y="293" width="4.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1125.82" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="175.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.05%)</title><rect x="1188.2" y="117" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1191.25" y="127.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,040,404,030 samples, 5.10%)</title><rect x="29.9" y="357" width="60.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="32.86" y="367.5" >sim::E..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="365.8" y="261" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="368.75" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.05%)</title><rect x="366.9" y="277" width="0.6" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="369.92" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (505,050,500 samples, 2.48%)</title><rect x="315.5" y="325" width="29.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="318.51" y="335.5" >si..</text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="362.8" y="309" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="365.83" y="319.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1156.1" y="293" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1159.12" y="303.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1134.5" y="341" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1137.50" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1152.0" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1155.03" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (10,101,010 samples, 0.05%)</title><rect x="392.6" y="325" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="395.62" y="335.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="268.8" y="309" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="271.78" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="309" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.42" y="319.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.20%)</title><rect x="419.5" y="309" width="2.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="422.50" y="319.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="1119.9" y="277" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1122.90" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (10,101,010 samples, 0.05%)</title><rect x="368.7" y="309" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="371.67" y="319.5" ></text>
</g>
<g >
<title>sim::SendData::operator (414,141,410 samples, 2.03%)</title><rect x="1106.5" y="341" width="23.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1109.47" y="351.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1155.5" y="293" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1158.53" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.10%)</title><rect x="1156.7" y="309" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1159.70" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::mark (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="197" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1190.66" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="359.3" y="309" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="362.33" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.05%)</title><rect x="1184.7" y="101" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.74" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="278.1" y="261" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="281.13" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.20%)</title><rect x="1168.4" y="309" width="2.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1171.39" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1169.6" y="277" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.55" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="277.0" y="293" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="279.96" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="361.1" y="293" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="364.08" y="303.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (414,141,410 samples, 2.03%)</title><rect x="1106.5" y="325" width="23.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1109.47" y="335.5" >s..</text>
</g>
<g >
<title>sim::EventComparator::operator (242,424,240 samples, 1.19%)</title><rect x="344.7" y="325" width="14.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="347.72" y="335.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="1115.2" y="309" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1118.23" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (121,212,120 samples, 0.59%)</title><rect x="1171.9" y="325" width="7.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.89" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1153.8" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.78" y="319.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="277.5" y="277" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="280.54" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (30,303,030 samples, 0.15%)</title><rect x="11.2" y="293" width="1.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="14.17" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="287.5" ></text>
</g>
<g >
<title>sim::Process::~Process (252,525,250 samples, 1.24%)</title><rect x="96.5" y="357" width="14.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="99.46" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1164.3" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1167.30" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1188.2" y="181" width="1.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.25" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 0.25%)</title><rect x="1184.7" y="197" width="3.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.74" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.73%)</title><rect x="561.4" y="309" width="20.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="564.45" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.15%)</title><rect x="1185.9" y="69" width="1.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.91" y="79.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.30%)</title><rect x="311.4" y="325" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="314.43" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.4" y="277" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.36" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.25%)</title><rect x="359.9" y="309" width="2.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="362.91" y="319.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (20,202,020 samples, 0.10%)</title><rect x="261.2" y="277" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="264.19" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1138.0" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1141.01" y="303.5" ></text>
</g>
<g >
<title>malloc (212,121,210 samples, 1.04%)</title><rect x="1088.4" y="293" width="12.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.36" y="303.5" ></text>
</g>
<g >
<title>std::locale::locale (20,202,020 samples, 0.10%)</title><rect x="1121.1" y="293" width="1.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1124.07" y="303.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,090,908,950 samples, 69.06%)</title><rect x="285.7" y="341" width="814.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="288.72" y="351.5" >sim::Process::operator</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.25%)</title><rect x="1122.8" y="277" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1125.82" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="165" width="0.5" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1187.16" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="175.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.10%)</title><rect x="261.2" y="261" width="1.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="264.19" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="207.5" ></text>
</g>
<g >
<title>sim::Link::transmit (20,202,020 samples, 0.10%)</title><rect x="283.4" y="325" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="286.39" y="335.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.20%)</title><rect x="1176.6" y="293" width="2.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.56" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (20,383,838,180 samples, 99.90%)</title><rect x="11.2" y="421" width="1178.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.17" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="278.1" y="277" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="281.13" y="287.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="325" width="5.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1187.16" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.80" y="255.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.05%)</title><rect x="282.2" y="325" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="285.22" y="335.5" ></text>
</g>
<g >
<title>malloc (141,414,140 samples, 0.69%)</title><rect x="608.2" y="293" width="8.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="611.18" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.57" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1177.1" y="229" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.15" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="223.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.20%)</title><rect x="798.6" y="293" width="2.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="801.61" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1138.0" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1141.01" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.3" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.35" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="19.9" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.93" y="287.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (30,303,030 samples, 0.15%)</title><rect x="263.5" y="325" width="1.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="266.52" y="335.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.30%)</title><rect x="307.9" y="325" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="310.92" y="335.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="277" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1150.94" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (50,505,050 samples, 0.25%)</title><rect x="369.3" y="325" width="2.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="372.26" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.7" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.73" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (20,202,020 samples, 0.10%)</title><rect x="1170.7" y="309" width="1.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1173.72" y="319.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (20,202,020 samples, 0.10%)</title><rect x="90.6" y="357" width="1.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="93.61" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.15%)</title><rect x="270.5" y="309" width="1.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="273.53" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1169.6" y="261" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.55" y="271.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="362.2" y="277" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="365.25" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1153.8" y="325" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.78" y="335.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (595,959,590 samples, 2.92%)</title><rect x="1144.4" y="341" width="34.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1147.44" y="351.5" >si..</text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="819.6" y="293" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="822.64" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (393,939,390 samples, 1.93%)</title><rect x="230.8" y="325" width="22.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="233.81" y="335.5" >[..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="824.9" y="277" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="827.90" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="12.3" y="229" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.34" y="239.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="149" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1187.16" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="17.6" y="245" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.59" y="255.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1116.4" y="261" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1119.40" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (909,090,900 samples, 4.46%)</title><rect x="829.0" y="309" width="52.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="831.99" y="319.5" >sim::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="271.1" y="245" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="274.12" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.15%)</title><rect x="11.2" y="309" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.17" y="319.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.20%)</title><rect x="1176.6" y="309" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.56" y="319.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,313,131,210 samples, 50.54%)</title><rect x="393.2" y="325" width="596.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="396.21" y="335.5" >sim::Switch::process</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.45%)</title><rect x="1184.2" y="309" width="5.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1187.16" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (131,313,130 samples, 0.64%)</title><rect x="1136.8" y="325" width="7.6" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1139.84" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.15%)</title><rect x="274.0" y="277" width="1.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="277.04" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="373" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="359.9" y="293" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="362.91" y="303.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="133" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.16" y="143.5" ></text>
</g>
<g >
<title>cfree (808,080,800 samples, 3.96%)</title><rect x="206.9" y="341" width="46.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="209.86" y="351.5" >cfree</text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.20%)</title><rect x="1151.4" y="309" width="2.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1154.45" y="319.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.05%)</title><rect x="1132.8" y="357" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1135.75" y="367.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (878,787,870 samples, 4.31%)</title><rect x="1133.3" y="357" width="50.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1136.34" y="367.5" >sim::..</text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.05%)</title><rect x="276.4" y="277" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="279.38" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (20,202,020 samples, 0.10%)</title><rect x="367.5" y="293" width="1.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="370.50" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1136.3" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.26" y="335.5" ></text>
</g>
<g >
<title>sim::Host::process (181,818,180 samples, 0.89%)</title><rect x="358.7" y="325" width="10.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="361.74" y="335.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.20%)</title><rect x="17.6" y="277" width="2.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.59" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1167.8" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.80" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1164.9" y="325" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1167.88" y="335.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (90,909,090 samples, 0.45%)</title><rect x="363.4" y="309" width="5.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="366.42" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="270.0" y="309" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="272.95" y="319.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.05%)</title><rect x="314.9" y="325" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="317.93" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.10%)</title><rect x="1188.2" y="165" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.25" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1155.0" y="245" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1157.95" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="10.0" y="341" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="284.0" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="286.97" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="19.9" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.93" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (131,313,130 samples, 0.64%)</title><rect x="12.9" y="325" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.92" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1152.6" y="293" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1155.61" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.05%)</title><rect x="1128.1" y="309" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1131.08" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1147.9" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1150.94" y="143.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,919,191,900 samples, 9.41%)</title><rect x="989.6" y="325" width="111.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="992.63" y="335.5" >void sim::Sch..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="822.0" y="293" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="824.98" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1127.5" y="309" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1130.50" y="319.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="819.6" y="277" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="822.64" y="287.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="1107.0" y="309" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1110.05" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.58" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,787,878,770 samples, 8.76%)</title><rect x="886.2" y="309" width="103.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="889.24" y="319.5" >std::_Rb_tre..</text>
</g>
</g>
</svg>
