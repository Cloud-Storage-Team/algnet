<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="630.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="613" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="613" > </text>
<g id="frames">
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="588.5" y="389" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="591.46" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="605.52" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="223.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="879.1" y="405" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="882.13" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="261" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="271.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1179.2" y="405" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.18" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="351.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="18.3" y="437" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="21.29" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.06%)</title><rect x="1174.5" y="437" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1177.49" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="277" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.03" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="213" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (50,505,050 samples, 0.15%)</title><rect x="1187.5" y="325" width="1.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.48" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="127.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="583.1" y="389" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="586.05" y="399.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="32.7" y="405" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="35.72" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="879.1" y="389" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="882.13" y="399.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="469" width="3.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.03" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="47.9" y="325" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.87" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="72.0" y="357" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="271.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (141,414,140 samples, 0.43%)</title><rect x="589.5" y="405" width="5.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="592.54" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="111.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="261" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.48" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (30,303,030 samples, 0.09%)</title><rect x="1184.6" y="453" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1187.59" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.74" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.09%)</title><rect x="1183.5" y="453" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1186.51" y="463.5" ></text>
</g>
<g >
<title>Logger::warn (40,404,040 samples, 0.12%)</title><rect x="378.6" y="437" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="381.57" y="447.5" ></text>
</g>
<g >
<title>main (32,838,383,510 samples, 99.36%)</title><rect x="17.6" y="501" width="1172.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="20.57" y="511.5" >main</text>
</g>
<g >
<title>pthread_once@plt (10,101,010 samples, 0.03%)</title><rect x="1141.0" y="373" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1143.95" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="596.8" y="373" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="599.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="587.4" y="277" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="590.38" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::process (11,494,949,380 samples, 34.78%)</title><rect x="616.6" y="437" width="410.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="619.59" y="447.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="127.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (111,111,110 samples, 0.34%)</title><rect x="350.8" y="421" width="4.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="353.80" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.03%)</title><rect x="578.7" y="421" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="581.72" y="431.5" ></text>
</g>
<g >
<title>malloc (494,949,490 samples, 1.50%)</title><rect x="861.5" y="389" width="17.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="864.46" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="327.0" y="405" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="330.00" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="598.2" y="373" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="601.20" y="383.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.03%)</title><rect x="591.3" y="325" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="594.34" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.09%)</title><rect x="1160.1" y="421" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.07" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1123.3" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.28" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="175.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="598.9" y="373" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="601.92" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="597.1" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="600.11" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="421" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.71" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="896.8" y="389" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="899.80" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.03%)</title><rect x="887.1" y="389" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="890.07" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.03%)</title><rect x="66.6" y="437" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="69.62" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="143.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (90,909,090 samples, 0.28%)</title><rect x="1141.3" y="405" width="3.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1144.31" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="357" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.03" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="333.1" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="336.13" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="353.7" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.69" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="421" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="431.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.06%)</title><rect x="896.8" y="405" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="899.80" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1179.2" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.18" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="271.5" ></text>
</g>
<g >
<title>operator new (303,030,300 samples, 0.92%)</title><rect x="735.2" y="421" width="10.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="738.24" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.12%)</title><rect x="1130.1" y="405" width="1.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1133.13" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="271.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="18.3" y="453" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="21.29" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (232,323,230 samples, 0.70%)</title><rect x="66.6" y="469" width="8.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="69.62" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 0.76%)</title><rect x="52.9" y="341" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="55.92" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 0.09%)</title><rect x="68.4" y="421" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="71.42" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.34%)</title><rect x="70.6" y="389" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="73.59" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="582.7" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="585.69" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="348.6" y="437" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="351.64" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="64.1" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="67.10" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.09%)</title><rect x="890.7" y="373" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="893.67" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="1137.3" y="309" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.35" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="421" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.53" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="17.2" y="405" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="20.21" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="405" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.53" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="592.8" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="595.79" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,606,060,590 samples, 4.86%)</title><rect x="17.6" y="485" width="57.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="20.57" y="495.5" >sim::M..</text>
</g>
<g >
<title>sim::Link::schedule_arrival (141,414,140 samples, 0.43%)</title><rect x="882.4" y="421" width="5.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="885.38" y="431.5" ></text>
</g>
<g >
<title>sim::Link::transmit (131,313,130 samples, 0.40%)</title><rect x="350.1" y="437" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="353.08" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1135.9" y="389" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1138.90" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1123.3" y="437" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1126.28" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (292,929,290 samples, 0.89%)</title><rect x="579.1" y="421" width="10.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="582.08" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="380.0" y="437" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="383.01" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="605.52" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.15%)</title><rect x="1172.7" y="437" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1175.69" y="447.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="453" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.64" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="373" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1136.38" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="30.9" y="421" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="33.92" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="389" width="2.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1129.53" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="593.5" y="357" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="596.51" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="339.6" y="389" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="342.62" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="1137.0" y="341" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.99" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="67.10" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="582.7" y="325" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="585.69" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="598.6" y="277" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="601.56" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.74" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="175.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.12%)</title><rect x="637.5" y="421" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="640.51" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="58.0" y="325" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="60.96" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1180.6" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1183.62" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="49.7" y="405" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="52.67" y="415.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.09%)</title><rect x="859.3" y="405" width="1.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="862.30" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1167.3" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.28" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.06%)</title><rect x="590.6" y="341" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="593.62" y="351.5" ></text>
</g>
<g >
<title>_start (33,040,403,710 samples, 99.97%)</title><rect x="10.4" y="549" width="1179.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.36" y="559.5" >_start</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="594.2" y="357" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="597.23" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="602.5" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="605.52" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.18%)</title><rect x="758.7" y="405" width="2.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="761.68" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="65.9" y="453" width="0.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="68.90" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Event::Event (232,323,230 samples, 0.70%)</title><rect x="387.9" y="437" width="8.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="390.95" y="447.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (575,757,570 samples, 1.74%)</title><rect x="1161.5" y="453" width="20.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1164.51" y="463.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.03%)</title><rect x="1146.7" y="405" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1149.72" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="111.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1146.7" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1149.72" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="16.5" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.49" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (292,929,290 samples, 0.89%)</title><rect x="711.1" y="421" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="714.08" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="277" width="0.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1190.11" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="891.4" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="894.39" y="351.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,232,323,220 samples, 3.73%)</title><rect x="20.1" y="453" width="44.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="23.10" y="463.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.37%)</title><rect x="583.8" y="325" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="586.77" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.12%)</title><rect x="1182.1" y="453" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.07" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (20,202,020 samples, 0.06%)</title><rect x="34.5" y="437" width="0.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="37.52" y="447.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="32.7" y="421" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.72" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (30,303,030 samples, 0.09%)</title><rect x="68.4" y="437" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="71.42" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="337.8" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.82" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_cwnd (10,101,010 samples, 0.03%)</title><rect x="602.2" y="405" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="605.16" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="586.3" y="293" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="589.30" y="303.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="229" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.11" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="603.6" y="421" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="606.61" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (50,505,050 samples, 0.15%)</title><rect x="1159.3" y="437" width="1.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1162.35" y="447.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="602.2" y="389" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="605.16" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (434,343,430 samples, 1.31%)</title><rect x="832.6" y="405" width="15.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="835.61" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="18.3" y="421" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.29" y="431.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.21%)</title><rect x="79.2" y="469" width="2.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="82.24" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="229" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.71" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1159.7" y="405" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.71" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="592.1" y="325" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="595.07" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="598.6" y="341" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="601.56" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="353.7" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.69" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.1" y="437" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.10" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="181" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.15%)</title><rect x="614.4" y="437" width="1.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="617.43" y="447.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.03%)</title><rect x="887.4" y="421" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="890.43" y="431.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="895.0" y="373" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="898.00" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.1" y="69" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.06" y="79.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="1166.9" y="421" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.92" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1166.2" y="421" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.20" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="149" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.21%)</title><rect x="892.5" y="373" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="895.48" y="383.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (90,909,090 samples, 0.28%)</title><rect x="574.8" y="437" width="3.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="577.76" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1168.0" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="353.7" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.69" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.74" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="327.0" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="330.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="890.3" y="405" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="893.31" y="415.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.03%)</title><rect x="64.1" y="325" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="67.10" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (292,929,290 samples, 0.89%)</title><rect x="51.5" y="373" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="54.47" y="383.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (121,212,120 samples, 0.37%)</title><rect x="883.1" y="405" width="4.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="886.10" y="415.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (101,010,100 samples, 0.31%)</title><rect x="883.5" y="373" width="3.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="886.46" y="383.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="858.6" y="405" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="861.58" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 0.70%)</title><rect x="41.4" y="341" width="8.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.38" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (70,707,070 samples, 0.21%)</title><rect x="1186.8" y="341" width="2.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.75" y="351.5" ></text>
</g>
<g >
<title>sim::Scheduler::clear (10,101,010 samples, 0.03%)</title><rect x="1123.3" y="453" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1126.28" y="463.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="405" width="2.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1129.53" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.06%)</title><rect x="579.4" y="405" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="582.44" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="389" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.03" y="399.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1158.6" y="421" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1161.62" y="431.5" ></text>
</g>
<g >
<title>operator new (161,616,160 samples, 0.49%)</title><rect x="1103.4" y="421" width="5.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1106.45" y="431.5" ></text>
</g>
<g >
<title>_IO_file_open (40,404,040 samples, 0.12%)</title><rect x="67.0" y="373" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="69.98" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="68.4" y="373" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="71.42" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (25,373,737,120 samples, 76.77%)</title><rect x="248.4" y="469" width="905.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="251.38" y="479.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="245" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.48" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.1" y="453" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.10" y="463.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (161,616,160 samples, 0.49%)</title><rect x="329.2" y="421" width="5.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="332.16" y="431.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (303,030,300 samples, 0.92%)</title><rect x="700.3" y="405" width="10.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="703.26" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="72.4" y="341" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.39" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="890.7" y="405" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="893.67" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.06%)</title><rect x="336.0" y="389" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="339.01" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="351.5" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.52" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="599.3" y="373" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="602.28" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="588.8" y="389" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="591.82" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.06%)</title><rect x="10.4" y="421" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.36" y="431.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="601.4" y="389" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="604.44" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="578.0" y="421" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="581.00" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (151,515,150 samples, 0.46%)</title><rect x="341.4" y="357" width="5.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="344.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="68.4" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="71.42" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.06%)</title><rect x="1168.4" y="437" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1171.36" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="239.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.03%)</title><rect x="346.8" y="373" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="349.83" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="191.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.03%)</title><rect x="598.6" y="357" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="601.56" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="890.7" y="389" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="893.67" y="399.5" ></text>
</g>
<g >
<title>sim::Link::arrive (646,464,640 samples, 1.96%)</title><rect x="325.6" y="437" width="23.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="328.56" y="447.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.03%)</title><rect x="597.1" y="341" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="600.11" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="17.6" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.57" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.46%)</title><rect x="69.5" y="437" width="5.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="72.50" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="605.52" y="287.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="594.2" y="373" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="597.23" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="347.6" y="389" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="350.56" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="353.7" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.69" y="159.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="469" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.28" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="207.5" ></text>
</g>
<g >
<title>operator new (90,909,090 samples, 0.28%)</title><rect x="883.8" y="341" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="886.82" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (171,717,170 samples, 0.52%)</title><rect x="604.3" y="437" width="6.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="607.33" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="891.0" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="894.03" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.37%)</title><rect x="70.6" y="421" width="4.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="73.59" y="431.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="880.6" y="373" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="883.57" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (373,737,370 samples, 1.13%)</title><rect x="334.9" y="421" width="13.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="337.93" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="597.5" y="373" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="600.48" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="892.8" y="341" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="895.84" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1167.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="341.1" y="373" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.06" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (393,939,390 samples, 1.19%)</title><rect x="36.7" y="421" width="14.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="39.69" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.1" y="85" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.06" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="893.9" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.92" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="895.4" y="405" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="898.36" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (101,010,100 samples, 0.31%)</title><rect x="350.8" y="405" width="3.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="353.80" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="293" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1190.84" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="367.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (30,303,030 samples, 0.09%)</title><rect x="328.1" y="421" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="331.08" y="431.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,373,737,360 samples, 4.16%)</title><rect x="17.6" y="469" width="49.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="20.57" y="479.5" >sim:..</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="877.3" y="357" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="880.33" y="367.5" ></text>
</g>
<g >
<title>open64 (40,404,040 samples, 0.12%)</title><rect x="67.0" y="357" width="1.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="69.98" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="1142.0" y="389" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.04" y="399.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (90,909,090 samples, 0.28%)</title><rect x="1126.5" y="421" width="3.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1129.53" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (50,505,050 samples, 0.15%)</title><rect x="1147.8" y="421" width="1.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1150.81" y="431.5" ></text>
</g>
<g >
<title>operator delete (121,212,120 samples, 0.37%)</title><rect x="380.4" y="437" width="4.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="383.37" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="598.6" y="309" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="601.56" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="885.3" y="293" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="888.26" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.46%)</title><rect x="319.8" y="437" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="322.79" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (50,505,050 samples, 0.15%)</title><rect x="1134.1" y="373" width="1.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1137.10" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="61.9" y="405" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="64.93" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="469" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.64" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="191.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="879.5" y="373" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="882.49" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="319.5" ></text>
</g>
<g >
<title>sim::Process::operator (21,454,545,240 samples, 64.91%)</title><rect x="355.1" y="453" width="766.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="358.13" y="463.5" >sim::Process::operator</text>
</g>
<g >
<title>sim::Process::~Process (60,606,060 samples, 0.18%)</title><rect x="1121.1" y="453" width="2.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1124.12" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="580.5" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.53" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (242,424,240 samples, 0.73%)</title><rect x="595.0" y="421" width="8.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="597.95" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,808,080,770 samples, 11.52%)</title><rect x="746.4" y="421" width="136.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="749.42" y="431.5" >sim::Link::get_pa..</text>
</g>
<g >
<title>strlen@plt (50,505,050 samples, 0.15%)</title><rect x="1025.2" y="421" width="1.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1028.19" y="431.5" ></text>
</g>
<g >
<title>malloc (90,909,090 samples, 0.28%)</title><rect x="883.8" y="325" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="886.82" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (40,404,040 samples, 0.12%)</title><rect x="67.0" y="437" width="1.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="69.98" y="447.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1158.6" y="405" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1161.62" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.09%)</title><rect x="68.4" y="389" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="71.42" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1160.8" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.79" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (131,313,130 samples, 0.40%)</title><rect x="329.2" y="405" width="4.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="332.16" y="415.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="437" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.64" y="447.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="74.6" y="405" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="77.55" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="405" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.28" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1178.1" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.10" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="229" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="592.1" y="341" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="595.07" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.12%)</title><rect x="939.4" y="421" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="942.36" y="431.5" ></text>
</g>
<g >
<title>nons (33,050,504,720 samples, 100.00%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,363,636,340 samples, 7.15%)</title><rect x="940.8" y="421" width="84.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="943.80" y="431.5" >std::_Rb_..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="17.6" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.57" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="229" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.84" y="239.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="17.6" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.57" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.09%)</title><rect x="1188.2" y="293" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.20" y="303.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="731.3" y="421" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="734.27" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="354.0" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="357.05" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.52%)</title><rect x="889.6" y="421" width="6.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="892.59" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="746.1" y="421" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="749.06" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="595.7" y="405" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="598.67" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (33,040,403,710 samples, 99.97%)</title><rect x="10.4" y="517" width="1179.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.36" y="527.5" >[libc.so.6]</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.28%)</title><rect x="336.7" y="405" width="3.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="339.74" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (434,343,430 samples, 1.31%)</title><rect x="35.2" y="437" width="15.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="38.24" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="327.0" y="421" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="330.00" y="431.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="589.9" y="373" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="592.90" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="159.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="453" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="22.38" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="592.8" y="357" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="595.79" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;unsigned int&gt;, bool&gt; std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::_M_insert_unique&lt;unsigned int const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="603.2" y="405" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="606.25" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (232,323,230 samples, 0.70%)</title><rect x="66.6" y="453" width="8.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="69.62" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="1157.9" y="437" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1160.90" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="887.4" y="389" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="890.43" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.12%)</title><rect x="338.2" y="389" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="341.18" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.1" y="389" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="601.4" y="373" width="0.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="604.44" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="181" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.56" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.46%)</title><rect x="1135.9" y="405" width="5.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1138.90" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="191.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.03%)</title><rect x="349.7" y="437" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="352.72" y="447.5" ></text>
</g>
<g >
<title>cfree (292,929,290 samples, 0.89%)</title><rect x="848.1" y="405" width="10.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="851.12" y="415.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="373" width="2.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1129.53" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="592.8" y="341" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="595.79" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="277" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.75" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="437" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.28" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (50,505,050 samples, 0.15%)</title><rect x="1142.8" y="389" width="1.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1145.76" y="399.5" ></text>
</g>
<g >
<title>_IO_file_fopen (20,202,020 samples, 0.06%)</title><rect x="34.5" y="389" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="37.52" y="399.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.18%)</title><rect x="892.8" y="357" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="895.84" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.34%)</title><rect x="1186.0" y="485" width="4.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1189.03" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1124.4" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1127.36" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="309" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.11" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (292,929,290 samples, 0.89%)</title><rect x="822.2" y="389" width="10.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="825.15" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="319.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,636,363,610 samples, 7.98%)</title><rect x="1027.0" y="437" width="94.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1029.99" y="447.5" >void sim::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="592.8" y="277" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="595.79" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.06%)</title><rect x="879.5" y="389" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="882.49" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.06%)</title><rect x="327.4" y="421" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="330.36" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (10,101,010 samples, 0.03%)</title><rect x="616.2" y="437" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="619.23" y="447.5" ></text>
</g>
<g >
<title>sim::is_valid_link (40,404,040 samples, 0.12%)</title><rect x="1156.5" y="437" width="1.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1159.46" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="593.5" y="341" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="596.51" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="1147.1" y="421" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1150.08" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.43%)</title><rect x="726.2" y="405" width="5.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="729.22" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1143.1" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.12" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="213" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.84" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.53" y="383.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="453" width="3.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.03" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="175.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1180.6" y="405" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.62" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="590.3" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="593.26" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="165" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.56" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="37" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="399.5" ></text>
</g>
<g >
<title>sim::Host::process (737,373,730 samples, 2.23%)</title><rect x="578.0" y="437" width="26.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="581.00" y="447.5" >s..</text>
</g>
<g >
<title>fopen (40,404,040 samples, 0.12%)</title><rect x="67.0" y="405" width="1.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="69.98" y="415.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.03%)</title><rect x="887.1" y="373" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="890.07" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="891.4" y="325" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="894.39" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="353.0" y="373" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="355.96" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="582.7" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="585.69" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (111,111,110 samples, 0.34%)</title><rect x="70.6" y="405" width="4.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="73.59" y="415.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (20,202,020 samples, 0.06%)</title><rect x="334.2" y="389" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="337.21" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (60,606,060 samples, 0.18%)</title><rect x="1144.9" y="421" width="2.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1147.92" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.06%)</title><rect x="610.5" y="437" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="613.46" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.06%)</title><rect x="36.0" y="421" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="38.97" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="602.9" y="405" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="605.89" y="415.5" ></text>
</g>
<g >
<title>operator new (525,252,520 samples, 1.59%)</title><rect x="860.4" y="405" width="18.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="863.38" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="293" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.11" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1159.0" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1161.99" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="325" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.11" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="32.0" y="421" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="35.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="49.3" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="52.31" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.1" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.06" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1155.4" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.38" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="207.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.09%)</title><rect x="590.6" y="357" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="593.62" y="367.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (50,505,050 samples, 0.15%)</title><rect x="352.6" y="389" width="1.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="355.60" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="159.5" ></text>
</g>
<g >
<title>open64 (20,202,020 samples, 0.06%)</title><rect x="34.5" y="357" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="37.52" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="53" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="584.1" y="309" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="587.13" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="255.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1185.7" y="453" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.67" y="463.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1178.1" y="405" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.10" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="319.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="213" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1190.11" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="143.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="591.7" y="357" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="594.71" y="367.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="325.9" y="421" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="328.92" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.09%)</title><rect x="1188.2" y="277" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.20" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 0.79%)</title><rect x="52.6" y="357" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="55.56" y="367.5" ></text>
</g>
<g >
<title>sim::Process::operator (30,303,030 samples, 0.09%)</title><rect x="244.4" y="469" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="247.41" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.09%)</title><rect x="1188.2" y="261" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.20" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="159.5" ></text>
</g>
<g >
<title>cfree (272,727,270 samples, 0.83%)</title><rect x="315.5" y="453" width="9.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="318.46" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="605.52" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="261" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.75" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="32.4" y="437" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="35.36" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="33.8" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.80" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.03%)</title><rect x="594.6" y="405" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="597.59" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="10.4" y="437" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.36" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (30,303,030 samples, 0.09%)</title><rect x="333.9" y="405" width="1.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="336.85" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::~TcpFlow (10,101,010 samples, 0.03%)</title><rect x="17.2" y="421" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="20.21" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.03%)</title><rect x="578.7" y="389" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="581.72" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (70,707,070 samples, 0.21%)</title><rect x="599.6" y="405" width="2.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="602.64" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.93" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.75" y="255.5" ></text>
</g>
<g >
<title>sim::SendData::operator (727,272,720 samples, 2.20%)</title><rect x="1123.6" y="453" width="26.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1126.64" y="463.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="197" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="207.5" ></text>
</g>
<g >
<title>sim::Link::get_to (40,404,040 samples, 0.12%)</title><rect x="1169.1" y="437" width="1.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1172.08" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="69.1" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="72.14" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="325" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="191.5" ></text>
</g>
<g >
<title>vsnprintf (292,929,290 samples, 0.89%)</title><rect x="51.5" y="389" width="10.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="54.47" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="602.5" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="605.52" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="293" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.48" y="303.5" ></text>
</g>
<g >
<title>malloc (272,727,270 samples, 0.83%)</title><rect x="736.3" y="405" width="9.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="739.32" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::pop (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="341" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1189.39" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.64" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (101,010,100 samples, 0.31%)</title><rect x="883.5" y="357" width="3.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="886.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="319.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.03%)</title><rect x="578.7" y="405" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="581.72" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,171,717,160 samples, 3.55%)</title><rect x="897.5" y="421" width="41.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="900.52" y="431.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="165" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="175.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,999,999,950 samples, 15.13%)</title><rect x="396.2" y="437" width="178.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="399.24" y="447.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.31%)</title><rect x="81.8" y="469" width="3.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="84.77" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="1158.3" y="437" width="1.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1161.26" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.06%)</title><rect x="1188.2" y="197" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.20" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="602.5" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="605.52" y="303.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="599.3" y="389" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="602.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (121,212,120 samples, 0.37%)</title><rect x="1131.6" y="405" width="4.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1134.58" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.1" y="405" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.10" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (333,333,330 samples, 1.01%)</title><rect x="51.1" y="421" width="11.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="54.11" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1155.0" y="453" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.02" y="463.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1161.1" y="437" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1164.15" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;sim::MetricsStorage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="64.1" y="421" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="67.10" y="431.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="354.8" y="437" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="357.77" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="261" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1190.11" y="271.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="437" width="3.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1189.03" y="447.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (31,101,009,790 samples, 94.10%)</title><rect x="75.6" y="485" width="1110.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="78.64" y="495.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="207.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (323,232,320 samples, 0.98%)</title><rect x="38.1" y="405" width="11.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="41.13" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1160.1" y="373" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.07" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1144.6" y="421" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1147.56" y="431.5" ></text>
</g>
<g >
<title>malloc (161,616,160 samples, 0.49%)</title><rect x="1103.4" y="405" width="5.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1106.45" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.18%)</title><rect x="580.9" y="389" width="2.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="583.89" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="70.2" y="421" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.23" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="325" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.03" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="287.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1181.7" y="437" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.71" y="447.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (40,404,040 samples, 0.12%)</title><rect x="67.0" y="421" width="1.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="69.98" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="354.0" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="357.05" y="351.5" ></text>
</g>
<g >
<title>_IO_file_open (20,202,020 samples, 0.06%)</title><rect x="34.5" y="373" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="37.52" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.31%)</title><rect x="590.3" y="373" width="3.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="593.26" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.24%)</title><rect x="245.5" y="469" width="2.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="248.50" y="479.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 0.61%)</title><rect x="10.4" y="469" width="7.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.36" y="479.5" ></text>
</g>
<g >
<title>Logger::warn (1,999,999,980 samples, 6.05%)</title><rect x="639.7" y="421" width="71.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="642.67" y="431.5" >Logger::..</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1127.6" y="293" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.61" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.52%)</title><rect x="852.4" y="389" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="855.44" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 0.61%)</title><rect x="10.4" y="453" width="7.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.36" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="309" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.53" y="319.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.03%)</title><rect x="64.1" y="341" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="67.10" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="341" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.03" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.15%)</title><rect x="895.7" y="421" width="1.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="898.72" y="431.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.03%)</title><rect x="1170.9" y="421" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1173.89" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="1143.8" y="373" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1146.84" y="383.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.21%)</title><rect x="596.8" y="389" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="599.75" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (202,020,200 samples, 0.61%)</title><rect x="340.0" y="405" width="7.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="342.98" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="277" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="287.5" ></text>
</g>
<g >
<title>void std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::_M_push_back_aux&lt;YAML::Token const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="245" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1191.92" y="255.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (666,666,660 samples, 2.02%)</title><rect x="325.2" y="453" width="23.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="328.20" y="463.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="70.6" y="373" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.59" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="143.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.03%)</title><rect x="347.9" y="405" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="350.92" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="277" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1190.84" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.03%)</title><rect x="66.6" y="389" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="69.62" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.12%)</title><rect x="1187.8" y="309" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.84" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1167.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.28" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (40,404,040 samples, 0.12%)</title><rect x="1125.1" y="421" width="1.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1128.09" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="336.13" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="191.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="50.4" y="405" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="53.39" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (292,929,290 samples, 0.89%)</title><rect x="51.5" y="405" width="10.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="54.47" y="415.5" ></text>
</g>
<g >
<title>sim::Event::Event (333,333,330 samples, 1.01%)</title><rect x="1109.2" y="421" width="11.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1112.22" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="333.1" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="336.13" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="223.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.28%)</title><rect x="580.2" y="405" width="3.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="583.17" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1146.7" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1149.72" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.06%)</title><rect x="336.0" y="405" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="339.01" y="415.5" ></text>
</g>
<g >
<title>_IO_file_fopen (40,404,040 samples, 0.12%)</title><rect x="67.0" y="389" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="69.98" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="329.9" y="389" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="332.88" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="245" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.11" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="596.4" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="599.39" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.40%)</title><rect x="583.4" y="341" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="586.41" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.37%)</title><rect x="342.5" y="325" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="345.51" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (303,030,300 samples, 0.92%)</title><rect x="38.9" y="389" width="10.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="41.85" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="32.7" y="437" width="1.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="35.72" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (404,040,400 samples, 1.22%)</title><rect x="1130.1" y="421" width="14.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1133.13" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.03%)</title><rect x="348.3" y="421" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="351.28" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1170.5" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.53" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="342.9" y="309" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="345.87" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="592.8" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="595.79" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="357" width="2.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1129.53" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="890.3" y="389" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="893.31" y="399.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.03%)</title><rect x="333.5" y="373" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="336.49" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.24%)</title><rect x="892.5" y="405" width="2.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="895.48" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="293" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="175.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="62.7" y="405" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="65.65" y="415.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.03%)</title><rect x="335.7" y="405" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="338.65" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="893.2" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.20" y="335.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (717,171,710 samples, 2.17%)</title><rect x="1124.0" y="437" width="25.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1127.00" y="447.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="590.3" y="341" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="593.26" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.28%)</title><rect x="611.2" y="437" width="3.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="614.18" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="127.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1155.7" y="453" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1158.74" y="463.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="325" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1129.53" y="335.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="293" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.03" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="213" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="223.5" ></text>
</g>
<g >
<title>cfree (272,727,270 samples, 0.83%)</title><rect x="721.5" y="421" width="9.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="724.53" y="431.5" ></text>
</g>
<g >
<title>vsnprintf (111,111,110 samples, 0.34%)</title><rect x="1137.0" y="357" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1139.99" y="367.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1102.4" y="421" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1105.37" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="891.4" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="894.39" y="367.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.24%)</title><rect x="384.7" y="437" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="387.70" y="447.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.09%)</title><rect x="377.5" y="437" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="380.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>all (33,050,504,720 samples, 100%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.46%)</title><rect x="341.4" y="341" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.42" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (101,010,100 samples, 0.31%)</title><rect x="596.0" y="405" width="3.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="599.03" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.12%)</title><rect x="64.5" y="453" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="67.46" y="463.5" ></text>
</g>
<g >
<title>Size&lt;Byte&gt; parse_with_default&lt;Size&lt;Byte&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="405" width="0.4" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1192.64" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="405" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.03" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.43%)</title><rect x="1136.3" y="389" width="5.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1139.27" y="399.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.03%)</title><rect x="66.6" y="373" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="69.62" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.46%)</title><rect x="1156.1" y="453" width="5.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1159.10" y="463.5" ></text>
</g>
<g >
<title>__libc_start_main (33,040,403,710 samples, 99.97%)</title><rect x="10.4" y="533" width="1179.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.36" y="543.5" >__libc_start_main</text>
</g>
<g >
<title>sim::LinkQueue::empty (40,404,040 samples, 0.12%)</title><rect x="887.8" y="421" width="1.4" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="890.79" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="66.6" y="405" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="69.62" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="880.6" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="883.57" y="367.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.24%)</title><rect x="732.4" y="421" width="2.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="735.35" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.06%)</title><rect x="1130.1" y="389" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1133.13" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="373" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.03" y="383.5" ></text>
</g>
<g >
<title>fopen (20,202,020 samples, 0.06%)</title><rect x="34.5" y="405" width="0.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="37.52" y="415.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="598.9" y="357" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="601.92" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="127.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.03%)</title><rect x="354.4" y="405" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="357.41" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="339.3" y="373" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="342.26" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.03%)</title><rect x="1135.5" y="357" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1138.54" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="1130.9" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.86" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.03%)</title><rect x="1147.4" y="421" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1150.44" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="347.6" y="373" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="350.56" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.12%)</title><rect x="588.1" y="405" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="591.10" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.37%)</title><rect x="1136.6" y="373" width="4.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1139.63" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (50,505,050 samples, 0.15%)</title><rect x="1179.9" y="437" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.90" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="583.4" y="405" width="4.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="586.41" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="895.4" y="389" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="898.36" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="1148.5" y="405" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1151.53" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="309" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.03" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="351.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (171,717,170 samples, 0.52%)</title><rect x="349.0" y="453" width="6.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="352.00" y="463.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.03%)</title><rect x="1129.8" y="421" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1132.77" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="143.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="598.9" y="341" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="601.92" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="453" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.28" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="399.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="261" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.84" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="30.9" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.92" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.2" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.16" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="879.5" y="357" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="882.49" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.03%)</title><rect x="244.1" y="469" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="247.05" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.40%)</title><rect x="583.4" y="373" width="4.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="586.41" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="347.2" y="405" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="350.19" y="415.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="879.5" y="405" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="882.49" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="19.0" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.02" y="415.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.03%)</title><rect x="1123.6" y="437" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1126.64" y="447.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1165.8" y="437" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1168.84" y="447.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.03%)</title><rect x="66.3" y="453" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="69.26" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.09%)</title><rect x="31.3" y="437" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="34.28" y="447.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.06%)</title><rect x="638.9" y="421" width="0.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="641.95" y="431.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,444,444,400 samples, 13.45%)</title><rect x="85.4" y="469" width="158.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="88.37" y="479.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.03%)</title><rect x="1129.4" y="405" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1132.41" y="415.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.03%)</title><rect x="1131.2" y="373" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1134.22" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="431.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (888,888,880 samples, 2.69%)</title><rect x="1154.3" y="469" width="31.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1157.30" y="479.5" >si..</text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.06%)</title><rect x="1130.9" y="389" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1133.86" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="351.5" ></text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.03%)</title><rect x="34.2" y="389" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="37.16" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (70,707,070 samples, 0.21%)</title><rect x="1133.4" y="389" width="2.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1136.38" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="601.1" y="325" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="604.08" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="421" width="3.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1189.03" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="175.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1180.6" y="421" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.62" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="67.7" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.70" y="127.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="50.8" y="421" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="53.75" y="431.5" ></text>
</g>
<g >
<title>sim::ECN::get_congestion_mark (10,101,010 samples, 0.03%)</title><rect x="387.6" y="437" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="390.59" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (151,515,150 samples, 0.46%)</title><rect x="589.5" y="421" width="5.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="592.54" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="1137.3" y="325" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.35" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.28%)</title><rect x="883.8" y="309" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="886.82" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="255.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (10,101,010 samples, 0.03%)</title><rect x="889.2" y="421" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="892.23" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (80,808,080 samples, 0.24%)</title><rect x="892.5" y="389" width="2.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="895.48" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="68.4" y="341" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="71.42" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (20,202,020 samples, 0.06%)</title><rect x="1170.5" y="437" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1173.53" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="1139.5" y="293" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.51" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="602.5" y="389" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="605.52" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (131,313,130 samples, 0.40%)</title><rect x="589.9" y="389" width="4.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="592.90" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="14.7" y="373" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.69" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (181,818,180 samples, 0.55%)</title><rect x="11.1" y="437" width="6.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.08" y="447.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.15%)</title><rect x="77.4" y="469" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="80.44" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="346.5" y="277" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.47" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="592.8" y="325" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="595.79" y="335.5" ></text>
</g>
<g >
<title>strchrnul@plt (20,202,020 samples, 0.06%)</title><rect x="894.3" y="341" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="897.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1135.2" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.18" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.06%)</title><rect x="74.9" y="485" width="0.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="77.91" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="303.5" ></text>
</g>
<g >
<title>std::ostream::put (30,303,030 samples, 0.09%)</title><rect x="63.0" y="437" width="1.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="66.01" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="223.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.03%)</title><rect x="598.6" y="325" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="601.56" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="14.7" y="389" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.9" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.88" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1171.2" y="437" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1174.25" y="447.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1160.1" y="389" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.07" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="890.0" y="405" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="892.95" y="415.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.03%)</title><rect x="34.2" y="421" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="37.16" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.5" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.46" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.4" y="501" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.36" y="511.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="30.9" y="437" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="33.92" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="159.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="63.7" y="421" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="66.73" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="34.2" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.16" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.06%)</title><rect x="592.8" y="309" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="595.79" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1166.2" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.20" y="415.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (90,909,090 samples, 0.28%)</title><rect x="1151.1" y="453" width="3.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1154.05" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="341" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="351.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="593.9" y="357" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="596.87" y="367.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.15%)</title><rect x="599.6" y="357" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="602.64" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="67.7" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.70" y="143.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="578.4" y="421" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="581.36" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="332.8" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.77" y="271.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="887.4" y="405" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="890.43" y="415.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.24%)</title><rect x="1126.5" y="341" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1129.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.03%)</title><rect x="66.6" y="421" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="69.62" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.09%)</title><rect x="582.0" y="373" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="584.97" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="287.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="879.9" y="357" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="882.85" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1179.2" y="389" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.18" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.06%)</title><rect x="1188.2" y="229" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.20" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.03%)</title><rect x="339.3" y="357" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="342.26" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="354.0" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="357.05" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.06%)</title><rect x="1188.2" y="213" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.20" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.03%)</title><rect x="880.9" y="405" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="883.94" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="309" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.48" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_from (30,303,030 samples, 0.09%)</title><rect x="1156.8" y="421" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.82" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="332.4" y="373" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="335.41" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="345.4" y="293" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="348.39" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="64.1" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="67.10" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="66.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.62" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (50,505,050 samples, 0.15%)</title><rect x="599.6" y="389" width="1.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="602.64" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="598.6" y="293" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="601.56" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="255.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.06%)</title><rect x="579.4" y="389" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="582.44" y="399.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="340.0" y="389" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="342.98" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.09%)</title><rect x="1178.8" y="421" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1181.82" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="890.0" y="389" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="892.95" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="591.3" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="594.34" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (20,202,020 samples, 0.06%)</title><rect x="880.2" y="389" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="883.21" y="399.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.06%)</title><rect x="1188.2" y="245" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.20" y="255.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.15%)</title><rect x="599.6" y="373" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="602.64" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="326.3" y="421" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="329.28" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.75" y="159.5" ></text>
</g>
<g >
<title>Logger::info (2,010,100,990 samples, 6.08%)</title><rect x="760.8" y="405" width="71.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="763.84" y="415.5" >Logger::..</text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.09%)</title><rect x="881.3" y="405" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="884.30" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="309" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.75" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1179.2" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.18" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.03%)</title><rect x="597.8" y="373" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="600.84" y="383.5" ></text>
</g>
<g >
<title>__munmap (10,101,010 samples, 0.03%)</title><rect x="879.5" y="341" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="882.49" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="589.2" y="389" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="592.18" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="18.3" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="21.29" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 0.79%)</title><rect x="40.3" y="357" width="9.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.29" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="19.4" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.38" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="1143.5" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.48" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="583.4" y="389" width="4.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="586.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.03%)</title><rect x="340.3" y="389" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="343.34" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.03%)</title><rect x="602.5" y="405" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="605.52" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.0" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="614.1" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="617.06" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (343,434,340 samples, 1.04%)</title><rect x="50.8" y="437" width="12.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="53.75" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.74" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="34.5" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.52" y="335.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (20,202,020 samples, 0.06%)</title><rect x="34.5" y="421" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="37.52" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (292,929,290 samples, 0.89%)</title><rect x="39.2" y="373" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.21" y="383.5" ></text>
</g>
<g >
<title>sim::Host::~Host (20,202,020 samples, 0.06%)</title><rect x="10.4" y="405" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.36" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="599.6" y="341" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="602.64" y="351.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1160.1" y="405" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.07" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="73.1" y="325" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.11" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="223.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="325" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1189.75" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="69" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.84" y="79.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.03%)</title><rect x="34.2" y="437" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="37.16" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="892.5" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="895.48" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.4" y="485" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.36" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="315.1" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="318.10" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1133.0" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.02" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="61.2" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="64.21" y="319.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::Timeout::operator (40,404,040 samples, 0.12%)</title><rect x="1149.6" y="453" width="1.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1152.61" y="463.5" ></text>
</g>
<g >
<title>vsnprintf (131,313,130 samples, 0.40%)</title><rect x="583.4" y="357" width="4.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="586.41" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (181,818,180 samples, 0.55%)</title><rect x="340.7" y="389" width="6.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="343.70" y="399.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.15%)</title><rect x="1166.6" y="437" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.56" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="277" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.48" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="883.5" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.46" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.74" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="353.3" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="356.33" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.06%)</title><rect x="349.0" y="437" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="352.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.28%)</title><rect x="875.9" y="373" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="878.89" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="593.9" y="373" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="596.87" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="592.4" y="325" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="595.43" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1167.3" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.28" y="383.5" ></text>
</g>
<g >
<title>sim::Host::~Host (171,717,170 samples, 0.52%)</title><rect x="11.1" y="421" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.08" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1187.8" y="245" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.84" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.0" y="245" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (131,313,130 samples, 0.40%)</title><rect x="1175.2" y="437" width="4.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1178.21" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.03%)</title><rect x="1172.3" y="437" width="0.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1175.33" y="447.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (50,505,050 samples, 0.15%)</title><rect x="332.0" y="389" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="335.05" y="399.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.03%)</title><rect x="1186.8" y="293" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.75" y="303.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.03%)</title><rect x="34.2" y="405" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="37.16" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1155.4" y="453" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.38" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="333.1" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.13" y="239.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1178.1" y="421" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.10" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.09%)</title><rect x="68.4" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="71.42" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (20,202,020 samples, 0.06%)</title><rect x="891.8" y="405" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="894.75" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="879.5" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="882.49" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1181.3" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.34" y="383.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.24%)</title><rect x="14.3" y="405" width="2.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="17.33" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (151,515,150 samples, 0.46%)</title><rect x="341.4" y="373" width="5.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="344.42" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1127.2" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1130.25" y="223.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (111,111,110 samples, 0.34%)</title><rect x="883.1" y="389" width="4.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="886.10" y="399.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="421" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.64" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="1171.6" y="437" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1174.61" y="447.5" ></text>
</g>
</g>
</svg>
