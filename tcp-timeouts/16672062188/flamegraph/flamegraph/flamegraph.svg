<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="255.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.09%)</title><rect x="33.5" y="389" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="36.53" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="589.0" y="341" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="591.96" y="351.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.18%)</title><rect x="589.3" y="325" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="592.32" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (60,606,060 samples, 0.18%)</title><rect x="1179.5" y="405" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.50" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="245" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="255.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="592.6" y="357" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="595.58" y="367.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="19.8" y="405" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="22.78" y="415.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="1149.4" y="373" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1152.45" y="383.5" ></text>
</g>
<g >
<title>writev (30,303,030 samples, 0.09%)</title><rect x="63.2" y="357" width="1.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="66.22" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1145.1" y="373" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1148.10" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="69" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="70.8" y="293" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.83" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (323,232,320 samples, 0.98%)</title><rect x="52.7" y="405" width="11.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="55.72" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="586.4" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="589.42" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.37%)</title><rect x="346.4" y="309" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.37" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="373" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.67" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="590.0" y="293" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="593.04" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (50,505,050 samples, 0.15%)</title><rect x="1181.7" y="421" width="1.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1184.67" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (40,404,040 samples, 0.12%)</title><rect x="593.3" y="373" width="1.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="596.30" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="575.6" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.56" y="255.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.15%)</title><rect x="69.4" y="357" width="1.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="72.38" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="309" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.24" y="319.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="437" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.28" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (323,232,320 samples, 0.98%)</title><rect x="583.5" y="389" width="11.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="586.53" y="399.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (525,252,520 samples, 1.60%)</title><rect x="1162.8" y="421" width="18.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1165.84" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="862.7" y="373" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="865.68" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="579.2" y="341" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="582.18" y="351.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="35.3" y="389" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="38.35" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="865.2" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.22" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="373" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.28" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="356.1" y="357" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.14" y="367.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (40,404,040 samples, 0.12%)</title><rect x="888.0" y="389" width="1.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="891.03" y="399.5" ></text>
</g>
<g >
<title>sim::Link::transmit (121,212,120 samples, 0.37%)</title><rect x="355.4" y="405" width="4.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="358.42" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="181" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="191.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="585.3" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="588.34" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.43%)</title><rect x="857.6" y="357" width="5.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="860.62" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1183.1" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1186.12" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.15%)</title><rect x="883.7" y="357" width="1.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="886.69" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="883.3" y="357" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="886.32" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="277" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.02" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (80,808,080 samples, 0.25%)</title><rect x="589.3" y="373" width="2.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="592.32" y="383.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="355.8" y="389" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="358.78" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.06%)</title><rect x="892.4" y="341" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="895.37" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="893.8" y="293" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.82" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="255.5" ></text>
</g>
<g >
<title>sim::Process::operator (70,707,070 samples, 0.21%)</title><rect x="235.9" y="437" width="2.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="238.93" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.28%)</title><rect x="72.3" y="341" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="75.28" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="338.4" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="341.40" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,616,161,570 samples, 14.02%)</title><rect x="401.0" y="405" width="165.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="404.04" y="415.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>vsnprintf (242,424,240 samples, 0.74%)</title><rect x="41.9" y="357" width="8.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="44.86" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="587.9" y="309" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="590.87" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="34.3" y="373" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.26" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="891.3" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="894.29" y="367.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.03%)</title><rect x="883.3" y="373" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="886.32" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="437" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.64" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="579.5" y="309" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="582.54" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1144.0" y="261" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.02" y="271.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="261" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.02" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1171.2" y="341" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.17" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (242,424,240 samples, 0.74%)</title><rect x="67.2" y="421" width="8.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="70.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="830.1" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="833.10" y="303.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,787,878,760 samples, 8.47%)</title><rect x="1025.3" y="405" width="99.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1028.26" y="415.5" >void sim::Sc..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="594.0" y="341" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="597.03" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1185.7" y="437" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1188.66" y="447.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="39.7" y="389" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="42.69" y="399.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.03%)</title><rect x="942.0" y="389" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="944.98" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.03%)</title><rect x="67.2" y="357" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="70.21" y="367.5" ></text>
</g>
<g >
<title>operator new (545,454,540 samples, 1.66%)</title><rect x="863.8" y="373" width="19.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="866.77" y="383.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.03%)</title><rect x="36.4" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="39.43" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 0.37%)</title><rect x="346.4" y="325" width="4.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="349.37" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="191.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1173.0" y="389" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1175.98" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="271.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.15%)</title><rect x="77.7" y="437" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="80.71" y="447.5" ></text>
</g>
<g >
<title>fclose (10,101,010 samples, 0.03%)</title><rect x="36.1" y="373" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="39.07" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="325" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.02" y="335.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="405" width="3.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1189.02" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="287.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.18%)</title><rect x="1108.2" y="373" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1111.17" y="383.5" ></text>
</g>
<g >
<title>nons (32,919,191,590 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >nons</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="895.6" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="898.63" y="271.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.03%)</title><rect x="352.9" y="389" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="355.88" y="399.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.21%)</title><rect x="391.6" y="405" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="394.63" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (414,141,410 samples, 1.26%)</title><rect x="338.0" y="389" width="14.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="341.04" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="165" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="34.6" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="37.62" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="580.6" y="325" width="1.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="583.63" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="586.1" y="341" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="589.06" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="20.9" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.86" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.03%)</title><rect x="36.4" y="357" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="39.43" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::~TcpFlow (10,101,010 samples, 0.03%)</title><rect x="18.0" y="389" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="20.97" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="213" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="351.1" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="354.07" y="367.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1170.4" y="389" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.45" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="149" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="143.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="421" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.64" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="245" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="271.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="569.8" y="341" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="572.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="69.4" y="341" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="72.38" y="351.5" ></text>
</g>
<g >
<title>cfree (373,737,370 samples, 1.14%)</title><rect x="316.0" y="421" width="13.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="318.95" y="431.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.03%)</title><rect x="885.5" y="373" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="888.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.49%)</title><rect x="1139.3" y="293" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.31" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (212,121,210 samples, 0.64%)</title><rect x="889.5" y="389" width="7.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="892.48" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="69.7" y="325" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="72.74" y="335.5" ></text>
</g>
<g >
<title>malloc (222,222,220 samples, 0.68%)</title><rect x="745.4" y="373" width="7.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="748.37" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.15%)</title><rect x="1161.0" y="389" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1164.03" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.21%)</title><rect x="893.5" y="357" width="2.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="896.46" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="594.7" y="373" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="597.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="309" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="319.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="19.8" y="421" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="22.78" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="213" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="223.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1170.4" y="373" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.45" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.21%)</title><rect x="893.5" y="373" width="2.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="896.46" y="383.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,353,535,340 samples, 4.11%)</title><rect x="18.7" y="437" width="48.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="21.69" y="447.5" >sim:..</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="20.1" y="373" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.14" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="111.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="336.2" y="357" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="339.23" y="367.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="421" width="3.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.02" y="431.5" ></text>
</g>
<g >
<title>main (32,686,868,360 samples, 99.29%)</title><rect x="18.3" y="469" width="1171.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="21.33" y="479.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="197" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="207.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (60,606,060 samples, 0.18%)</title><rect x="338.8" y="357" width="2.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="341.76" y="367.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="569.4" y="341" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="572.40" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1161.50" y="415.5" ></text>
</g>
<g >
<title>sim::Switch::process (11,757,575,640 samples, 35.72%)</title><rect x="603.8" y="405" width="421.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="606.80" y="415.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="584.6" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="587.61" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.06%)</title><rect x="1187.1" y="213" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.10" y="223.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::set_flag (10,101,010 samples, 0.03%)</title><rect x="585.0" y="373" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="587.97" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="579.9" y="325" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="582.90" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="293" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="303.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.12%)</title><rect x="580.6" y="277" width="1.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="583.63" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="579.9" y="309" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="582.90" y="319.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="50.2" y="309" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="53.19" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="181" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="38.6" y="37" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="41.60" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="36.1" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.07" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,222,222,200 samples, 6.75%)</title><rect x="943.1" y="389" width="79.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="946.07" y="399.5" >std::_Rb_..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.09%)</title><rect x="351.8" y="357" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="354.80" y="367.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.03%)</title><rect x="353.2" y="421" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="356.25" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="271.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="333.3" y="389" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="336.33" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.31%)</title><rect x="71.9" y="373" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="74.91" y="383.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="357" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1172.72" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="405" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.28" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1155.2" y="421" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.24" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="573.4" y="293" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.39" y="303.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.25%)</title><rect x="1107.4" y="389" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1110.45" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="85" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="1184.2" y="421" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1187.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="213" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.15%)</title><rect x="1146.2" y="389" width="1.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1149.19" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.64" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (383,838,380 samples, 1.17%)</title><rect x="701.9" y="373" width="13.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="704.92" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="62.1" y="277" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="65.14" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="10.7" y="405" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="41.5" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.50" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (20,202,020 samples, 0.06%)</title><rect x="344.2" y="325" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="347.19" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.06%)</title><rect x="942.3" y="389" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="945.34" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1144.7" y="245" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.74" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="38.6" y="53" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="41.60" y="63.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="35.3" y="373" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="38.35" y="383.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="341" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1172.72" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,222,222,210 samples, 3.71%)</title><rect x="898.2" y="389" width="43.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="901.17" y="399.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="255.5" ></text>
</g>
<g >
<title>sim::Process::~Process (50,505,050 samples, 0.15%)</title><rect x="1125.2" y="421" width="1.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1128.19" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.03%)</title><rect x="36.4" y="389" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="39.43" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="181" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.47" y="191.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.12%)</title><rect x="1187.8" y="277" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.83" y="287.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.12%)</title><rect x="1170.1" y="405" width="1.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1173.09" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.21%)</title><rect x="893.5" y="341" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="896.46" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1145.8" y="389" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1148.83" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="229" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.02" y="239.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (50,505,050 samples, 0.15%)</title><rect x="1129.2" y="373" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1132.17" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.67" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (40,404,040 samples, 0.12%)</title><rect x="67.6" y="405" width="1.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="70.57" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="70.1" y="309" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.10" y="319.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="582.4" y="293" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="585.44" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.06%)</title><rect x="569.4" y="389" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="572.40" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.03%)</title><rect x="355.8" y="373" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="358.78" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="165" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="344.9" y="373" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="347.92" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="165" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.47" y="175.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.09%)</title><rect x="1156.0" y="421" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1158.97" y="431.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.06%)</title><rect x="331.9" y="389" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="334.88" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="341" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="1135.7" y="373" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1138.69" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="229" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.83" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1181.3" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.31" y="367.5" ></text>
</g>
<g >
<title>std::ostream::put (20,202,020 samples, 0.06%)</title><rect x="64.3" y="405" width="0.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="67.31" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="31.7" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.72" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="581.4" y="213" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="584.35" y="223.5" ></text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.31%)</title><rect x="82.4" y="437" width="3.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="85.41" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (353,535,350 samples, 1.07%)</title><rect x="40.1" y="389" width="12.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="43.05" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="245" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.83" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="50.6" y="373" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="53.55" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="31.7" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="34.72" y="367.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (50,505,050 samples, 0.15%)</title><rect x="886.2" y="373" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="889.22" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="71.2" y="389" width="4.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="74.19" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="77.3" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.35" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1186.7" y="197" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.74" y="207.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (50,505,050 samples, 0.15%)</title><rect x="566.5" y="405" width="1.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="569.51" y="415.5" ></text>
</g>
<g >
<title>strlen@plt (40,404,040 samples, 0.12%)</title><rect x="1023.8" y="389" width="1.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1026.81" y="399.5" ></text>
</g>
<g >
<title>_IO_file_open (40,404,040 samples, 0.12%)</title><rect x="67.6" y="341" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="70.57" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.37%)</title><rect x="1140.8" y="277" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.76" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1156.0" y="405" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.97" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.52%)</title><rect x="44.0" y="309" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="47.03" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="165" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.83" y="175.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="1127.4" y="389" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1130.36" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="159.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.09%)</title><rect x="1186.7" y="229" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.74" y="239.5" ></text>
</g>
<g >
<title>Logger::info (2,060,606,040 samples, 6.26%)</title><rect x="765.6" y="373" width="73.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="768.65" y="383.5" >Logger::..</text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::set_flag (10,101,010 samples, 0.03%)</title><rect x="577.4" y="357" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="580.37" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1129.5" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.53" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="245" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="255.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.03%)</title><rect x="67.2" y="341" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="70.21" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::Timeout::operator (10,101,010 samples, 0.03%)</title><rect x="1150.5" y="421" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1153.53" y="431.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="421" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.29" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="261" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="325" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.24" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (383,838,380 samples, 1.17%)</title><rect x="39.0" y="405" width="13.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="41.97" y="415.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 0.98%)</title><rect x="726.9" y="389" width="11.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="729.91" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (60,606,060 samples, 0.18%)</title><rect x="69.0" y="405" width="2.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="72.02" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="309" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.02" y="319.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="373" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1170.19" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="261" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="335.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.15%)</title><rect x="1161.0" y="357" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1164.03" y="367.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.06%)</title><rect x="75.9" y="453" width="0.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="78.90" y="463.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.15%)</title><rect x="741.0" y="389" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="744.03" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="582.8" y="325" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="585.80" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (373,737,370 samples, 1.14%)</title><rect x="1132.4" y="389" width="13.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1135.43" y="399.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,202,020,190 samples, 3.65%)</title><rect x="21.9" y="421" width="43.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="24.95" y="431.5" >sim:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="197" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="277" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="890.9" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="893.93" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="333.0" y="373" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="335.97" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (80,808,080 samples, 0.25%)</title><rect x="32.1" y="405" width="2.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="35.09" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="1128.1" y="389" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1131.09" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="181" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.83" y="191.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.09%)</title><rect x="896.0" y="373" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="899.00" y="383.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (20,202,020 samples, 0.06%)</title><rect x="569.4" y="373" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="572.40" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="67.2" y="373" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="70.21" y="383.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (70,707,070 samples, 0.21%)</title><rect x="1128.4" y="389" width="2.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1131.45" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="143.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (30,303,030 samples, 0.09%)</title><rect x="602.7" y="405" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="605.72" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="16.9" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.88" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="35.3" y="405" width="0.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="38.35" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="207.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="1130.3" y="325" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1133.26" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="143.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.18%)</title><rect x="335.5" y="373" width="2.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="338.50" y="383.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.03%)</title><rect x="570.9" y="357" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="573.85" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="578.1" y="357" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="581.09" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.09%)</title><rect x="897.1" y="389" width="1.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="900.08" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="891.7" y="373" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="894.65" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="373" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.02" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (60,606,060 samples, 0.18%)</title><rect x="69.0" y="389" width="2.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="72.02" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="43.3" y="325" width="7.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.31" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (60,606,060 samples, 0.18%)</title><rect x="589.3" y="357" width="2.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="592.32" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (40,404,040 samples, 0.12%)</title><rect x="343.5" y="341" width="1.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="346.47" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (222,222,220 samples, 0.68%)</title><rect x="1137.1" y="357" width="8.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1140.14" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="303.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="886.2" y="341" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="889.22" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,606,060,590 samples, 4.88%)</title><rect x="18.3" y="453" width="57.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="21.33" y="463.5" >sim::M..</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="1148.4" y="389" width="2.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1151.36" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1175.9" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.88" y="399.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (30,949,494,640 samples, 94.02%)</title><rect x="76.6" y="453" width="1109.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="79.62" y="463.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="575.9" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.92" y="351.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.21%)</title><rect x="1167.6" y="405" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.55" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="37.2" y="133" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.16" y="143.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.03%)</title><rect x="1153.8" y="437" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1156.79" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="245" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.02" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_cwnd (30,303,030 samples, 0.09%)</title><rect x="592.2" y="373" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="595.22" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>fopen (40,404,040 samples, 0.12%)</title><rect x="67.6" y="373" width="1.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="70.57" y="383.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (212,121,210 samples, 0.64%)</title><rect x="10.7" y="437" width="7.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.72" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="261" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="181" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="191.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.09%)</title><rect x="1131.0" y="389" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1133.98" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1130.3" y="293" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1133.26" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="55.6" y="309" width="7.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="58.62" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="330.4" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="333.44" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="175.5" ></text>
</g>
<g >
<title>sim::Event::Event (191,919,190 samples, 0.58%)</title><rect x="394.2" y="405" width="6.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="397.16" y="415.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (30,303,030 samples, 0.09%)</title><rect x="51.3" y="373" width="1.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="54.28" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="587.5" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="590.51" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.12%)</title><rect x="580.6" y="293" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="583.63" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (131,313,130 samples, 0.40%)</title><rect x="1174.8" y="405" width="4.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1177.79" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="207.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.06%)</title><rect x="21.2" y="421" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="24.22" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.12%)</title><rect x="1129.5" y="357" width="1.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1132.53" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.52%)</title><rect x="570.5" y="389" width="6.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="573.49" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="111.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.03%)</title><rect x="39.3" y="389" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="42.33" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="63.6" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.59" y="175.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="341" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.02" y="351.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (10,101,010 samples, 0.03%)</title><rect x="36.1" y="389" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="39.07" y="399.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="586.8" y="341" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="589.78" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="223.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="893.1" y="357" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="896.10" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1173.0" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.98" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1137.5" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.50" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="10.7" y="469" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.37%)</title><rect x="346.4" y="341" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="349.37" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.7" y="85" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.66" y="95.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (666,666,660 samples, 2.03%)</title><rect x="329.3" y="421" width="23.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="332.35" y="431.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="893.5" y="309" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.46" y="319.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (80,808,080 samples, 0.25%)</title><rect x="334.8" y="389" width="2.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="337.78" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="229" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="239.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (171,717,170 samples, 0.52%)</title><rect x="353.6" y="421" width="6.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="356.61" y="431.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="405" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.64" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="891.7" y="357" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="894.65" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1167.9" y="373" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.91" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1157.1" y="421" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1160.05" y="431.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.18%)</title><rect x="36.8" y="357" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="39.79" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="277" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="287.5" ></text>
</g>
<g >
<title>sim::Process::operator (21,353,535,140 samples, 64.87%)</title><rect x="359.8" y="421" width="765.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="362.76" y="431.5" >sim::Process::operator</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="38.2" y="69" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="41.24" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1170.8" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.81" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.03%)</title><rect x="67.2" y="389" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="70.21" y="399.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (40,404,040 samples, 0.12%)</title><rect x="67.6" y="389" width="1.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="70.57" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="19.8" y="389" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.78" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="36.4" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.43" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (242,424,240 samples, 0.74%)</title><rect x="54.2" y="357" width="8.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="57.17" y="367.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.03%)</title><rect x="340.9" y="357" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="343.94" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::create_packet (20,202,020 samples, 0.06%)</title><rect x="577.4" y="373" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="580.37" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.28%)</title><rect x="347.5" y="293" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.45" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1130.3" y="277" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1133.26" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.18%)</title><rect x="342.7" y="357" width="2.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="345.75" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="575.9" y="357" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="578.92" y="367.5" ></text>
</g>
<g >
<title>operator new (292,929,290 samples, 0.89%)</title><rect x="742.8" y="389" width="10.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="745.84" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1159.2" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.22" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="37.2" y="117" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.16" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="575.6" y="261" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="578.56" y="271.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="897.8" y="341" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="900.81" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="261" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1191.91" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="335.5" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="338.50" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="1174.4" y="405" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1177.43" y="415.5" ></text>
</g>
<g >
<title>sim::Process::~Process (111,111,110 samples, 0.34%)</title><rect x="238.5" y="437" width="4.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="241.47" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="891.3" y="373" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="894.29" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="572.3" y="373" width="3.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="575.30" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="159.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (656,565,650 samples, 1.99%)</title><rect x="1127.0" y="405" width="23.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1130.00" y="415.5" >s..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="593.7" y="325" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="596.66" y="335.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="630.6" y="389" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="633.60" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="223.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.06%)</title><rect x="36.1" y="405" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="39.07" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,181,818,140 samples, 12.70%)</title><rect x="86.0" y="437" width="149.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="89.04" y="447.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>__close_nocancel (10,101,010 samples, 0.03%)</title><rect x="36.1" y="357" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="39.07" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="588.6" y="357" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="591.59" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="277" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.38" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (191,919,190 samples, 0.58%)</title><rect x="576.6" y="389" width="6.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="579.65" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="569.0" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="572.04" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.03%)</title><rect x="388.4" y="405" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="391.37" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="886.2" y="277" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="889.22" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="580.6" y="245" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.63" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="569.0" y="389" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="572.04" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="389" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (50,505,050 samples, 0.15%)</title><rect x="1171.9" y="405" width="1.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1174.90" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="830.1" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="833.10" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="197" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.83" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,909,090 samples, 0.28%)</title><rect x="1159.6" y="405" width="3.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1162.59" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="149" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="319.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.03%)</title><rect x="75.5" y="373" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="78.54" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.19" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="245" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="1171.5" y="405" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1174.53" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="68.7" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.66" y="111.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="437" width="3.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.02" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.21%)</title><rect x="1177.0" y="373" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.97" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="342.4" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="345.38" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="10.7" y="453" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="830.1" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="833.10" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.25%)</title><rect x="1186.4" y="293" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.38" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="572.3" y="309" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="575.30" y="319.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="582.1" y="309" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="585.08" y="319.5" ></text>
</g>
<g >
<title>_IO_file_fopen (40,404,040 samples, 0.12%)</title><rect x="67.6" y="357" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="70.57" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="261" width="1.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.38" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="730.9" y="373" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="733.89" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (70,707,070 samples, 0.21%)</title><rect x="1177.0" y="389" width="2.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1179.97" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (202,020,200 samples, 0.61%)</title><rect x="11.1" y="405" width="7.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.09" y="415.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.12%)</title><rect x="629.1" y="389" width="1.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="632.15" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="421" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.28" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="53.4" y="389" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="56.45" y="399.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (101,010,100 samples, 0.31%)</title><rect x="356.1" y="389" width="3.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="359.14" y="399.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.25%)</title><rect x="388.7" y="405" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="391.73" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="570.9" y="373" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="573.85" y="383.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="591.5" y="357" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="594.49" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.03%)</title><rect x="1131.7" y="373" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1134.71" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.03%)</title><rect x="569.8" y="357" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="572.77" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.03%)</title><rect x="343.8" y="325" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="346.83" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1159.2" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.22" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="36.4" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.43" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (25,424,242,170 samples, 77.23%)</title><rect x="242.5" y="437" width="911.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="245.45" y="447.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.03%)</title><rect x="587.9" y="325" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="590.87" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="261" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.83" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="357" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="389" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="207.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.09%)</title><rect x="571.2" y="373" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="574.22" y="383.5" ></text>
</g>
<g >
<title>cfree (242,424,240 samples, 0.74%)</title><rect x="854.0" y="373" width="8.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="857.00" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (60,606,060 samples, 0.18%)</title><rect x="600.5" y="405" width="2.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="603.54" y="415.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.03%)</title><rect x="1130.6" y="325" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1133.62" y="335.5" ></text>
</g>
<g >
<title>std::locale::operator= (20,202,020 samples, 0.06%)</title><rect x="340.2" y="341" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="343.21" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (70,707,070 samples, 0.21%)</title><rect x="338.8" y="373" width="2.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="341.76" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 0.68%)</title><rect x="321.4" y="405" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="324.38" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1159.2" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.22" y="399.5" ></text>
</g>
<g >
<title>cfree (131,313,130 samples, 0.40%)</title><rect x="13.3" y="373" width="4.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.26" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (60,606,060 samples, 0.18%)</title><rect x="65.0" y="421" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="68.04" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.31%)</title><rect x="572.3" y="341" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="575.30" y="351.5" ></text>
</g>
<g >
<title>Logger::get_instance (121,212,120 samples, 0.37%)</title><rect x="761.3" y="373" width="4.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="764.30" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 0.77%)</title><rect x="830.5" y="357" width="9.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="833.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (212,121,210 samples, 0.64%)</title><rect x="10.7" y="421" width="7.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="431.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.03%)</title><rect x="1147.6" y="373" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1150.64" y="383.5" ></text>
</g>
<g >
<title>Logger::warn (2,363,636,340 samples, 7.18%)</title><rect x="631.0" y="389" width="84.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="633.96" y="399.5" >Logger::w..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="592.6" y="341" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="595.58" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="892.0" y="357" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="895.01" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.46%)</title><rect x="1157.4" y="421" width="5.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1160.41" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (90,909,090 samples, 0.28%)</title><rect x="595.1" y="405" width="3.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="598.11" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1181.3" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.31" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1127.7" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.72" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="55.3" y="325" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="58.26" y="335.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.34%)</title><rect x="585.3" y="373" width="4.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="588.34" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (141,414,140 samples, 0.43%)</title><rect x="345.6" y="373" width="5.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="348.64" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1181.3" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.31" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="575.9" y="373" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="578.92" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="39.0" y="389" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="41.97" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="71.2" y="405" width="4.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="74.19" y="415.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (50,505,050 samples, 0.15%)</title><rect x="883.7" y="373" width="1.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="886.69" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="341" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.24" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,656,565,620 samples, 11.11%)</title><rect x="754.8" y="389" width="131.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="757.79" y="399.5" >sim::Link::get_p..</text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.31%)</title><rect x="572.3" y="325" width="3.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="575.30" y="335.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (80,808,080 samples, 0.25%)</title><rect x="1150.9" y="421" width="2.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1153.90" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="133" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.03%)</title><rect x="35.0" y="405" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="37.98" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="586.4" y="325" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="589.42" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (232,323,230 samples, 0.71%)</title><rect x="1136.8" y="373" width="8.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1139.78" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (262,626,260 samples, 0.80%)</title><rect x="41.1" y="373" width="9.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="44.14" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="207.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="580.6" y="309" width="1.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="583.63" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1158.9" y="405" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1161.86" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="586.8" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="589.78" y="335.5" ></text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.18%)</title><rect x="36.8" y="341" width="2.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="39.79" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="570.5" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="573.49" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="357" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1192.28" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (414,141,410 samples, 1.26%)</title><rect x="1110.3" y="389" width="14.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1113.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="191.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.25%)</title><rect x="1186.4" y="309" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.38" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="10.7" y="389" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.72" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.74%)</title><rect x="41.9" y="341" width="8.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.86" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="357" width="3.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.02" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="309" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="319.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="332.6" y="389" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="335.61" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="48.7" y="293" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.74" y="303.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="583.2" y="341" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="586.16" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="229" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (313,131,310 samples, 0.95%)</title><rect x="715.7" y="389" width="11.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="718.68" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="573.7" y="277" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.75" y="287.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (30,303,030 samples, 0.09%)</title><rect x="333.7" y="389" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="336.69" y="399.5" ></text>
</g>
<g >
<title>open64 (40,404,040 samples, 0.12%)</title><rect x="67.6" y="325" width="1.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="70.57" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1134.6" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.60" y="367.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="585.7" y="357" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="588.70" y="367.5" ></text>
</g>
<g >
<title>all (32,919,191,590 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="373" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.24" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.58%)</title><rect x="1138.2" y="309" width="6.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.22" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="330.8" y="405" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="333.80" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (32,898,989,570 samples, 99.94%)</title><rect x="10.7" y="501" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.72" y="511.5" >__libc_start_main</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (10,101,010 samples, 0.03%)</title><rect x="569.4" y="357" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="572.40" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="582.8" y="341" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="585.80" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1130.3" y="309" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.26" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.0" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.00" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="309" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="596.66" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="577.7" y="357" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="580.73" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="897.8" y="357" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="900.81" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (40,404,040 samples, 0.12%)</title><rect x="386.6" y="405" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="389.56" y="415.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.21%)</title><rect x="1177.0" y="357" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.97" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.34%)</title><rect x="14.0" y="357" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="16.98" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="350.0" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="352.99" y="271.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="896.7" y="357" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="899.72" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.28%)</title><rect x="1186.0" y="389" width="3.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1189.02" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (101,010,100 samples, 0.31%)</title><rect x="341.3" y="373" width="3.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="344.30" y="383.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.18%)</title><rect x="36.8" y="325" width="2.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="39.79" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="892.0" y="341" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="895.01" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="883.7" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="886.69" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.6" y="261" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.64" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (101,010,100 samples, 0.31%)</title><rect x="572.3" y="357" width="3.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="575.30" y="367.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (141,414,140 samples, 0.43%)</title><rect x="578.5" y="357" width="5.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="581.46" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packet_now (151,515,150 samples, 0.46%)</title><rect x="578.1" y="373" width="5.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="581.09" y="383.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.12%)</title><rect x="886.2" y="293" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="889.22" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.09%)</title><rect x="1186.7" y="245" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.74" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="586.1" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="589.06" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="571.9" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="574.94" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="1173.7" y="405" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1176.71" y="415.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="31.4" y="405" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="34.36" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="34.6" y="389" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="37.62" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="582.1" y="325" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="585.08" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.03%)</title><rect x="67.2" y="405" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="70.21" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (101,010,100 samples, 0.31%)</title><rect x="356.1" y="373" width="3.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="359.14" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="1183.5" y="421" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1186.48" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="261" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (32,898,989,570 samples, 99.94%)</title><rect x="10.7" y="485" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="495.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="95.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="133" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.55" y="143.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.25%)</title><rect x="79.5" y="437" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="82.52" y="447.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="594.0" y="357" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="597.03" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="319.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.21%)</title><rect x="1104.9" y="389" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1107.91" y="399.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="357" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1170.19" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1147.6" y="357" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.64" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="73.0" y="325" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.00" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1130.3" y="261" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1133.26" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.18%)</title><rect x="36.8" y="405" width="2.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="39.79" y="415.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.03%)</title><rect x="588.2" y="357" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="591.23" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.15%)</title><rect x="586.4" y="357" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="589.42" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="74.8" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="77.81" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>vsnprintf (202,020,200 samples, 0.61%)</title><rect x="1137.9" y="325" width="7.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1140.86" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.06%)</title><rect x="863.0" y="373" width="0.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="866.05" y="383.5" ></text>
</g>
<g >
<title>sim::SendData::operator (656,565,650 samples, 1.99%)</title><rect x="1127.0" y="421" width="23.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1130.00" y="431.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="19.4" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="37.9" y="85" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.88" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="223.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="229" width="0.3" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1189.38" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (252,525,250 samples, 0.77%)</title><rect x="53.8" y="373" width="9.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="56.81" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1161.0" y="341" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.03" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="18.3" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.33" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="36.1" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.07" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1186.0" y="293" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.02" y="303.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.03%)</title><rect x="10.7" y="373" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.72" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="36.4" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.43" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="287.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.03%)</title><rect x="897.8" y="373" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="900.81" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="570.5" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="573.49" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="14.3" y="341" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.34" y="351.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.18%)</title><rect x="36.8" y="389" width="2.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="39.79" y="399.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.21%)</title><rect x="738.5" y="389" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="741.49" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="339.8" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="342.85" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="892.0" y="373" width="1.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="895.01" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1148.0" y="389" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1151.00" y="399.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="62.9" y="373" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="65.86" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (878,787,870 samples, 2.67%)</title><rect x="1154.2" y="437" width="31.5" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1157.15" y="447.5" >si..</text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="52.4" y="373" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="55.36" y="383.5" ></text>
</g>
<g >
<title>malloc (494,949,490 samples, 1.50%)</title><rect x="865.6" y="357" width="17.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="868.58" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="388.0" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="391.01" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.06%)</title><rect x="1187.1" y="197" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.10" y="207.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.34%)</title><rect x="1186.0" y="453" width="4.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1189.02" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="593.7" y="341" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="596.66" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="337.3" y="341" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="340.32" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="570.1" y="389" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="573.13" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="580.6" y="261" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.63" y="271.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.21%)</title><rect x="893.5" y="325" width="2.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="896.46" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.03%)</title><rect x="337.7" y="389" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="340.68" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (292,929,290 samples, 0.89%)</title><rect x="53.8" y="389" width="10.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="56.81" y="399.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="358.7" y="357" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="361.68" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (50,505,050 samples, 0.15%)</title><rect x="353.6" y="405" width="1.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="356.61" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="591.5" y="341" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="594.49" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.43%)</title><rect x="878.3" y="341" width="5.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.25" y="351.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.03%)</title><rect x="887.7" y="341" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="890.67" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="35.3" y="357" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.35" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="593.7" y="357" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="596.66" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.28%)</title><rect x="347.5" y="277" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="350.45" y="287.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.03%)</title><rect x="887.7" y="357" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="890.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1168.6" y="245" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.64" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="67.9" y="117" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.93" y="127.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.25%)</title><rect x="1132.8" y="373" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1135.79" y="383.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="389" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.24" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="19.4" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.41" y="415.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.15%)</title><rect x="1161.0" y="373" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.03" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="37.2" y="101" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.16" y="111.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.12%)</title><rect x="886.2" y="357" width="1.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="889.22" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="346.0" y="341" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.00" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="63.2" y="373" width="1.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="66.22" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1136.8" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.78" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="67.6" y="229" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.57" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="892.7" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="895.74" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (404,040,400 samples, 1.23%)</title><rect x="839.5" y="373" width="14.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="842.51" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="359.4" y="341" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="362.40" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (40,404,040 samples, 0.12%)</title><rect x="886.2" y="325" width="1.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="889.22" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="343.1" y="341" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="346.11" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="589.3" y="309" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="592.32" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="1023.1" y="389" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1026.08" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.15%)</title><rect x="69.4" y="373" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="72.38" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.7" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.67" y="335.5" ></text>
</g>
<g >
<title>sim::Link::arrive (616,161,610 samples, 1.87%)</title><rect x="331.2" y="405" width="22.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="334.16" y="415.5" >s..</text>
</g>
<g >
<title>sim::Host::~Host (191,919,190 samples, 0.58%)</title><rect x="11.1" y="389" width="6.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.09" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="19.4" y="421" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.41" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="245" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.38" y="255.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1145.5" y="357" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1148.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="593.7" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="596.66" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1169.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1172.72" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (212,121,210 samples, 0.64%)</title><rect x="1137.5" y="341" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.50" y="351.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (60,606,060 samples, 0.18%)</title><rect x="885.9" y="389" width="2.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="888.86" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.06%)</title><rect x="1184.6" y="421" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1187.57" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="36.4" y="373" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="39.43" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="73.0" y="309" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.00" y="319.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="1129.9" y="341" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1132.90" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="287.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="884.4" y="341" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="887.41" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="1136.4" y="373" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1139.41" y="383.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.03%)</title><rect x="1186.7" y="213" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.74" y="223.5" ></text>
</g>
<g >
<title>sim::Host::process (747,474,740 samples, 2.27%)</title><rect x="568.3" y="405" width="26.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="571.32" y="415.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (242,424,240 samples, 0.74%)</title><rect x="67.2" y="437" width="8.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="70.21" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="149" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.55" y="159.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.18%)</title><rect x="350.7" y="373" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="353.71" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="887.3" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="890.31" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 0.71%)</title><rect x="54.5" y="341" width="8.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.54" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="229" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.25%)</title><rect x="60.0" y="293" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="62.97" y="303.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="213" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.83" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.28%)</title><rect x="579.5" y="341" width="3.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="582.54" y="351.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.21%)</title><rect x="1167.6" y="389" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1170.55" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1176.2" y="357" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.24" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="1132.1" y="389" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1135.07" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="40.8" y="373" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.78" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1176.6" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.60" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="579.5" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="582.54" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="149" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="277" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="830.1" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="833.10" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="580.3" y="325" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="583.27" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.31%)</title><rect x="879.7" y="325" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="882.70" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1170.19" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="31.4" y="389" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="34.36" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="18.0" y="373" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="20.97" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="245" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.91" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="352.2" y="341" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="355.16" y="351.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.03%)</title><rect x="1022.7" y="389" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1025.72" y="399.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.18%)</title><rect x="589.3" y="341" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="592.32" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (131,313,130 samples, 0.40%)</title><rect x="346.0" y="357" width="4.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="349.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="63.2" y="197" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.22" y="207.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.18%)</title><rect x="36.8" y="373" width="2.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="39.79" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="581.0" y="229" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.99" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="830.1" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="833.10" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1169.4" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.36" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="63.9" y="69" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="66.95" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1178.1" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.05" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.28%)</title><rect x="72.3" y="357" width="3.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="75.28" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="893.8" y="277" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="896.82" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (60,606,060 samples, 0.18%)</title><rect x="598.4" y="405" width="2.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="601.37" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (40,404,040 samples, 0.12%)</title><rect x="753.3" y="389" width="1.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="756.34" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1168.3" y="277" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.28" y="287.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.12%)</title><rect x="886.2" y="309" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="889.22" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1162.1" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.12" y="335.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1167.2" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1170.19" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="67.2" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.21" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="36.8" y="293" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="39.79" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="34.6" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="37.62" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="315.2" y="421" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="318.23" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="1177.0" y="341" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.97" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1178.4" y="325" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.41" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="587.5" y="341" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="590.51" y="351.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.09%)</title><rect x="385.5" y="405" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="388.47" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1135.3" y="357" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1138.33" y="367.5" ></text>
</g>
<g >
<title>_start (32,898,989,570 samples, 99.94%)</title><rect x="10.7" y="517" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.72" y="527.5" >_start</text>
</g>
</g>
</svg>
