<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.53" y="239.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="265.3" y="485" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="268.34" y="495.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="501" width="5.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.63" y="511.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.05%)</title><rect x="22.2" y="437" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="25.16" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="259.5" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="262.55" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 0.15%)</title><rect x="259.5" y="453" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="262.55" y="463.5" ></text>
</g>
<g >
<title>sim::Link::arrive (373,737,370 samples, 1.82%)</title><rect x="263.0" y="501" width="21.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="266.02" y="511.5" >s..</text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (60,606,060 samples, 0.29%)</title><rect x="1157.6" y="485" width="3.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1160.58" y="495.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.10%)</title><rect x="1185.9" y="341" width="1.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.95" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="373.6" y="485" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="376.61" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="101" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="111.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1148.3" y="501" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1151.31" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="377.7" y="453" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="380.66" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.63" y="335.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="1120.5" y="437" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1123.52" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="40.1" y="533" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.11" y="543.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="280.4" y="469" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="283.39" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.15%)</title><rect x="1184.2" y="373" width="1.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.21" y="383.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1176.1" y="485" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.10" y="495.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.29%)</title><rect x="374.2" y="469" width="3.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="377.19" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="212.6" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="215.65" y="527.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="36.6" y="469" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="39.63" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="533" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.42" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.49%)</title><rect x="24.5" y="197" width="5.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.47" y="207.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (292,929,290 samples, 1.42%)</title><rect x="759.2" y="453" width="16.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="762.22" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="274.6" y="453" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="277.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="840.3" y="469" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="843.28" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.05%)</title><rect x="22.2" y="453" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="25.16" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.39%)</title><rect x="267.1" y="485" width="4.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="270.08" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.15%)</title><rect x="1179.6" y="517" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.58" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1137.9" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.89" y="447.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="285.0" y="485" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="288.02" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="405" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1124.0" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.99" y="463.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (17,767,676,590 samples, 86.31%)</title><rect x="115.4" y="533" width="1018.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="118.38" y="543.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[libc.so.6] (20,575,757,370 samples, 99.95%)</title><rect x="10.6" y="581" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="591.5" >[libc.so.6]</text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.20%)</title><rect x="319.8" y="501" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="322.76" y="511.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1126.3" y="453" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1129.31" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.10%)</title><rect x="380.0" y="453" width="1.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="382.98" y="463.5" ></text>
</g>
<g >
<title>cfree (191,919,190 samples, 0.93%)</title><rect x="602.3" y="485" width="11.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="605.32" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.72%)</title><rect x="776.0" y="469" width="20.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="779.02" y="479.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="453" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.89" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1150.6" y="437" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.63" y="447.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="1121.1" y="453" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1124.10" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1178.4" y="485" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.42" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="898.2" y="469" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="901.18" y="479.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="897.6" y="437" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="900.61" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="357" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="373.0" y="469" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="376.03" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1137.9" y="453" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.89" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.10%)</title><rect x="1115.3" y="469" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1118.31" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="453" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="463.5" ></text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 0.39%)</title><rect x="102.1" y="533" width="4.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="105.06" y="543.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="1126.9" y="453" width="1.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1129.89" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="377.1" y="421" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="380.09" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="357" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="367.5" ></text>
</g>
<g >
<title>cfree (121,212,120 samples, 0.59%)</title><rect x="40.7" y="533" width="6.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="43.69" y="543.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="381.1" y="469" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="384.14" y="479.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1140.2" y="453" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.21" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="501" width="0.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1191.84" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.15%)</title><rect x="1184.2" y="341" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.21" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="325" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.68" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="501" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.05" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.79" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="389" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="374.8" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="377.77" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.79" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1156.4" y="501" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.42" y="511.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="370.1" y="469" width="1.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="373.14" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="437" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="32.0" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.00" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.98%)</title><rect x="10.6" y="549" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="840.9" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="843.86" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.05%)</title><rect x="843.2" y="421" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="846.18" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1150.6" y="453" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.63" y="463.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="293" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.68" y="303.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (383,838,380 samples, 1.86%)</title><rect x="262.4" y="517" width="22.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="265.44" y="527.5" >s..</text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="517" width="0.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1147.26" y="527.5" ></text>
</g>
<g >
<title>operator new (262,626,260 samples, 1.28%)</title><rect x="1085.2" y="485" width="15.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1088.20" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1161.1" y="485" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1164.05" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="212.6" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="215.65" y="479.5" ></text>
</g>
<g >
<title>open64 (131,313,130 samples, 0.64%)</title><rect x="22.7" y="421" width="7.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="25.74" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="357" width="1.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.11" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1176.1" y="453" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.10" y="463.5" ></text>
</g>
<g >
<title>_IO_file_open (131,313,130 samples, 0.64%)</title><rect x="22.7" y="437" width="7.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="25.74" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="758.6" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="761.65" y="431.5" ></text>
</g>
<g >
<title>sim::TcpFlow::~TcpFlow (80,808,080 samples, 0.39%)</title><rect x="12.9" y="485" width="4.6" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="15.89" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="282.1" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="285.13" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.79" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (40,404,040 samples, 0.20%)</title><rect x="1119.4" y="469" width="2.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1122.36" y="479.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="309" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.68" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.15%)</title><rect x="1184.2" y="357" width="1.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.21" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.59%)</title><rect x="23.3" y="277" width="7.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.32" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="843.2" y="437" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="846.18" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.39%)</title><rect x="1184.2" y="389" width="4.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.21" y="399.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="517" width="5.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.63" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1157.0" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.00" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1162.2" y="501" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1165.21" y="511.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (30,303,030 samples, 0.15%)</title><rect x="259.5" y="485" width="1.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="262.55" y="495.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1114.2" y="421" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1117.15" y="431.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1185.9" y="325" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.95" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1135.6" y="501" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.57" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="309" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1136.7" y="485" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1139.73" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="33.7" y="405" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.74" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="369.6" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="372.56" y="479.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1157.0" y="501" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.00" y="511.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (131,313,130 samples, 0.64%)</title><rect x="374.2" y="485" width="7.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="377.19" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.10%)</title><rect x="380.0" y="437" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="382.98" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="28.5" y="133" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.53" y="143.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (90,909,090 samples, 0.44%)</title><rect x="32.6" y="485" width="5.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="35.58" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="212.6" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="215.65" y="511.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.49%)</title><rect x="314.0" y="501" width="5.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="316.97" y="511.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (20,202,020 samples, 0.10%)</title><rect x="284.4" y="517" width="1.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="287.45" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.74" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.54%)</title><rect x="23.9" y="229" width="6.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.90" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.05%)</title><rect x="279.2" y="421" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="282.23" y="431.5" ></text>
</g>
<g >
<title>malloc (282,828,280 samples, 1.37%)</title><rect x="822.3" y="453" width="16.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="825.34" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="421" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.44%)</title><rect x="608.1" y="469" width="5.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="611.11" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="31.4" y="501" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="34.42" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.34%)</title><rect x="32.6" y="437" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.58" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.00" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="369.0" y="485" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="371.98" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="399.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.15%)</title><rect x="1117.0" y="485" width="1.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1120.05" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="376.5" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="379.51" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="272.9" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="275.87" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1114.2" y="437" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1117.15" y="447.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.05%)</title><rect x="839.1" y="469" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="842.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="30.8" y="501" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="33.84" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="22.2" y="469" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="25.16" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1135.0" y="517" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1138.00" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="373" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::PushIndentTo (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="309" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1188.37" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.15%)</title><rect x="281.6" y="469" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="284.55" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (232,323,230 samples, 1.13%)</title><rect x="558.9" y="469" width="13.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="561.89" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.10%)</title><rect x="1117.6" y="469" width="1.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1120.63" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.53" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (171,717,170 samples, 0.83%)</title><rect x="393.9" y="501" width="9.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="396.88" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.25%)</title><rect x="1125.7" y="469" width="2.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1128.73" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="33.7" y="421" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.74" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1159.9" y="469" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1162.89" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="21.6" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.58" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.53" y="319.5" ></text>
</g>
<g >
<title>operator new (141,414,140 samples, 0.69%)</title><rect x="618.5" y="485" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="621.53" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="447.5" ></text>
</g>
<g >
<title>sim::Generate::operator (80,808,080 samples, 0.39%)</title><rect x="257.8" y="517" width="4.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="260.81" y="527.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.34%)</title><rect x="614.5" y="485" width="4.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="617.47" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="35.5" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="38.48" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (30,303,030 samples, 0.15%)</title><rect x="259.5" y="501" width="1.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="262.55" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1159.3" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.31" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.74" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="262.4" y="501" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="265.44" y="511.5" ></text>
</g>
<g >
<title>sim::Event::get_time (10,101,010 samples, 0.05%)</title><rect x="50.5" y="533" width="0.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="53.53" y="543.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (50,505,050 samples, 0.25%)</title><rect x="895.9" y="485" width="2.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="898.87" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1158.7" y="437" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1161.73" y="447.5" ></text>
</g>
<g >
<title>sim::Process::operator (14,212,121,070 samples, 69.04%)</title><rect x="285.6" y="517" width="814.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="288.60" y="527.5" >sim::Process::operator</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1106.0" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.05" y="479.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="517" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1191.84" y="527.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="260.1" y="421" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="263.13" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="31.4" y="485" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="34.42" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (191,919,190 samples, 0.93%)</title><rect x="272.3" y="485" width="11.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="275.29" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (70,707,070 samples, 0.34%)</title><rect x="386.9" y="501" width="4.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="389.93" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.53" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="261.9" y="469" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="264.86" y="479.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="517" width="0.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1186.05" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="255.5" ></text>
</g>
<g >
<title>sim::Link::transmit (10,101,010 samples, 0.05%)</title><rect x="285.0" y="501" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="288.02" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="371.9" y="469" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="374.87" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1151.8" y="453" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.79" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.15%)</title><rect x="1170.3" y="485" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1173.31" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1184.2" y="261" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.21" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="373" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1186.63" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.2" y="485" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1132.21" y="495.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="375.3" y="421" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="378.35" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.59%)</title><rect x="23.3" y="261" width="7.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.32" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.59%)</title><rect x="23.3" y="309" width="7.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.32" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1182.5" y="501" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.47" y="511.5" ></text>
</g>
<g >
<title>sim::Process::~Process (151,515,150 samples, 0.74%)</title><rect x="106.7" y="533" width="8.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="109.69" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (90,909,090 samples, 0.44%)</title><rect x="644.0" y="469" width="5.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="647.00" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="838.5" y="469" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="841.55" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (50,505,050 samples, 0.25%)</title><rect x="391.0" y="501" width="2.9" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="393.98" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="325" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1184.2" y="293" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.21" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 0.98%)</title><rect x="10.6" y="517" width="11.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="37.2" y="469" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="40.21" y="479.5" ></text>
</g>
<g >
<title>cfree (686,868,680 samples, 3.34%)</title><rect x="213.8" y="517" width="39.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="216.81" y="527.5" >cfree</text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.93%)</title><rect x="802.6" y="453" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="805.65" y="463.5" ></text>
</g>
<g >
<title>fopen (131,313,130 samples, 0.64%)</title><rect x="22.7" y="469" width="7.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="25.74" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="374.8" y="437" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="377.77" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (80,808,080 samples, 0.39%)</title><rect x="1157.6" y="501" width="4.6" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1160.58" y="511.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (191,919,190 samples, 0.93%)</title><rect x="1105.5" y="485" width="11.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1108.47" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="29.7" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.69" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (90,909,090 samples, 0.44%)</title><rect x="1172.6" y="501" width="5.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1175.63" y="511.5" ></text>
</g>
<g >
<title>sim::Switch::process (20,202,020 samples, 0.10%)</title><rect x="1129.8" y="517" width="1.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1132.78" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="272.9" y="453" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="275.87" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (131,313,130 samples, 0.64%)</title><rect x="22.7" y="341" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.74" y="351.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1168.6" y="485" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.58" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 1.57%)</title><rect x="234.7" y="501" width="18.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="237.65" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="12.9" y="453" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.89" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (101,010,100 samples, 0.49%)</title><rect x="32.0" y="501" width="5.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="35.00" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 0.10%)</title><rect x="1187.7" y="277" width="1.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.68" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="197" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1142.5" y="405" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.52" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1125.2" y="469" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.15" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="282.1" y="453" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="285.13" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="374.2" y="453" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="377.19" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1117.0" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1120.05" y="479.5" ></text>
</g>
<g >
<title>sim::SendData::operator (434,343,430 samples, 2.11%)</title><rect x="1104.9" y="517" width="24.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1107.89" y="527.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,717,171,680 samples, 18.06%)</title><rect x="626.6" y="485" width="213.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="629.63" y="495.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="437" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.89" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.79" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (282,828,280 samples, 1.37%)</title><rect x="22.2" y="517" width="16.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="25.16" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (80,808,080 samples, 0.39%)</title><rect x="1138.5" y="485" width="4.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1141.47" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.25%)</title><rect x="1185.9" y="373" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.95" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.05%)</title><rect x="1172.1" y="501" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1175.05" y="511.5" ></text>
</g>
<g >
<title>__libc_start_main (20,575,757,370 samples, 99.95%)</title><rect x="10.6" y="597" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.58" y="607.5" >__libc_start_main</text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="325" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1188.37" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="549" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.05%)</title><rect x="30.3" y="485" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="33.26" y="495.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="283.3" y="485" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="286.29" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="843.2" y="453" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="846.18" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="325" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1140.8" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1143.79" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.05%)</title><rect x="101.5" y="533" width="0.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="104.48" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="272.3" y="453" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="275.29" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="22.2" y="421" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.16" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1137.9" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.89" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (30,303,030 samples, 0.15%)</title><rect x="1181.3" y="517" width="1.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.32" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="325" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.11" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="281.6" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="284.55" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.10%)</title><rect x="1162.8" y="501" width="1.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1165.79" y="511.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.05%)</title><rect x="37.8" y="469" width="0.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="40.79" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1171.5" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.47" y="431.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.39%)</title><rect x="12.9" y="469" width="4.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.89" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="260.7" y="405" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="263.71" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="259.5" y="437" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="262.55" y="447.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="12.3" y="485" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="15.32" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.34%)</title><rect x="32.6" y="469" width="4.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.58" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.15%)</title><rect x="278.1" y="453" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="281.08" y="463.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (30,303,030 samples, 0.15%)</title><rect x="378.2" y="453" width="1.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="381.24" y="463.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.10%)</title><rect x="1185.9" y="357" width="1.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.95" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="271.1" y="469" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="274.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="313.4" y="501" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="316.40" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.98%)</title><rect x="10.6" y="565" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="1150.0" y="469" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.05" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="277" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.37" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.34%)</title><rect x="26.2" y="181" width="4.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.21" y="191.5" ></text>
</g>
<g >
<title>vsnprintf (70,707,070 samples, 0.34%)</title><rect x="32.6" y="453" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="35.58" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="399.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (232,323,230 samples, 1.13%)</title><rect x="354.5" y="501" width="13.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="357.50" y="511.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1158.2" y="453" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1161.16" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="30.3" y="469" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="33.26" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1117.0" y="453" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1120.05" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="375.9" y="437" width="1.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="378.93" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (434,343,430 samples, 2.11%)</title><rect x="1104.9" y="501" width="24.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1107.89" y="511.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.15%)</title><rect x="28.5" y="149" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="31.53" y="159.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1184.2" y="277" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.21" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1168.6" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.58" y="479.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (282,828,280 samples, 1.37%)</title><rect x="22.2" y="533" width="16.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="25.16" y="543.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1120.5" y="453" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1123.52" y="463.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1149.5" y="501" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1152.47" y="511.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="260.1" y="437" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="263.13" y="447.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.25%)</title><rect x="374.8" y="453" width="2.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="377.77" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="133" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="143.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (30,303,030 samples, 0.15%)</title><rect x="1152.9" y="501" width="1.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1155.94" y="511.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.25%)</title><rect x="47.6" y="533" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="50.63" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="485" width="5.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.63" y="495.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="259.0" y="501" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="261.97" y="511.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.10%)</title><rect x="839.7" y="485" width="1.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="842.71" y="495.5" ></text>
</g>
<g >
<title>main (20,373,737,170 samples, 98.97%)</title><rect x="22.2" y="565" width="1167.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="25.16" y="575.5" >main</text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="1104.9" y="485" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1107.89" y="495.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="469" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (121,212,120 samples, 0.59%)</title><rect x="273.4" y="469" width="7.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="276.44" y="479.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (19,979,797,780 samples, 97.06%)</title><rect x="38.4" y="549" width="1145.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="41.37" y="559.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1168.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1171.00" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.05%)</title><rect x="37.8" y="485" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="40.79" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.34%)</title><rect x="841.4" y="485" width="4.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="844.44" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="335.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="533" width="5.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.63" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.05%)</title><rect x="278.7" y="437" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="281.66" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (171,717,170 samples, 0.83%)</title><rect x="12.3" y="501" width="9.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.32" y="511.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.25%)</title><rect x="1150.0" y="501" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.05" y="511.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (838,383,830 samples, 4.07%)</title><rect x="845.5" y="485" width="48.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="848.50" y="495.5" >sim:..</text>
</g>
<g >
<title>utils::create_all_directories (10,101,010 samples, 0.05%)</title><rect x="37.8" y="501" width="0.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="40.79" y="511.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 0.98%)</title><rect x="10.6" y="533" width="11.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.58" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="758.6" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="761.65" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="279.8" y="453" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="282.81" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (878,787,870 samples, 4.27%)</title><rect x="51.1" y="533" width="50.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="54.11" y="543.5" >sim::..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="229" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.79" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,737,373,720 samples, 8.44%)</title><rect x="898.8" y="485" width="99.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="901.76" y="495.5" >std::_Rb_tre..</text>
</g>
<g >
<title>sim::Host::process (262,626,260 samples, 1.28%)</title><rect x="367.8" y="501" width="15.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="370.82" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="22.2" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="25.16" y="415.5" ></text>
</g>
<g >
<title>sim::Event::Event (30,303,030 samples, 0.15%)</title><rect x="322.1" y="501" width="1.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="325.08" y="511.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="1128.6" y="485" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1131.63" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (282,828,280 samples, 1.37%)</title><rect x="22.2" y="549" width="16.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="25.16" y="559.5" ></text>
</g>
<g >
<title>strlen@plt (50,505,050 samples, 0.25%)</title><rect x="998.4" y="485" width="2.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1001.35" y="495.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="21.0" y="469" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="24.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1150.6" y="405" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.63" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="29.7" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.69" y="127.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1125.7" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1128.73" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="389" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1084.6" y="485" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1087.62" y="495.5" ></text>
</g>
<g >
<title>Logger::warn (2,494,949,470 samples, 12.12%)</title><rect x="429.2" y="485" width="143.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="432.20" y="495.5" >Logger::warn</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.79" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="69" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="79.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="428.0" y="485" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="431.04" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1140.2" y="469" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.21" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1182.5" y="485" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1185.47" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="245" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.79" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.05%)</title><rect x="260.7" y="389" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="263.71" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="85" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="29.7" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.69" y="95.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="533" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.84" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (20,202,020 samples, 0.10%)</title><rect x="1119.4" y="453" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1122.36" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="437" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="447.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="813.7" y="469" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="816.65" y="479.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (131,313,130 samples, 0.64%)</title><rect x="22.7" y="485" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="25.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,909,090 samples, 0.44%)</title><rect x="1166.8" y="501" width="5.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1169.84" y="511.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.10%)</title><rect x="1143.1" y="501" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1146.10" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="37" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="213.2" y="517" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="216.23" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="626.1" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="629.05" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="303.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1141.4" y="453" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.36" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (535,353,530 samples, 2.60%)</title><rect x="323.8" y="501" width="30.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="326.82" y="511.5" >si..</text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="265.3" y="469" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="268.34" y="479.5" ></text>
</g>
<g >
<title>cfree (303,030,300 samples, 1.47%)</title><rect x="796.3" y="469" width="17.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="799.28" y="479.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="372.5" y="469" width="0.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="375.45" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.54%)</title><rect x="23.9" y="213" width="6.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.90" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 0.10%)</title><rect x="897.0" y="469" width="1.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="900.03" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (70,707,070 samples, 0.34%)</title><rect x="382.9" y="501" width="4.0" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="385.88" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.59%)</title><rect x="23.3" y="245" width="7.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.32" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.53" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.54%)</title><rect x="1183.6" y="549" width="6.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.63" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="1178.4" y="501" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1181.42" y="511.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (151,515,150 samples, 0.74%)</title><rect x="1106.6" y="469" width="8.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1109.62" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.10%)</title><rect x="11.2" y="453" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.16" y="463.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,424,242,320 samples, 50.64%)</title><rect x="403.7" y="501" width="597.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="406.72" y="511.5" >sim::Switch::process</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="261.9" y="485" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="264.86" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.15%)</title><rect x="10.6" y="485" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.58" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (30,303,030 samples, 0.15%)</title><rect x="10.6" y="469" width="1.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.58" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1169.2" y="453" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.16" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.20%)</title><rect x="893.6" y="485" width="2.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="896.55" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="16.4" y="421" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.37" y="431.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (20,202,020 samples, 0.10%)</title><rect x="380.0" y="469" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="382.98" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="282.7" y="437" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="285.71" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1161.6" y="485" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1164.63" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.83%)</title><rect x="1118.8" y="485" width="9.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1121.78" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.10%)</title><rect x="1150.6" y="421" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1153.63" y="431.5" ></text>
</g>
<g >
<title>Logger::info (2,212,121,190 samples, 10.75%)</title><rect x="649.2" y="469" width="126.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="652.21" y="479.5" >Logger::info</text>
</g>
<g >
<title>operator new (353,535,350 samples, 1.72%)</title><rect x="818.3" y="469" width="20.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="821.28" y="479.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1176.1" y="469" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.10" y="479.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="840.3" y="453" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="843.28" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (121,212,120 samples, 0.59%)</title><rect x="1136.2" y="501" width="6.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1139.15" y="511.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.05%)</title><rect x="369.6" y="485" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="372.56" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.05%)</title><rect x="271.7" y="485" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="274.71" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="453" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.05" y="463.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.05%)</title><rect x="22.2" y="501" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="25.16" y="511.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="368.4" y="485" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="371.40" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="30.3" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.26" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1142.5" y="389" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.52" y="399.5" ></text>
</g>
<g >
<title>nons (20,585,858,380 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >nons</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="382.3" y="469" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="385.30" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="485" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.05" y="495.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.10%)</title><rect x="843.8" y="453" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="846.76" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.39%)</title><rect x="12.9" y="437" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.89" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (40,404,040 samples, 0.20%)</title><rect x="377.7" y="469" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="380.66" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="165" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="29.7" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="32.69" y="79.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.15%)</title><rect x="1187.1" y="341" width="1.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.11" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.15%)</title><rect x="1177.8" y="517" width="1.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1180.84" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1114.7" y="453" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1117.73" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1136.2" y="485" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1139.15" y="495.5" ></text>
</g>
<g >
<title>all (20,585,858,380 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1162.2" y="485" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1165.21" y="495.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1170.9" y="469" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.89" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.05%)</title><rect x="283.9" y="485" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="286.87" y="495.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (50,505,050 samples, 0.25%)</title><rect x="1130.9" y="517" width="2.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1133.94" y="527.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.20%)</title><rect x="842.6" y="469" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="845.60" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1162.2" y="469" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.21" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1169.2" y="469" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.16" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.29%)</title><rect x="1121.7" y="469" width="3.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1124.68" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1148.3" y="485" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.31" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.63" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="421" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="431.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="613.3" y="485" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="616.32" y="495.5" ></text>
</g>
<g >
<title>sim::Process::~Process (80,808,080 samples, 0.39%)</title><rect x="1100.3" y="517" width="4.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1103.26" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.53" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="844.9" y="469" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="847.92" y="479.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (575,757,570 samples, 2.80%)</title><rect x="1144.8" y="517" width="33.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1147.84" y="527.5" >si..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.29%)</title><rect x="370.1" y="485" width="3.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="373.14" y="495.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (151,515,150 samples, 0.74%)</title><rect x="1135.6" y="517" width="8.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1138.57" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="626.1" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="629.05" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.25%)</title><rect x="27.4" y="165" width="2.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="30.37" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (80,808,080 samples, 0.39%)</title><rect x="17.5" y="485" width="4.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="20.53" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="381.7" y="485" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="384.72" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="36.1" y="373" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.05" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (868,686,860 samples, 4.22%)</title><rect x="1133.8" y="533" width="49.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1136.84" y="543.5" >sim::..</text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1129.2" y="469" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1132.21" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (525,252,520 samples, 2.55%)</title><rect x="572.2" y="485" width="30.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="575.21" y="495.5" >[l..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="1124.6" y="453" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1127.57" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="758.6" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="761.65" y="447.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.05%)</title><rect x="1116.5" y="485" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1119.47" y="495.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="309" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1190.11" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="53" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="63.5" ></text>
</g>
<g >
<title>_IO_file_fopen (131,313,130 samples, 0.64%)</title><rect x="22.7" y="453" width="7.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="25.74" y="463.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.25%)</title><rect x="1150.0" y="485" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.05" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.15%)</title><rect x="378.2" y="437" width="1.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="381.24" y="447.5" ></text>
</g>
<g >
<title>malloc (181,818,180 samples, 0.88%)</title><rect x="1089.8" y="469" width="10.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1092.83" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="10.6" y="501" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="279.2" y="437" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="282.23" y="447.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1184.2" y="325" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.21" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.05" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="212.6" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="215.65" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="370.7" y="453" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="373.72" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="117" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="127.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="842.0" y="469" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="845.02" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1177.3" y="341" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.26" y="351.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (30,303,030 samples, 0.15%)</title><rect x="259.5" y="469" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="262.55" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="293" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.37" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.37" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1127.5" y="437" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1130.47" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="838.5" y="453" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="841.55" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="838.5" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="841.55" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="389" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1186.63" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1154.1" y="469" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.10" y="479.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.25%)</title><rect x="815.4" y="469" width="2.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="818.39" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.15%)</title><rect x="1141.4" y="469" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1144.36" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1151.2" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1154.21" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,404,040 samples, 0.20%)</title><rect x="268.8" y="453" width="2.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="271.81" y="463.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1186.5" y="325" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.53" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (30,303,030 samples, 0.15%)</title><rect x="1152.9" y="485" width="1.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1155.94" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (50,505,050 samples, 0.25%)</title><rect x="1163.9" y="501" width="2.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1166.95" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="565" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="485" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.84" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1128.0" y="437" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1131.05" y="447.5" ></text>
</g>
<g >
<title>malloc (131,313,130 samples, 0.64%)</title><rect x="619.1" y="469" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="622.11" y="479.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="272.3" y="469" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="275.29" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.44%)</title><rect x="1183.6" y="405" width="5.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="149" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="159.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="357" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1186.63" y="367.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.10%)</title><rect x="265.9" y="485" width="1.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="268.92" y="495.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.05%)</title><rect x="22.2" y="485" width="0.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="25.16" y="495.5" ></text>
</g>
<g >
<title>Logger::warn (20,202,020 samples, 0.10%)</title><rect x="312.2" y="501" width="1.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="315.24" y="511.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (80,808,080 samples, 0.39%)</title><rect x="253.2" y="517" width="4.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="256.18" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (141,414,140 samples, 0.69%)</title><rect x="22.7" y="501" width="8.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="25.74" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.10%)</title><rect x="1184.2" y="309" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.21" y="319.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="897.6" y="453" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="900.61" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1137.3" y="485" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1140.31" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="30.3" y="453" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="33.26" y="463.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1158.2" y="469" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1161.16" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.20%)</title><rect x="425.7" y="485" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="428.72" y="495.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="840.9" y="485" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="843.86" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="213" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.37" y="223.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (50,505,050 samples, 0.25%)</title><rect x="268.2" y="469" width="2.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="271.23" y="479.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (20,202,020 samples, 0.10%)</title><rect x="261.3" y="501" width="1.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="264.29" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="758.6" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="761.65" y="415.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1141.4" y="437" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1144.36" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1141.4" y="421" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.36" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_from (30,303,030 samples, 0.15%)</title><rect x="1154.7" y="501" width="1.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1157.68" y="511.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,727,272,710 samples, 8.39%)</title><rect x="1001.2" y="501" width="99.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1004.25" y="511.5" >void sim::S..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.59%)</title><rect x="23.3" y="293" width="7.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.32" y="303.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1160.5" y="469" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1163.47" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (10,101,010 samples, 0.05%)</title><rect x="382.3" y="485" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="385.30" y="495.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="1114.2" y="453" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1117.15" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="37.8" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="40.79" y="431.5" ></text>
</g>
<g >
<title>_start (20,575,757,370 samples, 99.95%)</title><rect x="10.6" y="613" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.58" y="623.5" >_start</text>
</g>
</g>
</svg>
