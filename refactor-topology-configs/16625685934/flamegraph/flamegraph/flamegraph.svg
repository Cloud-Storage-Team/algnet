<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>strchrnul@plt (10,101,010 samples, 0.05%)</title><rect x="1104.2" y="277" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1107.24" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1138.0" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.04" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="111.4" y="341" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="114.41" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="207.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (60,606,060 samples, 0.32%)</title><rect x="1091.1" y="341" width="3.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1094.09" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.63" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.53%)</title><rect x="18.1" y="309" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.14" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1131.8" y="389" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1134.78" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.05%)</title><rect x="369.9" y="341" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="372.95" y="351.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.11%)</title><rect x="56.3" y="325" width="1.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="59.32" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="859.5" y="325" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="862.47" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1137.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1140.42" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="197" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="867.0" y="309" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="869.99" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::SimplePacketQueue (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1192.37" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="373" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.75" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="1153.7" y="277" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.69" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="55.7" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="58.70" y="351.5" ></text>
</g>
<g >
<title>fopen (30,303,030 samples, 0.16%)</title><rect x="107.0" y="341" width="1.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="110.03" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.17%)</title><rect x="11.3" y="421" width="13.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="852.0" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="854.96" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.17%)</title><rect x="800.6" y="341" width="13.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="803.63" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (20,202,020 samples, 0.11%)</title><rect x="1141.8" y="357" width="1.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1144.80" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.16%)</title><rect x="1184.4" y="229" width="1.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.37" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1136.8" y="293" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.79" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.37" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="362.4" y="213" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.44" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="29.4" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.41" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="863.2" y="341" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="866.23" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (363,636,360 samples, 1.91%)</title><rect x="61.3" y="373" width="22.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="64.33" y="383.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="107.7" y="69" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.66" y="79.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.11%)</title><rect x="367.4" y="261" width="1.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="370.44" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="225.3" y="293" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="228.34" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.16%)</title><rect x="217.8" y="341" width="1.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="220.83" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="437" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1126.64" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="359.3" y="213" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="362.31" y="223.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,323,232,310 samples, 6.95%)</title><rect x="25.0" y="405" width="82.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="28.02" y="415.5" >sim::Link..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1134.3" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.29" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,626,262,470 samples, 82.07%)</title><rect x="159.0" y="405" width="968.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="161.99" y="415.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>all (19,040,403,850 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="112.7" y="277" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.66" y="287.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="1136.8" y="357" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1139.79" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="255.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="877.6" y="325" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="880.63" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="181" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="213" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.05%)</title><rect x="373.1" y="357" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="376.08" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="143.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="1136.8" y="341" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1139.79" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="115.2" y="261" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="118.17" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (19,020,201,830 samples, 99.89%)</title><rect x="11.3" y="469" width="1178.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.25" y="479.5" >__libc_start_main</text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1174.4" y="325" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.35" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="245" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.11" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.05%)</title><rect x="370.6" y="309" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="373.57" y="319.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (40,404,040 samples, 0.21%)</title><rect x="1118.0" y="325" width="2.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1121.01" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="368.7" y="293" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="371.69" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="325" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="335.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="81.4" y="341" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="84.36" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="191.5" ></text>
</g>
<g >
<title>writev (20,202,020 samples, 0.11%)</title><rect x="82.6" y="325" width="1.3" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="85.62" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (424,242,420 samples, 2.23%)</title><rect x="600.3" y="357" width="26.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="603.31" y="367.5" >[..</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="50.7" y="373" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="53.69" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="261" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="271.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.27%)</title><rect x="1159.3" y="341" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.33" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1101.7" y="245" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.73" y="255.5" ></text>
</g>
<g >
<title>operator new (111,111,110 samples, 0.58%)</title><rect x="1149.9" y="373" width="6.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1152.94" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1140.5" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.55" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="353.0" y="325" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="356.05" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="1153.1" y="309" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.07" y="319.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (888,888,880 samples, 4.67%)</title><rect x="1128.0" y="405" width="55.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1131.03" y="415.5" >sim::..</text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1158.1" y="373" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1161.07" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="241.0" y="325" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="243.99" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.21%)</title><rect x="366.8" y="325" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="369.82" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="227.2" y="325" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="230.22" y="335.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (30,303,030 samples, 0.16%)</title><rect x="1121.8" y="341" width="1.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1124.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="277" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="389" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.02" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="1120.5" y="357" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1123.51" y="367.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.37%)</title><rect x="308.0" y="373" width="4.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="310.97" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (30,303,030 samples, 0.16%)</title><rect x="54.4" y="373" width="1.9" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="57.45" y="383.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,434,343,300 samples, 70.56%)</title><rect x="250.4" y="389" width="832.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="253.38" y="399.5" >sim::Process::operator</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="244.7" y="325" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="247.75" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.21%)</title><rect x="362.4" y="261" width="2.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="365.44" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1156.2" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.20" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.53%)</title><rect x="869.5" y="277" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="872.49" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (30,303,030 samples, 0.16%)</title><rect x="217.8" y="325" width="1.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="220.83" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="453" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.32%)</title><rect x="644.8" y="357" width="3.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="647.76" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.53%)</title><rect x="1136.8" y="373" width="6.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1139.79" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.40" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="149" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="159.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.05%)</title><rect x="455.1" y="357" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="458.08" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.5" y="117" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.50" y="127.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (313,131,310 samples, 1.64%)</title><rect x="64.5" y="357" width="19.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="67.46" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1009.1" y="373" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1012.09" y="383.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="1094.8" y="357" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1097.85" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.05%)</title><rect x="24.4" y="405" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="27.40" y="415.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (60,606,060 samples, 0.32%)</title><rect x="855.7" y="341" width="3.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="858.72" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="1100.5" y="341" width="4.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1103.48" y="351.5" ></text>
</g>
<g >
<title>sim::Host::process (404,040,400 samples, 2.12%)</title><rect x="348.7" y="373" width="25.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="351.66" y="383.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="213" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="223.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (40,404,040 samples, 0.21%)</title><rect x="362.4" y="341" width="2.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="365.44" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (70,707,070 samples, 0.37%)</title><rect x="1158.7" y="373" width="4.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1161.70" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="255.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 1.64%)</title><rect x="186.5" y="389" width="19.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="189.53" y="399.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.11%)</title><rect x="853.2" y="309" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="856.21" y="319.5" ></text>
</g>
<g >
<title>operator new (141,414,140 samples, 0.74%)</title><rect x="1058.5" y="357" width="8.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1061.54" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="197" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="207.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.05%)</title><rect x="230.4" y="341" width="0.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="233.35" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="371.2" y="341" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="374.20" y="351.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="859.5" y="357" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="862.47" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (575,757,570 samples, 3.02%)</title><rect x="1088.0" y="373" width="35.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1090.96" y="383.5" >sim..</text>
</g>
<g >
<title>sim::MetricsStorage::get_records (10,101,010 samples, 0.05%)</title><rect x="51.9" y="373" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="54.94" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="133" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="143.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (212,121,210 samples, 1.11%)</title><rect x="11.3" y="405" width="13.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="14.25" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="27.5" y="389" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="30.53" y="399.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="405" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.75" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.11%)</title><rect x="350.5" y="357" width="1.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="353.54" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (50,505,050 samples, 0.27%)</title><rect x="299.2" y="373" width="3.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="302.21" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="83.2" y="85" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="86.24" y="95.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="352.4" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="355.42" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="863.9" y="325" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="866.86" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="867.0" y="261" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="869.99" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.16%)</title><rect x="1186.2" y="213" width="1.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.24" y="223.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.11%)</title><rect x="248.5" y="325" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="251.50" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="873.9" y="229" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="876.87" y="239.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.11%)</title><rect x="852.0" y="325" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="854.96" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.63" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="1153.1" y="325" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.07" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.58%)</title><rect x="17.5" y="325" width="6.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.51" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.9" y="165" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.94" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="165" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="175.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (40,404,040 samples, 0.21%)</title><rect x="1121.1" y="357" width="2.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1124.14" y="367.5" ></text>
</g>
<g >
<title>std::ostream::put (30,303,030 samples, 0.16%)</title><rect x="103.9" y="373" width="1.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="106.90" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.37" y="287.5" ></text>
</g>
<g >
<title>main (18,797,979,610 samples, 98.73%)</title><rect x="25.0" y="437" width="1165.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="28.02" y="447.5" >main</text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.05%)</title><rect x="1188.1" y="229" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.12" y="239.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="351.2" y="309" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="354.17" y="319.5" ></text>
</g>
<g >
<title>sim::StartFlow::operator (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="389" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1126.64" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="367.4" y="213" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="370.44" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="223.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.05%)</title><rect x="145.2" y="405" width="0.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="148.21" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="876.4" y="325" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="879.38" y="335.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.16%)</title><rect x="1007.2" y="357" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1010.21" y="367.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="373" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.37" y="383.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="389" width="5.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.11" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (121,212,120 samples, 0.64%)</title><rect x="868.2" y="341" width="7.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="871.24" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.21%)</title><rect x="353.7" y="341" width="2.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="356.67" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.32%)</title><rect x="356.8" y="293" width="3.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="359.80" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.05%)</title><rect x="361.8" y="357" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="364.81" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1133.7" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="149" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="159.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (181,818,180 samples, 0.95%)</title><rect x="1095.5" y="357" width="11.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1098.47" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (232,323,230 samples, 1.22%)</title><rect x="67.0" y="325" width="14.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="69.97" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.80%)</title><rect x="231.0" y="341" width="9.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="233.98" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.9" y="133" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.94" y="143.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="1093.6" y="293" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1096.60" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.27%)</title><rect x="918.9" y="357" width="3.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="921.94" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (212,121,210 samples, 1.11%)</title><rect x="11.3" y="389" width="13.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.25" y="399.5" ></text>
</g>
<g >
<title>sim::Link::Link (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="341" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1192.37" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.27%)</title><rect x="236.6" y="229" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="239.61" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.9" y="117" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.94" y="127.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="29.4" y="373" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="32.41" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1136.2" y="373" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1139.16" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="1094.8" y="325" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1097.85" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="224.7" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="227.72" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="853.8" y="293" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="856.84" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="303.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.32%)</title><rect x="57.6" y="293" width="3.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="60.58" y="303.5" ></text>
</g>
<g >
<title>vsnprintf (242,424,240 samples, 1.27%)</title><rect x="87.6" y="325" width="15.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="90.62" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (101,010,100 samples, 0.53%)</title><rect x="869.5" y="293" width="6.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="872.49" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="208.4" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="211.44" y="383.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (282,828,280 samples, 1.49%)</title><rect x="783.1" y="325" width="17.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="786.10" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="181" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="191.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.85%)</title><rect x="351.8" y="357" width="10.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="354.79" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="175.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="373" width="0.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1126.64" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="197" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="207.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,171,717,160 samples, 6.15%)</title><rect x="1010.3" y="373" width="72.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1013.34" y="383.5" >void sim..</text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1171.8" y="341" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.85" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="882.0" y="341" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="885.01" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="112.7" y="309" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.66" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1186.9" y="165" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.87" y="175.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (303,030,300 samples, 1.59%)</title><rect x="85.1" y="357" width="18.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="88.12" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="165" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.99" y="175.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (585,858,580 samples, 3.08%)</title><rect x="1143.1" y="389" width="36.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1146.05" y="399.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="362.4" y="245" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.44" y="255.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="309" width="5.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.11" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (60,606,060 samples, 0.32%)</title><rect x="388.1" y="373" width="3.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="391.10" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1184.4" y="181" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.37" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="133" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="143.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="214.1" y="309" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="217.07" y="319.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.11%)</title><rect x="56.3" y="309" width="1.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="59.32" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="341" width="5.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.11" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (171,717,170 samples, 0.90%)</title><rect x="107.0" y="405" width="10.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="110.03" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1088.0" y="357" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1090.96" y="367.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.32%)</title><rect x="112.7" y="325" width="3.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="115.66" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="858.8" y="293" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="861.85" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1089.2" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1092.21" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="367.4" y="229" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="370.44" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (323,232,320 samples, 1.70%)</title><rect x="83.9" y="373" width="20.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="86.87" y="383.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.05%)</title><rect x="249.8" y="373" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="252.76" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="108.9" y="373" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="111.91" y="383.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.16%)</title><rect x="1186.2" y="181" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.24" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.53" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="181" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.11" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (30,303,030 samples, 0.16%)</title><rect x="107.0" y="373" width="1.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="110.03" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1131.2" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1134.16" y="399.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (30,303,030 samples, 0.16%)</title><rect x="107.0" y="357" width="1.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="110.03" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="50.7" y="357" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="53.69" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="229" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.16%)</title><rect x="1180.0" y="389" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.98" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="50.7" y="341" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.69" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (70,707,070 samples, 0.37%)</title><rect x="222.8" y="325" width="4.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="225.84" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.05%)</title><rect x="1164.3" y="373" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1167.33" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="24.4" y="389" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="27.40" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1185.6" y="213" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1188.62" y="223.5" ></text>
</g>
<g >
<title>_IO_file_open (30,303,030 samples, 0.16%)</title><rect x="107.0" y="309" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="110.03" y="319.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="389" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.37" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="1098.6" y="309" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1101.60" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="101" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="149" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="53.8" y="357" width="0.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="56.82" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="1151.2" y="341" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.19" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="341" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.27%)</title><rect x="1101.1" y="277" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.11" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="223.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.11%)</title><rect x="56.3" y="373" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="59.32" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (373,737,370 samples, 1.96%)</title><rect x="324.2" y="373" width="23.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="327.25" y="383.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1174.4" y="309" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.35" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="367.4" y="245" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="370.44" y="255.5" ></text>
</g>
<g >
<title>sim::Link::arrive (535,353,530 samples, 2.81%)</title><rect x="209.1" y="373" width="33.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="212.07" y="383.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="191.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="366.8" y="309" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="369.82" y="319.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.05%)</title><rect x="351.2" y="293" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="354.17" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1177.5" y="325" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.48" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="53.2" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="56.19" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="229" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="239.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="356.8" y="341" width="4.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="359.80" y="351.5" ></text>
</g>
<g >
<title>vsnprintf (131,313,130 samples, 0.69%)</title><rect x="231.6" y="293" width="8.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="234.60" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.16%)</title><rect x="1186.2" y="197" width="1.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.24" y="207.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="862.6" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="865.60" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="143.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="881.4" y="341" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="884.38" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="271.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="240.4" y="325" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="243.37" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1186.9" y="133" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.87" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="207.5" ></text>
</g>
<g >
<title>operator delete (121,212,120 samples, 0.64%)</title><rect x="123.9" y="405" width="7.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="126.93" y="415.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.11%)</title><rect x="111.4" y="325" width="1.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="114.41" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="85" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="117" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="271.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.27%)</title><rect x="856.3" y="325" width="3.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="859.34" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1099.9" y="325" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1102.86" y="335.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (50,505,050 samples, 0.27%)</title><rect x="856.3" y="309" width="3.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="859.34" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (50,505,050 samples, 0.27%)</title><rect x="117.7" y="421" width="3.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="120.67" y="431.5" ></text>
</g>
<g >
<title>sim::Process::operator (70,707,070 samples, 0.37%)</title><rect x="145.8" y="405" width="4.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="148.84" y="415.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (80,808,080 samples, 0.42%)</title><rect x="244.7" y="357" width="5.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="247.75" y="367.5" ></text>
</g>
<g >
<title>sim::Process::~Process (141,414,140 samples, 0.74%)</title><rect x="150.2" y="405" width="8.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="153.22" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.05%)</title><rect x="356.2" y="341" width="0.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="359.18" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="302.3" y="373" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="305.34" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="98.9" y="261" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="101.89" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="23.1" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.15" y="303.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="63.2" y="357" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="66.21" y="367.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.32%)</title><rect x="57.6" y="341" width="3.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="60.58" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="1100.5" y="325" width="4.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1103.48" y="335.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 1.64%)</title><rect x="814.4" y="341" width="19.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="817.40" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="469" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="361.2" y="341" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="364.18" y="351.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1119.9" y="309" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1122.89" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="405" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="373" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.02" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (151,515,150 samples, 0.80%)</title><rect x="231.0" y="325" width="9.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="233.98" y="335.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="1093.0" y="309" width="1.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1095.97" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="357" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (222,222,220 samples, 1.17%)</title><rect x="1106.7" y="357" width="13.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1109.74" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="58.2" y="133" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="61.20" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.21%)</title><rect x="362.4" y="277" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="365.44" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="165" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="159.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.05%)</title><rect x="24.4" y="341" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="27.40" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="370.6" y="325" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="373.57" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="197" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="207.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (262,626,260 samples, 1.38%)</title><rect x="584.0" y="341" width="16.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="587.04" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1175.6" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.60" y="303.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (50,505,050 samples, 0.27%)</title><rect x="851.3" y="341" width="3.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="854.34" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1129.3" y="389" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1132.28" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.69%)</title><rect x="231.6" y="277" width="8.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="234.60" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="214.7" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="217.70" y="271.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.27%)</title><rect x="1159.3" y="357" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.33" y="367.5" ></text>
</g>
<g >
<title>sim::Process::~Process (60,606,060 samples, 0.32%)</title><rect x="1083.0" y="389" width="3.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1085.95" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (70,707,070 samples, 0.37%)</title><rect x="1100.5" y="309" width="4.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1103.48" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1136.8" y="277" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.79" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="373" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>nons (19,040,403,850 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >nons</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1136.8" y="325" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.79" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="485" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="101" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="111.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.58%)</title><rect x="1183.1" y="421" width="6.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.11" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="359.3" y="229" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="362.31" y="239.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="28.2" y="373" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="31.15" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1087.3" y="373" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1090.34" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="83.2" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="86.24" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1131.2" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1134.16" y="383.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="362.4" y="293" width="2.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="365.44" y="303.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (20,202,020 samples, 0.11%)</title><rect x="350.5" y="341" width="1.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="353.54" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="870.1" y="245" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="873.12" y="255.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="229" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1186.74" y="239.5" ></text>
</g>
<g >
<title>Logger::warn (2,333,333,310 samples, 12.25%)</title><rect x="455.7" y="357" width="144.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="458.71" y="367.5" >Logger::warn</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="357" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.75" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="149" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="245" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1098.0" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1100.98" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="165" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="69" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="79.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.11%)</title><rect x="1156.8" y="373" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.82" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="867.0" y="293" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="869.99" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="111.4" y="309" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="114.41" y="319.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (101,010,100 samples, 0.53%)</title><rect x="244.1" y="389" width="6.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="247.12" y="399.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (40,404,040 samples, 0.21%)</title><rect x="1118.0" y="341" width="2.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1121.01" y="351.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="369.3" y="309" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="372.32" y="319.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="213.4" y="325" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="216.45" y="335.5" ></text>
</g>
<g >
<title>malloc (222,222,220 samples, 1.17%)</title><rect x="837.6" y="325" width="13.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="840.56" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (111,111,110 samples, 0.58%)</title><rect x="381.2" y="373" width="6.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="384.21" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="117" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.21%)</title><rect x="1174.4" y="357" width="2.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1177.35" y="367.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1106.1" y="325" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1109.12" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.11%)</title><rect x="1184.4" y="213" width="1.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.37" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,020,201,830 samples, 99.89%)</title><rect x="11.3" y="453" width="1178.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="463.5" >[libc.so.6]</text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="356.8" y="277" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.80" y="287.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="373" width="5.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.11" y="383.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.05%)</title><rect x="1186.2" y="165" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1189.24" y="175.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="863.2" y="325" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="866.23" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="26.3" y="389" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.28" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="213" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.11" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="25.6" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.65" y="351.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="1139.9" y="341" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.92" y="351.5" ></text>
</g>
<g >
<title>malloc (121,212,120 samples, 0.64%)</title><rect x="1059.8" y="341" width="7.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1062.79" y="351.5" ></text>
</g>
<g >
<title>sim::SendData::~SendData (10,101,010 samples, 0.05%)</title><rect x="1127.4" y="405" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1130.40" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.11%)</title><rect x="215.3" y="341" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="218.33" y="351.5" ></text>
</g>
<g >
<title>Logger::info (1,717,171,700 samples, 9.02%)</title><rect x="694.2" y="341" width="106.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="697.21" y="351.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.05%)</title><rect x="370.6" y="341" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="373.57" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.53%)</title><rect x="869.5" y="309" width="6.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="872.49" y="319.5" ></text>
</g>
<g >
<title>sim::Link::transmit (90,909,090 samples, 0.48%)</title><rect x="244.1" y="373" width="5.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="247.12" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.21%)</title><rect x="212.8" y="341" width="2.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="215.82" y="351.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.21%)</title><rect x="1174.4" y="341" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.35" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="368.7" y="309" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="371.69" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.21%)</title><rect x="691.7" y="341" width="2.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="694.71" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1137.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1140.42" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="28.2" y="389" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="31.15" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="261" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="271.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="246.6" y="325" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="249.63" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="363.7" y="197" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.69" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.27%)</title><rect x="87.6" y="309" width="15.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="90.62" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.27%)</title><rect x="1138.7" y="357" width="3.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1141.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="107.7" y="53" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.66" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="181" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="371.8" y="357" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="374.82" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (212,121,210 samples, 1.11%)</title><rect x="11.3" y="373" width="13.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.25" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="245" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="101" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1136.8" y="309" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1139.79" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="111.4" y="293" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="114.41" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.05%)</title><rect x="1179.4" y="389" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.36" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="1098.6" y="325" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1101.60" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="355.5" y="325" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="358.55" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="117" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="108.3" y="37" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.28" y="47.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="277" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.11" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (2,909,090,880 samples, 15.28%)</title><rect x="674.2" y="357" width="180.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="677.18" y="367.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="165" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="354.9" y="309" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="357.92" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="27.5" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.53" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="881.4" y="325" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="884.38" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1136.2" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1139.16" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1139.9" y="309" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.92" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="341" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1126.64" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.17%)</title><rect x="11.3" y="437" width="13.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.25" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.32%)</title><rect x="112.7" y="341" width="3.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="115.66" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="366.8" y="293" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="369.82" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.05%)</title><rect x="229.7" y="341" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="232.72" y="351.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.05%)</title><rect x="1094.8" y="341" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1097.85" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,868,686,770 samples, 51.83%)</title><rect x="397.5" y="373" width="611.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="400.49" y="383.5" >sim::Switch::process</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (70,707,070 samples, 0.37%)</title><rect x="1184.4" y="261" width="4.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.37" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="261" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1186.74" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="261" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.11" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1172.5" y="325" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.47" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="277" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (60,606,060 samples, 0.32%)</title><rect x="356.8" y="309" width="3.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="359.80" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.9" y="149" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.94" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.27%)</title><rect x="864.5" y="341" width="3.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="867.48" y="351.5" ></text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.05%)</title><rect x="210.9" y="341" width="0.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="213.94" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.16%)</title><rect x="52.6" y="373" width="1.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="55.57" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="859.5" y="341" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="862.47" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="1096.1" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1099.10" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 1.01%)</title><rect x="90.8" y="277" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="93.75" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="213" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1178.7" y="373" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1181.73" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.21%)</title><rect x="1186.2" y="245" width="2.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.24" y="255.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (20,202,020 samples, 0.11%)</title><rect x="347.4" y="373" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="350.41" y="383.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.21%)</title><rect x="875.8" y="341" width="2.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="878.75" y="351.5" ></text>
</g>
<g >
<title>malloc (111,111,110 samples, 0.58%)</title><rect x="1149.9" y="357" width="6.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1152.94" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="111.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.27%)</title><rect x="452.0" y="357" width="3.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="454.95" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (222,222,220 samples, 1.17%)</title><rect x="820.0" y="325" width="13.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="823.04" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="367.4" y="309" width="1.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="370.44" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="181" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.53%)</title><rect x="233.5" y="261" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="236.48" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.27%)</title><rect x="1166.2" y="373" width="3.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.21" y="383.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.32%)</title><rect x="366.2" y="341" width="3.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="369.19" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (131,313,130 samples, 0.69%)</title><rect x="219.7" y="341" width="8.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="222.71" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.16%)</title><rect x="1186.2" y="229" width="1.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.24" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.11%)</title><rect x="1169.3" y="373" width="1.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1172.34" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="325" width="5.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.11" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.53%)</title><rect x="233.5" y="245" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="236.48" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="247.9" y="309" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="250.88" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="63.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="341" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.75" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (242,424,240 samples, 1.27%)</title><rect x="66.3" y="341" width="15.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="69.34" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="356.8" y="325" width="4.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="359.80" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="350.5" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.54" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="239.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="1184.4" y="197" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.37" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="102.6" y="341" width="1.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="105.65" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="79.5" y="261" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.49" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.05%)</title><rect x="369.9" y="309" width="0.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="372.95" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="102.0" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="105.02" y="255.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (40,404,040 samples, 0.21%)</title><rect x="395.0" y="373" width="2.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="397.99" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="214.7" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="217.70" y="303.5" ></text>
</g>
<g >
<title>sim::Event::Event (252,525,250 samples, 1.33%)</title><rect x="1067.3" y="357" width="15.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1070.31" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="58.8" y="117" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="61.83" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="261" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="271.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,222,222,210 samples, 6.42%)</title><rect x="30.0" y="389" width="75.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="33.03" y="399.5" >sim::wri..</text>
</g>
<g >
<title>sim::Event::operator&gt; (141,414,140 samples, 0.74%)</title><rect x="136.5" y="405" width="8.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="139.45" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1095.5" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1098.47" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="357" width="5.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.11" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.75" y="335.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.32%)</title><rect x="57.6" y="357" width="3.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="60.58" y="367.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.32%)</title><rect x="57.6" y="325" width="3.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="60.58" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="351.5" ></text>
</g>
<g >
<title>sim::Event::Event (191,919,190 samples, 1.01%)</title><rect x="312.4" y="373" width="11.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="315.36" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (161,616,160 samples, 0.85%)</title><rect x="107.0" y="389" width="10.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="110.03" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="197" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1186.11" y="207.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (50,505,050 samples, 0.27%)</title><rect x="391.9" y="373" width="3.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="394.86" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="65.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="68.71" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="325" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="362.4" y="229" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.44" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1101.7" y="261" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.73" y="271.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="357" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1126.64" y="367.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="28.8" y="389" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="31.78" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="245" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.53%)</title><rect x="1170.6" y="373" width="6.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1173.59" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="223.5" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="226.46" y="319.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="369.3" y="325" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="372.32" y="335.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (616,161,610 samples, 3.24%)</title><rect x="205.9" y="389" width="38.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="208.94" y="399.5" >sim..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1089.2" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1092.21" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="833.8" y="341" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="836.81" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="25.0" y="357" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="28.02" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1123.6" y="325" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1126.64" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="112.7" y="357" width="3.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="115.66" y="367.5" ></text>
</g>
<g >
<title>malloc (242,424,240 samples, 1.27%)</title><rect x="658.5" y="341" width="15.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="661.53" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="245" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1186.74" y="255.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.21%)</title><rect x="362.4" y="325" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="365.44" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1163.7" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.71" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="362.4" y="309" width="2.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="365.44" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1161.8" y="309" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.83" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="354.9" y="325" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="357.92" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="213" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="223.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="673.6" y="357" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="676.55" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (20,202,020 samples, 0.11%)</title><rect x="1181.9" y="389" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.86" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="866.4" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="869.36" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="165" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.11%)</title><rect x="1163.1" y="373" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1166.08" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (30,303,030 samples, 0.16%)</title><rect x="1176.9" y="373" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.85" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.6" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.63" y="175.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (40,404,040 samples, 0.21%)</title><rect x="110.2" y="373" width="2.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="113.16" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="53.2" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="56.19" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="149" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="159.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.11%)</title><rect x="922.1" y="357" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="925.07" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1137.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1140.42" y="255.5" ></text>
</g>
<g >
<title>sim::SendData::operator (595,959,590 samples, 3.13%)</title><rect x="1086.7" y="389" width="36.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1089.71" y="399.5" >sim..</text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1162.5" y="357" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1165.46" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,353,535,340 samples, 7.11%)</title><rect x="923.3" y="357" width="83.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="926.33" y="367.5" >std::_Rb_..</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.27%)</title><rect x="1091.1" y="325" width="3.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1094.09" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="181" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1091.1" y="309" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1094.09" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="28.2" y="357" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="31.15" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (121,212,120 samples, 0.64%)</title><rect x="373.7" y="373" width="7.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="376.70" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="421" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="261" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="271.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.05%)</title><rect x="877.6" y="309" width="0.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="880.63" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,494,949,480 samples, 7.85%)</title><rect x="25.0" y="421" width="92.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="28.02" y="431.5" >sim::Metric..</text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (20,202,020 samples, 0.11%)</title><rect x="853.2" y="325" width="1.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="856.21" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="1154.3" y="229" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.32" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="389" width="0.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.75" y="399.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="361.2" y="325" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="364.18" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.11%)</title><rect x="1165.0" y="373" width="1.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1167.96" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="389" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="29.4" y="357" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="32.41" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="353.0" y="341" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="356.05" y="351.5" ></text>
</g>
<g >
<title>sim::Host::~Host (212,121,210 samples, 1.11%)</title><rect x="11.3" y="357" width="13.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.25" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::operator/= (10,101,010 samples, 0.05%)</title><rect x="117.0" y="389" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="120.05" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="366.2" y="325" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="369.19" y="335.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.37%)</title><rect x="303.6" y="373" width="4.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="306.59" y="383.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (80,808,080 samples, 0.42%)</title><rect x="1089.8" y="357" width="5.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1092.84" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10,101,010 samples, 0.05%)</title><rect x="117.0" y="373" width="0.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="120.05" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="112.0" y="277" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.04" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="293" width="5.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.11" y="303.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 0.16%)</title><rect x="110.8" y="357" width="1.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="113.79" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (40,404,040 samples, 0.21%)</title><rect x="362.4" y="357" width="2.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="365.44" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="356.8" y="245" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.80" y="255.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.21%)</title><rect x="296.7" y="373" width="2.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="299.71" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="63.8" y="357" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="66.84" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (131,313,130 samples, 0.69%)</title><rect x="231.6" y="309" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="234.60" y="319.5" ></text>
</g>
<g >
<title>_IO_file_fopen (30,303,030 samples, 0.16%)</title><rect x="107.0" y="325" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="110.03" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.16%)</title><rect x="1104.9" y="341" width="1.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1107.86" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="261" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="101" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="111.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="239.7" y="309" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="242.74" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (50,505,050 samples, 0.27%)</title><rect x="224.1" y="309" width="3.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="227.09" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="69" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (17,141,413,970 samples, 90.03%)</title><rect x="120.8" y="421" width="1062.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="123.80" y="431.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.32%)</title><rect x="648.5" y="357" width="3.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="651.51" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="207.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (50,505,050 samples, 0.27%)</title><rect x="1124.3" y="389" width="3.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1127.27" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.11%)</title><rect x="350.5" y="325" width="1.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="353.54" y="335.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.48%)</title><rect x="1183.1" y="405" width="5.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.11" y="415.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="56.3" y="341" width="1.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="59.32" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="149" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="217.2" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="220.20" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="214.7" y="277" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="217.70" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="367.4" y="277" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="370.44" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="112.7" y="293" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.66" y="303.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (111,111,110 samples, 0.58%)</title><rect x="364.9" y="357" width="6.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="367.94" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="213" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="223.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (30,303,030 samples, 0.16%)</title><rect x="860.1" y="357" width="1.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="863.10" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="277" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.06%)</title><rect x="90.1" y="293" width="12.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="93.13" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1095.5" y="341" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1098.47" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.32%)</title><rect x="244.7" y="341" width="3.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="247.75" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.05%)</title><rect x="1009.7" y="373" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1012.71" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="1094.2" y="325" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1097.22" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.32%)</title><rect x="1096.7" y="341" width="3.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1099.73" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1160.0" y="325" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.95" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (161,616,160 samples, 0.85%)</title><rect x="1133.0" y="389" width="10.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1136.03" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="56.9" y="85" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.95" y="95.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (585,858,580 samples, 3.08%)</title><rect x="882.6" y="357" width="36.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="885.64" y="367.5" >sim..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.64%)</title><rect x="868.2" y="325" width="7.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="871.24" y="335.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="357" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.37" y="367.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.11%)</title><rect x="56.3" y="357" width="1.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="59.32" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="245" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="255.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="353.0" y="309" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="356.05" y="319.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (30,303,030 samples, 0.16%)</title><rect x="242.2" y="373" width="1.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="245.24" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="197" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (20,202,020 samples, 0.11%)</title><rect x="226.0" y="293" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="228.97" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1132.4" y="389" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1135.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="213" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="59.5" y="85" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="62.45" y="95.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="1139.9" y="325" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1142.92" y="335.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (80,808,080 samples, 0.42%)</title><rect x="854.5" y="357" width="5.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="857.47" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="197" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="207.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.5" y="101" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.50" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.40" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="367.5" ></text>
</g>
<g >
<title>open64 (30,303,030 samples, 0.16%)</title><rect x="107.0" y="293" width="1.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="110.03" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="368.1" y="197" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="371.07" y="207.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1177.5" y="357" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.48" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (70,707,070 samples, 0.37%)</title><rect x="878.3" y="357" width="4.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="881.25" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="245" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="255.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="852.6" y="309" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="855.59" y="319.5" ></text>
</g>
<g >
<title>operator new (343,434,340 samples, 1.80%)</title><rect x="652.3" y="357" width="21.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="655.27" y="367.5" >o..</text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.11%)</title><rect x="210.3" y="357" width="1.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="213.32" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1177.5" y="341" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.48" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (262,626,260 samples, 1.38%)</title><rect x="86.4" y="341" width="16.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="89.37" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="56.3" y="229" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="59.32" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="165" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="356.8" y="261" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.80" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="212.8" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="215.82" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (10,101,010 samples, 0.05%)</title><rect x="116.4" y="373" width="0.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="119.42" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1137.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1140.42" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="309" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.95%)</title><rect x="70.1" y="293" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.10" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="867.0" y="325" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="869.99" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="181" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.32%)</title><rect x="57.6" y="373" width="3.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="60.58" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.85%)</title><rect x="634.7" y="341" width="10.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="637.74" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="206.6" y="373" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="209.56" y="383.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="373" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1137.91" y="383.5" ></text>
</g>
<g >
<title>sim::LinkQueue::LinkQueue (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="325" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1192.37" y="335.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.21%)</title><rect x="1171.8" y="357" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.85" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.90%)</title><rect x="70.7" y="277" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="73.72" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.11%)</title><rect x="1186.9" y="149" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.87" y="159.5" ></text>
</g>
<g >
<title>vsnprintf (60,606,060 samples, 0.32%)</title><rect x="1101.1" y="293" width="3.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1104.11" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (414,141,410 samples, 2.18%)</title><rect x="216.6" y="357" width="25.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="219.58" y="367.5" >s..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (262,626,260 samples, 1.38%)</title><rect x="862.0" y="357" width="16.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="864.98" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="83.2" y="53" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="86.24" y="63.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1136.2" y="341" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1139.16" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.37" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="10.0" y="197" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.16%)</title><rect x="1184.4" y="245" width="1.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.37" y="255.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="360.6" y="309" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="363.56" y="319.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (80,808,080 samples, 0.42%)</title><rect x="211.6" y="357" width="5.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="214.57" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="293" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="55.7" y="357" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="58.70" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="107.0" y="133" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="110.03" y="143.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="405" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.37" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.16%)</title><rect x="227.8" y="341" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="230.85" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="367.4" y="293" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="370.44" y="303.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.05%)</title><rect x="24.4" y="357" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="27.40" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="175.5" ></text>
</g>
<g >
<title>pthread_once@plt (10,101,010 samples, 0.05%)</title><rect x="82.0" y="341" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="84.99" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="870.1" y="261" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="873.12" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1163.7" y="357" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1166.71" y="367.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.05%)</title><rect x="867.6" y="341" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="870.61" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="103.3" y="53" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.27" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.11%)</title><rect x="105.8" y="389" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="108.78" y="399.5" ></text>
</g>
<g >
<title>cfree (111,111,110 samples, 0.58%)</title><rect x="17.5" y="341" width="6.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="20.51" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.90%)</title><rect x="195.3" y="373" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="198.29" y="383.5" ></text>
</g>
<g >
<title>sim::Event::get_time (80,808,080 samples, 0.42%)</title><rect x="131.4" y="405" width="5.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="134.44" y="415.5" ></text>
</g>
<g >
<title>cfree (292,929,290 samples, 1.54%)</title><rect x="626.6" y="357" width="18.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="629.60" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="862.6" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="865.60" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="59.5" y="101" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="62.45" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1178.1" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.11" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="82.6" y="277" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="85.62" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="1153.1" y="293" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1156.07" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="867.0" y="277" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="869.99" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.42%)</title><rect x="1183.7" y="277" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="112.7" y="373" width="3.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="115.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.32%)</title><rect x="57.6" y="213" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="60.58" y="223.5" ></text>
</g>
<g >
<title>writev (20,202,020 samples, 0.11%)</title><rect x="102.6" y="325" width="1.3" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="105.65" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="60.7" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="63.71" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="117" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="127.5" ></text>
</g>
<g >
<title>operator new (262,626,260 samples, 1.38%)</title><rect x="835.1" y="341" width="16.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="838.06" y="351.5" ></text>
</g>
<g >
<title>_start (19,020,201,830 samples, 99.89%)</title><rect x="11.3" y="485" width="1178.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.25" y="495.5" >_start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="117.0" y="133" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="120.05" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.6" y="85" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.65" y="95.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="82.6" y="341" width="1.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="85.62" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.16%)</title><rect x="240.4" y="341" width="1.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="243.37" y="351.5" ></text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.32%)</title><rect x="57.6" y="309" width="3.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="60.58" y="319.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="229" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.11" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="50.7" y="325" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.69" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="181" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="191.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (20,202,020 samples, 0.11%)</title><rect x="248.5" y="341" width="1.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="251.50" y="351.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="369.9" y="325" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="372.95" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1173.7" y="229" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1176.72" y="239.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.27%)</title><rect x="1055.4" y="357" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1058.41" y="367.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.05%)</title><rect x="109.5" y="357" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="112.53" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.22%)</title><rect x="67.0" y="309" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="69.97" y="319.5" ></text>
</g>
</g>
</svg>
