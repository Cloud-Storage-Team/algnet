<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="966.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="949" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="949" > </text>
<g id="frames">
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1111.7" y="709" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1114.71" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="629" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="52.6" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.59" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.11%)</title><rect x="920.1" y="757" width="1.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="923.05" y="767.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.05%)</title><rect x="373.9" y="709" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="376.90" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="37" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="47.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 1.65%)</title><rect x="818.6" y="741" width="19.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="821.59" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="709" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="719.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (70,707,070 samples, 0.37%)</title><rect x="881.2" y="757" width="4.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="884.22" y="767.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.05%)</title><rect x="235.5" y="709" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="238.48" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="645" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="655.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 0.16%)</title><rect x="304.4" y="773" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="307.37" y="783.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1170.6" y="741" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.58" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="53.8" y="597" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.84" y="607.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::SimplePacketQueue (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="709" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1192.37" y="719.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="211.1" y="741" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="214.05" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="405" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="415.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.05%)</title><rect x="95.2" y="725" width="0.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="98.18" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="245" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1088.5" y="709" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1091.54" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="309" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="869" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.11%)</title><rect x="1134.9" y="773" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1137.88" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="623.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnMapStart (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="661" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1186.74" y="671.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.27%)</title><rect x="243.6" y="741" width="3.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="246.62" y="751.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="48.2" y="757" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="51.21" y="767.5" ></text>
</g>
<g >
<title>sim::Link::transmit (111,111,110 samples, 0.58%)</title><rect x="240.5" y="773" width="6.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="243.49" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="103.3" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.32" y="495.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 0.16%)</title><rect x="654.5" y="757" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="657.49" y="767.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.11%)</title><rect x="1092.3" y="741" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1095.29" y="751.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="390.2" y="757" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="393.18" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="661" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.37" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.21%)</title><rect x="47.6" y="773" width="2.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="50.58" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="1139.9" y="693" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.89" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="864.9" y="693" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="867.94" y="703.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1130.5" y="789" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1133.50" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="501" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="511.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1098.6" y="725" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1101.56" y="735.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="367.6" y="725" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="370.63" y="735.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="303.7" y="773" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="306.75" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="597" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="367.6" y="709" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="370.63" y="719.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.48%)</title><rect x="874.3" y="693" width="5.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="877.33" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1102.3" y="645" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.31" y="655.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (80,808,080 samples, 0.42%)</title><rect x="411.5" y="773" width="5.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="414.48" y="783.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (30,303,030 samples, 0.16%)</title><rect x="51.3" y="757" width="1.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="54.34" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="741" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="751.5" ></text>
</g>
<g >
<title>sim::LinkQueue::LinkQueue (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="725" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1192.37" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.05%)</title><rect x="1181.9" y="789" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1184.86" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="117" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="127.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="597" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.74" y="607.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.21%)</title><rect x="1096.1" y="725" width="2.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1099.05" y="735.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::get_instance (10,101,010 samples, 0.05%)</title><rect x="365.1" y="725" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="368.13" y="735.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.05%)</title><rect x="242.4" y="741" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="245.37" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="105.2" y="469" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="108.20" y="479.5" ></text>
</g>
<g >
<title>sim::Process::operator (131,313,130 samples, 0.69%)</title><rect x="135.3" y="805" width="8.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="138.27" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="661" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="565" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="575.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="237.4" y="725" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="240.36" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (272,727,270 samples, 1.43%)</title><rect x="78.9" y="773" width="16.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="81.90" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,222,222,210 samples, 6.42%)</title><rect x="921.3" y="757" width="75.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="924.31" y="767.5" >std::_Rb..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="581" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="623.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.90%)</title><rect x="870.6" y="757" width="10.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="873.57" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1091.7" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1094.67" y="735.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.11%)</title><rect x="212.9" y="757" width="1.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="215.93" y="767.5" ></text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 0.64%)</title><rect x="228.0" y="693" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="230.96" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1102.3" y="677" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.31" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="302.5" y="773" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="305.49" y="783.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="773" width="5.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.74" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="533" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="53.2" y="613" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.22" y="623.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.27%)</title><rect x="1186.2" y="645" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.24" y="655.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="45.7" y="773" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="48.70" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="277" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (40,404,040 samples, 0.21%)</title><rect x="363.9" y="757" width="2.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="366.87" y="767.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (262,626,260 samples, 1.38%)</title><rect x="79.5" y="757" width="16.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="82.52" y="767.5" ></text>
</g>
<g >
<title>malloc (141,414,140 samples, 0.74%)</title><rect x="660.1" y="741" width="8.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="663.13" y="751.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (90,909,090 samples, 0.48%)</title><rect x="874.3" y="709" width="5.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="877.33" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="693" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.27%)</title><rect x="1087.9" y="725" width="3.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1090.91" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="725" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.11%)</title><rect x="383.3" y="693" width="1.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="386.29" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="261" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="693" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.37" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="372.0" y="645" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="375.02" y="655.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1091.7" y="741" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1094.67" y="751.5" ></text>
</g>
<g >
<title>cfree (131,313,130 samples, 0.69%)</title><rect x="15.0" y="741" width="8.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.01" y="751.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="98.9" y="757" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="101.94" y="767.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="565" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.24" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.05%)</title><rect x="224.8" y="693" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="227.83" y="703.5" ></text>
</g>
<g >
<title>sim::StartFlow::operator (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="789" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1121.60" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="107.1" y="709" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="110.08" y="719.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="26.3" y="789" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="29.28" y="799.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.11%)</title><rect x="1111.7" y="741" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1114.71" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.27%)</title><rect x="109.6" y="709" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="112.59" y="719.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 1.70%)</title><rect x="187.9" y="789" width="20.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="190.88" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="864.9" y="597" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="867.94" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="216.7" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="219.69" y="719.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="549" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.75" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (50,505,050 samples, 0.27%)</title><rect x="1168.7" y="773" width="3.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1171.70" y="783.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.05%)</title><rect x="109.0" y="757" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="111.96" y="767.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="741" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.97" y="751.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (90,909,090 samples, 0.48%)</title><rect x="861.8" y="725" width="5.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="864.80" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="437" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (30,303,030 samples, 0.16%)</title><rect x="107.1" y="757" width="1.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="110.08" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="437" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="371.4" y="725" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="374.39" y="735.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.16%)</title><rect x="1102.3" y="709" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1105.31" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="629" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="639.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="375.8" y="709" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="378.77" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1136.1" y="725" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1139.14" y="735.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.11%)</title><rect x="1131.1" y="789" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1134.13" y="799.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (101,010,100 samples, 0.53%)</title><rect x="873.7" y="741" width="6.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="876.70" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="789" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>vsnprintf (50,505,050 samples, 0.27%)</title><rect x="109.6" y="725" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="112.59" y="735.5" ></text>
</g>
<g >
<title>std::ostream::put (60,606,060 samples, 0.32%)</title><rect x="95.8" y="773" width="3.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="98.81" y="783.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (171,717,170 samples, 0.90%)</title><rect x="102.7" y="805" width="10.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="105.70" y="815.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="50.1" y="757" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="53.08" y="767.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (30,303,030 samples, 0.16%)</title><rect x="51.3" y="773" width="1.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="54.34" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="370.1" y="709" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="373.14" y="719.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="238.0" y="725" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="240.98" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="543.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (252,525,250 samples, 1.33%)</title><rect x="1091.7" y="757" width="15.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1094.67" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="549" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="559.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.42%)</title><rect x="1049.7" y="757" width="5.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1052.70" y="767.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,161,616,150 samples, 6.10%)</title><rect x="27.5" y="789" width="72.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="30.54" y="799.5" >sim::wri..</text>
</g>
<g >
<title>_IO_file_fopen (50,505,050 samples, 0.27%)</title><rect x="53.2" y="725" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="56.22" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="501" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="613" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="623.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (272,727,270 samples, 1.43%)</title><rect x="790.4" y="725" width="16.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="793.40" y="735.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="246.8" y="741" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="249.75" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.11%)</title><rect x="1185.0" y="613" width="1.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.99" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="421" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="645" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="375.1" y="725" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="378.15" y="735.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (262,626,260 samples, 1.38%)</title><rect x="223.0" y="757" width="16.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="225.95" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="837" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (202,020,200 samples, 1.06%)</title><rect x="82.7" y="741" width="12.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="85.65" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="725" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="735.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.16%)</title><rect x="372.0" y="709" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="375.02" y="719.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.16%)</title><rect x="107.1" y="741" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="110.08" y="751.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (121,212,120 samples, 0.64%)</title><rect x="397.1" y="773" width="7.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="400.07" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1139.3" y="709" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1142.27" y="719.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (50,505,050 samples, 0.27%)</title><rect x="858.0" y="725" width="3.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="861.05" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="880.0" y="741" width="1.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="882.97" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="383.3" y="613" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.29" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.16%)</title><rect x="1166.8" y="773" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.83" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.16%)</title><rect x="1163.1" y="773" width="1.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1166.07" y="783.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1143.7" y="773" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1146.65" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1170.6" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.58" y="735.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="581" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.75" y="591.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (20,202,020 samples, 0.11%)</title><rect x="1113.0" y="757" width="1.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1115.96" y="767.5" ></text>
</g>
<g >
<title>vsnprintf (181,818,180 samples, 0.96%)</title><rect x="83.9" y="725" width="11.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="86.91" y="735.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_scalar (10,101,010 samples, 0.05%)</title><rect x="1187.5" y="613" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1190.49" y="623.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="239.2" y="757" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="242.24" y="767.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1114.2" y="757" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1117.21" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="661" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="864.9" y="629" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="867.94" y="639.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.11%)</title><rect x="219.8" y="741" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="222.82" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="865.6" y="549" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.56" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="26.3" y="773" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.28" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="549" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="559.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (20,202,020 samples, 0.11%)</title><rect x="416.5" y="773" width="1.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="419.49" y="783.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (101,010,100 samples, 0.53%)</title><rect x="380.2" y="741" width="6.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="383.16" y="751.5" ></text>
</g>
<g >
<title>malloc (131,313,130 samples, 0.69%)</title><rect x="1056.6" y="741" width="8.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1059.59" y="751.5" ></text>
</g>
<g >
<title>sim::Process::operator (13,414,141,280 samples, 70.49%)</title><rect x="248.0" y="789" width="831.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="251.00" y="799.5" >sim::Process::operator</text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (30,303,030 samples, 0.16%)</title><rect x="386.4" y="741" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="389.42" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (90,909,090 samples, 0.48%)</title><rect x="874.3" y="725" width="5.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="877.33" y="735.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="1092.3" y="725" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1095.29" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.16%)</title><rect x="384.5" y="709" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="387.54" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="104.6" y="581" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.58" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="629" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="639.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="757" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1147.28" y="767.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.16%)</title><rect x="51.3" y="741" width="1.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="54.34" y="751.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.05%)</title><rect x="10.6" y="741" width="0.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.63" y="751.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (545,454,540 samples, 2.87%)</title><rect x="1084.8" y="773" width="33.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1087.78" y="783.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="629" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="388.9" y="757" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="391.93" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="565" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="25.0" y="741" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.03" y="751.5" ></text>
</g>
<g >
<title>nons (19,030,302,840 samples, 100.00%)</title><rect x="10.0" y="901" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="911.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="527.5" ></text>
</g>
<g >
<title>operator new (161,616,160 samples, 0.85%)</title><rect x="1054.7" y="757" width="10.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1057.71" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="105.8" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="108.83" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="105.2" y="501" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="108.20" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.05%)</title><rect x="226.1" y="725" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="229.08" y="735.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (323,232,320 samples, 1.70%)</title><rect x="58.9" y="757" width="20.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="61.85" y="767.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="757" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1121.60" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="645" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="677" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="687.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 1.06%)</title><rect x="656.4" y="757" width="12.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="659.37" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.05%)</title><rect x="1097.9" y="693" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1100.93" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="45.7" y="725" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="48.70" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="629" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="25.0" y="757" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.03" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.27%)</title><rect x="74.5" y="661" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="77.51" y="671.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (40,404,040 samples, 0.21%)</title><rect x="103.9" y="757" width="2.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="106.95" y="767.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (30,303,030 samples, 0.16%)</title><rect x="856.2" y="725" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="859.17" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.27%)</title><rect x="236.1" y="741" width="3.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="239.10" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="293" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1111.7" y="725" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1114.71" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="53.2" y="677" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.22" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="229.8" y="661" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="232.84" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="10.6" y="773" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.63" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="104.6" y="549" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.58" y="559.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.32%)</title><rect x="1139.9" y="741" width="3.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.89" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="501" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="511.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1136.1" y="757" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1139.14" y="767.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="365.8" y="725" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="368.75" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (151,515,150 samples, 0.80%)</title><rect x="226.7" y="741" width="9.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="229.71" y="751.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="741" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1121.60" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="55.7" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.72" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="741" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="453" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="453" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.22%)</title><rect x="635.7" y="741" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="638.70" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1178.1" y="757" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.10" y="767.5" ></text>
</g>
<g >
<title>sim::Event::get_time (80,808,080 samples, 0.42%)</title><rect x="121.5" y="805" width="5.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="124.49" y="815.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (494,949,490 samples, 2.60%)</title><rect x="330.7" y="773" width="30.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="333.68" y="783.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="197" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="661" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="671.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.05%)</title><rect x="243.0" y="757" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="245.99" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="231.7" y="645" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="234.72" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 1.11%)</title><rect x="64.5" y="677" width="13.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="67.49" y="687.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="372.0" y="741" width="2.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="375.02" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="629" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="639.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.27%)</title><rect x="1153.0" y="757" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.05" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="375.8" y="677" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="378.77" y="687.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="102.7" y="741" width="1.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="105.70" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.16%)</title><rect x="1184.4" y="645" width="1.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.36" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 1.01%)</title><rect x="11.3" y="773" width="11.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.25" y="783.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="885.0" y="741" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="887.98" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="645" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.11%)</title><rect x="462.2" y="757" width="1.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="465.21" y="767.5" ></text>
</g>
<g >
<title>main (18,818,181,630 samples, 98.89%)</title><rect x="23.2" y="837" width="1166.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="26.15" y="847.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="789" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="597" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.36" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="53.2" y="661" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.22" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="25.7" y="773" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="28.66" y="783.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.05%)</title><rect x="102.1" y="789" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="105.07" y="799.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (141,414,140 samples, 0.74%)</title><rect x="227.3" y="725" width="8.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="230.34" y="735.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (80,808,080 samples, 0.42%)</title><rect x="214.8" y="741" width="5.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="217.81" y="751.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,101,010,070 samples, 16.30%)</title><rect x="668.9" y="757" width="192.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="671.90" y="767.5" >sim::Link::get_packet</text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="789" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.37" y="799.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="117.7" y="805" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="120.73" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="55.7" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.72" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="725" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="1153.7" y="741" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.67" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="104.6" y="517" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.58" y="527.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="872.5" y="741" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="875.45" y="751.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="757" width="5.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.74" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="543.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="581" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.24" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="565" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1139.3" y="677" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1142.27" y="687.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.53%)</title><rect x="1183.7" y="821" width="6.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.74" y="831.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (363,636,360 samples, 1.91%)</title><rect x="56.3" y="773" width="22.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="59.35" y="783.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.05%)</title><rect x="370.8" y="693" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="373.76" y="703.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="45.7" y="757" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="48.70" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="805" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.37" y="815.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (101,010,100 samples, 0.53%)</title><rect x="861.8" y="741" width="6.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="864.80" y="751.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (80,808,080 samples, 0.42%)</title><rect x="862.4" y="709" width="5.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="865.43" y="719.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (15,797,979,640 samples, 83.01%)</title><rect x="149.0" y="805" width="979.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="152.04" y="815.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>sim::LinkQueue::push (70,707,070 samples, 0.37%)</title><rect x="1087.3" y="741" width="4.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1090.28" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1159.3" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.31" y="719.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (40,404,040 samples, 0.21%)</title><rect x="106.5" y="773" width="2.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="109.45" y="783.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="211.1" y="757" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="214.05" y="767.5" ></text>
</g>
<g >
<title>open64 (50,505,050 samples, 0.27%)</title><rect x="53.2" y="693" width="3.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="56.22" y="703.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.05%)</title><rect x="239.9" y="773" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="242.86" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="517" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="527.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="884.4" y="709" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="887.35" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="773" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1171.2" y="693" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.21" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1097.3" y="693" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1100.30" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="865.6" y="565" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.56" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1138.6" y="725" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.64" y="735.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="1138.6" y="741" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1141.64" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="661" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="671.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="388.3" y="741" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="391.30" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="373" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="597" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="236.1" y="725" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="239.10" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.16%)</title><rect x="386.4" y="709" width="1.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="389.42" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="677" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="687.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (30,303,030 samples, 0.16%)</title><rect x="361.4" y="773" width="1.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="364.37" y="783.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,454,545,440 samples, 7.64%)</title><rect x="23.2" y="821" width="90.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="26.15" y="831.5" >sim::Metri..</text>
</g>
<g >
<title>sim::Host::~Host (191,919,190 samples, 1.01%)</title><rect x="11.3" y="757" width="11.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.25" y="767.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.21%)</title><rect x="1157.4" y="757" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.43" y="767.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="376.4" y="709" width="2.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="379.40" y="719.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.16%)</title><rect x="460.3" y="757" width="1.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="463.33" y="767.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (555,555,550 samples, 2.92%)</title><rect x="885.6" y="757" width="34.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="888.61" y="767.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="867.4" y="725" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="870.44" y="735.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="217.9" y="709" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="220.94" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="53" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="63.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (515,151,510 samples, 2.71%)</title><rect x="208.5" y="789" width="32.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="211.55" y="799.5" >si..</text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1092.9" y="709" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1095.92" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="693" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="741" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.28" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1150.5" y="773" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.54" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="693" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.80%)</title><rect x="85.8" y="693" width="9.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="88.79" y="703.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.69%)</title><rect x="366.4" y="757" width="8.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="369.38" y="767.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="210.4" y="757" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="213.42" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="533" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="543.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="372.0" y="725" width="2.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="375.02" y="735.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="1091.0" y="709" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1094.04" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1139.3" y="693" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1142.27" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="224.2" y="693" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="227.20" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="26.3" y="757" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.28" y="767.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (272,727,270 samples, 1.43%)</title><rect x="60.7" y="741" width="16.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="63.73" y="751.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="709" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1121.60" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="549" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.24" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="112.1" y="661" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.09" y="671.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (111,111,110 samples, 0.58%)</title><rect x="861.2" y="757" width="6.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="864.18" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="55.7" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.72" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1135.5" y="757" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1138.51" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="725" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.05%)</title><rect x="223.6" y="693" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="226.58" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.32%)</title><rect x="1139.9" y="757" width="3.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1142.89" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="377.0" y="629" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="380.03" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="527.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="581" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.36" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="533" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="165" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="372.0" y="661" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="375.02" y="671.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1106.1" y="725" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1109.07" y="735.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.53%)</title><rect x="380.2" y="725" width="6.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="383.16" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="565" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="677" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="45.7" y="741" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="48.70" y="751.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="773" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.28" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.96%)</title><rect x="196.6" y="773" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="199.65" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="645" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.42%)</title><rect x="875.0" y="645" width="5.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="877.96" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="709" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="378.3" y="597" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="381.28" y="607.5" ></text>
</g>
<g >
<title>Logger::get_instance (70,707,070 samples, 0.37%)</title><rect x="296.2" y="773" width="4.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="299.23" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="864.9" y="645" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="867.94" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="693" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="469" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="853" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="805" width="5.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.74" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="549" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="773" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="1092.9" y="725" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1095.92" y="735.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="741" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="751.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,282,828,270 samples, 6.74%)</title><rect x="23.2" y="805" width="79.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="26.15" y="815.5" >sim::Link..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="53.8" y="565" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.84" y="575.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1136.1" y="741" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1139.14" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="69" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="517" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="613" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="623.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (60,606,060 samples, 0.32%)</title><rect x="243.6" y="757" width="3.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="246.62" y="767.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (80,808,080 samples, 0.42%)</title><rect x="1156.8" y="773" width="5.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1159.80" y="783.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1170.6" y="757" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.58" y="767.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="871.8" y="725" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="874.83" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="878.7" y="629" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.72" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="25.0" y="773" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.03" y="783.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="597" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.24" y="607.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="217.3" y="709" width="0.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="220.31" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="1151.8" y="757" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1154.79" y="767.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="773" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1121.60" y="783.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (505,050,500 samples, 2.65%)</title><rect x="1144.9" y="789" width="31.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1147.90" y="799.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="53.2" y="645" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.22" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.16%)</title><rect x="1159.9" y="757" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1162.94" y="767.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.05%)</title><rect x="1091.0" y="725" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1094.04" y="735.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="367.0" y="725" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="370.01" y="735.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (151,515,150 samples, 0.80%)</title><rect x="1119.2" y="789" width="9.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1122.23" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.21%)</title><rect x="376.4" y="645" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="379.40" y="655.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="112.7" y="741" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="115.72" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="57.6" y="757" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="60.60" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="463.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.11%)</title><rect x="385.2" y="693" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="388.17" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (494,949,490 samples, 2.60%)</title><rect x="594.4" y="757" width="30.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="597.36" y="767.5" >[l..</text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.27%)</title><rect x="375.8" y="725" width="3.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="378.77" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="383.3" y="645" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.29" y="655.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.64%)</title><rect x="228.0" y="709" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="230.96" y="719.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="709" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1154.3" y="693" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.30" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1152.4" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1155.42" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.97" y="735.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (20,202,020 samples, 0.11%)</title><rect x="102.7" y="773" width="1.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="105.70" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.96%)</title><rect x="83.9" y="709" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="86.91" y="719.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,292,929,280 samples, 6.79%)</title><rect x="999.6" y="773" width="80.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1002.60" y="783.5" >void sim:..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.11%)</title><rect x="1097.3" y="709" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1100.30" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="517" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="133" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="143.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (303,030,300 samples, 1.59%)</title><rect x="575.6" y="741" width="18.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="578.57" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="549" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="559.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1171.2" y="741" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.21" y="751.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.27%)</title><rect x="1104.2" y="741" width="3.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1107.19" y="751.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.27%)</title><rect x="1153.0" y="773" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.05" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="10.6" y="757" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.63" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="210.4" y="741" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="213.42" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="431.5" ></text>
</g>
<g >
<title>fopen (40,404,040 samples, 0.21%)</title><rect x="103.9" y="741" width="2.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="106.95" y="751.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (50,505,050 samples, 0.27%)</title><rect x="858.0" y="741" width="3.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="861.05" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.96%)</title><rect x="807.3" y="741" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="810.31" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="93.9" y="645" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="96.93" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.11%)</title><rect x="1188.1" y="597" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.12" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="645" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="655.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (50,505,050 samples, 0.27%)</title><rect x="53.2" y="773" width="3.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="56.22" y="783.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (30,303,030 samples, 0.16%)</title><rect x="868.7" y="757" width="1.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="871.69" y="767.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.16%)</title><rect x="1102.3" y="693" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1105.31" y="703.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (121,212,120 samples, 0.64%)</title><rect x="240.5" y="789" width="7.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="243.49" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1185.6" y="581" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.62" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="645" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="655.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.16%)</title><rect x="864.9" y="677" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="867.94" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.06%)</title><rect x="10.6" y="837" width="12.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.63" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="645" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="383.3" y="629" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.29" y="639.5" ></text>
</g>
<g >
<title>operator new (292,929,290 samples, 1.54%)</title><rect x="838.0" y="741" width="18.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="841.00" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="213" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="52.0" y="501" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.96" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="805" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (30,303,030 samples, 0.16%)</title><rect x="856.2" y="741" width="1.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="859.17" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="607.5" ></text>
</g>
<g >
<title>std::common_comparison_category&lt;decltype  (10,101,010 samples, 0.05%)</title><rect x="866.8" y="693" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="869.82" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="431.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="220.4" y="725" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="223.45" y="735.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="386.4" y="725" width="1.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="389.42" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="110.8" y="693" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="113.84" y="703.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="880.0" y="725" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="882.97" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="864.9" y="613" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="867.94" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="709" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="719.5" ></text>
</g>
<g >
<title>write (20,202,020 samples, 0.11%)</title><rect x="102.7" y="709" width="1.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="105.70" y="719.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.37%)</title><rect x="374.5" y="741" width="4.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="377.52" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.05%)</title><rect x="389.6" y="757" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="392.55" y="767.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="1106.7" y="725" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1109.70" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="645" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1093.41" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.21%)</title><rect x="1179.4" y="789" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.35" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="469" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="677" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.37" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="874.3" y="661" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="877.33" y="671.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1175.6" y="773" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1178.59" y="783.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.11%)</title><rect x="1185.0" y="597" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.99" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="693" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="533" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="501" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="511.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="789" width="5.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.74" y="799.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="1089.8" y="693" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1092.79" y="703.5" ></text>
</g>
<g >
<title>sim::Event::Event (303,030,300 samples, 1.59%)</title><rect x="311.9" y="773" width="18.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="314.89" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="110.8" y="677" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="113.84" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="661" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="671.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="613" width="1.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1189.24" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1136.1" y="773" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1139.14" y="783.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.11%)</title><rect x="50.1" y="741" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="53.08" y="751.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (20,202,020 samples, 0.11%)</title><rect x="102.7" y="757" width="1.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="105.70" y="767.5" ></text>
</g>
<g >
<title>sim::Parser&lt;sim::Link&gt;::parse_object (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="757" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.37" y="767.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.42%)</title><rect x="306.3" y="773" width="5.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="309.25" y="783.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.05%)</title><rect x="997.1" y="757" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1000.09" y="767.5" ></text>
</g>
<g >
<title>sim::Process::~Process (70,707,070 samples, 0.37%)</title><rect x="1079.8" y="789" width="4.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1082.77" y="799.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_instance (10,101,010 samples, 0.05%)</title><rect x="378.9" y="741" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="381.91" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="363.9" y="709" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.87" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="25.7" y="757" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.66" y="767.5" ></text>
</g>
<g >
<title>cfree (404,040,400 samples, 2.12%)</title><rect x="625.1" y="757" width="25.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="628.05" y="767.5" >c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1154.9" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.93" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="485" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="821" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.16%)</title><rect x="1186.2" y="629" width="1.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1189.24" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="26.3" y="741" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.28" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="858.7" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="861.67" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 1.33%)</title><rect x="62.0" y="709" width="15.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="64.99" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="613" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="623.5" ></text>
</g>
<g >
<title>sim::Link::arrive (494,949,490 samples, 2.60%)</title><rect x="209.2" y="773" width="30.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="212.17" y="783.5" >si..</text>
</g>
<g >
<title>fopen (50,505,050 samples, 0.27%)</title><rect x="53.2" y="741" width="3.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="56.22" y="751.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="95.2" y="741" width="0.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="98.18" y="751.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.11%)</title><rect x="383.3" y="661" width="1.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="386.29" y="671.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="645" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1186.74" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="379.5" y="741" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="382.53" y="751.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (60,606,060 samples, 0.32%)</title><rect x="1114.8" y="757" width="3.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1117.84" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="661" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="671.5" ></text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.16%)</title><rect x="300.6" y="773" width="1.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="303.62" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="597" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.58%)</title><rect x="228.6" y="677" width="6.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="231.59" y="687.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1156.2" y="773" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.18" y="783.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="462.8" y="741" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="465.83" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1154.9" y="613" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1157.93" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="50.1" y="725" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="53.08" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.27%)</title><rect x="53.2" y="629" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.22" y="639.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="1099.8" y="741" width="4.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1102.81" y="751.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1106.7" y="709" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1109.70" y="719.5" ></text>
</g>
<g >
<title>sim::Link::Link (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="741" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1192.37" y="751.5" ></text>
</g>
<g >
<title>Logger::get_instance (101,010,100 samples, 0.53%)</title><rect x="692.1" y="741" width="6.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="695.07" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="389" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="517" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="101" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="53.8" y="581" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="56.84" y="591.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="109.6" y="757" width="3.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="112.59" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="469" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="479.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (70,707,070 samples, 0.37%)</title><rect x="1087.3" y="757" width="4.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1090.28" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.16%)</title><rect x="223.6" y="709" width="1.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="226.58" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="645" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="55.7" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.72" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="677" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,020,201,830 samples, 99.95%)</title><rect x="10.6" y="853" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.63" y="863.5" >[libc.so.6]</text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.05%)</title><rect x="226.1" y="741" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="229.08" y="751.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (30,303,030 samples, 0.16%)</title><rect x="51.3" y="725" width="1.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="54.34" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="24.4" y="629" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="27.41" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="693" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="703.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (60,606,060 samples, 0.32%)</title><rect x="1100.4" y="725" width="3.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1103.44" y="735.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.16%)</title><rect x="1184.4" y="629" width="1.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.36" y="639.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.11%)</title><rect x="1178.1" y="773" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1181.10" y="783.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1171.2" y="725" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1174.21" y="735.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="383.3" y="677" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="386.29" y="687.5" ></text>
</g>
<g >
<title>Logger::warn (2,111,111,090 samples, 11.09%)</title><rect x="463.5" y="757" width="130.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="466.46" y="767.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="501" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="511.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (30,303,030 samples, 0.16%)</title><rect x="113.3" y="821" width="1.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="116.34" y="831.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.16%)</title><rect x="223.6" y="725" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="226.58" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="372.0" y="677" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="375.02" y="687.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="375.8" y="693" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="378.77" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="581" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="591.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.05%)</title><rect x="243.0" y="741" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="245.99" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.90%)</title><rect x="827.4" y="725" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="830.36" y="735.5" ></text>
</g>
<g >
<title>_start (19,020,201,830 samples, 99.95%)</title><rect x="10.6" y="885" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.63" y="895.5" >_start</text>
</g>
<g >
<title>vsnprintf (262,626,260 samples, 1.38%)</title><rect x="61.4" y="725" width="16.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="64.36" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="517" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (20,202,020 samples, 0.11%)</title><rect x="102.7" y="725" width="1.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="105.70" y="735.5" ></text>
</g>
<g >
<title>write (30,303,030 samples, 0.16%)</title><rect x="51.3" y="709" width="1.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="54.34" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="885" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>open64 (40,404,040 samples, 0.21%)</title><rect x="103.9" y="693" width="2.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="106.95" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="469" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="363.2" y="757" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="366.25" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.7" y="565" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.75" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="693" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="1186.2" y="533" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.24" y="543.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.16%)</title><rect x="864.9" y="661" width="1.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="867.94" y="671.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (121,212,120 samples, 0.64%)</title><rect x="214.2" y="757" width="7.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="217.18" y="767.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="677" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1093.41" y="687.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="725" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="735.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.11%)</title><rect x="221.7" y="757" width="1.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="224.70" y="767.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="693" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="703.5" ></text>
</g>
<g >
<title>__libc_start_main (19,020,201,830 samples, 99.95%)</title><rect x="10.6" y="869" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.63" y="879.5" >__libc_start_main</text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="1099.2" y="741" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1102.18" y="751.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.4" y="613" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.36" y="623.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start (17,232,323,060 samples, 90.55%)</title><rect x="115.2" y="821" width="1068.5" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="118.22" y="831.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.11%)</title><rect x="870.6" y="741" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="873.57" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.16%)</title><rect x="1164.9" y="773" width="1.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1167.95" y="783.5" ></text>
</g>
<g >
<title>sim::ECN::get_congestion_mark (10,101,010 samples, 0.05%)</title><rect x="311.3" y="773" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="314.26" y="783.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="221.1" y="741" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="224.07" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1101.7" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1104.69" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.21%)</title><rect x="99.6" y="789" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="102.56" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="373.3" y="629" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="376.27" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="613" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="623.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.11%)</title><rect x="1161.8" y="773" width="1.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1164.82" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.58%)</title><rect x="1136.8" y="773" width="6.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1139.76" y="783.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (101,010,100 samples, 0.53%)</title><rect x="390.8" y="773" width="6.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="393.81" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="383.9" y="597" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.92" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="105.2" y="485" width="1.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="108.20" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="677" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.64%)</title><rect x="15.6" y="725" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.64" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="357" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="367.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (10,101,010 samples, 0.05%)</title><rect x="207.9" y="789" width="0.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="210.92" y="799.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.16%)</title><rect x="380.2" y="709" width="1.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="383.16" y="719.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.11%)</title><rect x="385.2" y="677" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="388.17" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="757" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="757" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.32%)</title><rect x="1139.9" y="709" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1142.89" y="719.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1132.4" y="789" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1135.38" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.11%)</title><rect x="1188.1" y="629" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.12" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="453" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (60,606,060 samples, 0.32%)</title><rect x="1171.8" y="773" width="3.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.84" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="629" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="639.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.16%)</title><rect x="859.3" y="709" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="862.30" y="719.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="1118.6" y="725" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1121.60" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="55.7" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="58.72" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="107.7" y="693" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="110.71" y="703.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::get_devices (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="789" width="0.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1147.28" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="104.6" y="533" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.58" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="661" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="104.6" y="565" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.58" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="661" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="671.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.37%)</title><rect x="650.1" y="757" width="4.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="653.11" y="767.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.48%)</title><rect x="1183.7" y="677" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.74" y="687.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.16%)</title><rect x="372.0" y="693" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="375.02" y="703.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.11%)</title><rect x="1188.1" y="613" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.12" y="623.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="565" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.99" y="575.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="1097.3" y="677" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1100.30" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="613" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="52.6" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.59" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.42%)</title><rect x="1184.4" y="661" width="5.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.36" y="671.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="382.0" y="709" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="385.04" y="719.5" ></text>
</g>
<g >
<title>malloc (232,323,230 samples, 1.22%)</title><rect x="841.8" y="725" width="14.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="844.76" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="229" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="214.8" y="725" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="217.81" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="485" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="367.6" y="741" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="370.63" y="751.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="1089.8" y="709" width="1.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1092.79" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="709" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="719.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="365.8" y="709" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="368.75" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1152.4" y="741" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1155.42" y="751.5" ></text>
</g>
<g >
<title>Logger::info (1,757,575,740 samples, 9.24%)</title><rect x="698.3" y="741" width="109.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="701.33" y="751.5" >Logger::info</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1158.1" y="725" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1161.06" y="735.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1174.3" y="757" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.34" y="767.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.11%)</title><rect x="1138.6" y="757" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1141.64" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.53%)</title><rect x="16.9" y="709" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.89" y="719.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="25.7" y="789" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="28.66" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="341" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1155.6" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.55" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.48%)</title><rect x="874.3" y="677" width="5.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="877.33" y="687.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.16%)</title><rect x="1104.2" y="725" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1107.19" y="735.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="77.6" y="741" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="80.64" y="751.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 0.11%)</title><rect x="245.5" y="725" width="1.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="248.50" y="735.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (20,202,020 samples, 0.11%)</title><rect x="241.7" y="757" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="244.74" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="565" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1084.2" y="773" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1087.15" y="783.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.16%)</title><rect x="1151.2" y="773" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1154.17" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (151,515,150 samples, 0.80%)</title><rect x="85.8" y="677" width="9.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="88.79" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="485" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (50,505,050 samples, 0.27%)</title><rect x="109.6" y="741" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="112.59" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="52.6" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="55.59" y="495.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.21%)</title><rect x="1157.4" y="741" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1160.43" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="645" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="52.0" y="517" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.96" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.11%)</title><rect x="48.8" y="757" width="1.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="51.83" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1085.4" y="757" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1088.40" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="377.0" y="613" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="380.03" y="623.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.05%)</title><rect x="225.5" y="741" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="228.46" y="751.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.16%)</title><rect x="997.7" y="757" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1000.72" y="767.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (70,707,070 samples, 0.37%)</title><rect x="109.0" y="773" width="4.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="111.96" y="783.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="884.4" y="741" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="887.35" y="751.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::send_packets (90,909,090 samples, 0.48%)</title><rect x="374.5" y="757" width="5.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="377.52" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="52.0" y="533" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.96" y="543.5" ></text>
</g>
<g >
<title>sim::Host::process (444,444,440 samples, 2.34%)</title><rect x="363.2" y="773" width="27.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="366.25" y="783.5" >s..</text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.21%)</title><rect x="363.9" y="741" width="2.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="366.87" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="677" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="687.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.05%)</title><rect x="78.3" y="741" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="81.27" y="751.5" ></text>
</g>
<g >
<title>sim::TcpFlow&lt;sim::TcpTahoeCC&gt;::update (141,414,140 samples, 0.74%)</title><rect x="380.2" y="757" width="8.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="383.16" y="767.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.48%)</title><rect x="143.4" y="805" width="5.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="146.41" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="549" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.37" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.21%)</title><rect x="376.4" y="677" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="379.40" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1143.0" y="677" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.03" y="687.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="661" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1093.41" y="671.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="367.0" y="741" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="370.01" y="751.5" ></text>
</g>
<g >
<title>_IO_file_open (40,404,040 samples, 0.21%)</title><rect x="103.9" y="709" width="2.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="106.95" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="485" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="26.9" y="677" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="29.91" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="597" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="607.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="629" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1186.74" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="325" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="102.7" y="661" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="105.70" y="671.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (40,404,040 samples, 0.21%)</title><rect x="103.9" y="773" width="2.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="106.95" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="581" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="591.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (171,717,170 samples, 0.90%)</title><rect x="102.7" y="789" width="10.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="105.70" y="799.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="868.1" y="757" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="871.07" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="23.8" y="709" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="26.78" y="719.5" ></text>
</g>
<g >
<title>sim::Event::Event (242,424,240 samples, 1.27%)</title><rect x="1064.7" y="757" width="15.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1067.73" y="767.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.16%)</title><rect x="369.5" y="725" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="372.51" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (50,505,050 samples, 0.27%)</title><rect x="1176.2" y="789" width="3.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.22" y="799.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.48%)</title><rect x="1093.5" y="741" width="5.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1096.55" y="751.5" ></text>
</g>
<g >
<title>all (19,030,302,840 samples, 100%)</title><rect x="10.0" y="917" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (232,323,230 samples, 1.22%)</title><rect x="63.2" y="693" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="66.24" y="703.5" ></text>
</g>
<g >
<title>sim::Switch::process (9,383,838,290 samples, 49.31%)</title><rect x="417.7" y="773" width="581.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="420.74" y="783.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="865.6" y="581" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.56" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="866.2" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="869.19" y="447.5" ></text>
</g>
<g >
<title>sim::SendData::operator (555,555,550 samples, 2.92%)</title><rect x="1084.2" y="789" width="34.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1087.15" y="799.5" >si..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="181" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="191.5" ></text>
</g>
<g >
<title>_IO_file_open (50,505,050 samples, 0.27%)</title><rect x="53.2" y="709" width="3.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="56.22" y="719.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.21%)</title><rect x="223.0" y="741" width="2.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="225.95" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1090.4" y="581" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1093.41" y="591.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.32%)</title><rect x="1139.9" y="725" width="3.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1142.89" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="243.6" y="725" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="246.62" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="677" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 1.06%)</title><rect x="10.6" y="805" width="12.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.63" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="187.3" y="789" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="190.25" y="799.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="246.8" y="725" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="249.75" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.05%)</title><rect x="1171.2" y="757" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1174.21" y="767.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="871.8" y="741" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="874.83" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="246.8" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="249.75" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="677" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="687.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.11%)</title><rect x="363.9" y="725" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="366.87" y="735.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.27%)</title><rect x="118.4" y="805" width="3.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="121.35" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="51.3" y="629" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="54.34" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="565" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.16%)</title><rect x="54.5" y="437" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.47" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="25.0" y="789" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="28.03" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="238.6" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="241.61" y="719.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (50,505,050 samples, 0.27%)</title><rect x="53.2" y="757" width="3.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="56.22" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="108.3" y="677" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="111.33" y="687.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.05%)</title><rect x="58.2" y="757" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="61.23" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.37%)</title><rect x="90.8" y="661" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="93.80" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.16%)</title><rect x="1102.3" y="661" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1105.31" y="671.5" ></text>
</g>
<g >
<title>_IO_file_fopen (40,404,040 samples, 0.21%)</title><rect x="103.9" y="725" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="106.95" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.11%)</title><rect x="865.6" y="533" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.56" y="543.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (181,818,180 samples, 0.96%)</title><rect x="1133.0" y="789" width="11.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1136.00" y="799.5" ></text>
</g>
<g >
<title>sim::Process::Process (20,202,020 samples, 0.11%)</title><rect x="212.9" y="741" width="1.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="215.93" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.11%)</title><rect x="234.2" y="629" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="237.23" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1171.2" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1174.21" y="719.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (60,606,060 samples, 0.32%)</title><rect x="216.1" y="725" width="3.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="219.06" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="1182.5" y="789" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.48" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 1.06%)</title><rect x="10.6" y="821" width="12.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.63" y="831.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.16%)</title><rect x="382.7" y="709" width="1.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="385.66" y="719.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (141,414,140 samples, 0.74%)</title><rect x="126.5" y="805" width="8.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="129.50" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.05%)</title><rect x="217.3" y="85" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="220.31" y="95.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="884.4" y="725" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="887.35" y="735.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.05%)</title><rect x="1185.0" y="581" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.99" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.21%)</title><rect x="103.9" y="597" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="106.95" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="149" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="159.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (10,101,010 samples, 0.05%)</title><rect x="247.4" y="773" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="250.38" y="783.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="773" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.37" y="783.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="873.1" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="876.08" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1144.3" y="725" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.28" y="735.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.21%)</title><rect x="376.4" y="693" width="2.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="379.40" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1186.9" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.87" y="335.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.21%)</title><rect x="376.4" y="661" width="2.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="379.40" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="581" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.74" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.27%)</title><rect x="20.0" y="693" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.02" y="703.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow&lt;sim::TcpTahoeCC&gt;, sim::Link&gt;::recalculate_paths (878,787,870 samples, 4.62%)</title><rect x="1128.6" y="805" width="54.5" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1131.62" y="815.5" >sim::..</text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (111,111,110 samples, 0.58%)</title><rect x="404.6" y="773" width="6.9" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="407.59" y="783.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1183.7" y="613" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.74" y="623.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (90,909,090 samples, 0.48%)</title><rect x="1107.3" y="757" width="5.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1110.32" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="629" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="95.2" y="549" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="98.18" y="559.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.16%)</title><rect x="107.1" y="725" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="110.08" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="805" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1186.11" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.05%)</title><rect x="217.3" y="549" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="220.31" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="861.8" y="709" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="864.80" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.11%)</title><rect x="50.1" y="773" width="1.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="53.08" y="783.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.32%)</title><rect x="368.3" y="741" width="3.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="371.26" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 1.06%)</title><rect x="10.6" y="789" width="12.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.63" y="799.5" ></text>
</g>
</g>
</svg>
