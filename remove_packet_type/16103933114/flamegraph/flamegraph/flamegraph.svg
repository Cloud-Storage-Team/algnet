<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="534.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="517" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="517" > </text>
<g id="frames">
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="149" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="159.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (161,616,160 samples, 0.78%)</title><rect x="378.6" y="341" width="9.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="381.64" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="837.0" y="293" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="839.98" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.8" y="309" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.75" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,525,252,510 samples, 7.41%)</title><rect x="903.0" y="325" width="87.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="905.96" y="335.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.54%)</title><rect x="1137.9" y="325" width="6.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1140.92" y="335.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.20%)</title><rect x="418.0" y="325" width="2.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="420.99" y="335.5" ></text>
</g>
<g >
<title>sim::Process::~Process (131,313,130 samples, 0.64%)</title><rect x="88.7" y="373" width="7.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="91.71" y="383.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.34%)</title><rect x="584.1" y="325" width="4.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="587.09" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,585,858,380 samples, 99.95%)</title><rect x="10.6" y="421" width="1179.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="431.5" >[libc.so.6]</text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.05%)</title><rect x="1153.5" y="309" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1156.54" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="197" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.21" y="207.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="258.8" y="293" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="261.85" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (20,202,020 samples, 0.10%)</title><rect x="377.5" y="341" width="1.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="380.48" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1121.1" y="229" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1124.13" y="239.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.10%)</title><rect x="1186.5" y="165" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.53" y="175.5" ></text>
</g>
<g >
<title>main (20,393,939,190 samples, 99.02%)</title><rect x="21.6" y="405" width="1168.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.57" y="415.5" >main</text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="244.4" y="293" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="247.38" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.05%)</title><rect x="356.1" y="325" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="359.07" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="364.2" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="367.17" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="197" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.79" y="207.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.29%)</title><rect x="1140.8" y="293" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.81" y="303.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="357" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1191.84" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="69" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="79.5" ></text>
</g>
<g >
<title>sim::Host::process (333,333,330 samples, 1.62%)</title><rect x="355.5" y="341" width="19.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="358.49" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (20,202,020 samples, 0.10%)</title><rect x="1115.9" y="325" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1118.92" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="165" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.79" y="175.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="247.3" y="325" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="250.27" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.39%)</title><rect x="1118.2" y="309" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1121.24" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.20%)</title><rect x="1185.9" y="213" width="2.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.95" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="253.1" y="293" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="256.06" y="303.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.05%)</title><rect x="261.2" y="341" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="264.16" y="351.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.29%)</title><rect x="1140.8" y="277" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1143.81" y="287.5" ></text>
</g>
<g >
<title>parse_value_unit (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="309" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.84" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="240.9" y="277" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="243.91" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1165.7" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="303.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.05%)</title><rect x="261.7" y="341" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="264.74" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (191,919,190 samples, 0.93%)</title><rect x="10.6" y="357" width="11.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.10%)</title><rect x="1179.6" y="357" width="1.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1182.58" y="367.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="1127.5" y="309" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1130.50" y="319.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (50,505,050 samples, 0.25%)</title><rect x="1151.2" y="341" width="2.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1154.23" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.2" y="277" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.16" y="287.5" ></text>
</g>
<g >
<title>nons (20,595,959,390 samples, 100.00%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >nons</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="357.8" y="309" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="360.81" y="319.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="256.0" y="229" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="258.95" y="239.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1147.8" y="341" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1150.75" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="368.2" y="261" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="371.22" y="271.5" ></text>
</g>
<g >
<title>Logger::warn (20,202,020 samples, 0.10%)</title><rect x="302.3" y="341" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="305.25" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="837.0" y="277" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="839.98" y="287.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (50,505,050 samples, 0.25%)</title><rect x="369.4" y="309" width="2.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="372.38" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (252,525,250 samples, 1.23%)</title><rect x="523.9" y="309" width="14.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="526.90" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="356.1" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="359.07" y="303.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (141,414,140 samples, 0.69%)</title><rect x="236.9" y="341" width="8.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="239.86" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="834.1" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="837.09" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="18.7" y="277" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.68" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.15%)</title><rect x="10.6" y="341" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.58" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.49%)</title><rect x="356.7" y="325" width="5.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="359.65" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="361.3" y="309" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="364.28" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="902.4" y="309" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="905.38" y="319.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.05%)</title><rect x="367.1" y="245" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="370.07" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="359.5" y="245" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="362.54" y="255.5" ></text>
</g>
<g >
<title>sim::Link::arrive (262,626,260 samples, 1.28%)</title><rect x="246.1" y="341" width="15.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="249.12" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="175.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.15%)</title><rect x="16.9" y="309" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="19.94" y="319.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="257.7" y="293" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="260.69" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="253.1" y="309" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="256.06" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="264.1" y="341" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="267.06" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1134.4" y="341" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.44" y="351.5" ></text>
</g>
<g >
<title>YAML::Load (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="357" width="4.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.63" y="367.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.05%)</title><rect x="901.8" y="293" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="904.80" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="165" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>sim::Process::~Process (121,212,120 samples, 0.59%)</title><rect x="1099.7" y="357" width="7.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1102.72" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="181" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="191.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="213" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1187.79" y="223.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (70,707,070 samples, 0.34%)</title><rect x="387.9" y="341" width="4.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="390.90" y="351.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="11.2" y="293" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.16" y="303.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="373" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.84" y="383.5" ></text>
</g>
<g >
<title>Logger::info (2,323,232,300 samples, 11.28%)</title><rect x="628.1" y="309" width="133.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="631.07" y="319.5" >Logger::info</text>
</g>
<g >
<title>sim::Link::get_packet (4,030,302,990 samples, 19.57%)</title><rect x="600.9" y="325" width="230.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="603.87" y="335.5" >sim::Link::get_packet</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1147.8" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.75" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.10%)</title><rect x="1114.8" y="309" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1117.77" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (60,606,060 samples, 0.29%)</title><rect x="1118.8" y="293" width="3.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1121.82" y="303.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (20,202,020 samples, 0.10%)</title><rect x="21.6" y="389" width="1.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="24.57" y="399.5" ></text>
</g>
<g >
<title>sim::FlagManager&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::set_flag (10,101,010 samples, 0.05%)</title><rect x="364.8" y="309" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="367.75" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="239.7" y="261" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="242.75" y="271.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (141,414,140 samples, 0.69%)</title><rect x="236.9" y="325" width="8.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="239.86" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1169.2" y="261" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.17" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="356.1" y="309" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="359.07" y="319.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="181" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.21" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (121,212,120 samples, 0.59%)</title><rect x="1107.2" y="309" width="7.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1110.24" y="319.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (30,303,030 samples, 0.15%)</title><rect x="1126.9" y="325" width="1.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1129.92" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="373" width="0.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.42" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="197" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1190.69" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1184.8" y="181" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1187.79" y="191.5" ></text>
</g>
<g >
<title>sim::Link::get_transmission_delay (10,101,010 samples, 0.05%)</title><rect x="261.7" y="325" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="264.74" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="834.1" y="245" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="837.09" y="255.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="836.4" y="293" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="839.41" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.10%)</title><rect x="10.6" y="309" width="1.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.58" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="367.1" y="261" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="370.07" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (90,909,090 samples, 0.44%)</title><rect x="227.6" y="357" width="5.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="230.60" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.05%)</title><rect x="1144.9" y="325" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1147.86" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (20,202,020 samples, 0.10%)</title><rect x="238.0" y="293" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="241.01" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.15%)</title><rect x="1180.7" y="357" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.74" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (161,616,160 samples, 0.78%)</title><rect x="12.3" y="341" width="9.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.31" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (888,888,880 samples, 4.32%)</title><rect x="1132.7" y="373" width="50.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1135.71" y="383.5" >sim::..</text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="360.7" y="309" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="363.70" y="319.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="242.6" y="293" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="245.64" y="303.5" ></text>
</g>
<g >
<title>all (20,595,959,390 samples, 100%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1148.3" y="309" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.33" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.11" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.27" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="223.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (636,363,630 samples, 3.09%)</title><rect x="309.8" y="341" width="36.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="312.77" y="351.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="85" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="95.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.20%)</title><rect x="1122.9" y="293" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1125.87" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.93%)</title><rect x="10.6" y="405" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1183.1" y="357" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1186.06" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="37" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (303,030,300 samples, 1.47%)</title><rect x="210.2" y="341" width="17.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="213.24" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.20%)</title><rect x="900.1" y="309" width="2.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="903.06" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (494,949,490 samples, 2.40%)</title><rect x="761.2" y="309" width="28.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="764.17" y="319.5" >[l..</text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.74%)</title><rect x="1135.6" y="341" width="8.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1138.60" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="358.4" y="293" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="361.39" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.25%)</title><rect x="1151.2" y="325" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1154.23" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (10,101,010 samples, 0.05%)</title><rect x="1121.7" y="261" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1124.71" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="389" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.10%)</title><rect x="1154.1" y="341" width="1.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1157.12" y="351.5" ></text>
</g>
<g >
<title>malloc (111,111,110 samples, 0.54%)</title><rect x="594.5" y="309" width="6.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="597.50" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="53" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.74" y="287.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (282,828,280 samples, 1.37%)</title><rect x="745.0" y="293" width="16.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="747.97" y="303.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.25%)</title><rect x="18.7" y="293" width="2.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.68" y="303.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.20%)</title><rect x="25.6" y="373" width="2.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="28.63" y="383.5" ></text>
</g>
<g >
<title>cfree (575,757,570 samples, 2.80%)</title><rect x="194.6" y="357" width="33.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="197.61" y="367.5" >cf..</text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1114.2" y="309" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1117.19" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.05%)</title><rect x="1161.1" y="341" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1164.06" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="19.8" y="245" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.84" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.84" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="243.8" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="246.80" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="293" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.59%)</title><rect x="252.5" y="325" width="6.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="255.48" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="834.1" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="837.09" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="252.5" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="255.48" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (50,505,050 samples, 0.25%)</title><rect x="1155.3" y="341" width="2.9" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1158.28" y="351.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1139.7" y="309" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1142.65" y="319.5" ></text>
</g>
<g >
<title>sim::Event::get_time (20,202,020 samples, 0.10%)</title><rect x="30.8" y="373" width="1.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="33.83" y="383.5" ></text>
</g>
<g >
<title>malloc (323,232,320 samples, 1.57%)</title><rect x="810.9" y="293" width="18.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="813.94" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="374.0" y="325" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="377.01" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.29%)</title><rect x="303.4" y="341" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="306.41" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="239.7" y="277" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="242.75" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.05%)</title><rect x="367.1" y="277" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="370.07" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="207.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.15%)</title><rect x="416.3" y="325" width="1.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="419.26" y="335.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (10,101,010 samples, 0.05%)</title><rect x="82.3" y="373" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="85.34" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.05%)</title><rect x="1182.5" y="357" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1185.48" y="367.5" ></text>
</g>
<g >
<title>sim::SendData::operator (383,838,380 samples, 1.86%)</title><rect x="1106.7" y="357" width="22.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1109.67" y="367.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="256.0" y="245" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="258.95" y="255.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (585,858,580 samples, 2.84%)</title><rect x="1146.0" y="357" width="33.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1149.02" y="367.5" >si..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="355.5" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="358.49" y="335.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.54%)</title><rect x="1183.6" y="389" width="6.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1186.63" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.25%)</title><rect x="625.2" y="309" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="628.17" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1180.2" y="341" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1183.16" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (20,262,626,060 samples, 98.38%)</title><rect x="22.7" y="389" width="1160.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="25.73" y="399.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::Process::operator (14,575,757,430 samples, 70.77%)</title><rect x="264.6" y="357" width="835.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="267.63" y="367.5" >sim::Process::operator</text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.83%)</title><rect x="794.7" y="293" width="9.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="797.74" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.10%)</title><rect x="829.5" y="309" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="832.46" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="367.6" y="277" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="370.65" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1175.0" y="325" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.95" y="335.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.34%)</title><rect x="1175.5" y="325" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.53" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (50,505,050 samples, 0.25%)</title><rect x="369.4" y="293" width="2.9" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="372.38" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="261" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1140.2" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.23" y="287.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.39%)</title><rect x="253.6" y="309" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="256.64" y="319.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (383,838,380 samples, 1.86%)</title><rect x="1106.7" y="341" width="22.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1109.67" y="351.5" >s..</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.10%)</title><rect x="1114.8" y="325" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1117.77" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (474,747,470 samples, 2.31%)</title><rect x="538.4" y="325" width="27.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="541.37" y="335.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="197" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1188.37" y="207.5" ></text>
</g>
<g >
<title>Logger::warn (2,060,606,040 samples, 10.00%)</title><rect x="420.3" y="325" width="118.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="423.31" y="335.5" >Logger::warn</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="117" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="127.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (161,616,160 samples, 0.78%)</title><rect x="1117.1" y="325" width="9.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1120.08" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="325" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.27" y="335.5" ></text>
</g>
<g >
<title>sim::Process::operator (101,010,100 samples, 0.49%)</title><rect x="82.9" y="373" width="5.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="85.92" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="357.2" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="360.23" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="361.9" y="277" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="364.86" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,565,656,460 samples, 51.30%)</title><rect x="392.5" y="341" width="605.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="395.53" y="351.5" >sim::Switch::process</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (80,808,080 samples, 0.39%)</title><rect x="990.3" y="325" width="4.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="993.34" y="335.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="901.8" y="277" width="0.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="904.80" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="17.5" y="293" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.52" y="303.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.93%)</title><rect x="10.6" y="373" width="11.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.58" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="309" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.27" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="359.0" y="293" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="361.97" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (10,101,010 samples, 0.05%)</title><rect x="392.0" y="341" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="394.95" y="351.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (202,020,200 samples, 0.98%)</title><rect x="1133.9" y="357" width="11.5" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1136.86" y="367.5" ></text>
</g>
<g >
<title>strlen@plt (40,404,040 samples, 0.20%)</title><rect x="995.6" y="325" width="2.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="998.55" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="309" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1191.26" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (161,616,160 samples, 0.78%)</title><rect x="1170.3" y="341" width="9.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.32" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (30,303,030 samples, 0.15%)</title><rect x="243.2" y="309" width="1.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="246.22" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="263.5" y="309" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="266.48" y="319.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.10%)</title><rect x="830.6" y="309" width="1.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="833.62" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="101" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="111.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.05%)</title><rect x="1185.4" y="213" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1188.37" y="223.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.05%)</title><rect x="260.0" y="309" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="263.00" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.05%)</title><rect x="11.7" y="309" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="14.74" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="253.1" y="277" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="256.06" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="133" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="143.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="245" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1183.6" y="197" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1186.63" y="207.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (18,090,908,910 samples, 87.84%)</title><rect x="96.2" y="373" width="1036.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="99.23" y="383.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.15%)</title><rect x="256.0" y="277" width="1.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="258.95" y="287.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (20,202,020 samples, 0.10%)</title><rect x="235.7" y="341" width="1.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="238.70" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="325" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.10%)</title><rect x="1117.1" y="309" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1120.08" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="242.1" y="277" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="245.06" y="287.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="341" width="4.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.63" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="833.5" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="836.51" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1186.5" y="133" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.53" y="143.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="277" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.26" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="309" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,808,080 samples, 0.39%)</title><rect x="832.9" y="325" width="4.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="835.93" y="335.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.15%)</title><rect x="1185.9" y="197" width="1.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1188.95" y="207.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.10%)</title><rect x="1183.6" y="213" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1186.63" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.10%)</title><rect x="835.2" y="293" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="838.25" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.05%)</title><rect x="1122.3" y="293" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1125.29" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (151,515,150 samples, 0.74%)</title><rect x="1161.6" y="341" width="8.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1164.64" y="351.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (30,303,030 samples, 0.15%)</title><rect x="1149.5" y="341" width="1.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1152.49" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.34%)</title><rect x="248.4" y="309" width="4.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="251.43" y="319.5" ></text>
</g>
<g >
<title>operator new (383,838,380 samples, 1.86%)</title><rect x="1077.7" y="325" width="22.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1080.73" y="335.5" >o..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="133" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (40,404,040 samples, 0.20%)</title><rect x="367.1" y="293" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="370.07" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.11" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 1.18%)</title><rect x="570.2" y="309" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="573.20" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="325" width="4.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.63" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.0" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.00" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="245.0" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="247.96" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (20,585,858,380 samples, 99.95%)</title><rect x="10.6" y="437" width="1179.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.58" y="447.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.20%)</title><rect x="1155.9" y="325" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1158.86" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (20,202,020 samples, 0.10%)</title><rect x="1150.1" y="325" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1153.07" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="293" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1191.26" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="341" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.0" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.00" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="193.5" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="196.45" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="165" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1190.69" y="175.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="244.4" y="277" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="247.38" y="287.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="373" width="0.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.26" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="1121.1" y="245" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1124.13" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (70,707,070 samples, 0.34%)</title><rect x="248.4" y="325" width="4.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="251.43" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="341" width="0.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1191.84" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="197" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="366.5" y="293" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="369.49" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="181" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1190.69" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="1136.8" y="325" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1139.76" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.05%)</title><rect x="252.5" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="255.48" y="319.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (272,727,270 samples, 1.32%)</title><rect x="245.5" y="357" width="15.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="248.54" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (202,020,200 samples, 0.98%)</title><rect x="362.4" y="325" width="11.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="365.44" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.20%)</title><rect x="1142.0" y="245" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1144.97" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1187.7" y="85" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.69" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.05%)</title><rect x="358.4" y="277" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="361.39" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.29%)</title><rect x="1122.9" y="309" width="3.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1125.87" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.05%)</title><rect x="240.3" y="261" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="243.33" y="271.5" ></text>
</g>
<g >
<title>sim::Generate::operator (222,222,220 samples, 1.08%)</title><rect x="232.8" y="357" width="12.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="235.81" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="254.8" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="257.80" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.20%)</title><rect x="834.7" y="309" width="2.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="837.67" y="319.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (878,787,870 samples, 4.27%)</title><rect x="32.0" y="373" width="50.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="34.99" y="383.5" >sim::..</text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.10%)</title><rect x="1117.1" y="293" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1120.08" y="303.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (161,616,160 samples, 0.78%)</title><rect x="346.2" y="341" width="9.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="349.23" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="899.5" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="902.49" y="319.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.05%)</title><rect x="260.6" y="325" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="263.58" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1175.5" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.53" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.7" y="261" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.74" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,030,303,020 samples, 5.00%)</title><rect x="837.6" y="325" width="59.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="840.56" y="335.5" >sim::R..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.15%)</title><rect x="10.6" y="325" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.58" y="335.5" ></text>
</g>
<g >
<title>operator new (141,414,140 samples, 0.69%)</title><rect x="592.8" y="325" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="595.77" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="368.8" y="277" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="371.80" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="261" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.26" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.05%)</title><rect x="359.5" y="277" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="362.54" y="287.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.10%)</title><rect x="1144.3" y="341" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1147.28" y="351.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="1168.6" y="293" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.59" y="303.5" ></text>
</g>
<g >
<title>cfree (262,626,260 samples, 1.28%)</title><rect x="789.5" y="309" width="15.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="792.53" y="319.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.05%)</title><rect x="240.3" y="245" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="243.33" y="255.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (50,505,050 samples, 0.25%)</title><rect x="374.6" y="341" width="2.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="377.59" y="351.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (131,313,130 samples, 0.64%)</title><rect x="1107.2" y="325" width="7.6" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1110.24" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (10,101,010 samples, 0.05%)</title><rect x="1155.3" y="309" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1158.28" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="237.4" y="293" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="240.44" y="303.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1148.3" y="325" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1151.33" y="335.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.34%)</title><rect x="588.7" y="325" width="4.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="591.72" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="341" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1191.26" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="258.3" y="293" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="261.27" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="837.0" y="309" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="839.98" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1165.7" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="192.9" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="195.87" y="287.5" ></text>
</g>
<g >
<title>sim::Link::transmit (30,303,030 samples, 0.15%)</title><rect x="262.3" y="341" width="1.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="265.32" y="351.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="901.8" y="261" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="904.80" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (161,616,160 samples, 0.78%)</title><rect x="12.3" y="325" width="9.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="15.31" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="245.0" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="247.96" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.29%)</title><rect x="1140.8" y="261" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1143.81" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.29%)</title><rect x="239.2" y="293" width="3.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="242.17" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (50,505,050 samples, 0.25%)</title><rect x="18.7" y="309" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="21.68" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="1133.3" y="357" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1136.29" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="421" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1165.7" y="325" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.69" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.10%)</title><rect x="1139.7" y="293" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1142.65" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (30,303,030 samples, 0.15%)</title><rect x="1185.9" y="181" width="1.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.95" y="191.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (101,010,100 samples, 0.49%)</title><rect x="237.4" y="309" width="5.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="240.44" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="834.1" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="837.09" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.05%)</title><rect x="373.4" y="309" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="376.43" y="319.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 1.57%)</title><rect x="565.6" y="325" width="18.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="568.57" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="229" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="277" width="4.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1186.63" y="287.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.25%)</title><rect x="27.9" y="373" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="30.94" y="383.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (60,606,060 samples, 0.29%)</title><rect x="899.5" y="325" width="3.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="902.49" y="335.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.15%)</title><rect x="804.6" y="309" width="1.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="807.58" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.05%)</title><rect x="1126.3" y="325" width="0.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1129.34" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="325" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.26" y="335.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.10%)</title><rect x="359.0" y="309" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="361.97" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.05%)</title><rect x="1160.5" y="341" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1163.49" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.15%)</title><rect x="1120.6" y="277" width="1.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1123.55" y="287.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="1168.6" y="309" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.59" y="319.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.05%)</title><rect x="588.1" y="325" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="591.14" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.05%)</title><rect x="1188.3" y="357" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1191.26" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.05%)</title><rect x="11.7" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.74" y="303.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.29%)</title><rect x="1176.1" y="309" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.11" y="319.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.10%)</title><rect x="365.3" y="293" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="368.33" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.29%)</title><rect x="1140.8" y="309" width="3.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1143.81" y="319.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1148.3" y="341" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1151.33" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (30,303,030 samples, 0.15%)</title><rect x="256.0" y="261" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="258.95" y="271.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.25%)</title><rect x="806.3" y="309" width="2.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="809.31" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="213" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="1125.8" y="277" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1128.76" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.10%)</title><rect x="1186.5" y="117" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.53" y="127.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.05%)</title><rect x="372.9" y="309" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="375.85" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="453" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.25%)</title><rect x="896.6" y="325" width="2.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="899.59" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.20%)</title><rect x="1158.2" y="341" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1161.17" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (60,606,060 samples, 0.29%)</title><rect x="1184.8" y="229" width="3.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1187.79" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.15%)</title><rect x="1168.6" y="277" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.59" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="245.0" y="309" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="247.96" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="359.5" y="261" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="362.54" y="271.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (40,404,040 samples, 0.20%)</title><rect x="1130.4" y="357" width="2.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1133.39" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="277" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="239.2" y="277" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="242.17" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.05%)</title><rect x="1121.1" y="261" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1124.13" y="271.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.10%)</title><rect x="1186.5" y="149" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.53" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="25.0" y="373" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="28.05" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1106.7" y="325" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1109.67" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="437" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="245.0" y="341" width="0.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="247.96" y="351.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.15%)</title><rect x="1128.7" y="357" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1131.66" y="367.5" ></text>
</g>
<g >
<title>malloc (333,333,330 samples, 1.62%)</title><rect x="1080.6" y="309" width="19.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1083.62" y="319.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="258.3" y="309" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="261.27" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1179.0" y="261" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.00" y="271.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.05%)</title><rect x="242.6" y="277" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="245.64" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.29%)</title><rect x="1166.9" y="325" width="3.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1169.85" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="361.9" y="293" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="364.86" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.05%)</title><rect x="361.3" y="293" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="364.28" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.05%)</title><rect x="360.1" y="309" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="363.12" y="319.5" ></text>
</g>
<g >
<title>_start (20,585,858,380 samples, 99.95%)</title><rect x="10.6" y="453" width="1179.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.58" y="463.5" >_start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="1133.3" y="341" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.29" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.05%)</title><rect x="995.0" y="325" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="997.97" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1187.1" y="101" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1190.11" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="744.4" y="293" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="747.39" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.05%)</title><rect x="357.8" y="293" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="360.81" y="303.5" ></text>
</g>
<g >
<title>operator new (353,535,350 samples, 1.72%)</title><rect x="809.2" y="309" width="20.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="812.21" y="319.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.05%)</title><rect x="1185.9" y="165" width="0.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.95" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.93%)</title><rect x="10.6" y="389" width="11.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.58" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1165.7" y="309" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.69" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="357" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>sim::Event::Event (20,202,020 samples, 0.10%)</title><rect x="308.6" y="341" width="1.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="311.62" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1145.4" y="357" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1148.44" y="367.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.20%)</title><rect x="255.4" y="293" width="2.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="258.38" y="303.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (1,777,777,760 samples, 8.63%)</title><rect x="997.9" y="341" width="101.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1000.87" y="351.5" >void sim::Sc..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.10%)</title><rect x="1125.2" y="293" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1128.18" y="303.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.34%)</title><rect x="365.3" y="309" width="4.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="368.33" y="319.5" ></text>
</g>
<g >
<title>YAML::LoadFile (80,808,080 samples, 0.39%)</title><rect x="1183.6" y="373" width="4.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1186.63" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="1176.7" y="293" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.69" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.05%)</title><rect x="372.3" y="293" width="0.6" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="375.28" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.05%)</title><rect x="1137.3" y="325" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1140.34" y="335.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.20%)</title><rect x="299.9" y="341" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="302.94" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.05%)</title><rect x="1153.0" y="309" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1155.96" y="319.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.05%)</title><rect x="372.3" y="309" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="375.28" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.15%)</title><rect x="306.9" y="341" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="309.88" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="10.0" y="373" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.05%)</title><rect x="1136.2" y="325" width="0.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1139.18" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="245" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="255.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.10%)</title><rect x="831.8" y="325" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="834.78" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="18.1" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.10" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.25%)</title><rect x="18.7" y="261" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.68" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (10,101,010 samples, 0.05%)</title><rect x="1155.3" y="325" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1158.28" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.10%)</title><rect x="1183.6" y="229" width="1.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1186.63" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.10%)</title><rect x="835.2" y="277" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="838.25" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.05%)</title><rect x="1184.2" y="165" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.21" y="175.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="834.1" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="837.09" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.05%)</title><rect x="263.5" y="325" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="266.48" y="335.5" ></text>
</g>
<g >
<title>parse_latency (10,101,010 samples, 0.05%)</title><rect x="1188.8" y="325" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1191.84" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.10%)</title><rect x="259.4" y="325" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="262.43" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.05%)</title><rect x="242.1" y="261" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="245.06" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.05%)</title><rect x="11.2" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.16" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.05%)</title><rect x="1166.3" y="117" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.27" y="127.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (60,606,060 samples, 0.29%)</title><rect x="261.2" y="357" width="3.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="264.16" y="367.5" ></text>
</g>
</g>
</svg>
