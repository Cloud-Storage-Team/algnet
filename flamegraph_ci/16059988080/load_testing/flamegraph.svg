<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,696,969,670 samples, 3.97%)</title><rect x="728.4" y="421" width="46.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="731.41" y="431.5" >std:..</text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="1183.9" y="437" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.86" y="447.5" ></text>
</g>
<g >
<title>sim::Link::arrive (525,252,520 samples, 0.77%)</title><rect x="91.2" y="485" width="9.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="94.17" y="495.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="309" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.07" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="287.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="97.1" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="100.13" y="463.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="453" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1181.43" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.01%)</title><rect x="94.5" y="469" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="97.50" y="479.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="1091.1" y="421" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1094.13" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="437" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.65" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="399.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.04%)</title><rect x="1022.6" y="389" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1025.58" y="399.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.15%)</title><rect x="1188.1" y="533" width="1.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.07" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="453" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.65" y="463.5" ></text>
</g>
<g >
<title>sim::Event::Event (20,202,020 samples, 0.03%)</title><rect x="113.6" y="485" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="116.61" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.90" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.03%)</title><rect x="1188.9" y="309" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.95" y="319.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="485" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.90" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="131.8" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="134.84" y="367.5" ></text>
</g>
<g >
<title>strlen@plt (20,202,020 samples, 0.03%)</title><rect x="1065.9" y="453" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1068.88" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (424,242,420 samples, 0.62%)</title><rect x="587.6" y="469" width="7.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="590.64" y="479.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.07%)</title><rect x="14.9" y="517" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.91" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1174.2" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.22" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (828,282,820 samples, 1.22%)</title><rect x="702.1" y="405" width="14.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="705.12" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.32" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (474,747,470 samples, 0.70%)</title><rect x="775.2" y="421" width="8.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="778.22" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="128.5" y="405" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="131.51" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="99.6" y="437" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="102.58" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (10,101,010 samples, 0.01%)</title><rect x="141.8" y="485" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="144.83" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="469" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.90" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="132.0" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="135.01" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.09%)</title><rect x="98.0" y="453" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="101.00" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (141,414,140 samples, 0.21%)</title><rect x="139.4" y="485" width="2.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="142.38" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.0" y="453" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="99.95" y="463.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.12%)</title><rect x="1023.5" y="373" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1026.46" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="151.5" y="437" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="154.47" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="399.5" ></text>
</g>
<g >
<title>sim::Process::operator (414,141,410 samples, 0.61%)</title><rect x="36.8" y="517" width="7.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="39.82" y="527.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1182.3" y="453" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1185.29" y="463.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="309" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.42" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="126.9" y="437" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="129.93" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.42" y="239.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="112.6" y="485" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="115.56" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="405" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1071.16" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,979,797,300 samples, 99.99%)</title><rect x="10.2" y="565" width="1179.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (101,010,100 samples, 0.15%)</title><rect x="88.9" y="485" width="1.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="91.89" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1066.8" y="453" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1069.76" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1186.1" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.14" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1179.7" y="485" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1182.66" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.1" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.13" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,070,707,050 samples, 3.05%)</title><rect x="195.5" y="437" width="35.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="198.48" y="447.5" >[li..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.04%)</title><rect x="1184.7" y="469" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1187.74" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.06%)</title><rect x="1184.0" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.04" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.01%)</title><rect x="97.8" y="437" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="100.83" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="89.4" y="421" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="92.41" y="431.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.06%)</title><rect x="264.2" y="437" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="267.20" y="447.5" ></text>
</g>
<g >
<title>malloc@plt (70,707,070 samples, 0.10%)</title><rect x="562.4" y="405" width="1.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="565.40" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1186.7" y="485" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1189.67" y="495.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.09%)</title><rect x="1067.3" y="453" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1070.28" y="463.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="129.6" y="453" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="132.56" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.6" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.62" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.13" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1164.6" y="421" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1167.58" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="1169.7" y="437" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1172.66" y="447.5" ></text>
</g>
<g >
<title>sim::Event::get_time (111,111,110 samples, 0.16%)</title><rect x="15.8" y="517" width="1.9" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="18.79" y="527.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,080,808,070 samples, 1.59%)</title><rect x="17.7" y="517" width="18.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="20.71" y="527.5" ></text>
</g>
<g >
<title>Logger::get_instance (50,505,050 samples, 0.07%)</title><rect x="149.7" y="469" width="0.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="152.72" y="479.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.06%)</title><rect x="129.7" y="437" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="132.74" y="447.5" ></text>
</g>
<g >
<title>malloc (323,232,320 samples, 0.48%)</title><rect x="270.5" y="421" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="273.51" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (121,212,120 samples, 0.18%)</title><rect x="94.8" y="453" width="2.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="97.85" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="453" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.32" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (909,090,900 samples, 1.34%)</title><rect x="248.4" y="421" width="15.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="251.42" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1184.7" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.74" y="431.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="90.6" y="485" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="93.64" y="495.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="437" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1181.43" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1071.16" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="485" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.47" y="495.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (70,707,070 samples, 0.10%)</title><rect x="100.5" y="501" width="1.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="103.46" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.01%)</title><rect x="1185.3" y="485" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1188.27" y="495.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="633.6" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="636.57" y="447.5" ></text>
</g>
<g >
<title>Logger::info (25,141,413,890 samples, 36.98%)</title><rect x="611.8" y="453" width="436.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="614.83" y="463.5" >Logger::info</text>
</g>
<g >
<title>cfree (1,393,939,380 samples, 2.05%)</title><rect x="692.3" y="421" width="24.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="695.30" y="431.5" >c..</text>
</g>
<g >
<title>sim::Host::send_packet (515,151,510 samples, 0.76%)</title><rect x="1163.0" y="485" width="8.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1166.00" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.27%)</title><rect x="10.2" y="533" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="543.5" ></text>
</g>
<g >
<title>cfree (202,020,200 samples, 0.30%)</title><rect x="627.8" y="437" width="3.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="630.79" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="99.4" y="453" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="102.41" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.01%)</title><rect x="10.2" y="453" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.18" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1170.5" y="437" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1173.54" y="447.5" ></text>
</g>
<g >
<title>malloc (404,040,400 samples, 0.59%)</title><rect x="721.4" y="405" width="7.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="724.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1182.1" y="469" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1185.11" y="479.5" ></text>
</g>
<g >
<title>Logger::warn (25,101,009,850 samples, 36.92%)</title><rect x="152.0" y="469" width="435.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="155.00" y="479.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="335.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (404,040,400 samples, 0.59%)</title><rect x="580.3" y="453" width="7.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="583.28" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.04%)</title><rect x="128.2" y="421" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="131.16" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="1171.6" y="469" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1174.59" y="479.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (111,111,110 samples, 0.16%)</title><rect x="1046.2" y="437" width="2.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1049.25" y="447.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (67,686,868,010 samples, 99.55%)</title><rect x="13.3" y="533" width="1174.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="16.33" y="543.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="126.6" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="129.58" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="1178.6" y="453" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.60" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (13,717,171,580 samples, 20.18%)</title><rect x="332.0" y="437" width="238.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="335.04" y="447.5" >std::filesystem::__cxx11::path:..</text>
</g>
<g >
<title>parse_filename (131,313,130 samples, 0.19%)</title><rect x="91.7" y="453" width="2.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="94.69" y="463.5" ></text>
</g>
<g >
<title>memchr@plt (242,424,240 samples, 0.36%)</title><rect x="265.8" y="437" width="4.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="268.77" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,363,636,340 samples, 3.48%)</title><rect x="983.8" y="405" width="41.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="986.84" y="415.5" >[li..</text>
</g>
<g >
<title>memcpy@plt (40,404,040 samples, 0.06%)</title><rect x="631.3" y="437" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="634.29" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (50,505,050 samples, 0.07%)</title><rect x="12.5" y="453" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.45" y="463.5" ></text>
</g>
<g >
<title>parse_filename (23,040,403,810 samples, 33.89%)</title><rect x="634.1" y="437" width="399.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="637.10" y="447.5" >parse_filename</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="415.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="341" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1191.42" y="351.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="501" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1190.90" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="485" width="1.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1191.07" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="131.8" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="134.84" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.09%)</title><rect x="109.4" y="485" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="112.40" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,767,676,740 samples, 4.07%)</title><rect x="276.1" y="437" width="48.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="279.12" y="447.5" >std:..</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (40,404,040 samples, 0.06%)</title><rect x="1066.4" y="469" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1069.41" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="469" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1179.85" y="479.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (545,454,540 samples, 0.80%)</title><rect x="1177.0" y="501" width="9.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1180.03" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,303,030 samples, 0.04%)</title><rect x="1180.7" y="485" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1183.71" y="495.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.06%)</title><rect x="11.8" y="453" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.75" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (40,404,040 samples, 0.06%)</title><rect x="10.2" y="469" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.18" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1171.4" y="469" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1174.42" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1091.0" y="421" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1093.95" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.0" y="421" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="99.95" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="309" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.77" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.90" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1163.4" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.35" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="367.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="1167.9" y="437" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1170.91" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="191.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (454,545,450 samples, 0.67%)</title><rect x="324.2" y="437" width="7.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="327.15" y="447.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="151.1" y="453" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="154.12" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1176.2" y="389" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.15" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1178.8" y="421" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.78" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.1" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.13" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="91.9" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="94.87" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.42" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="1065.5" y="453" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1068.53" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="501" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.65" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.19%)</title><rect x="1053.8" y="437" width="2.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1056.79" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="399.5" ></text>
</g>
<g >
<title>sim::Link::transmit (20,202,020 samples, 0.03%)</title><rect x="101.3" y="485" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="104.34" y="495.5" ></text>
</g>
<g >
<title>Logger::info (131,313,130 samples, 0.19%)</title><rect x="91.7" y="469" width="2.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="94.69" y="479.5" ></text>
</g>
<g >
<title>_start (67,979,797,300 samples, 99.99%)</title><rect x="10.2" y="597" width="1179.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.18" y="607.5" >_start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.03%)</title><rect x="1188.1" y="325" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.07" y="335.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="1066.9" y="453" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1069.93" y="463.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.04%)</title><rect x="10.4" y="421" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.35" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="77.8" y="501" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.84" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="178.6" y="453" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="181.65" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="89.6" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="92.59" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (363,636,360 samples, 0.53%)</title><rect x="686.0" y="421" width="6.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="688.99" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="1167.9" y="453" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1170.91" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="10.4" y="389" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.0" y="437" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="99.95" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="293" width="0.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1191.77" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (393,939,390 samples, 0.58%)</title><rect x="1027.1" y="421" width="6.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1030.14" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.01%)</title><rect x="1180.5" y="469" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1183.53" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="245" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.07" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="129.9" y="405" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="132.91" y="415.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet const&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="89.8" y="437" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="92.77" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (151,515,150 samples, 0.22%)</title><rect x="576.6" y="453" width="2.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="579.60" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1185.1" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.09" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (30,303,030 samples, 0.04%)</title><rect x="100.6" y="485" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="103.63" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.39" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="97.7" y="437" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="100.65" y="447.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1171.8" y="453" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1174.77" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1173.5" y="469" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.52" y="479.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (14,040,403,900 samples, 20.65%)</title><rect x="783.5" y="421" width="243.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="786.46" y="431.5" >std::filesystem::__cxx11::path::..</text>
</g>
<g >
<title>Logger::warn (30,303,030 samples, 0.04%)</title><rect x="110.5" y="485" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="113.45" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (40,404,040 samples, 0.06%)</title><rect x="131.0" y="437" width="0.7" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="133.96" y="447.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.03%)</title><rect x="1179.8" y="485" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1182.83" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1186.1" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.14" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.1" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.13" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="421" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1178.1" y="469" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.08" y="479.5" ></text>
</g>
<g >
<title>malloc (424,242,420 samples, 0.62%)</title><rect x="1057.3" y="437" width="7.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1060.29" y="447.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1175.8" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.80" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="128.5" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="131.51" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.06%)</title><rect x="1184.0" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.04" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (50,505,050 samples, 0.07%)</title><rect x="1090.6" y="469" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1093.60" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.13%)</title><rect x="1067.1" y="469" width="1.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1070.11" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="309" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.30" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="11.9" y="437" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.93" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.04%)</title><rect x="1175.8" y="453" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1178.80" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="351.5" ></text>
</g>
<g >
<title>cfree (313,131,310 samples, 0.46%)</title><rect x="1050.6" y="453" width="5.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1053.63" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>__libc_start_main (67,979,797,300 samples, 99.99%)</title><rect x="10.2" y="581" width="1179.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.18" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="207.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="373" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1071.16" y="383.5" ></text>
</g>
<g >
<title>memchr@plt (222,222,220 samples, 0.33%)</title><rect x="716.7" y="421" width="3.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="719.67" y="431.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="437" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="447.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="12.5" y="437" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.45" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="126.8" y="437" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="129.76" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="128.5" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="131.51" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,949,494,930 samples, 2.87%)</title><rect x="1091.5" y="469" width="33.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1094.48" y="479.5" >st..</text>
</g>
<g >
<title>parse_filename (40,404,040 samples, 0.06%)</title><rect x="151.3" y="453" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="154.30" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="151.8" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="154.82" y="431.5" ></text>
</g>
<g >
<title>cfree (333,333,330 samples, 0.49%)</title><rect x="595.0" y="469" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="598.00" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="94.0" y="469" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="96.97" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="335.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="1178.6" y="469" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.60" y="479.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (10,101,010 samples, 0.01%)</title><rect x="1172.3" y="501" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1175.29" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1179.3" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.31" y="447.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.01%)</title><rect x="1168.1" y="469" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1171.09" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1171.2" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1174.24" y="479.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (70,707,070 samples, 0.10%)</title><rect x="129.7" y="453" width="1.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="132.74" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="239.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="389" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (60,606,060 samples, 0.09%)</title><rect x="1188.4" y="357" width="1.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.42" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1071.16" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.01%)</title><rect x="1065.7" y="453" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1068.71" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (90,909,090 samples, 0.13%)</title><rect x="92.4" y="437" width="1.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="95.39" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.31%)</title><rect x="168.8" y="453" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="171.83" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (151,515,150 samples, 0.22%)</title><rect x="1165.3" y="453" width="2.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1168.28" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="325" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.30" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="12.5" y="405" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.45" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.03%)</title><rect x="1188.1" y="357" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.07" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="485" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.65" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1163.0" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="95.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1173.0" y="485" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1176.00" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.03%)</title><rect x="1180.2" y="453" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.18" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.10%)</title><rect x="127.5" y="453" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="130.46" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1067.3" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1070.28" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.03%)</title><rect x="1168.6" y="453" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1171.61" y="463.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.01%)</title><rect x="101.2" y="485" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="104.16" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.03%)</title><rect x="1188.1" y="341" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.07" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (141,414,140 samples, 0.21%)</title><rect x="1182.8" y="485" width="2.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1185.81" y="495.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (40,404,040 samples, 0.06%)</title><rect x="131.0" y="453" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="133.96" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="389" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1071.16" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="101.5" y="453" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="104.51" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="151.6" y="437" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="154.65" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="1168.1" y="453" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1171.09" y="463.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (161,616,160 samples, 0.24%)</title><rect x="1165.1" y="469" width="2.8" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1168.11" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1178.8" y="437" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.78" y="447.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="1178.6" y="485" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.60" y="495.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (20,202,020 samples, 0.03%)</title><rect x="90.1" y="453" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="93.12" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1067.1" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1070.11" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.21%)</title><rect x="625.3" y="437" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="628.33" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="351.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.09%)</title><rect x="1174.7" y="437" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.75" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="261" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.12" y="271.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="14.0" y="517" width="0.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="17.03" y="527.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (151,515,150 samples, 0.22%)</title><rect x="129.4" y="469" width="2.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="132.38" y="479.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (64,888,888,240 samples, 95.44%)</title><rect x="46.3" y="517" width="1126.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="49.29" y="527.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.01%)</title><rect x="1168.8" y="437" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1171.79" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="293" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.07" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.09%)</title><rect x="1170.2" y="453" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1173.19" y="463.5" ></text>
</g>
<g >
<title>sim::Generate::operator (10,101,010 samples, 0.01%)</title><rect x="36.5" y="517" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="39.47" y="527.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1173.7" y="469" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1176.70" y="479.5" ></text>
</g>
<g >
<title>sim::Generate::operator (181,818,180 samples, 0.27%)</title><rect x="87.8" y="501" width="3.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="90.84" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1153.0" y="469" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.01" y="479.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="130.6" y="405" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="133.61" y="415.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="94.1" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="97.15" y="479.5" ></text>
</g>
<g >
<title>memcpy@plt (60,606,060 samples, 0.09%)</title><rect x="1024.9" y="405" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1027.86" y="415.5" ></text>
</g>
<g >
<title>YAML::Load (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="501" width="1.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1191.07" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="12.5" y="421" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.45" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (121,212,120 samples, 0.18%)</title><rect x="133.8" y="485" width="2.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="136.77" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.01%)</title><rect x="97.7" y="421" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="100.65" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,222,222,210 samples, 1.80%)</title><rect x="1068.7" y="469" width="21.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1071.69" y="479.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (10,101,010 samples, 0.01%)</title><rect x="130.3" y="421" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="133.26" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1170.9" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.89" y="431.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.10%)</title><rect x="568.9" y="421" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="571.88" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.16%)</title><rect x="1174.4" y="469" width="1.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1177.40" y="479.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="92.2" y="437" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="95.22" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,999,999,980 samples, 2.94%)</title><rect x="651.3" y="421" width="34.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="654.28" y="431.5" >[l..</text>
</g>
<g >
<title>parse_filename (111,111,110 samples, 0.16%)</title><rect x="1163.2" y="453" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1166.18" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.03%)</title><rect x="1182.5" y="485" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.46" y="495.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1091.3" y="405" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1094.30" y="415.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="293" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.12" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.25%)</title><rect x="1168.3" y="469" width="2.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1171.26" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="469" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.65" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.04%)</title><rect x="1067.8" y="421" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1070.81" y="431.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="99.2" y="453" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="102.23" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.06%)</title><rect x="1184.0" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.04" y="431.5" ></text>
</g>
<g >
<title>malloc (303,030,300 samples, 0.45%)</title><rect x="1154.9" y="453" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1157.94" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.65" y="399.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="1056.8" y="453" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1059.77" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="383.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="130.8" y="437" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="133.79" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.04%)</title><rect x="1170.7" y="437" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1173.72" y="447.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="94.1" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="97.15" y="463.5" ></text>
</g>
<g >
<title>Logger::info (80,808,080 samples, 0.12%)</title><rect x="150.6" y="469" width="1.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="153.60" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.03%)</title><rect x="1170.2" y="437" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.19" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.39" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="255.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="93.8" y="421" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="96.80" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="10.5" y="373" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.53" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="191.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.06%)</title><rect x="1056.1" y="453" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1059.06" y="463.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (10,101,010 samples, 0.01%)</title><rect x="1172.1" y="501" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1175.12" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,494,949,470 samples, 3.67%)</title><rect x="524.4" y="421" width="43.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="527.35" y="431.5" >[lib..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.01%)</title><rect x="98.9" y="421" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="101.88" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="261" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.07" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (60,606,060 samples, 0.09%)</title><rect x="1036.3" y="437" width="1.0" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1039.25" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1068.3" y="453" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1071.34" y="463.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (171,717,170 samples, 0.25%)</title><rect x="123.4" y="485" width="3.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="126.42" y="495.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="277" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.42" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.01%)</title><rect x="127.1" y="469" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="130.11" y="479.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="90.6" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="93.64" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="130.6" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="133.61" y="399.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.04%)</title><rect x="1178.1" y="485" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1181.08" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (171,717,170 samples, 0.25%)</title><rect x="572.7" y="453" width="3.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="575.74" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.01%)</title><rect x="1167.7" y="437" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1170.74" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="1179.5" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.48" y="479.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (333,333,330 samples, 0.49%)</title><rect x="1037.3" y="437" width="5.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1040.31" y="447.5" ></text>
</g>
<g >
<title>malloc (212,121,210 samples, 0.31%)</title><rect x="564.0" y="389" width="3.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="566.97" y="399.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (131,313,130 samples, 0.19%)</title><rect x="1034.0" y="437" width="2.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1036.98" y="447.5" ></text>
</g>
<g >
<title>main (67,797,979,120 samples, 99.72%)</title><rect x="13.3" y="549" width="1176.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="16.33" y="559.5" >main</text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.07%)</title><rect x="264.9" y="437" width="0.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="267.90" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (131,313,130 samples, 0.19%)</title><rect x="94.7" y="469" width="2.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="97.67" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (303,030,300 samples, 0.45%)</title><rect x="81.4" y="485" width="5.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="84.35" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (30,303,030 samples, 0.04%)</title><rect x="10.4" y="453" width="0.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.35" y="463.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="89.4" y="405" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="92.41" y="415.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (10,101,010 samples, 0.01%)</title><rect x="100.3" y="485" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="103.28" y="495.5" ></text>
</g>
<g >
<title>Logger::info (121,212,120 samples, 0.18%)</title><rect x="1163.0" y="469" width="2.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1166.00" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (10,101,010 samples, 0.01%)</title><rect x="100.1" y="469" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="103.11" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1182.1" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1185.11" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (80,808,080 samples, 0.12%)</title><rect x="1163.7" y="437" width="1.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1166.70" y="447.5" ></text>
</g>
<g >
<title>YAML::LoadFile (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="517" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.07" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1184.2" y="373" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.21" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.03%)</title><rect x="1181.2" y="485" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1184.23" y="495.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.09%)</title><rect x="601.8" y="469" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="604.84" y="479.5" ></text>
</g>
<g >
<title>cfree (1,424,242,410 samples, 2.09%)</title><rect x="239.5" y="437" width="24.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="242.48" y="447.5" >c..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1067.1" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1070.11" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.39" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1164.9" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1167.93" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="129.7" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="132.74" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="405" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.42" y="255.5" ></text>
</g>
<g >
<title>sim::Host::process (333,333,330 samples, 0.49%)</title><rect x="126.4" y="485" width="5.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="129.40" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="143.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="90.6" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="93.64" y="479.5" ></text>
</g>
<g >
<title>sim::YamlParser::~YamlParser (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="533" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.82" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="93.6" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="96.62" y="431.5" ></text>
</g>
<g >
<title>cfree (494,949,490 samples, 0.73%)</title><rect x="78.0" y="501" width="8.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="81.02" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="277" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.77" y="287.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (50,505,050 samples, 0.07%)</title><rect x="89.2" y="453" width="0.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="92.24" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="90.6" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="93.64" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.3" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.25" y="463.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="501" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.47" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="130.4" y="437" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="133.44" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::process (56,656,565,090 samples, 83.33%)</title><rect x="142.0" y="485" width="983.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="145.01" y="495.5" >sim::Switch::process</text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="1174.7" y="453" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.75" y="463.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="293" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.42" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (20,202,020 samples, 0.03%)</title><rect x="128.2" y="405" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="131.16" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.65" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="303.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.10%)</title><rect x="1025.9" y="405" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1028.91" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (464,646,460 samples, 0.68%)</title><rect x="231.4" y="437" width="8.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="234.41" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1170.0" y="453" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1173.01" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="367.5" ></text>
</g>
<g >
<title>memcpy@plt (70,707,070 samples, 0.10%)</title><rect x="567.7" y="421" width="1.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="570.66" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (141,414,140 samples, 0.21%)</title><rect x="10.9" y="469" width="2.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.88" y="479.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="111.0" y="485" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="113.98" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.21%)</title><rect x="1048.2" y="453" width="2.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1051.18" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="335.5" ></text>
</g>
<g >
<title>operator new (303,030,300 samples, 0.45%)</title><rect x="602.9" y="469" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="605.89" y="479.5" ></text>
</g>
<g >
<title>parse_filename (22,656,565,430 samples, 33.32%)</title><rect x="179.5" y="453" width="393.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="182.52" y="463.5" >parse_filename</text>
</g>
<g >
<title>operator new (101,010,100 samples, 0.15%)</title><rect x="1023.1" y="389" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1026.11" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (90,909,090 samples, 0.13%)</title><rect x="127.3" y="469" width="1.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="130.28" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (30,303,030 samples, 0.04%)</title><rect x="1173.9" y="469" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1176.87" y="479.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1174.0" y="437" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.05" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (50,505,050 samples, 0.07%)</title><rect x="1090.6" y="453" width="0.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1093.60" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="97.5" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="100.48" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (101,010,100 samples, 0.15%)</title><rect x="88.9" y="469" width="1.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="91.89" y="479.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1174.0" y="453" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.05" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (50,505,050 samples, 0.07%)</title><rect x="1181.6" y="485" width="0.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1184.59" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="99.1" y="453" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="102.06" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="469" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.47" y="479.5" ></text>
</g>
<g >
<title>operator new (232,323,230 samples, 0.34%)</title><rect x="563.6" y="405" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="566.62" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (30,303,030 samples, 0.04%)</title><rect x="10.4" y="437" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.35" y="447.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (20,202,020 samples, 0.03%)</title><rect x="1180.2" y="469" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1183.18" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1171.1" y="421" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.07" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.06%)</title><rect x="1089.9" y="469" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1092.90" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.1" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.13" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="47.5" ></text>
</g>
<g >
<title>operator new (353,535,350 samples, 0.52%)</title><rect x="270.0" y="437" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="272.98" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="97.1" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="100.13" y="447.5" ></text>
</g>
<g >
<title>all (67,989,898,310 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>parse_filename (50,505,050 samples, 0.07%)</title><rect x="1064.7" y="453" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1067.65" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (60,606,060 samples, 0.09%)</title><rect x="579.2" y="453" width="1.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="582.23" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="99.8" y="469" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="102.76" y="479.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (202,020,200 samples, 0.30%)</title><rect x="135.9" y="485" width="3.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="138.87" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (747,474,740 samples, 1.10%)</title><rect x="511.4" y="421" width="13.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="514.38" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="91.0" y="485" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="93.99" y="495.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (26,383,838,120 samples, 38.81%)</title><rect x="608.3" y="469" width="457.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="611.33" y="479.5" >sim::Link::get_packet</text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1175.8" y="421" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.80" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.1" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.13" y="271.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="601.7" y="469" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="604.67" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.03%)</title><rect x="97.0" y="469" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="99.95" y="479.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,010,100,990 samples, 2.96%)</title><rect x="1125.3" y="485" width="34.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1128.31" y="495.5" >vo..</text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="89.2" y="421" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="92.24" y="431.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="1183.7" y="469" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.69" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,818,180 samples, 0.27%)</title><rect x="10.2" y="549" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="559.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="89.4" y="437" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="92.41" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.04%)</title><rect x="1188.8" y="341" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.77" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="131.8" y="421" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="134.84" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="716.5" y="421" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="719.49" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.09%)</title><rect x="1169.0" y="453" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1171.96" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1187.7" y="501" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1190.72" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="367.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::hash&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::shared_ptr&lt;sim::IFlow&gt;, std::shared_ptr&lt;sim::IFlow&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::hash&lt;std::shared_ptr&lt;sim::IFlow&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;sim::IFlow&gt;, false&gt; &gt; &gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="517" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1192.65" y="527.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1176.7" y="469" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1179.68" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1071.16" y="351.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="1068.5" y="453" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1071.51" y="463.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.01%)</title><rect x="89.2" y="437" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="92.24" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (60,606,060 samples, 0.09%)</title><rect x="1185.4" y="485" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.44" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="10.2" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.18" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1175.8" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.80" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1178.8" y="405" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.78" y="415.5" ></text>
</g>
<g >
<title>operator new (404,040,400 samples, 0.59%)</title><rect x="1153.2" y="469" width="7.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.19" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.01%)</title><rect x="94.7" y="453" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="97.67" y="463.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (90,909,090 samples, 0.13%)</title><rect x="132.2" y="485" width="1.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="135.19" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="131.8" y="437" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="134.84" y="447.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.04%)</title><rect x="126.6" y="469" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="129.58" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="303.5" ></text>
</g>
<g >
<title>operator new (454,545,450 samples, 0.67%)</title><rect x="720.5" y="421" width="7.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="723.52" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.01%)</title><rect x="101.5" y="469" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="104.51" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (545,454,540 samples, 0.80%)</title><rect x="114.0" y="485" width="9.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="116.96" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="128.9" y="469" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="131.86" y="479.5" ></text>
</g>
<g >
<title>cfree (181,818,180 samples, 0.27%)</title><rect x="172.5" y="453" width="3.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="175.51" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.01%)</title><rect x="89.2" y="405" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="92.24" y="415.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.03%)</title><rect x="131.7" y="453" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="134.66" y="463.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="600.8" y="469" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="603.79" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="175.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (30,303,030 samples, 0.04%)</title><rect x="1091.0" y="437" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1093.95" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (30,303,030 samples, 0.04%)</title><rect x="1180.2" y="485" width="0.5" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1183.18" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.42" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.04%)</title><rect x="98.5" y="437" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="101.53" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="373" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="277" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.07" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="383.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1184.7" y="437" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.74" y="447.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (10,101,010 samples, 0.01%)</title><rect x="1179.5" y="485" width="0.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1182.48" y="495.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.01%)</title><rect x="89.4" y="389" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="92.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="415.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (242,424,240 samples, 0.36%)</title><rect x="1172.8" y="501" width="4.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1175.82" y="511.5" ></text>
</g>
<g >
<title>sim::is_valid_link (40,404,040 samples, 0.06%)</title><rect x="1176.3" y="485" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1179.33" y="495.5" ></text>
</g>
<g >
<title>memcpy@plt (60,606,060 samples, 0.09%)</title><rect x="175.7" y="453" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="178.67" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1186.7" y="469" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.67" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1175.3" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.27" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.01%)</title><rect x="129.2" y="469" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="132.21" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (141,414,140 samples, 0.21%)</title><rect x="10.9" y="485" width="2.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.88" y="495.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="126.6" y="453" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="129.58" y="463.5" ></text>
</g>
<g >
<title>sim::Process::~Process (131,313,130 samples, 0.19%)</title><rect x="44.0" y="517" width="2.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="47.01" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="12.6" y="389" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.63" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (181,818,180 samples, 0.27%)</title><rect x="1173.2" y="485" width="3.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1176.17" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="399.5" ></text>
</g>
<g >
<title>malloc (222,222,220 samples, 0.33%)</title><rect x="604.3" y="453" width="3.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.30" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="130.4" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="133.44" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.06%)</title><rect x="10.2" y="485" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (30,303,030 samples, 0.04%)</title><rect x="97.5" y="453" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="100.48" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.24%)</title><rect x="598.0" y="453" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.98" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="1168.6" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1171.61" y="447.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="277" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.12" y="287.5" ></text>
</g>
<g >
<title>sim::Process::~Process (161,616,160 samples, 0.24%)</title><rect x="1160.2" y="501" width="2.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1163.20" y="511.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.03%)</title><rect x="587.3" y="453" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="590.29" y="463.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="130.4" y="421" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="133.44" y="431.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (131,313,130 samples, 0.19%)</title><rect x="1044.0" y="437" width="2.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1046.97" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="325" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1191.42" y="335.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="309" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1191.25" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.4" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.45" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.04%)</title><rect x="128.2" y="437" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="131.16" y="447.5" ></text>
</g>
<g >
<title>operator new (434,343,430 samples, 0.64%)</title><rect x="1057.1" y="453" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1060.12" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="213" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="223.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.03%)</title><rect x="89.8" y="421" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="92.77" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="223.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,989,898,380 samples, 89.70%)</title><rect x="101.7" y="501" width="1058.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="104.69" y="511.5" >sim::Process::operator</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1181.4" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.41" y="463.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="1066.2" y="469" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1069.23" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (545,454,540 samples, 0.80%)</title><rect x="91.0" y="501" width="9.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="93.99" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.04%)</title><rect x="1188.8" y="325" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.77" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="131.8" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="134.84" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.65" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (181,818,180 samples, 0.27%)</title><rect x="10.2" y="517" width="3.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.18" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (10,101,010 samples, 0.01%)</title><rect x="90.5" y="453" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="93.47" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.07%)</title><rect x="1186.8" y="501" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1189.84" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="453" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.07" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="111.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (151,515,150 samples, 0.22%)</title><rect x="570.1" y="437" width="2.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="573.11" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.60" y="63.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (50,505,050 samples, 0.07%)</title><rect x="575.7" y="453" width="0.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="578.72" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1065.7" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1068.71" y="447.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="128.7" y="453" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="131.68" y="463.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (898,989,890 samples, 1.32%)</title><rect x="1172.5" y="517" width="15.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1175.47" y="527.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.06%)</title><rect x="611.1" y="453" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="614.13" y="463.5" ></text>
</g>
<g >
<title>nons (67,989,898,310 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.13%)</title><rect x="632.0" y="437" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="634.99" y="447.5" ></text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="608.2" y="469" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="611.15" y="479.5" ></text>
</g>
<g >
<title>operator delete (111,111,110 samples, 0.16%)</title><rect x="176.7" y="453" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="179.72" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="341" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.30" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.0" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.98" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.03%)</title><rect x="1186.5" y="501" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.49" y="511.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.09%)</title><rect x="1183.7" y="453" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.69" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1186.3" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.32" y="383.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (70,707,070 samples, 0.10%)</title><rect x="86.6" y="501" width="1.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="89.61" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="10.4" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1181.4" y="469" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.41" y="479.5" ></text>
</g>
<g >
<title>sim::Switch::process (10,101,010 samples, 0.01%)</title><rect x="1171.9" y="501" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1174.94" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="89.6" y="421" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="92.59" y="431.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (10,101,010 samples, 0.01%)</title><rect x="99.9" y="469" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="102.93" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (626,262,620 samples, 0.92%)</title><rect x="973.0" y="405" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="975.97" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="517" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.47" y="527.5" ></text>
</g>
<g >
<title>sim::SendData::operator (515,151,510 samples, 0.76%)</title><rect x="1163.0" y="501" width="8.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1166.00" y="511.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="1167.9" y="469" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1170.91" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.01%)</title><rect x="1182.3" y="469" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.29" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1178.4" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.43" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1184.6" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.57" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (80,808,080 samples, 0.12%)</title><rect x="1188.1" y="469" width="1.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.07" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.21%)</title><rect x="97.3" y="469" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="100.30" y="479.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (50,505,050 samples, 0.07%)</title><rect x="1043.1" y="437" width="0.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1046.09" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="287.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.06%)</title><rect x="1067.6" y="437" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1070.63" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="92.2" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="95.22" y="399.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.12%)</title><rect x="111.2" y="485" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="114.15" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="131.8" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="134.84" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1181.96" y="319.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="129.7" y="421" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="132.74" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::~Arrive (10,101,010 samples, 0.01%)</title><rect x="36.6" y="517" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="39.65" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (181,818,180 samples, 0.27%)</title><rect x="10.2" y="501" width="3.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1172.8" y="485" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.82" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1068.2" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1071.16" y="335.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1184.7" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.74" y="463.5" ></text>
</g>
</g>
</svg>
