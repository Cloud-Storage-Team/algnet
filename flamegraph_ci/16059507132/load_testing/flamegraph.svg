<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="191.5" ></text>
</g>
<g >
<title>parse_filename (21,929,292,710 samples, 32.36%)</title><rect x="180.1" y="453" width="381.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="183.08" y="463.5" >parse_filename</text>
</g>
<g >
<title>sim::Host::send_packet (313,131,310 samples, 0.46%)</title><rect x="1164.5" y="485" width="5.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1167.50" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.03%)</title><rect x="1187.4" y="501" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1190.36" y="511.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="485" width="1.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1191.24" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="131.2" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="134.18" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (232,323,230 samples, 0.34%)</title><rect x="137.2" y="485" width="4.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="140.16" y="495.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="129.4" y="437" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="132.42" y="447.5" ></text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="592.7" y="469" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="595.70" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="159.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="131.0" y="421" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="134.01" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (50,505,050 samples, 0.07%)</title><rect x="134.2" y="485" width="0.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="137.17" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1175.4" y="469" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1178.40" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>sim::Host::process (272,727,270 samples, 0.40%)</title><rect x="127.3" y="485" width="4.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="130.31" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="383.5" ></text>
</g>
<g >
<title>operator new (474,747,470 samples, 0.70%)</title><rect x="270.3" y="437" width="8.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="273.31" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,202,020 samples, 0.03%)</title><rect x="97.4" y="453" width="0.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="100.41" y="463.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="501" width="0.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.07" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.94" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (151,515,150 samples, 0.22%)</title><rect x="566.7" y="453" width="2.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="569.67" y="463.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1152.4" y="469" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1155.36" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.19%)</title><rect x="97.9" y="469" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="100.94" y="479.5" ></text>
</g>
<g >
<title>operator new (565,656,560 samples, 0.83%)</title><rect x="1153.1" y="469" width="9.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.06" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="131.7" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="134.71" y="399.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="100.2" y="453" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="103.23" y="463.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.01%)</title><rect x="97.2" y="469" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="100.24" y="479.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.01%)</title><rect x="1188.4" y="341" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.42" y="351.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="1175.6" y="453" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.58" y="463.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="94.1" y="485" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="97.07" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1187.0" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.01" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.06%)</title><rect x="1182.4" y="485" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1185.44" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (121,212,120 samples, 0.18%)</title><rect x="10.7" y="485" width="2.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.70" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.03%)</title><rect x="10.4" y="453" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.35" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.01%)</title><rect x="97.8" y="469" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="100.77" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="405" width="1.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.24" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (121,212,120 samples, 0.18%)</title><rect x="135.1" y="485" width="2.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="138.05" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (30,303,030 samples, 0.04%)</title><rect x="1040.5" y="437" width="0.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1043.50" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.07%)</title><rect x="1188.9" y="357" width="0.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.94" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.07%)</title><rect x="93.2" y="437" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="96.19" y="447.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="1169.1" y="437" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1172.07" y="447.5" ></text>
</g>
<g >
<title>malloc (414,141,410 samples, 0.61%)</title><rect x="271.4" y="421" width="7.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="274.36" y="431.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="265.6" y="437" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="268.56" y="447.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (20,202,020 samples, 0.03%)</title><rect x="36.0" y="517" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="39.03" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="389" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1065.3" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1068.30" y="431.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="1169.6" y="469" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1172.60" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1180.0" y="485" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1182.97" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="94.2" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="97.25" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="128.4" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="131.37" y="447.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 0.31%)</title><rect x="552.8" y="405" width="3.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="555.78" y="415.5" ></text>
</g>
<g >
<title>malloc (202,020,200 samples, 0.30%)</title><rect x="553.0" y="389" width="3.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="555.95" y="399.5" ></text>
</g>
<g >
<title>Logger::warn (20,202,020 samples, 0.03%)</title><rect x="111.5" y="485" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="114.48" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (30,303,030 samples, 0.04%)</title><rect x="12.3" y="453" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.29" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="175.5" ></text>
</g>
<g >
<title>Logger::warn (24,181,817,940 samples, 35.68%)</title><rect x="152.5" y="469" width="421.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="155.47" y="479.5" >Logger::warn</text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.15%)</title><rect x="1188.2" y="533" width="1.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.24" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1180.3" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.33" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,919,191,900 samples, 2.83%)</title><rect x="638.6" y="421" width="33.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="641.61" y="431.5" >[l..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.04%)</title><rect x="10.2" y="485" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="495.5" ></text>
</g>
<g >
<title>parse_filename (70,707,070 samples, 0.10%)</title><rect x="1164.5" y="453" width="1.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1167.50" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="357" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (161,616,160 samples, 0.24%)</title><rect x="1183.1" y="485" width="2.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1186.14" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (30,303,030 samples, 0.04%)</title><rect x="151.9" y="437" width="0.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="154.94" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (60,606,060 samples, 0.09%)</title><rect x="95.7" y="437" width="1.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="98.66" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1175.4" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.40" y="463.5" ></text>
</g>
<g >
<title>malloc (393,939,390 samples, 0.58%)</title><rect x="711.4" y="405" width="6.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="714.42" y="415.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (181,818,180 samples, 0.27%)</title><rect x="1174.3" y="501" width="3.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1177.35" y="511.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1088.3" y="421" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1091.34" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1066.9" y="437" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1069.88" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="469" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.07" y="479.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (70,707,070 samples, 0.10%)</title><rect x="1188.6" y="373" width="1.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.59" y="383.5" ></text>
</g>
<g >
<title>malloc@plt (60,606,060 samples, 0.09%)</title><rect x="551.7" y="405" width="1.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="554.72" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.11" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (80,808,080 samples, 0.12%)</title><rect x="1186.0" y="485" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.95" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="143.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.06%)</title><rect x="128.9" y="453" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="131.90" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (414,141,410 samples, 0.61%)</title><rect x="772.6" y="421" width="7.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="775.63" y="431.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.10%)</title><rect x="14.9" y="517" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.92" y="527.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,070,707,060 samples, 1.58%)</title><rect x="1068.5" y="469" width="18.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1071.46" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.10%)</title><rect x="128.4" y="469" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="131.37" y="479.5" ></text>
</g>
<g >
<title>[[hv_netvsc]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="293" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="721.11" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="501" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1190.89" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="351.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1178.6" y="469" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.57" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="1168.2" y="421" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1171.19" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="93.9" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="96.90" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.01%)</title><rect x="1067.1" y="405" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1070.06" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="1167.5" y="437" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1170.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1188.4" y="357" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.42" y="367.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="93.7" y="421" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="96.72" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.01%)</title><rect x="12.8" y="501" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="15.81" y="511.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.04%)</title><rect x="1168.9" y="453" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1171.89" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="437" width="1.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.24" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="98.6" y="421" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="101.65" y="431.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.06%)</title><rect x="127.5" y="469" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="130.49" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.03%)</title><rect x="1180.9" y="469" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.85" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="309" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.12" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="293" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.12" y="303.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1184.9" y="453" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.90" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="357" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.24" y="367.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 0.03%)</title><rect x="1065.1" y="469" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1068.12" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (50,505,050 samples, 0.07%)</title><rect x="1087.1" y="469" width="0.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1090.11" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.07%)</title><rect x="131.0" y="437" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="134.01" y="447.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="293" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.77" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="96.5" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="99.53" y="431.5" ></text>
</g>
<g >
<title>cfree (333,333,330 samples, 0.49%)</title><rect x="1053.0" y="453" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1055.99" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="1179.8" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.80" y="479.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1174.2" y="501" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1177.17" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1168.9" y="437" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.89" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="367.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="619.8" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="622.79" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (10,101,010 samples, 0.01%)</title><rect x="1177.2" y="453" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1180.16" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,979,797,960 samples, 2.92%)</title><rect x="1088.5" y="469" width="34.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1091.52" y="479.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="79.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (555,555,550 samples, 0.82%)</title><rect x="1177.7" y="501" width="9.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1180.69" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="565" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="10.5" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.53" y="383.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (60,606,060 samples, 0.09%)</title><rect x="93.0" y="453" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="96.02" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="95.0" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="97.95" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (10,101,010 samples, 0.01%)</title><rect x="92.7" y="469" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="95.67" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (333,333,330 samples, 0.49%)</title><rect x="85.6" y="485" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="88.63" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="100.2" y="437" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="103.23" y="447.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 0.06%)</title><rect x="101.1" y="485" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="104.11" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.30%)</title><rect x="582.9" y="453" width="3.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="585.85" y="463.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="11.9" y="453" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.93" y="463.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.04%)</title><rect x="1088.0" y="453" width="0.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1090.99" y="463.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="1167.1" y="469" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1170.14" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.01%)</title><rect x="12.8" y="517" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="15.81" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="586.4" y="469" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="589.37" y="479.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1168.2" y="389" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1171.19" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="1169.6" y="453" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1172.60" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="207.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="1169.4" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1172.42" y="479.5" ></text>
</g>
<g >
<title>__libc_start_main (67,757,575,080 samples, 99.99%)</title><rect x="10.2" y="581" width="1179.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.18" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.01%)</title><rect x="100.9" y="485" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="103.93" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="239.5" ></text>
</g>
<g >
<title>malloc (515,151,510 samples, 0.76%)</title><rect x="1153.9" y="453" width="9.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.94" y="463.5" ></text>
</g>
<g >
<title>Logger::info (50,505,050 samples, 0.07%)</title><rect x="130.1" y="437" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="133.13" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1165.6" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.55" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1068.1" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1071.11" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="98.6" y="437" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="101.65" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.6" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.64" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (70,707,070 samples, 0.10%)</title><rect x="92.8" y="469" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="95.84" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.8" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.81" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="485" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.07" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (666,666,660 samples, 0.98%)</title><rect x="253.9" y="421" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="256.95" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="1065.7" y="453" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1068.65" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,090,909,080 samples, 1.61%)</title><rect x="685.0" y="405" width="19.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="688.04" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="127.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="1065.3" y="453" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1068.30" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="309" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.65" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="94.1" y="469" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="97.07" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.06%)</title><rect x="1176.5" y="453" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1179.46" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="128.0" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="131.02" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="207.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (323,232,320 samples, 0.48%)</title><rect x="1024.1" y="421" width="5.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1027.14" y="431.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="1067.9" y="453" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1070.94" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.03%)</title><rect x="1181.7" y="485" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1184.73" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.04%)</title><rect x="99.7" y="437" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="102.70" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="207.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (191,919,190 samples, 0.28%)</title><rect x="569.7" y="453" width="3.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="572.66" y="463.5" ></text>
</g>
<g >
<title>cfree (141,414,140 samples, 0.21%)</title><rect x="174.1" y="453" width="2.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="177.10" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (20,202,020 samples, 0.03%)</title><rect x="1179.4" y="453" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1182.45" y="463.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="501" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.82" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (151,515,150 samples, 0.22%)</title><rect x="1065.8" y="469" width="2.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1068.83" y="479.5" ></text>
</g>
<g >
<title>sim::Generate::operator (131,313,130 samples, 0.19%)</title><rect x="92.1" y="501" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="95.14" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="12.3" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.29" y="431.5" ></text>
</g>
<g >
<title>sim::Switch::process (56,353,534,790 samples, 83.16%)</title><rect x="141.7" y="485" width="981.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="144.74" y="495.5" >sim::Switch::process</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="93.9" y="421" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="96.90" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="111.8" y="485" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="114.84" y="495.5" ></text>
</g>
<g >
<title>sim::Process::operator (363,636,360 samples, 0.54%)</title><rect x="36.4" y="517" width="6.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="39.38" y="527.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="517" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.82" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="1176.5" y="405" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.46" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1176.8" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.81" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (30,303,030 samples, 0.04%)</title><rect x="1185.4" y="469" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1188.43" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,757,575,080 samples, 99.99%)</title><rect x="10.2" y="565" width="1179.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="575.5" >[libc.so.6]</text>
</g>
<g >
<title>cfree (212,121,210 samples, 0.31%)</title><rect x="614.2" y="437" width="3.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="617.16" y="447.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="151.9" y="453" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="154.94" y="463.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (505,050,500 samples, 0.75%)</title><rect x="115.4" y="485" width="8.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="118.35" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,010,100 samples, 0.15%)</title><rect x="1175.6" y="469" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1178.58" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.04%)</title><rect x="596.0" y="453" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="599.04" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="130.5" y="405" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="133.48" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="405" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="95.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.07%)</title><rect x="705.1" y="421" width="0.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="708.09" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="127.7" y="437" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="130.67" y="447.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="517" width="1.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.24" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1067.9" y="437" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1070.94" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="325" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.30" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1185.3" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.25" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1168.4" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1171.37" y="447.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (10,101,010 samples, 0.01%)</title><rect x="94.4" y="501" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="97.42" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="93.5" y="421" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="96.54" y="431.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (101,010,100 samples, 0.15%)</title><rect x="1031.0" y="437" width="1.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1034.00" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1067.2" y="405" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1070.23" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.01%)</title><rect x="1175.2" y="469" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1178.23" y="479.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (20,202,020 samples, 0.03%)</title><rect x="141.2" y="485" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="144.21" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.07" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="357" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.59" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="179.6" y="453" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="182.55" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="453" width="1.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.24" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1166.4" y="469" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.43" y="479.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (30,303,030 samples, 0.04%)</title><rect x="1088.0" y="469" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1090.99" y="479.5" ></text>
</g>
<g >
<title>operator new (272,727,270 samples, 0.40%)</title><rect x="1059.3" y="453" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1062.32" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1169.1" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.07" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="1175.6" y="421" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.58" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1167.3" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.31" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1167.3" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1170.31" y="447.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="485" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1181.92" y="495.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="94.2" y="453" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="97.25" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.03%)</title><rect x="1182.1" y="485" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1185.09" y="495.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (30,303,030 samples, 0.04%)</title><rect x="1166.6" y="469" width="0.5" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1169.61" y="479.5" ></text>
</g>
<g >
<title>sim::Link::arrive (343,434,340 samples, 0.51%)</title><rect x="94.6" y="485" width="6.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="97.60" y="495.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (50,505,050 samples, 0.07%)</title><rect x="1179.1" y="485" width="0.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1182.10" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.01%)</title><rect x="10.2" y="453" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.18" y="463.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="293" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.94" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="96.9" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="99.89" y="463.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="501" width="1.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1191.24" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="335.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.09%)</title><rect x="586.5" y="469" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="589.54" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="421" width="1.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.24" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="10.4" y="405" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="415.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,292,929,270 samples, 3.38%)</title><rect x="1123.0" y="485" width="39.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1125.99" y="495.5" >voi..</text>
</g>
<g >
<title>memchr@plt (212,121,210 samples, 0.31%)</title><rect x="266.6" y="437" width="3.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="269.61" y="447.5" ></text>
</g>
<g >
<title>cfree (1,212,121,200 samples, 1.79%)</title><rect x="244.5" y="437" width="21.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="247.45" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.01%)</title><rect x="1067.4" y="405" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1070.41" y="415.5" ></text>
</g>
<g >
<title>memcpy@plt (60,606,060 samples, 0.09%)</title><rect x="176.6" y="453" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="179.56" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="373" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.77" y="383.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.01%)</title><rect x="1164.3" y="485" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1167.32" y="495.5" ></text>
</g>
<g >
<title>operator delete (101,010,100 samples, 0.15%)</title><rect x="618.0" y="437" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="621.03" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (90,909,090 samples, 0.13%)</title><rect x="1180.2" y="485" width="1.5" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1183.15" y="495.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (151,515,150 samples, 0.22%)</title><rect x="10.2" y="517" width="2.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.18" y="527.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="128.4" y="453" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="131.37" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="325" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1191.77" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.11" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="128.2" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="131.19" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.03%)</title><rect x="1180.5" y="453" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1183.50" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.8" y="469" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.81" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="97.1" y="453" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="100.06" y="463.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.01%)</title><rect x="1064.9" y="453" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1067.95" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.1" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.11" y="415.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (121,212,120 samples, 0.18%)</title><rect x="132.1" y="485" width="2.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="135.06" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.12" y="287.5" ></text>
</g>
<g >
<title>memcpy@plt (40,404,040 samples, 0.06%)</title><rect x="1022.0" y="405" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1025.03" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="341" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.24" y="351.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (878,787,870 samples, 1.30%)</title><rect x="1172.9" y="517" width="15.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1175.94" y="527.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="113.6" y="485" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="116.60" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="325" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1067.6" y="437" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1070.59" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (10,101,010 samples, 0.01%)</title><rect x="95.5" y="437" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="98.48" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="405" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.77" y="415.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="617.9" y="437" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="620.85" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.01%)</title><rect x="1188.4" y="373" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.42" y="383.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1184.9" y="469" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.90" y="479.5" ></text>
</g>
<g >
<title>Logger::info (111,111,110 samples, 0.16%)</title><rect x="94.8" y="469" width="1.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="97.78" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="97.8" y="453" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="100.77" y="463.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (60,606,060 samples, 0.09%)</title><rect x="100.8" y="501" width="1.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="103.76" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="373" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.24" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (444,444,440 samples, 0.66%)</title><rect x="1032.8" y="437" width="7.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1035.76" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.4" y="389" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.42" y="399.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (50,505,050 samples, 0.07%)</title><rect x="1164.8" y="437" width="0.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1167.85" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="341" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.65" y="351.5" ></text>
</g>
<g >
<title>cfree (1,575,757,560 samples, 2.33%)</title><rect x="676.6" y="421" width="27.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="679.60" y="431.5" >c..</text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1187.0" y="469" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.01" y="479.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (30,303,030 samples, 0.04%)</title><rect x="1046.3" y="437" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1049.30" y="447.5" ></text>
</g>
<g >
<title>_start (67,757,575,080 samples, 99.99%)</title><rect x="10.2" y="597" width="1179.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.18" y="607.5" >_start</text>
</g>
<g >
<title>[libc.so.6] (323,232,320 samples, 0.48%)</title><rect x="168.5" y="453" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="171.47" y="463.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="152.3" y="405" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="155.29" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (535,353,530 samples, 0.79%)</title><rect x="508.1" y="421" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="511.10" y="431.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="96.7" y="469" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="99.71" y="479.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="10.4" y="421" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.35" y="431.5" ></text>
</g>
<g >
<title>sim::SendData::operator (333,333,330 samples, 0.49%)</title><rect x="1164.1" y="501" width="5.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1167.15" y="511.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.18%)</title><rect x="1167.3" y="469" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1170.31" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="11.9" y="437" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.93" y="447.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (191,919,190 samples, 0.28%)</title><rect x="558.6" y="437" width="3.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="561.58" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="95.1" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="98.13" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="309" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.30" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (60,606,060 samples, 0.09%)</title><rect x="565.6" y="453" width="1.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="568.61" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1168.2" y="405" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1171.19" y="415.5" ></text>
</g>
<g >
<title>cfree (666,666,660 samples, 0.98%)</title><rect x="79.8" y="501" width="11.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="82.83" y="511.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [20]&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="453" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.82" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="341" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.47" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.04%)</title><rect x="1166.6" y="453" width="0.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1169.61" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1066.2" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1069.18" y="447.5" ></text>
</g>
<g >
<title>Logger::info (50,505,050 samples, 0.07%)</title><rect x="151.6" y="469" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="154.59" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.36%)</title><rect x="1054.6" y="437" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1057.57" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="128.2" y="469" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="131.19" y="479.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (10,101,010 samples, 0.01%)</title><rect x="141.6" y="485" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="144.56" y="495.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="100.2" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="103.23" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1176.3" y="405" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.28" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.77" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (303,030,300 samples, 0.45%)</title><rect x="239.2" y="437" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="242.18" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (151,515,150 samples, 0.22%)</title><rect x="10.2" y="501" width="2.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="517" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.01%)</title><rect x="10.7" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="13.70" y="479.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (40,404,040 samples, 0.06%)</title><rect x="91.4" y="501" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="94.43" y="511.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.12%)</title><rect x="1022.7" y="405" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1025.74" y="415.5" ></text>
</g>
<g >
<title>main (67,595,958,920 samples, 99.75%)</title><rect x="13.0" y="549" width="1177.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="15.99" y="559.5" >main</text>
</g>
<g >
<title>sim::ECN::get_congestion_mark (10,101,010 samples, 0.01%)</title><rect x="114.7" y="485" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="117.65" y="495.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (67,494,948,820 samples, 99.60%)</title><rect x="13.0" y="533" width="1175.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="15.99" y="543.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="98.8" y="453" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="101.82" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (262,626,260 samples, 0.39%)</title><rect x="672.0" y="421" width="4.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="675.02" y="431.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="93.2" y="421" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="96.19" y="431.5" ></text>
</g>
<g >
<title>parse_filename (111,111,110 samples, 0.16%)</title><rect x="94.8" y="453" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="97.78" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="239.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="93.9" y="405" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="96.90" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1067.8" y="453" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1070.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="207.5" ></text>
</g>
<g >
<title>malloc (252,525,250 samples, 0.37%)</title><rect x="588.3" y="453" width="4.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="591.30" y="463.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (181,818,180 samples, 0.27%)</title><rect x="124.1" y="485" width="3.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="127.15" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="191.5" ></text>
</g>
<g >
<title>parse_filename (40,404,040 samples, 0.06%)</title><rect x="127.5" y="453" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="130.49" y="463.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (80,808,080 samples, 0.12%)</title><rect x="1066.4" y="453" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1069.35" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.11" y="303.5" ></text>
</g>
<g >
<title>parse_filename (50,505,050 samples, 0.07%)</title><rect x="1064.1" y="453" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1067.07" y="463.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="293" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.30" y="303.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (27,121,211,850 samples, 40.02%)</title><rect x="592.9" y="469" width="472.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="595.88" y="479.5" >sim::Link::get_packet</text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1185.4" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.43" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (13,050,504,920 samples, 19.26%)</title><rect x="331.3" y="437" width="227.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="334.34" y="447.5" >std::filesystem::__cxx11::path..</text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.01%)</title><rect x="93.0" y="437" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="96.02" y="447.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="1175.6" y="437" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.58" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (20,202,020 samples, 0.03%)</title><rect x="10.4" y="437" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.35" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.03%)</title><rect x="129.1" y="437" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="132.07" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="100.8" y="485" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="103.76" y="495.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (30,303,030 samples, 0.04%)</title><rect x="573.0" y="453" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="576.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="341" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1191.94" y="351.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (50,505,050 samples, 0.07%)</title><rect x="1167.7" y="453" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1170.66" y="463.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="101.6" y="469" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="104.64" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="287.5" ></text>
</g>
<g >
<title>parse_filename (23,515,151,280 samples, 34.70%)</title><rect x="620.3" y="437" width="409.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="623.31" y="447.5" >parse_filename</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="389" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.77" y="399.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="1065.3" y="437" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1068.30" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="569.3" y="453" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="572.31" y="463.5" ></text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="325" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.65" y="335.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1152.9" y="469" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1155.89" y="479.5" ></text>
</g>
<g >
<title>operator new (292,929,290 samples, 0.43%)</title><rect x="587.6" y="469" width="5.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="590.60" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (111,111,110 samples, 0.16%)</title><rect x="10.9" y="469" width="1.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.88" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.24%)</title><rect x="10.2" y="533" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="543.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (303,030,300 samples, 0.45%)</title><rect x="1041.0" y="437" width="5.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1044.03" y="447.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.09%)</title><rect x="704.0" y="421" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="707.03" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="389" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.24" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1185.6" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.60" y="415.5" ></text>
</g>
<g >
<title>memcpy@plt (40,404,040 samples, 0.06%)</title><rect x="556.5" y="421" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="559.47" y="431.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.01%)</title><rect x="1177.3" y="485" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1180.34" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="341" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="351.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (737,373,730 samples, 1.09%)</title><rect x="318.5" y="437" width="12.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="321.50" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="94.2" y="469" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="97.25" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1175.4" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.40" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="191.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="100.2" y="421" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="103.23" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.77" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="1167.1" y="453" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1170.14" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.04%)</title><rect x="10.2" y="469" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.18" y="479.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (64,818,181,170 samples, 95.65%)</title><rect x="44.3" y="517" width="1128.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="47.30" y="527.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="159.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="325" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1191.94" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1065.3" y="405" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1068.30" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (20,202,020 samples, 0.03%)</title><rect x="99.0" y="453" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="102.00" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (212,121,210 samples, 0.31%)</title><rect x="561.9" y="453" width="3.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="564.92" y="463.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.03%)</title><rect x="97.4" y="469" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="100.41" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="97.1" y="469" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="100.06" y="479.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1179.1" y="469" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1182.10" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1185.4" y="421" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.43" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.06%)</title><rect x="98.1" y="453" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="101.12" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="175.5" ></text>
</g>
<g >
<title>operator new (424,242,420 samples, 0.63%)</title><rect x="710.9" y="421" width="7.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="713.89" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="501" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1180.51" y="511.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="1165.7" y="469" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1168.73" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="100.4" y="469" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="103.40" y="479.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [20]&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="469" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1192.82" y="479.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="501" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1176.99" y="511.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="127.8" y="437" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="130.84" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="1187.7" y="501" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1190.71" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="325" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.47" y="335.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="1068.1" y="437" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1071.11" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (80,808,080 samples, 0.12%)</title><rect x="92.7" y="485" width="1.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="95.67" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1169.2" y="421" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1172.25" y="431.5" ></text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="309" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1191.77" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1180.2" y="469" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1183.15" y="479.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,929,292,320 samples, 89.91%)</title><rect x="102.0" y="501" width="1060.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="104.99" y="511.5" >sim::Process::operator</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="277" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.94" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.01%)</title><rect x="1168.7" y="437" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1171.72" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>operator delete (111,111,110 samples, 0.16%)</title><rect x="177.6" y="453" width="2.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="180.62" y="463.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="1167.1" y="437" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1170.14" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="151.8" y="453" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="154.76" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="549" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.06%)</title><rect x="131.2" y="421" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="134.18" y="431.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="309" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.94" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="367.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.03%)</title><rect x="1166.1" y="469" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.08" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.21%)</title><rect x="611.7" y="437" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="614.70" y="447.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.01%)</title><rect x="130.8" y="421" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="133.83" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::~Transmit (10,101,010 samples, 0.01%)</title><rect x="101.8" y="501" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="104.81" y="511.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="325" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1192.12" y="335.5" ></text>
</g>
<g >
<title>sim::Process::~Process (70,707,070 samples, 0.10%)</title><rect x="1162.9" y="501" width="1.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1165.91" y="511.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1178.6" y="485" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.57" y="495.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="12.8" y="485" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.81" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="255.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.06%)</title><rect x="1176.5" y="437" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1179.46" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="152.3" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="155.29" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1185.3" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.25" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (70,707,070 samples, 0.10%)</title><rect x="1029.8" y="437" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1032.77" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1175.4" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.40" y="431.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.01%)</title><rect x="1088.3" y="437" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1091.34" y="447.5" ></text>
</g>
<g >
<title>memchr@plt (282,828,280 samples, 0.42%)</title><rect x="706.0" y="421" width="4.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="708.97" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1175.9" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.93" y="415.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1185.4" y="437" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.43" y="447.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.06%)</title><rect x="1176.5" y="421" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1179.46" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="131.9" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="134.89" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="453" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.07" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (3,121,212,090 samples, 4.61%)</title><rect x="718.3" y="421" width="54.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="721.28" y="431.5" >std::..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="341" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.59" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="97.8" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="100.77" y="447.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 0.30%)</title><rect x="1018.5" y="389" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1021.51" y="399.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.01%)</title><rect x="128.5" y="421" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="131.55" y="431.5" ></text>
</g>
<g >
<title>sim::Generate::~Generate (10,101,010 samples, 0.01%)</title><rect x="35.9" y="517" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="38.85" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="128.5" y="437" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="131.55" y="447.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (50,505,050 samples, 0.07%)</title><rect x="99.3" y="453" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="102.35" y="463.5" ></text>
</g>
<g >
<title>cfree (70,707,070 samples, 0.10%)</title><rect x="13.7" y="517" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.69" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="130.7" y="389" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="133.66" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (161,616,160 samples, 0.24%)</title><rect x="10.2" y="549" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="277" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.30" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="335.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="1174.5" y="485" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1177.52" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1168.5" y="453" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1171.54" y="463.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (101,010,100 samples, 0.15%)</title><rect x="1171.2" y="501" width="1.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1174.18" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="341" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.30" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="98.5" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="101.47" y="447.5" ></text>
</g>
<g >
<title>sim::Process::~Process (90,909,090 samples, 0.13%)</title><rect x="42.7" y="517" width="1.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="45.71" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="223.5" ></text>
</g>
<g >
<title>cfree (353,535,350 samples, 0.52%)</title><rect x="580.2" y="469" width="6.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="583.21" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (353,535,350 samples, 0.52%)</title><rect x="94.6" y="501" width="6.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="97.60" y="511.5" ></text>
</g>
<g >
<title>Logger::info (70,707,070 samples, 0.10%)</title><rect x="1164.5" y="469" width="1.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1167.50" y="479.5" ></text>
</g>
<g >
<title>Logger::get_instance (90,909,090 samples, 0.13%)</title><rect x="150.0" y="469" width="1.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="153.00" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1017.3" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.28" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.1" y="421" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.11" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.11" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="325" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.59" y="335.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.12%)</title><rect x="557.2" y="421" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="560.17" y="431.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.06%)</title><rect x="265.9" y="437" width="0.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="268.91" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.7" y="453" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.74" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="10.4" y="389" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="1167.5" y="453" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1170.49" y="463.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (14,030,302,890 samples, 20.70%)</title><rect x="779.8" y="421" width="244.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="782.84" y="431.5" >std::filesystem::__cxx11::path::..</text>
</g>
<g >
<title>malloc (171,717,170 samples, 0.25%)</title><rect x="1019.0" y="373" width="3.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1022.04" y="383.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="469" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1181.92" y="479.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.04%)</title><rect x="12.3" y="437" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.29" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.13%)</title><rect x="1188.2" y="469" width="1.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.24" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (10,101,010 samples, 0.01%)</title><rect x="1171.0" y="501" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1174.00" y="511.5" ></text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.01%)</title><rect x="1188.4" y="325" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1191.42" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1185.3" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.25" y="287.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (30,303,030 samples, 0.04%)</title><rect x="131.4" y="405" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="134.36" y="415.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1187.0" y="453" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.01" y="463.5" ></text>
</g>
<g >
<title>nons (67,767,676,090 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1192.12" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,242,424,220 samples, 3.31%)</title><rect x="517.4" y="421" width="39.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="520.42" y="431.5" >[li..</text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.03%)</title><rect x="1065.5" y="469" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1068.47" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,141,414,120 samples, 3.16%)</title><rect x="201.9" y="437" width="37.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="204.89" y="447.5" >[li..</text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="130.3" y="421" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="133.30" y="431.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="128.5" y="453" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="131.55" y="463.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.01%)</title><rect x="127.3" y="469" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="130.31" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="319.5" ></text>
</g>
<g >
<title>sim::Event::get_time (171,717,170 samples, 0.25%)</title><rect x="16.2" y="517" width="2.9" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="19.16" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1191.94" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1179.11" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (383,838,380 samples, 0.57%)</title><rect x="573.5" y="469" width="6.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="576.53" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,292,929,270 samples, 3.38%)</title><rect x="982.1" y="405" width="39.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="985.11" y="415.5" >[li..</text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.04%)</title><rect x="1058.8" y="453" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1061.79" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="100.77" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="128.7" y="453" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="131.72" y="463.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1180.3" y="437" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.33" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="533" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (20,202,020 samples, 0.03%)</title><rect x="1164.5" y="437" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1167.50" y="447.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (131,313,130 samples, 0.19%)</title><rect x="129.6" y="469" width="2.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="132.60" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="437" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.08" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (10,101,010 samples, 0.01%)</title><rect x="98.6" y="405" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="101.65" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (616,161,610 samples, 0.91%)</title><rect x="971.4" y="405" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="974.38" y="415.5" ></text>
</g>
<g >
<title>Logger::info (25,858,585,600 samples, 38.16%)</title><rect x="596.6" y="453" width="450.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="599.57" y="463.5" >Logger::info</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="718.1" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="721.11" y="63.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.01%)</title><rect x="1168.7" y="453" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1171.72" y="463.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.16%)</title><rect x="130.0" y="453" width="1.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="132.95" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1068.3" y="453" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1071.29" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 0.52%)</title><rect x="1046.8" y="453" width="6.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1049.83" y="463.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.04%)</title><rect x="1067.1" y="437" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1070.06" y="447.5" ></text>
</g>
<g >
<title>sim::Switch::process (60,606,060 samples, 0.09%)</title><rect x="1169.9" y="501" width="1.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1172.95" y="511.5" ></text>
</g>
<g >
<title>malloc (262,626,260 samples, 0.39%)</title><rect x="1059.5" y="437" width="4.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1062.49" y="447.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="341" width="0.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1192.12" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1066.2" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1069.18" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.04%)</title><rect x="1067.1" y="421" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1070.06" y="431.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.22%)</title><rect x="1174.7" y="485" width="2.6" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1177.70" y="495.5" ></text>
</g>
<g >
<title>malloc@plt (60,606,060 samples, 0.09%)</title><rect x="1017.5" y="389" width="1.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1020.46" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="485" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.82" y="495.5" ></text>
</g>
<g >
<title>sim::Event::Event (30,303,030 samples, 0.04%)</title><rect x="114.8" y="485" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="117.83" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="12.3" y="405" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.29" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::InsertPotentialSimpleKey (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="309" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1191.59" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="95.3" y="437" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="98.30" y="447.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.01%)</title><rect x="99.2" y="437" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="102.17" y="447.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.13%)</title><rect x="112.0" y="485" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="115.01" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.04%)</title><rect x="1181.2" y="469" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1184.21" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1168.2" y="437" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1171.19" y="447.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1187.5" y="485" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1190.54" y="495.5" ></text>
</g>
<g >
<title>all (67,767,676,090 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1017.1" y="373" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1020.11" y="383.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (959,595,950 samples, 1.42%)</title><rect x="19.1" y="517" width="16.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="22.15" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="485" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.99" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1185.1" y="293" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.08" y="303.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="100.6" y="485" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="103.58" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,292,929,270 samples, 3.38%)</title><rect x="278.6" y="437" width="39.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="281.57" y="447.5" >std..</text>
</g>
</g>
</svg>
