<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>all (67,585,857,910 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (60,606,060 samples, 0.09%)</title><rect x="109.6" y="341" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="112.64" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.2" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.24" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.09%)</title><rect x="100.3" y="277" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="103.29" y="287.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (222,222,220 samples, 0.33%)</title><rect x="1014.3" y="277" width="3.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1017.35" y="287.5" ></text>
</g>
<g >
<title>sim::Process::~Process (272,727,270 samples, 0.40%)</title><rect x="43.9" y="357" width="4.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="46.86" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.25%)</title><rect x="10.2" y="389" width="3.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="399.5" ></text>
</g>
<g >
<title>sim::Link::transmit (50,505,050 samples, 0.07%)</title><rect x="109.8" y="325" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="112.82" y="335.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="144.0" y="293" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="147.03" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (131,313,130 samples, 0.19%)</title><rect x="10.7" y="309" width="2.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.71" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="108.2" y="245" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="111.23" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (131,313,130 samples, 0.19%)</title><rect x="1184.5" y="325" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.53" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="325" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.65" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1187.7" y="309" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.71" y="319.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.13%)</title><rect x="14.2" y="357" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.23" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="603.8" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="606.79" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,282,828,270 samples, 1.90%)</title><rect x="1053.0" y="309" width="22.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1055.97" y="319.5" >s..</text>
</g>
<g >
<title>sim::Link::Arrive::operator (414,141,410 samples, 0.61%)</title><rect x="102.4" y="341" width="7.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="105.41" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (666,666,660 samples, 0.99%)</title><rect x="955.8" y="245" width="11.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="958.80" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="603.8" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="606.79" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="245" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (20,202,020 samples, 0.03%)</title><rect x="141.4" y="277" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="144.39" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (60,606,060 samples, 0.09%)</title><rect x="105.1" y="293" width="1.0" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="108.06" y="303.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.01%)</title><rect x="142.6" y="309" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="145.62" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (40,404,040 samples, 0.06%)</title><rect x="570.6" y="293" width="0.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="573.64" y="303.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="103.1" y="277" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="106.12" y="287.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.10%)</title><rect x="1185.6" y="293" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.59" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="1169.7" y="277" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1172.72" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="341" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.65" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,575,756,900 samples, 99.99%)</title><rect x="10.2" y="405" width="1179.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="415.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="127.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="109.1" y="277" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="112.11" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="207.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="1171.8" y="277" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1174.84" y="287.5" ></text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (40,404,040 samples, 0.06%)</title><rect x="97.8" y="341" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="100.83" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.03%)</title><rect x="10.4" y="293" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.35" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="47.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="143.0" y="277" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="145.97" y="287.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="357" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.65" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1186.1" y="245" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.12" y="255.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="144.2" y="309" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="147.21" y="319.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (20,202,020 samples, 0.03%)</title><rect x="144.4" y="309" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="147.38" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="223.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (67,292,928,620 samples, 99.57%)</title><rect x="13.2" y="373" width="1174.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="16.17" y="383.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>sim::Link::get_from_egress_queue_size (10,101,010 samples, 0.01%)</title><rect x="147.4" y="325" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="150.38" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (10,101,010 samples, 0.01%)</title><rect x="99.9" y="261" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="102.94" y="271.5" ></text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="165.0" y="293" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="168.02" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.04%)</title><rect x="1052.4" y="293" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1055.44" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="143.1" y="229" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="146.15" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="79.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.01%)</title><rect x="142.3" y="309" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="145.27" y="319.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.12%)</title><rect x="144.9" y="293" width="1.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="147.91" y="303.5" ></text>
</g>
<g >
<title>malloc (515,151,510 samples, 0.76%)</title><rect x="287.2" y="261" width="9.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="290.23" y="271.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="108.9" y="293" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="111.94" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="100.3" y="261" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="103.29" y="271.5" ></text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="604.0" y="309" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="606.97" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="197" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="207.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,595,959,570 samples, 3.84%)</title><rect x="296.2" y="277" width="45.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="299.23" y="287.5" >std:..</text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.03%)</title><rect x="1077.1" y="277" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1080.13" y="287.5" ></text>
</g>
<g >
<title>operator delete (80,808,080 samples, 0.12%)</title><rect x="595.7" y="309" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="598.68" y="319.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="102.1" y="309" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="105.06" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1051.0" y="293" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1054.03" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="165" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1192.29" y="175.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.6" y="101" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.59" y="111.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.09%)</title><rect x="1170.1" y="293" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1173.07" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="142.8" y="293" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="145.80" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (40,404,040 samples, 0.06%)</title><rect x="12.3" y="293" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.29" y="303.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1052.3" y="213" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1055.27" y="223.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (151,515,150 samples, 0.22%)</title><rect x="1166.5" y="309" width="2.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1169.54" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1171.8" y="261" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1174.84" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.03%)</title><rect x="108.1" y="261" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="111.05" y="271.5" ></text>
</g>
<g >
<title>sim::Link::get_to (20,202,020 samples, 0.03%)</title><rect x="1180.3" y="325" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1183.30" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="181" width="0.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.47" y="191.5" ></text>
</g>
<g >
<title>Logger::warn (23,979,797,740 samples, 35.48%)</title><rect x="165.2" y="309" width="418.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="168.19" y="319.5" >Logger::warn</text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (10,101,010 samples, 0.01%)</title><rect x="1172.2" y="341" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1175.19" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1152.4" y="309" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1155.44" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1179.1" y="293" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.07" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="143.3" y="277" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="146.33" y="287.5" ></text>
</g>
<g >
<title>sim::is_valid_link (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1192.82" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="12.3" y="261" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.29" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.10%)</title><rect x="191.1" y="293" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="194.12" y="303.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="143.9" y="293" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="146.85" y="303.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="1169.2" y="309" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1172.19" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="159.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,151,515,140 samples, 1.70%)</title><rect x="17.6" y="357" width="20.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="20.58" y="367.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1173.6" y="341" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1176.60" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.01%)</title><rect x="100.1" y="277" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="103.12" y="287.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.04%)</title><rect x="145.6" y="261" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="148.62" y="271.5" ></text>
</g>
<g >
<title>parse_filename (90,909,090 samples, 0.13%)</title><rect x="1164.8" y="293" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1167.78" y="303.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.03%)</title><rect x="104.7" y="309" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="107.70" y="319.5" ></text>
</g>
<g >
<title>sim::Link::arrive (414,141,410 samples, 0.61%)</title><rect x="102.4" y="325" width="7.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="105.41" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="181" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.94" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1176.1" y="213" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1179.07" y="223.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="106.8" y="293" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="109.82" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="229" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.04%)</title><rect x="143.0" y="293" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="145.97" y="303.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,343,434,320 samples, 3.47%)</title><rect x="1121.2" y="325" width="40.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1124.22" y="335.5" >voi..</text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="110.3" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="113.35" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (40,404,040 samples, 0.06%)</title><rect x="147.6" y="325" width="0.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="150.56" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1171.7" y="277" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.66" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="145.1" y="229" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="148.09" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="309" width="1.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.06" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="287.5" ></text>
</g>
<g >
<title>cfree (252,525,250 samples, 0.37%)</title><rect x="1038.2" y="293" width="4.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1041.16" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="149" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.47" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 0.52%)</title><rect x="583.9" y="309" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="586.86" y="319.5" ></text>
</g>
<g >
<title>operator delete (90,909,090 samples, 0.13%)</title><rect x="121.8" y="325" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="124.81" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (141,414,140 samples, 0.21%)</title><rect x="1166.7" y="293" width="2.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1169.72" y="303.5" ></text>
</g>
<g >
<title>cfree (40,404,040 samples, 0.06%)</title><rect x="12.3" y="277" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.29" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.04%)</title><rect x="1181.7" y="325" width="0.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1184.71" y="335.5" ></text>
</g>
<g >
<title>malloc (272,727,270 samples, 0.40%)</title><rect x="1044.5" y="277" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1047.51" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>cfree (171,717,170 samples, 0.25%)</title><rect x="187.8" y="293" width="3.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="190.77" y="303.5" ></text>
</g>
<g >
<title>malloc (333,333,330 samples, 0.49%)</title><rect x="598.1" y="293" width="5.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="601.15" y="303.5" ></text>
</g>
<g >
<title>nons (67,585,857,910 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >nons</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1186.6" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.65" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1179.4" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.42" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="1043.4" y="293" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1046.45" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (373,737,370 samples, 0.55%)</title><rect x="252.0" y="277" width="6.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="254.96" y="287.5" ></text>
</g>
<g >
<title>operator new (595,959,590 samples, 0.88%)</title><rect x="285.8" y="277" width="10.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="288.82" y="287.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1174.7" y="277" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.66" y="287.5" ></text>
</g>
<g >
<title>operator new (313,131,310 samples, 0.46%)</title><rect x="1043.8" y="293" width="5.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1046.80" y="303.5" ></text>
</g>
<g >
<title>cfree (292,929,290 samples, 0.43%)</title><rect x="590.0" y="309" width="5.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="593.04" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.09%)</title><rect x="1175.2" y="293" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1178.19" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (50,505,050 samples, 0.07%)</title><rect x="106.1" y="309" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="109.11" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="144.9" y="245" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="147.91" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="12.3" y="245" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.29" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1166.2" y="261" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.19" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1173.4" y="325" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.42" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (141,414,140 samples, 0.21%)</title><rect x="1050.5" y="309" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1053.50" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.2" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.24" y="271.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.82" y="351.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="357" width="1.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.06" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="309" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.00" y="319.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (80,808,080 samples, 0.12%)</title><rect x="142.8" y="309" width="1.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="145.80" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (575,757,570 samples, 0.85%)</title><rect x="518.1" y="261" width="10.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="521.08" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1169.5" y="277" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.54" y="287.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (12,595,959,470 samples, 18.64%)</title><rect x="789.1" y="261" width="220.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="792.14" y="271.5" >std::filesystem::__cxx11::pat..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="69" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.77" y="79.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.82" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="102.1" y="277" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="105.06" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.01%)</title><rect x="109.5" y="309" width="0.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="112.46" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1174.7" y="309" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1177.66" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (10,101,010 samples, 0.01%)</title><rect x="101.2" y="245" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="104.18" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="143.1" y="261" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="146.15" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::pop (10,101,010 samples, 0.01%)</title><rect x="1188.9" y="197" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1191.94" y="207.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="107.0" y="293" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="110.00" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (20,202,020 samples, 0.03%)</title><rect x="1180.8" y="309" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1183.83" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="159.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="107.0" y="277" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="110.00" y="287.5" ></text>
</g>
<g >
<title>operator new (535,353,530 samples, 0.79%)</title><rect x="1152.8" y="309" width="9.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1155.79" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="10.4" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="255.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.01%)</title><rect x="104.5" y="309" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="107.53" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="102.8" y="277" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="105.76" y="287.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="1175.4" y="277" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.36" y="287.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.01%)</title><rect x="125.5" y="325" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="128.51" y="335.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.10%)</title><rect x="1185.6" y="309" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.59" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (222,222,220 samples, 0.33%)</title><rect x="571.3" y="293" width="3.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="574.34" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.01%)</title><rect x="13.0" y="357" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="16.00" y="367.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (666,666,660 samples, 0.99%)</title><rect x="125.7" y="325" width="11.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="128.69" y="335.5" ></text>
</g>
<g >
<title>Logger::info (90,909,090 samples, 0.13%)</title><rect x="140.3" y="309" width="1.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="143.33" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1184.2" y="245" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.18" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>main (67,404,039,730 samples, 99.73%)</title><rect x="13.2" y="389" width="1176.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="16.17" y="399.5" >main</text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="192.4" y="293" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="195.35" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="191.5" ></text>
</g>
<g >
<title>malloc@plt (60,606,060 samples, 0.09%)</title><rect x="1003.8" y="229" width="1.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1006.77" y="239.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 0.04%)</title><rect x="1188.4" y="149" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.41" y="159.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (30,303,030 samples, 0.04%)</title><rect x="101.4" y="293" width="0.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="104.35" y="303.5" ></text>
</g>
<g >
<title>operator new (181,818,180 samples, 0.27%)</title><rect x="1004.8" y="229" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1007.83" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="293" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.01" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.04%)</title><rect x="107.9" y="277" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="110.88" y="287.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="181" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1192.29" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (363,636,360 samples, 0.54%)</title><rect x="91.5" y="325" width="6.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="94.48" y="335.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (575,757,570 samples, 0.85%)</title><rect x="1176.8" y="341" width="10.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1179.77" y="351.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.01%)</title><rect x="1169.0" y="277" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1172.01" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (30,303,030 samples, 0.04%)</title><rect x="1187.2" y="341" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1190.18" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1175.7" y="229" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.72" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (10,101,010 samples, 0.01%)</title><rect x="143.7" y="277" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="146.68" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1174.1" y="325" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.13" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (141,414,140 samples, 0.21%)</title><rect x="150.9" y="325" width="2.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="153.91" y="335.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.01%)</title><rect x="604.1" y="309" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="607.14" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="107.7" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="110.70" y="287.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1179.1" y="309" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.07" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.8" y="85" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.77" y="95.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 0.03%)</title><rect x="1188.1" y="165" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.06" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="223.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.04%)</title><rect x="1050.0" y="293" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1052.97" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,323,232,300 samples, 3.44%)</title><rect x="967.4" y="245" width="40.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="970.44" y="255.5" >[li..</text>
</g>
<g >
<title>[libc.so.6] (2,212,121,190 samples, 3.27%)</title><rect x="213.3" y="277" width="38.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="216.34" y="287.5" >[li..</text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.01%)</title><rect x="143.7" y="293" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="146.68" y="303.5" ></text>
</g>
<g >
<title>parse_filename (90,909,090 samples, 0.13%)</title><rect x="140.3" y="293" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="143.33" y="303.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (10,101,010 samples, 0.01%)</title><rect x="104.2" y="293" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="107.17" y="303.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="108.2" y="229" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="111.23" y="239.5" ></text>
</g>
<g >
<title>cfree (262,626,260 samples, 0.39%)</title><rect x="622.3" y="277" width="4.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="625.31" y="287.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1179.1" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.07" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (101,010,100 samples, 0.15%)</title><rect x="1075.7" y="293" width="1.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1078.72" y="303.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="1178.7" y="325" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1181.71" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.03%)</title><rect x="1182.2" y="325" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.24" y="335.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (64,383,837,740 samples, 95.26%)</title><rect x="48.6" y="357" width="1124.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="51.62" y="367.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1183.1" y="309" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.12" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>cfree (757,575,750 samples, 1.12%)</title><rect x="84.6" y="341" width="13.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="87.60" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="280.2" y="277" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="283.18" y="287.5" ></text>
</g>
<g >
<title>operator new (212,121,210 samples, 0.31%)</title><rect x="561.8" y="245" width="3.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="564.82" y="255.5" ></text>
</g>
<g >
<title>malloc (121,212,120 samples, 0.18%)</title><rect x="1005.9" y="213" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1008.88" y="223.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="13.4" y="357" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.35" y="367.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1169.0" y="261" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1172.01" y="271.5" ></text>
</g>
<g >
<title>operator new (393,939,390 samples, 0.58%)</title><rect x="597.1" y="309" width="6.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="600.09" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (161,616,160 samples, 0.24%)</title><rect x="10.2" y="341" width="2.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1184.0" y="261" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.00" y="271.5" ></text>
</g>
<g >
<title>malloc (454,545,450 samples, 0.67%)</title><rect x="725.5" y="245" width="7.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="728.48" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="102.9" y="277" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="105.94" y="287.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="1172.4" y="341" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1175.36" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="165" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.47" y="175.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="595.2" y="309" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="598.15" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="293" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.65" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (101,010,100 samples, 0.15%)</title><rect x="567.1" y="277" width="1.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="570.11" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.10%)</title><rect x="1185.6" y="277" width="1.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.59" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (333,333,330 samples, 0.49%)</title><rect x="1032.3" y="293" width="5.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1035.34" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.01%)</title><rect x="1181.5" y="325" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1184.53" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1052.3" y="229" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1055.27" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1174.7" y="293" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.66" y="303.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (161,616,160 samples, 0.24%)</title><rect x="1173.8" y="341" width="2.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1176.78" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.07%)</title><rect x="1183.7" y="309" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1186.65" y="319.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1008.5" y="245" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1011.53" y="255.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.01%)</title><rect x="146.9" y="293" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="149.85" y="303.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1179.6" y="309" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1182.59" y="319.5" ></text>
</g>
<g >
<title>memcpy@plt (20,202,020 samples, 0.03%)</title><rect x="190.8" y="293" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="193.77" y="303.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10,101,010 samples, 0.01%)</title><rect x="101.2" y="261" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="104.18" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (393,939,390 samples, 0.58%)</title><rect x="782.3" y="261" width="6.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="785.26" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1170.4" y="229" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1173.42" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,010,100,990 samples, 2.97%)</title><rect x="649.8" y="261" width="35.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="652.82" y="271.5" >[l..</text>
</g>
<g >
<title>sim::Host::process (404,040,400 samples, 0.60%)</title><rect x="140.3" y="325" width="7.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="143.33" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.25%)</title><rect x="10.2" y="373" width="3.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1173.4" y="341" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1176.42" y="351.5" ></text>
</g>
<g >
<title>Logger::get_instance (90,909,090 samples, 0.13%)</title><rect x="119.7" y="325" width="1.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="122.69" y="335.5" ></text>
</g>
<g >
<title>sim::Process::operator (343,434,340 samples, 0.51%)</title><rect x="37.9" y="357" width="6.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="40.86" y="367.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="261" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1187.7" y="325" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.71" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (474,747,470 samples, 0.70%)</title><rect x="341.5" y="277" width="8.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="344.55" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (10,101,010 samples, 0.01%)</title><rect x="1075.4" y="309" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1078.37" y="319.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (131,313,130 samples, 0.19%)</title><rect x="99.6" y="325" width="2.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="102.59" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (131,313,130 samples, 0.19%)</title><rect x="1018.2" y="277" width="2.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1021.23" y="287.5" ></text>
</g>
<g >
<title>memcpy@plt (90,909,090 samples, 0.13%)</title><rect x="626.9" y="277" width="1.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="629.89" y="287.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (101,010,100 samples, 0.15%)</title><rect x="568.9" y="293" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="571.87" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="261" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.65" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.01%)</title><rect x="141.7" y="277" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="144.74" y="287.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (878,787,870 samples, 1.30%)</title><rect x="1172.7" y="357" width="15.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1175.72" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1176.6" y="341" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1179.60" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1180.7" y="309" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1183.65" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (40,404,040 samples, 0.06%)</title><rect x="103.3" y="277" width="0.7" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="106.29" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="103.8" y="261" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="106.82" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.04%)</title><rect x="10.2" y="325" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.18" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="141.7" y="261" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="144.74" y="271.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (414,141,410 samples, 0.61%)</title><rect x="575.8" y="293" width="7.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="578.75" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="144.9" y="261" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="147.91" y="271.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (30,303,030 samples, 0.04%)</title><rect x="101.9" y="325" width="0.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="104.88" y="335.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.01%)</title><rect x="104.0" y="277" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="107.00" y="287.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="325" width="1.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1191.06" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="143.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.01%)</title><rect x="147.0" y="293" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="150.03" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.03%)</title><rect x="1170.4" y="245" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1173.42" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="117" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="127.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="341" width="1.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1191.06" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="277" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.65" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (464,646,460 samples, 0.69%)</title><rect x="179.7" y="293" width="8.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="182.65" y="303.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.01%)</title><rect x="1182.1" y="309" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.06" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (737,373,730 samples, 1.09%)</title><rect x="267.3" y="261" width="12.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="270.30" y="271.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="631.5" y="277" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="634.48" y="287.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.01%)</title><rect x="109.6" y="325" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="112.64" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="10.2" y="245" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="255.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::~Transmit (10,101,010 samples, 0.01%)</title><rect x="110.7" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="113.70" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (141,414,140 samples, 0.21%)</title><rect x="144.7" y="309" width="2.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="147.74" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="293" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.89" y="303.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,212,120,610 samples, 89.09%)</title><rect x="110.9" y="341" width="1051.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="113.88" y="351.5" >sim::Process::operator</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="133" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.24" y="143.5" ></text>
</g>
<g >
<title>Logger::info (90,909,090 samples, 0.13%)</title><rect x="1164.8" y="309" width="1.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1167.78" y="319.5" ></text>
</g>
<g >
<title>memchr@plt (232,323,230 samples, 0.34%)</title><rect x="720.5" y="261" width="4.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="723.54" y="271.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (131,313,130 samples, 0.19%)</title><rect x="107.0" y="309" width="2.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="110.00" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (111,111,110 samples, 0.16%)</title><rect x="1182.6" y="325" width="1.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1185.59" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="165.0" y="277" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="168.02" y="287.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.01%)</title><rect x="1169.9" y="277" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1172.90" y="287.5" ></text>
</g>
<g >
<title>Logger::info (20,202,020 samples, 0.03%)</title><rect x="164.8" y="309" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="167.84" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1186.1" y="261" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.12" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,474,747,450 samples, 3.66%)</title><rect x="1077.8" y="309" width="43.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1080.84" y="319.5" >std:..</text>
</g>
<g >
<title>cfree (1,555,555,540 samples, 2.30%)</title><rect x="692.1" y="261" width="27.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="695.15" y="271.5" >c..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="10.2" y="277" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.18" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (131,313,130 samples, 0.19%)</title><rect x="10.7" y="325" width="2.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.71" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="95.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="1175.4" y="261" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.36" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="111.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="142.8" y="277" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="145.80" y="287.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="1042.6" y="293" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1045.57" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="111.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (25,555,555,300 samples, 37.81%)</title><rect x="604.3" y="309" width="446.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="607.32" y="319.5" >sim::Link::get_packet</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1169.5" y="293" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.54" y="303.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.01%)</title><rect x="1076.8" y="277" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1079.78" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="595.5" y="309" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="598.50" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="175.5" ></text>
</g>
<g >
<title>__libc_start_main (67,575,756,900 samples, 99.99%)</title><rect x="10.2" y="421" width="1179.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.18" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="720.2" y="261" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="723.19" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.04%)</title><rect x="1051.9" y="261" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1054.91" y="271.5" ></text>
</g>
<g >
<title>Logger::info (90,909,090 samples, 0.13%)</title><rect x="102.8" y="309" width="1.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="105.76" y="319.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.06%)</title><rect x="100.5" y="261" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="103.47" y="271.5" ></text>
</g>
<g >
<title>memcpy@plt (40,404,040 samples, 0.06%)</title><rect x="565.5" y="261" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="568.52" y="271.5" ></text>
</g>
<g >
<title>malloc (484,848,480 samples, 0.72%)</title><rect x="1153.7" y="293" width="8.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1156.67" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.03%)</title><rect x="1169.7" y="293" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1172.72" y="303.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (171,717,170 samples, 0.25%)</title><rect x="137.3" y="325" width="3.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="140.33" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="1171.7" y="293" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1174.66" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1051.7" y="261" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1054.74" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1077.0" y="261" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1079.96" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1183.1" y="277" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.12" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1186.3" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.30" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.03%)</title><rect x="1186.8" y="341" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.83" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (909,090,900 samples, 1.35%)</title><rect x="703.4" y="245" width="15.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="706.43" y="255.5" ></text>
</g>
<g >
<title>operator delete (171,717,170 samples, 0.25%)</title><rect x="628.5" y="277" width="3.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="631.48" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="141.9" y="309" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="144.91" y="319.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (70,707,070 samples, 0.10%)</title><rect x="149.7" y="325" width="1.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="152.67" y="335.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::BasicFlow, sim::Link&gt;::add_link (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1192.82" y="335.5" ></text>
</g>
<g >
<title>sim::Host::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="101.7" y="277" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="104.71" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="106.8" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="109.82" y="287.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (292,929,290 samples, 0.43%)</title><rect x="1020.5" y="277" width="5.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1023.52" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="108.4" y="277" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="111.41" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (80,808,080 samples, 0.12%)</title><rect x="1174.8" y="309" width="1.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1177.83" y="319.5" ></text>
</g>
<g >
<title>parse_filename (80,808,080 samples, 0.12%)</title><rect x="102.8" y="293" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="105.76" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="341" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1190.88" y="351.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (10,101,010 samples, 0.01%)</title><rect x="37.7" y="357" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="40.69" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1186.1" y="229" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1189.12" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="143.5" y="293" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="146.50" y="303.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (30,303,030 samples, 0.04%)</title><rect x="146.3" y="293" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="149.32" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1183.5" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.47" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.04%)</title><rect x="1188.4" y="133" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.41" y="143.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (90,909,090 samples, 0.13%)</title><rect x="1174.7" y="325" width="1.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1177.66" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (151,515,150 samples, 0.22%)</title><rect x="1169.4" y="309" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1172.37" y="319.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.01%)</title><rect x="99.9" y="277" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="102.94" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.04%)</title><rect x="10.2" y="309" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.18" y="319.5" ></text>
</g>
<g >
<title>malloc (181,818,180 samples, 0.27%)</title><rect x="562.3" y="229" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="565.35" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1170.6" y="229" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.60" y="239.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (161,616,160 samples, 0.24%)</title><rect x="10.2" y="357" width="2.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.18" y="367.5" ></text>
</g>
<g >
<title>Logger::info (24,272,727,030 samples, 35.91%)</title><rect x="608.6" y="293" width="423.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="611.55" y="303.5" >Logger::info</text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1183.1" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.12" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 0.04%)</title><rect x="1188.4" y="165" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.41" y="175.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (12,444,444,320 samples, 18.41%)</title><rect x="349.8" y="277" width="217.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="352.84" y="287.5" >std::filesystem::__cxx11::pa..</text>
</g>
<g >
<title>sim::Switch::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1180.8" y="325" width="0.7" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1183.83" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1183.5" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.47" y="239.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="11.9" y="293" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.94" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (10,101,010 samples, 0.01%)</title><rect x="10.2" y="293" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.18" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="108.9" y="277" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="111.94" y="287.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="144.7" y="293" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="147.74" y="303.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.12%)</title><rect x="99.9" y="293" width="1.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="102.94" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="84.1" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="87.07" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.25%)</title><rect x="1039.6" y="277" width="3.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1042.57" y="287.5" ></text>
</g>
<g >
<title>memchr@plt (262,626,260 samples, 0.39%)</title><rect x="281.2" y="277" width="4.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="284.24" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1165.5" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.49" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="147.2" y="309" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="150.21" y="319.5" ></text>
</g>
<g >
<title>parse_filename (21,505,050,290 samples, 31.82%)</title><rect x="193.4" y="293" width="375.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="196.41" y="303.5" >parse_filename</text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (131,313,130 samples, 0.19%)</title><rect x="1075.5" y="309" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1078.54" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1166.4" y="309" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.37" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="309" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.89" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="141.0" y="261" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="144.03" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="146.1" y="245" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="149.15" y="255.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="1025.6" y="277" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1028.64" y="287.5" ></text>
</g>
<g >
<title>sim::SendData::operator (444,444,440 samples, 0.66%)</title><rect x="1164.4" y="341" width="7.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1167.43" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="101.7" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="104.71" y="271.5" ></text>
</g>
<g >
<title>operator new (505,050,500 samples, 0.75%)</title><rect x="724.6" y="261" width="8.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="727.60" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="159.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (60,606,060 samples, 0.09%)</title><rect x="105.1" y="309" width="1.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="108.06" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1052.8" y="277" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1055.79" y="287.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1184.0" y="293" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.00" y="303.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.04%)</title><rect x="140.9" y="277" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="143.86" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1183.5" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.47" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (90,909,090 samples, 0.13%)</title><rect x="1030.8" y="277" width="1.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1033.75" y="287.5" ></text>
</g>
<g >
<title>operator new (121,212,120 samples, 0.18%)</title><rect x="123.4" y="325" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="126.40" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1174.7" y="261" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.66" y="271.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="13.0" y="325" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.00" y="335.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="719.3" y="261" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="722.31" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.03%)</title><rect x="1077.5" y="293" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1080.48" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.01%)</title><rect x="1181.4" y="309" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1184.36" y="319.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.09%)</title><rect x="163.8" y="309" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="166.78" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="100.8" y="245" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="103.82" y="255.5" ></text>
</g>
<g >
<title>cfree (1,242,424,230 samples, 1.84%)</title><rect x="258.5" y="277" width="21.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="261.49" y="287.5" >c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.15%)</title><rect x="15.8" y="357" width="1.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="18.82" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="143.1" y="245" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="146.15" y="255.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1165.5" y="277" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1168.49" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.07%)</title><rect x="280.4" y="277" width="0.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="283.35" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (80,808,080 samples, 0.12%)</title><rect x="148.3" y="325" width="1.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="151.26" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="12.8" y="229" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.82" y="239.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="143.1" y="213" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="146.15" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.2" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.24" y="239.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="566.2" y="261" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="569.23" y="271.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.16%)</title><rect x="1188.1" y="373" width="1.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.06" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="309" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.65" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="293" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (50,505,050 samples, 0.07%)</title><rect x="1188.1" y="181" width="0.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.06" y="191.5" ></text>
</g>
<g >
<title>sim::Generate::operator (222,222,220 samples, 0.33%)</title><rect x="98.5" y="341" width="3.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="101.53" y="351.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (121,212,120 samples, 0.18%)</title><rect x="99.8" y="309" width="2.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="102.77" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (50,505,050 samples, 0.07%)</title><rect x="1051.6" y="277" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1054.56" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="213" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,202,020 samples, 0.03%)</title><rect x="146.5" y="277" width="0.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="149.50" y="287.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.01%)</title><rect x="1077.0" y="277" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1079.96" y="287.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1180.7" y="325" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.65" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="108.8" y="293" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="111.76" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="146.0" y="245" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="148.97" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (20,202,020 samples, 0.03%)</title><rect x="10.4" y="277" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.35" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1165.0" y="277" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1167.96" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.13%)</title><rect x="1188.1" y="277" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.06" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1174.5" y="325" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1177.48" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (40,404,040 samples, 0.06%)</title><rect x="1165.7" y="277" width="0.7" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1168.66" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="146.3" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="149.32" y="287.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="10.4" y="261" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.35" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,141,414,120 samples, 3.17%)</title><rect x="528.1" y="261" width="37.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="531.13" y="271.5" >[li..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (303,030,300 samples, 0.45%)</title><rect x="1009.1" y="261" width="5.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1012.06" y="271.5" ></text>
</g>
<g >
<title>sim::Switch::process (55,434,342,880 samples, 82.02%)</title><rect x="153.4" y="325" width="967.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="156.38" y="335.5" >sim::Switch::process</text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.01%)</title><rect x="1171.5" y="293" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1174.48" y="303.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="149" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.24" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1175.0" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1178.01" y="143.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.01%)</title><rect x="99.4" y="325" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="102.41" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="10.4" y="229" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.35" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="101.0" y="229" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="104.00" y="239.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1172.0" y="309" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1175.01" y="319.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="108.6" y="293" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="111.58" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="1175.4" y="245" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.36" y="255.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1180.8" y="293" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.83" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.01%)</title><rect x="1189.6" y="245" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.65" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1052.3" y="245" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1055.27" y="255.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1174.3" y="325" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1177.30" y="335.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (10,101,010 samples, 0.01%)</title><rect x="142.4" y="309" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="145.44" y="319.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1184.0" y="277" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.00" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="223.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="1186.8" y="325" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1189.83" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1179.2" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1182.24" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="63.5" ></text>
</g>
<g >
<title>sim::Switch::add_outlink (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.82" y="319.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (30,303,030 samples, 0.04%)</title><rect x="575.2" y="293" width="0.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="578.22" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.03%)</title><rect x="1170.4" y="261" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1173.42" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="1181.0" y="293" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1184.01" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (141,414,140 samples, 0.21%)</title><rect x="619.8" y="277" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="622.84" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.28%)</title><rect x="591.8" y="293" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="594.80" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.10%)</title><rect x="1051.2" y="293" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1054.21" y="303.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (444,444,440 samples, 0.66%)</title><rect x="1164.4" y="325" width="7.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1167.43" y="335.5" ></text>
</g>
<g >
<title>Logger::warn (10,101,010 samples, 0.01%)</title><rect x="121.3" y="325" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="124.28" y="335.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1179.6" y="325" width="0.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1182.59" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.01%)</title><rect x="1052.1" y="245" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1055.09" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="140.5" y="277" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="143.50" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.01%)</title><rect x="1187.7" y="341" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1190.71" y="351.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.03%)</title><rect x="1176.2" y="325" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1179.24" y="335.5" ></text>
</g>
<g >
<title>memcpy@plt (30,303,030 samples, 0.04%)</title><rect x="1008.0" y="245" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1011.00" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.01%)</title><rect x="1181.2" y="309" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1184.18" y="319.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.01%)</title><rect x="1121.0" y="309" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1124.04" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="102.1" y="293" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="105.06" y="303.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="1171.1" y="293" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1174.13" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="109.3" y="309" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="112.29" y="319.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="121.6" y="325" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="124.63" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,797,979,770 samples, 4.14%)</title><rect x="733.4" y="261" width="48.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="736.41" y="271.5" >std:..</text>
</g>
<g >
<title>sim::Process::~Process (131,313,130 samples, 0.19%)</title><rect x="1162.1" y="341" width="2.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1165.14" y="351.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.04%)</title><rect x="1188.4" y="117" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.41" y="127.5" ></text>
</g>
<g >
<title>parse_filename (40,404,040 samples, 0.06%)</title><rect x="1049.3" y="293" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1052.27" y="303.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (30,303,030 samples, 0.04%)</title><rect x="1189.1" y="197" width="0.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.12" y="207.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="104.4" y="309" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="107.35" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="106.6" y="293" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="109.64" y="303.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (20,202,020 samples, 0.03%)</title><rect x="1170.8" y="277" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1173.78" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="146.1" y="261" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="149.15" y="271.5" ></text>
</g>
<g >
<title>Logger::get_instance (10,101,010 samples, 0.01%)</title><rect x="608.4" y="293" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="611.38" y="303.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (50,505,050 samples, 0.07%)</title><rect x="1188.1" y="197" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.06" y="207.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="100.3" y="245" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="103.29" y="255.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.2" y="117" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.24" y="127.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.01%)</title><rect x="145.3" y="245" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="148.27" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.01%)</title><rect x="13.0" y="341" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="16.00" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="149" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1192.29" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1152.6" y="309" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1155.61" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1170.2" y="277" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1173.25" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="121.5" y="325" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="124.46" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="955.6" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="958.62" y="207.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (272,727,270 samples, 0.40%)</title><rect x="1026.0" y="277" width="4.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1028.99" y="287.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (50,505,050 samples, 0.07%)</title><rect x="583.0" y="293" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="585.98" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.10%)</title><rect x="107.3" y="293" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="110.35" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1169.4" y="293" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.37" y="303.5" ></text>
</g>
<g >
<title>parse_filename (21,898,989,680 samples, 32.40%)</title><rect x="632.0" y="277" width="382.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="635.01" y="287.5" >parse_filename</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="102.9" y="261" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="105.94" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (414,141,410 samples, 0.61%)</title><rect x="684.9" y="261" width="7.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="687.92" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1180.8" y="277" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.83" y="287.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="145.1" y="245" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="148.09" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.04%)</title><rect x="144.9" y="277" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="147.91" y="287.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.07%)</title><rect x="145.4" y="277" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="148.44" y="287.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.01%)</title><rect x="1169.7" y="261" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1172.72" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="1170.4" y="277" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1173.42" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="10.2" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.18" y="271.5" ></text>
</g>
<g >
<title>_start (67,575,756,900 samples, 99.99%)</title><rect x="10.2" y="437" width="1179.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.18" y="447.5" >_start</text>
</g>
</g>
</svg>
