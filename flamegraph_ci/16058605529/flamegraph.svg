<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="101.8" y="389" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="104.80" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="229" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.26" y="239.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (111,111,110 samples, 0.16%)</title><rect x="1032.0" y="357" width="1.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1035.00" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="277" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Link, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.03%)</title><rect x="13.0" y="389" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="15.96" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (242,424,240 samples, 0.35%)</title><rect x="1165.8" y="389" width="4.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1168.79" y="399.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.04%)</title><rect x="613.6" y="373" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="616.59" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,929,292,910 samples, 2.82%)</title><rect x="1084.1" y="389" width="33.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1087.09" y="399.5" >st..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.03%)</title><rect x="140.8" y="373" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="143.82" y="383.5" ></text>
</g>
<g >
<title>cfree (121,212,120 samples, 0.18%)</title><rect x="180.0" y="373" width="2.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="183.01" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (70,707,070 samples, 0.10%)</title><rect x="104.8" y="373" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="107.76" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (10,101,010 samples, 0.01%)</title><rect x="13.1" y="373" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.14" y="383.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1058.7" y="373" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1061.66" y="383.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="405" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1190.91" y="415.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.10%)</title><rect x="718.8" y="341" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="721.80" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (171,717,170 samples, 0.25%)</title><rect x="10.3" y="405" width="3.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.35" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (393,939,390 samples, 0.58%)</title><rect x="692.0" y="341" width="6.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="694.98" y="351.5" ></text>
</g>
<g >
<title>malloc (171,717,170 samples, 0.25%)</title><rect x="570.4" y="309" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="573.39" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="191.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (50,505,050 samples, 0.07%)</title><rect x="141.5" y="405" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="144.52" y="415.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="1067.0" y="373" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1070.02" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (10,101,010 samples, 0.01%)</title><rect x="108.6" y="389" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="111.59" y="399.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="145.5" y="405" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="148.52" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="97.8" y="357" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="100.79" y="367.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="135.8" y="357" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="138.77" y="367.5" ></text>
</g>
<g >
<title>sim::Process::operator (282,828,280 samples, 0.41%)</title><rect x="37.5" y="437" width="4.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="40.52" y="447.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="136.3" y="293" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="139.29" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="157.0" y="341" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="160.02" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.03%)</title><rect x="97.4" y="309" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="100.45" y="319.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (10,101,010 samples, 0.01%)</title><rect x="1165.4" y="389" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1168.44" y="399.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="373" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="383.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="437" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.83" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="96.9" y="325" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="99.92" y="335.5" ></text>
</g>
<g >
<title>memchr@plt (191,919,190 samples, 0.28%)</title><rect x="720.5" y="341" width="3.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="723.54" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1177.6" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.63" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="99.2" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="102.19" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="569.5" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="572.52" y="271.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (515,151,510 samples, 0.75%)</title><rect x="99.4" y="421" width="8.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="102.36" y="431.5" ></text>
</g>
<g >
<title>sim::Host::get_link_to_destination (161,616,160 samples, 0.24%)</title><rect x="1162.7" y="389" width="2.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1165.65" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="197" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.48" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="303.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="13.0" y="373" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.96" y="383.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.12%)</title><rect x="1183.4" y="373" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1186.38" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1187.9" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.91" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1173.6" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.63" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.03%)</title><rect x="1179.0" y="373" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.03" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.01%)</title><rect x="1165.4" y="373" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1168.44" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (13,767,676,630 samples, 20.12%)</title><rect x="337.7" y="357" width="237.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="340.66" y="367.5" >std::filesystem::__cxx11::path:..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1162.1" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1165.13" y="399.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (70,707,070 samples, 0.10%)</title><rect x="134.2" y="357" width="1.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="137.20" y="367.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (30,303,030 samples, 0.04%)</title><rect x="139.6" y="373" width="0.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="142.60" y="383.5" ></text>
</g>
<g >
<title>_start (68,424,241,740 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >_start</text>
</g>
<g >
<title>sim::Process::Process (10,101,010 samples, 0.01%)</title><rect x="102.1" y="373" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="105.15" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (80,808,080 samples, 0.12%)</title><rect x="1160.7" y="357" width="1.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1163.74" y="367.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (383,838,380 samples, 0.56%)</title><rect x="1025.4" y="341" width="6.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1028.39" y="351.5" ></text>
</g>
<g >
<title>Logger::get_instance (20,202,020 samples, 0.03%)</title><rect x="117.5" y="405" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="120.48" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1174.3" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.32" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 0.38%)</title><rect x="596.9" y="373" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="599.86" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="136.3" y="357" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="139.29" y="367.5" ></text>
</g>
<g >
<title>memcpy@plt (50,505,050 samples, 0.07%)</title><rect x="1023.3" y="325" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1026.29" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="97.3" y="309" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.27" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1162.3" y="373" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1165.30" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.07%)</title><rect x="1183.9" y="309" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.90" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (68,424,241,740 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >[libc.so.6]</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (60,606,060 samples, 0.09%)</title><rect x="1046.1" y="357" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1049.11" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1165.1" y="341" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.09" y="351.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="108.4" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="111.42" y="383.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.03%)</title><rect x="108.9" y="389" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="111.94" y="399.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="610.1" y="389" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="613.10" y="399.5" ></text>
</g>
<g >
<title>sim::Switch::process (56,202,019,640 samples, 82.14%)</title><rect x="148.7" y="405" width="969.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="151.66" y="415.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="79.5" ></text>
</g>
<g >
<title>sim::Host::get_outlinks (20,202,020 samples, 0.03%)</title><rect x="1177.8" y="405" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1180.81" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="309" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="1167.9" y="341" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1170.88" y="351.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.01%)</title><rect x="98.0" y="357" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="100.97" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="98.3" y="341" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="101.32" y="351.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.09%)</title><rect x="14.7" y="437" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.70" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="1167.7" y="341" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1170.70" y="351.5" ></text>
</g>
<g >
<title>Logger::info (50,505,050 samples, 0.07%)</title><rect x="96.9" y="357" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="99.92" y="367.5" ></text>
</g>
<g >
<title>cfree (474,747,470 samples, 0.69%)</title><rect x="593.2" y="389" width="8.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="596.21" y="399.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.09%)</title><rect x="574.0" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="577.04" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="139.1" y="325" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="142.08" y="335.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="107.5" y="373" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="110.55" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (30,303,030 samples, 0.04%)</title><rect x="138.2" y="341" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="141.21" y="351.5" ></text>
</g>
<g >
<title>operator new (313,131,310 samples, 0.46%)</title><rect x="1059.5" y="373" width="5.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1062.53" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.28%)</title><rect x="10.0" y="469" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="99.9" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="102.88" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (20,202,020 samples, 0.03%)</title><rect x="141.2" y="389" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="144.17" y="399.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (30,303,030 samples, 0.04%)</title><rect x="98.1" y="357" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="101.14" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (383,838,380 samples, 0.56%)</title><rect x="87.7" y="405" width="6.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="90.69" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (30,303,030 samples, 0.04%)</title><rect x="139.6" y="357" width="0.5" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="142.60" y="367.5" ></text>
</g>
<g >
<title>Logger::warn (24,959,595,710 samples, 36.48%)</title><rect x="157.4" y="389" width="430.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="160.37" y="399.5" >Logger::warn</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="335.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="1117.5" y="389" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1120.53" y="399.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (585,858,580 samples, 0.86%)</title><rect x="119.7" y="405" width="10.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="122.74" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.03%)</title><rect x="10.0" y="389" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="239.5" ></text>
</g>
<g >
<title>malloc (282,828,280 samples, 0.41%)</title><rect x="1060.1" y="357" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1063.05" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.03%)</title><rect x="106.7" y="357" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="109.68" y="367.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.06%)</title><rect x="1177.1" y="405" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.11" y="415.5" ></text>
</g>
<g >
<title>sim::TcpFlow::try_to_put_data_to_device (151,515,150 samples, 0.22%)</title><rect x="96.6" y="389" width="2.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="99.58" y="399.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (202,020,200 samples, 0.30%)</title><rect x="129.8" y="405" width="3.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="132.85" y="415.5" ></text>
</g>
<g >
<title>malloc (383,838,380 samples, 0.56%)</title><rect x="1149.9" y="373" width="6.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1152.94" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,363,636,340 samples, 3.45%)</title><rect x="532.6" y="341" width="40.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="535.59" y="351.5" >[li..</text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1166.1" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1169.14" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="1170.0" y="389" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1172.97" y="399.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (26,404,040,140 samples, 38.59%)</title><rect x="610.6" y="389" width="455.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="613.63" y="399.5" >sim::Link::get_packet</text>
</g>
<g >
<title>operator new (555,555,550 samples, 0.81%)</title><rect x="724.0" y="341" width="9.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="727.03" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="135.4" y="389" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="138.42" y="399.5" ></text>
</g>
<g >
<title>YAML::LoadFile (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="437" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.26" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.43" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="104.2" y="373" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="107.24" y="383.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.10%)</title><rect x="1024.2" y="325" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1027.17" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.35%)</title><rect x="1054.5" y="357" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1057.48" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.07%)</title><rect x="135.9" y="389" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="138.94" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (40,404,040 samples, 0.06%)</title><rect x="140.1" y="357" width="0.7" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="143.12" y="367.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 0.03%)</title><rect x="1188.8" y="261" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1191.78" y="271.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (141,414,140 samples, 0.21%)</title><rect x="580.5" y="373" width="2.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="583.49" y="383.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (222,222,220 samples, 0.32%)</title><rect x="137.3" y="389" width="3.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="140.34" y="399.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (222,222,220 samples, 0.32%)</title><rect x="583.3" y="373" width="3.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="586.28" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="12.1" y="325" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.09" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (68,424,241,740 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >__libc_start_main</text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (10,101,010 samples, 0.01%)</title><rect x="1160.6" y="357" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1163.56" y="367.5" ></text>
</g>
<g >
<title>sim::Process::operator (60,717,171,110 samples, 88.74%)</title><rect x="109.5" y="421" width="1047.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="112.47" y="431.5" >sim::Process::operator</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="107.7" y="389" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="110.72" y="399.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="181" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1192.30" y="191.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="1172.9" y="421" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1175.93" y="431.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="98.5" y="341" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="101.49" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="108.4" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="111.42" y="399.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (151,515,150 samples, 0.22%)</title><rect x="145.7" y="405" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="148.70" y="415.5" ></text>
</g>
<g >
<title>operator new (202,020,200 samples, 0.30%)</title><rect x="1019.8" y="309" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1022.81" y="319.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.03%)</title><rect x="1065.1" y="357" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1068.10" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (171,717,170 samples, 0.25%)</title><rect x="577.2" y="373" width="2.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="580.18" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1187.2" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.21" y="383.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="136.1" y="373" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="139.12" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="341" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (40,404,040 samples, 0.06%)</title><rect x="268.2" y="357" width="0.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="271.16" y="367.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="723.9" y="341" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="726.85" y="351.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (151,515,150 samples, 0.22%)</title><rect x="1162.8" y="373" width="2.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1165.83" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="136.3" y="325" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="139.29" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.01%)</title><rect x="1066.5" y="357" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1069.50" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (20,202,020 samples, 0.03%)</title><rect x="148.3" y="405" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="151.31" y="415.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Generate, unsigned int, std::weak_ptr&lt;sim::IFlow&gt;&amp;, unsigned int&amp;&gt; (10,101,010 samples, 0.01%)</title><rect x="99.2" y="405" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="102.19" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="341" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (50,505,050 samples, 0.07%)</title><rect x="1018.9" y="309" width="0.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1021.94" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,303,030 samples, 0.04%)</title><rect x="1180.4" y="405" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1183.42" y="415.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="405" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1179.94" y="415.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1178.3" y="405" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1181.33" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="181" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="95.5" ></text>
</g>
<g >
<title>operator new (434,343,430 samples, 0.63%)</title><rect x="1149.1" y="389" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1152.06" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="261" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="287.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (101,010,100 samples, 0.15%)</title><rect x="143.8" y="405" width="1.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="146.78" y="415.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (60,606,060 samples, 0.09%)</title><rect x="100.6" y="357" width="1.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="103.58" y="367.5" ></text>
</g>
<g >
<title>Logger::info (141,414,140 samples, 0.21%)</title><rect x="99.4" y="389" width="2.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="102.36" y="399.5" ></text>
</g>
<g >
<title>cfree (1,161,616,150 samples, 1.70%)</title><rect x="698.8" y="341" width="20.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="701.77" y="351.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (50,505,050 samples, 0.07%)</title><rect x="1159.7" y="357" width="0.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1162.69" y="367.5" ></text>
</g>
<g >
<title>parse_filename (22,717,171,490 samples, 33.20%)</title><rect x="185.4" y="373" width="391.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="188.41" y="383.5" >parse_filename</text>
</g>
<g >
<title>Logger::info (60,606,060 samples, 0.09%)</title><rect x="156.3" y="389" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="159.32" y="399.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="13.1" y="357" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.14" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (20,202,020 samples, 0.03%)</title><rect x="10.0" y="373" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="138.6" y="277" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="141.56" y="287.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.07%)</title><rect x="267.3" y="357" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="270.29" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="107.24" y="351.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (40,404,040 samples, 0.06%)</title><rect x="97.1" y="325" width="0.7" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="100.10" y="335.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (40,404,040 samples, 0.06%)</title><rect x="587.1" y="373" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="590.11" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (313,131,310 samples, 0.46%)</title><rect x="587.8" y="389" width="5.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="590.81" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="319.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="601.4" y="389" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="604.39" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="104.6" y="373" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="107.59" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.01%)</title><rect x="107.9" y="405" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="110.90" y="415.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (1,101,010,090 samples, 1.61%)</title><rect x="18.5" y="437" width="19.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="21.54" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (10,101,010 samples, 0.01%)</title><rect x="138.6" y="293" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="141.56" y="303.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1162.3" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1165.30" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.04%)</title><rect x="1189.1" y="245" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1192.13" y="255.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start (68,131,312,450 samples, 99.57%)</title><rect x="13.3" y="453" width="1175.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="16.31" y="463.5" >sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::start</text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="11.4" y="357" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.39" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.01%)</title><rect x="1189.7" y="405" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.65" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.04%)</title><rect x="1188.3" y="277" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.26" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="293" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="303.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="12.1" y="357" width="0.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="15.09" y="367.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.03%)</title><rect x="1175.0" y="341" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1178.02" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="341" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.85" y="351.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.06%)</title><rect x="1185.1" y="357" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1188.12" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="97.8" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.79" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="197" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="207.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="325" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="335.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="106.0" y="373" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="108.98" y="383.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1169.8" y="373" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1172.79" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="197" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.43" y="207.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.03%)</title><rect x="108.4" y="405" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="111.42" y="415.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.01%)</title><rect x="1117.7" y="389" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1120.71" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="389" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1176.97" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="101.5" y="341" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="104.45" y="351.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (80,808,080 samples, 0.12%)</title><rect x="142.4" y="405" width="1.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="145.39" y="415.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.01%)</title><rect x="1066.5" y="341" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1069.50" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (90,909,090 samples, 0.13%)</title><rect x="1185.8" y="405" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.82" y="415.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="389" width="1.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.26" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,202,020 samples, 0.03%)</title><rect x="1175.0" y="373" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1178.02" y="383.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.04%)</title><rect x="601.7" y="389" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="604.74" y="399.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="11.2" y="373" width="0.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="14.22" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="213" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.13" y="223.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.03%)</title><rect x="1169.4" y="357" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1172.44" y="367.5" ></text>
</g>
<g >
<title>malloc (181,818,180 samples, 0.27%)</title><rect x="1020.2" y="293" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1023.16" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.06%)</title><rect x="1168.7" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.75" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_id[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="136.8" y="389" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="139.81" y="399.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.01%)</title><rect x="1172.4" y="437" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1175.41" y="447.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 0.04%)</title><rect x="1188.3" y="261" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.26" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="137.7" y="325" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="140.69" y="335.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (70,707,070 samples, 0.10%)</title><rect x="138.2" y="357" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="141.21" y="367.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (20,202,020 samples, 0.03%)</title><rect x="1171.7" y="421" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1174.71" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1066.3" y="373" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1069.32" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (20,202,020 samples, 0.03%)</title><rect x="1166.3" y="373" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1169.31" y="383.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (747,474,740 samples, 1.09%)</title><rect x="1158.3" y="405" width="12.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1161.30" y="415.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_flows (10,101,010 samples, 0.01%)</title><rect x="1189.7" y="437" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.65" y="447.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.03%)</title><rect x="117.8" y="405" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="120.83" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="104.2" y="357" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="107.24" y="367.5" ></text>
</g>
<g >
<title>sim::Switch::process (30,303,030 samples, 0.04%)</title><rect x="1171.2" y="421" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1174.19" y="431.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (70,707,070 samples, 0.10%)</title><rect x="108.2" y="421" width="1.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="111.25" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="389" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.08" y="399.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="569.7" y="325" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="572.69" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1162.0" y="341" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.95" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.09%)</title><rect x="1183.7" y="357" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.73" y="367.5" ></text>
</g>
<g >
<title>main (68,232,322,550 samples, 99.72%)</title><rect x="13.3" y="469" width="1176.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="16.31" y="479.5" >main</text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="98.7" y="357" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="101.67" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (10,101,010 samples, 0.01%)</title><rect x="136.5" y="373" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="139.47" y="383.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="1168.6" y="373" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1171.57" y="383.5" ></text>
</g>
<g >
<title>sim::Process::~Process (212,121,210 samples, 0.31%)</title><rect x="42.4" y="437" width="3.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="45.40" y="447.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (121,212,120 samples, 0.18%)</title><rect x="137.5" y="373" width="2.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="140.51" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1066.8" y="373" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1069.84" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="1174.5" y="341" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.50" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="1185.1" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.12" y="335.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="357" width="1.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.26" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="223.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="185.1" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="188.07" y="383.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [20]&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="389" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1192.83" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="303.5" ></text>
</g>
<g >
<title>sim::Event::Event (20,202,020 samples, 0.03%)</title><rect x="119.4" y="405" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="122.39" y="415.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.08" y="415.5" ></text>
</g>
<g >
<title>cfree (121,212,120 samples, 0.18%)</title><rect x="633.6" y="357" width="2.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="636.62" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="157.2" y="373" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="160.20" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="569.5" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="572.52" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="213" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="13.1" y="325" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="16.14" y="335.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (696,969,690 samples, 1.02%)</title><rect x="1175.4" y="421" width="12.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1178.37" y="431.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (50,505,050 samples, 0.07%)</title><rect x="1066.3" y="389" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1069.32" y="399.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.04%)</title><rect x="138.2" y="325" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="141.21" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="245" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.26" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.35%)</title><rect x="629.4" y="357" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="632.44" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="213" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.26" y="223.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1066.7" y="373" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1069.67" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.10%)</title><rect x="1174.1" y="389" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1177.15" y="399.5" ></text>
</g>
<g >
<title>cfree (797,979,790 samples, 1.17%)</title><rect x="80.5" y="421" width="13.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="83.55" y="431.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="181" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.43" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="156.7" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="159.67" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="569.5" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="572.52" y="303.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (30,303,030 samples, 0.04%)</title><rect x="1033.9" y="357" width="0.5" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1036.92" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="341" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="271.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.01%)</title><rect x="137.2" y="389" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="140.16" y="399.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (20,202,020 samples, 0.03%)</title><rect x="102.0" y="389" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="104.98" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (272,727,270 samples, 0.40%)</title><rect x="1047.2" y="373" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1050.16" y="383.5" ></text>
</g>
<g >
<title>parse_filename (111,111,110 samples, 0.16%)</title><rect x="99.7" y="373" width="1.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="102.71" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,686,868,660 samples, 3.93%)</title><rect x="733.6" y="341" width="46.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="736.61" y="351.5" >std:..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="107.2" y="373" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="110.20" y="383.5" ></text>
</g>
<g >
<title>sim::Simulator&lt;sim::Host, sim::Switch, sim::TcpFlow, sim::Link&gt;::recalculate_paths (909,090,900 samples, 1.33%)</title><rect x="1172.6" y="437" width="15.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1175.58" y="447.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (20,202,020 samples, 0.03%)</title><rect x="580.1" y="373" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="583.14" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="181" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.26" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="271.5" ></text>
</g>
<g >
<title>sim::Switch::get_outlinks (101,010,100 samples, 0.15%)</title><rect x="1178.7" y="405" width="1.7" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1181.68" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="213" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="223.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="1189.3" y="213" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1192.30" y="223.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.06%)</title><rect x="1177.1" y="389" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.11" y="399.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (121,212,120 samples, 0.18%)</title><rect x="575.1" y="357" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="578.09" y="367.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (10,101,010 samples, 0.01%)</title><rect x="135.8" y="389" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="138.77" y="399.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (111,111,110 samples, 0.16%)</title><rect x="96.9" y="373" width="1.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="99.92" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.03%)</title><rect x="1168.2" y="373" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1171.23" y="383.5" ></text>
</g>
<g >
<title>malloc (303,030,300 samples, 0.44%)</title><rect x="604.9" y="373" width="5.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.88" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="1039.7" y="357" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1042.67" y="367.5" ></text>
</g>
<g >
<title>all (68,424,241,740 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (2,656,565,630 samples, 3.88%)</title><rect x="977.5" y="325" width="45.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="980.48" y="335.5" >[lib..</text>
</g>
<g >
<title>parse_filename (10,101,010 samples, 0.01%)</title><rect x="1064.9" y="373" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1067.93" y="383.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.6" y="165" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.61" y="175.5" ></text>
</g>
<g >
<title>Logger::get_instance (30,303,030 samples, 0.04%)</title><rect x="155.8" y="389" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="158.80" y="399.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="197" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.26" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, sim::MetricsStorage&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.10%)</title><rect x="102.7" y="373" width="1.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="105.67" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="135.9" y="357" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="138.94" y="367.5" ></text>
</g>
<g >
<title>sim::SendData::operator (747,474,740 samples, 1.09%)</title><rect x="1158.3" y="421" width="12.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1161.30" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (20,202,020 samples, 0.03%)</title><rect x="1065.1" y="373" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1068.10" y="383.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.01%)</title><rect x="1165.4" y="357" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1168.44" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1177.8" y="357" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.81" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.06%)</title><rect x="1184.1" y="293" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.08" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1172.9" y="405" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1175.93" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (585,858,580 samples, 0.86%)</title><rect x="967.4" y="325" width="10.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="970.38" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (40,404,040 samples, 0.06%)</title><rect x="1187.4" y="421" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1190.39" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,919,190 samples, 0.28%)</title><rect x="10.0" y="453" width="3.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="261" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.43" y="271.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.01%)</title><rect x="1189.3" y="197" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.30" y="207.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.04%)</title><rect x="1174.5" y="373" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.50" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.03%)</title><rect x="1180.9" y="405" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1183.94" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.03%)</title><rect x="10.0" y="405" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (10,101,010 samples, 0.01%)</title><rect x="138.0" y="325" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="141.03" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="47.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="136.5" y="357" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="139.47" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="13.1" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="16.14" y="351.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.04%)</title><rect x="1182.0" y="389" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.99" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.01%)</title><rect x="1180.2" y="389" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1183.25" y="399.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (20,202,020 samples, 0.03%)</title><rect x="1170.8" y="373" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1173.84" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="107.0" y="357" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="110.03" y="367.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.01%)</title><rect x="109.3" y="389" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="112.29" y="399.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (191,919,190 samples, 0.28%)</title><rect x="10.0" y="437" width="3.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.03%)</title><rect x="1188.8" y="229" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.78" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1177.8" y="373" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.81" y="383.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.12%)</title><rect x="1183.4" y="389" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.38" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.43" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1175.2" y="309" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.19" y="319.5" ></text>
</g>
<g >
<title>operator new (383,838,380 samples, 0.56%)</title><rect x="603.5" y="389" width="6.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="606.48" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.04%)</title><rect x="138.9" y="341" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="141.90" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="341" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.97" y="351.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.03%)</title><rect x="1188.8" y="245" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1191.78" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="357" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="367.5" ></text>
</g>
<g >
<title>sim::Host::update_routing_table (121,212,120 samples, 0.18%)</title><rect x="1173.3" y="421" width="2.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1176.28" y="431.5" ></text>
</g>
<g >
<title>operator delete (121,212,120 samples, 0.18%)</title><rect x="636.6" y="357" width="2.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="639.58" y="367.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (20,202,020 samples, 0.03%)</title><rect x="1172.1" y="421" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1175.06" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (20,202,020 samples, 0.03%)</title><rect x="138.4" y="309" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="141.38" y="319.5" ></text>
</g>
<g >
<title>operator new (181,818,180 samples, 0.27%)</title><rect x="570.2" y="325" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="573.21" y="335.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (20,202,020 samples, 0.03%)</title><rect x="1164.9" y="357" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1167.92" y="367.5" ></text>
</g>
<g >
<title>malloc@plt (30,303,030 samples, 0.04%)</title><rect x="720.0" y="341" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="723.02" y="351.5" ></text>
</g>
<g >
<title>parse_filename (90,909,090 samples, 0.13%)</title><rect x="133.9" y="373" width="1.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="136.85" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1159.5" y="341" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.52" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (191,919,190 samples, 0.28%)</title><rect x="10.0" y="421" width="3.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (20,202,020 samples, 0.03%)</title><rect x="107.4" y="389" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="110.38" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.03%)</title><rect x="1189.3" y="229" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.30" y="239.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (353,535,350 samples, 0.52%)</title><rect x="1040.0" y="357" width="6.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1043.02" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="156.8" y="357" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="159.85" y="367.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.04%)</title><rect x="1174.5" y="357" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1177.50" y="367.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.10%)</title><rect x="602.3" y="389" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="605.26" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="261" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="271.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.01%)</title><rect x="135.8" y="373" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="138.77" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="105.8" y="357" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="108.81" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.07%)</title><rect x="1183.9" y="325" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.90" y="335.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.03%)</title><rect x="1066.0" y="389" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1068.97" y="399.5" ></text>
</g>
<g >
<title>sim::Host::process (474,747,470 samples, 0.69%)</title><rect x="133.3" y="405" width="8.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="136.33" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.01%)</title><rect x="1169.6" y="341" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.62" y="351.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (40,404,040 samples, 0.06%)</title><rect x="140.1" y="373" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="143.12" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="101.5" y="325" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="104.45" y="335.5" ></text>
</g>
<g >
<title>malloc (505,050,500 samples, 0.74%)</title><rect x="273.2" y="341" width="8.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="276.21" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="135.9" y="373" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="138.94" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="99.2" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="102.19" y="399.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (30,303,030 samples, 0.04%)</title><rect x="103.9" y="389" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="106.89" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1159.2" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.17" y="367.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="99.2" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="102.19" y="383.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (90,909,090 samples, 0.13%)</title><rect x="102.3" y="389" width="1.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="105.32" y="399.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.01%)</title><rect x="106.3" y="373" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="109.33" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="105.8" y="341" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="108.81" y="351.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (13,535,353,400 samples, 19.78%)</title><rect x="792.0" y="341" width="233.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="794.96" y="351.5" >std::filesystem::__cxx11::path..</text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="1059.2" y="373" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1062.18" y="383.5" ></text>
</g>
<g >
<title>memchr@plt (232,323,230 samples, 0.34%)</title><rect x="268.9" y="357" width="4.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="271.85" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.01%)</title><rect x="1165.3" y="357" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1168.26" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1169.4" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1172.44" y="351.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1189.0" y="213" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.95" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="569.5" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="572.52" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="309" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="159.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="357" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1181.85" y="367.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="134.0" y="357" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="137.03" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (707,070,700 samples, 1.03%)</title><rect x="706.6" y="325" width="12.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="709.61" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1187.2" y="389" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.21" y="399.5" ></text>
</g>
<g >
<title>memcpy@plt (30,303,030 samples, 0.04%)</title><rect x="182.1" y="373" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="185.11" y="383.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="405" width="1.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1191.26" y="415.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (40,404,040 samples, 0.06%)</title><rect x="1167.4" y="357" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1170.35" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="325" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.85" y="335.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (454,545,450 samples, 0.66%)</title><rect x="329.8" y="357" width="7.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="332.82" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.01%)</title><rect x="1066.5" y="373" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1069.50" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (777,777,770 samples, 1.14%)</title><rect x="519.2" y="341" width="13.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="522.17" y="351.5" ></text>
</g>
<g >
<title>malloc (494,949,490 samples, 0.72%)</title><rect x="725.1" y="325" width="8.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="728.07" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::TcpFlow&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.7" y="421" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1192.65" y="431.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="229" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.43" y="239.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="213" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.43" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="309" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="319.5" ></text>
</g>
<g >
<title>sim::Link::arrive (494,949,490 samples, 0.72%)</title><rect x="99.4" y="405" width="8.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="102.36" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="197" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.43" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.01%)</title><rect x="136.3" y="341" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="139.29" y="351.5" ></text>
</g>
<g >
<title>operator new (40,404,040 samples, 0.06%)</title><rect x="1185.1" y="373" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.12" y="383.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="138.7" y="341" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="141.73" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1189.0" y="181" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.95" y="191.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (10,101,010 samples, 0.01%)</title><rect x="101.6" y="373" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="104.63" y="383.5" ></text>
</g>
<g >
<title>cfree (50,505,050 samples, 0.07%)</title><rect x="13.8" y="437" width="0.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="16.83" y="447.5" ></text>
</g>
<g >
<title>parse_filename (30,303,030 samples, 0.04%)</title><rect x="156.7" y="373" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="159.67" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1159.3" y="357" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.34" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (90,909,090 samples, 0.13%)</title><rect x="1166.7" y="373" width="1.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1169.66" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1177.5" y="373" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1180.46" y="383.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 0.07%)</title><rect x="638.7" y="357" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="641.67" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (161,616,160 samples, 0.24%)</title><rect x="1183.0" y="405" width="2.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1186.03" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1165.1" y="325" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.09" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (20,202,020 samples, 0.03%)</title><rect x="1177.8" y="389" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1180.81" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.08" y="383.5" ></text>
</g>
<g >
<title>parse_filename (50,505,050 samples, 0.07%)</title><rect x="96.9" y="341" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="99.92" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1187.2" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.21" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="135.2" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="138.25" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="967.0" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="970.03" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="102.3" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="105.32" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.01%)</title><rect x="104.6" y="357" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="107.59" y="367.5" ></text>
</g>
<g >
<title>parse_filename (191,919,190 samples, 0.28%)</title><rect x="1158.8" y="373" width="3.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1161.82" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1065.3" y="341" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1068.28" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.04%)</title><rect x="80.0" y="421" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="83.03" y="431.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="1165.6" y="373" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1168.61" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (20,202,020 samples, 0.03%)</title><rect x="582.9" y="373" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="585.93" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; sim::parse_object&lt;sim::Link&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="405" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1192.83" y="415.5" ></text>
</g>
<g >
<title>sim::BaseHasher::get_hash (10,101,010 samples, 0.01%)</title><rect x="1083.9" y="357" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1086.91" y="367.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="108.1" y="405" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="111.07" y="415.5" ></text>
</g>
<g >
<title>Logger::info (222,222,220 samples, 0.32%)</title><rect x="1158.3" y="389" width="3.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1161.30" y="399.5" ></text>
</g>
<g >
<title>Logger::info (40,404,040 samples, 0.06%)</title><rect x="137.5" y="357" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="140.51" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="373" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.97" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (585,858,580 samples, 0.86%)</title><rect x="257.2" y="341" width="10.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="260.18" y="351.5" ></text>
</g>
<g >
<title>sim::Event::get_time (161,616,160 samples, 0.24%)</title><rect x="15.7" y="437" width="2.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="18.75" y="447.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 0.06%)</title><rect x="108.8" y="405" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="111.77" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="287.5" ></text>
</g>
<g >
<title>memchr@plt (10,101,010 samples, 0.01%)</title><rect x="100.2" y="357" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="103.23" y="367.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (101,010,100 samples, 0.15%)</title><rect x="1188.3" y="453" width="1.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.26" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.5" y="181" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.48" y="191.5" ></text>
</g>
<g >
<title>cfree (393,939,390 samples, 0.58%)</title><rect x="1051.9" y="373" width="6.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1054.86" y="383.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.04%)</title><rect x="1065.5" y="373" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1068.45" y="383.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.03%)</title><rect x="1175.0" y="357" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1178.02" y="367.5" ></text>
</g>
<g >
<title>std::locale::~locale (10,101,010 samples, 0.01%)</title><rect x="1117.4" y="389" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1120.36" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1191.08" y="367.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (10,101,010 samples, 0.01%)</title><rect x="1165.6" y="389" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1168.61" y="399.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="229" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1192.13" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="204.9" y="325" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="207.92" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (404,040,400 samples, 0.59%)</title><rect x="173.0" y="373" width="7.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="176.05" y="383.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::end (303,030,300 samples, 0.44%)</title><rect x="1034.4" y="357" width="5.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1037.44" y="367.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1148.9" y="389" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1151.89" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="245" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::~deque (50,505,050 samples, 0.07%)</title><rect x="12.1" y="373" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.09" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (60,606,060 samples, 0.09%)</title><rect x="1184.8" y="389" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1187.77" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;sim::Host, std::allocator&lt;void&gt;,  (151,515,150 samples, 0.22%)</title><rect x="10.3" y="389" width="2.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.35" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1182.3" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1185.34" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1189.0" y="197" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.95" y="207.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.01%)</title><rect x="137.5" y="325" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="140.51" y="335.5" ></text>
</g>
<g >
<title>sim::Switch::get_link_to_destination (40,404,040 samples, 0.06%)</title><rect x="1083.4" y="389" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1086.39" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.06%)</title><rect x="106.5" y="373" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="109.50" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.03%)</title><rect x="1184.4" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.43" y="255.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.01%)</title><rect x="1178.0" y="373" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1180.98" y="383.5" ></text>
</g>
<g >
<title>parse_filename (40,404,040 samples, 0.06%)</title><rect x="137.5" y="341" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="140.51" y="351.5" ></text>
</g>
<g >
<title>Logger::info (25,111,110,860 samples, 36.70%)</title><rect x="614.1" y="373" width="433.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="617.11" y="383.5" >Logger::info</text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.10%)</title><rect x="118.2" y="405" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="121.18" y="415.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (60,606,060 samples, 0.09%)</title><rect x="1170.1" y="389" width="1.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1173.14" y="399.5" ></text>
</g>
<g >
<title>auto sim::YamlParser::process_links (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="421" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.83" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.06%)</title><rect x="1185.1" y="341" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.12" y="351.5" ></text>
</g>
<g >
<title>memcpy@plt (50,505,050 samples, 0.07%)</title><rect x="635.7" y="357" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="638.71" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.07%)</title><rect x="12.1" y="341" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.09" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (353,535,350 samples, 0.52%)</title><rect x="241.9" y="357" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="244.85" y="367.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (919,191,910 samples, 1.34%)</title><rect x="1067.2" y="389" width="15.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1070.19" y="399.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (60,606,060 samples, 0.09%)</title><rect x="1168.7" y="373" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1171.75" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="136.3" y="309" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="139.29" y="319.5" ></text>
</g>
<g >
<title>cfree (1,121,212,110 samples, 1.64%)</title><rect x="248.0" y="357" width="19.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="250.95" y="367.5" ></text>
</g>
<g >
<title>sim::Process::~Process (101,010,100 samples, 0.15%)</title><rect x="1156.6" y="421" width="1.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1159.55" y="431.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 0.04%)</title><rect x="1189.1" y="261" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.13" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.03%)</title><rect x="1175.0" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.02" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.06%)</title><rect x="1083.4" y="373" width="0.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1086.39" y="383.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="137.7" y="309" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="140.69" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.07%)</title><rect x="1183.9" y="341" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1186.90" y="351.5" ></text>
</g>
<g >
<title>operator new (525,252,520 samples, 0.77%)</title><rect x="272.9" y="357" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="275.86" y="367.5" ></text>
</g>
<g >
<title>operator delete (141,414,140 samples, 0.21%)</title><rect x="182.6" y="373" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="185.63" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,101,010,080 samples, 3.07%)</title><rect x="655.7" y="341" width="36.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="658.74" y="351.5" >[li..</text>
</g>
<g >
<title>non-virtual thunk to sim::Switch::process (80,808,080 samples, 0.12%)</title><rect x="94.3" y="421" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="97.31" y="431.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (696,969,690 samples, 1.02%)</title><rect x="779.9" y="341" width="12.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="782.94" y="351.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.01%)</title><rect x="96.4" y="405" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="99.40" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="229" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="239.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="136.6" y="373" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="139.64" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="63.5" ></text>
</g>
<g >
<title>parse_filename (22,757,575,530 samples, 33.26%)</title><rect x="639.5" y="357" width="392.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="642.54" y="367.5" >parse_filename</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="239.5" ></text>
</g>
<g >
<title>sim::TcpFlow::create_new_data_packet (151,515,150 samples, 0.22%)</title><rect x="96.6" y="405" width="2.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="99.58" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (70,707,070 samples, 0.10%)</title><rect x="1181.3" y="405" width="1.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1184.29" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.04%)</title><rect x="1182.5" y="405" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.51" y="415.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_List (10,101,010 samples, 0.01%)</title><rect x="100.4" y="357" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="103.41" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="293" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (50,505,050 samples, 0.07%)</title><rect x="1179.4" y="389" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.37" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.03%)</title><rect x="1166.3" y="357" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1169.31" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="245" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="255.5" ></text>
</g>
<g >
<title>nons (68,424,241,740 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >nons</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1189.1" y="197" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1192.13" y="207.5" ></text>
</g>
<g >
<title>std::locale::locale (10,101,010 samples, 0.01%)</title><rect x="139.4" y="357" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="142.43" y="367.5" ></text>
</g>
<g >
<title>Logger::info (111,111,110 samples, 0.16%)</title><rect x="133.5" y="389" width="1.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="136.50" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1178.9" y="373" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.85" y="383.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, unsigned int, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (2,242,424,220 samples, 3.28%)</title><rect x="1117.9" y="405" width="38.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1120.88" y="415.5" >voi..</text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (2,777,777,750 samples, 4.06%)</title><rect x="281.9" y="357" width="47.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="284.92" y="367.5" >std:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="569.5" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="572.52" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="13.1" y="309" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="16.14" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="325" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="335.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (40,404,040 samples, 0.06%)</title><rect x="1178.7" y="389" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1181.68" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.04%)</title><rect x="1184.3" y="277" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1187.25" y="287.5" ></text>
</g>
<g >
<title>sim::TcpFlow::generate_packet (20,202,020 samples, 0.03%)</title><rect x="98.8" y="373" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="101.84" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (40,404,040 samples, 0.06%)</title><rect x="573.3" y="341" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="576.35" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="181" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="191.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (111,111,110 samples, 0.16%)</title><rect x="1173.5" y="405" width="1.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1176.45" y="415.5" ></text>
</g>
<g >
<title>[[hv_netvsc]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="245" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="522.00" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (10,101,010 samples, 0.01%)</title><rect x="1167.9" y="325" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1170.88" y="335.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (65,313,130,660 samples, 95.45%)</title><rect x="46.1" y="437" width="1126.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="49.06" y="447.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="1167.2" y="357" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.18" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 0.03%)</title><rect x="1188.4" y="245" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.43" y="255.5" ></text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.01%)</title><rect x="1189.8" y="373" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1192.83" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.01%)</title><rect x="102.5" y="373" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="105.50" y="383.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (50,505,050 samples, 0.07%)</title><rect x="1188.8" y="277" width="0.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.78" y="287.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (20,202,020 samples, 0.03%)</title><rect x="1083.0" y="389" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1086.04" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="13.0" y="357" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="15.96" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.01%)</title><rect x="1168.1" y="357" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1171.05" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1159.5" y="357" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.52" y="367.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.03%)</title><rect x="569.9" y="325" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="572.86" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,131,313,110 samples, 3.11%)</title><rect x="205.1" y="357" width="36.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="208.10" y="367.5" >[li..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.01%)</title><rect x="137.5" y="309" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="140.51" y="319.5" ></text>
</g>
<g >
<title>sim::Generate::operator (212,121,210 samples, 0.31%)</title><rect x="95.7" y="421" width="3.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="98.70" y="431.5" ></text>
</g>
<g >
<title>sim::Link::get_from (10,101,010 samples, 0.01%)</title><rect x="1173.8" y="389" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1176.80" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="1177.5" y="293" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1180.46" y="303.5" ></text>
</g>
<g >
<title>sim::Switch::get_id[abi:cxx11] (10,101,010 samples, 0.01%)</title><rect x="1178.5" y="405" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.50" y="415.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_range_insert&lt;std::__detail::_Node_const_iterator&lt;std::shared_ptr&lt;sim::Host&gt;, true, false&gt; &gt; (10,101,010 samples, 0.01%)</title><rect x="1188.1" y="421" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.08" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1174.0" y="357" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1176.97" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="104.2" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="107.24" y="287.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.01%)</title><rect x="1188.3" y="165" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.26" y="175.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.01%)</title><rect x="1178.2" y="405" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1181.15" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="143.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (171,717,170 samples, 0.25%)</title><rect x="104.4" y="389" width="3.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="107.41" y="399.5" ></text>
</g>
<g >
<title>YAML::Load (80,808,080 samples, 0.12%)</title><rect x="1188.3" y="421" width="1.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1191.26" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.01%)</title><rect x="519.0" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.00" y="127.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl_deleter::operator (10,101,010 samples, 0.01%)</title><rect x="137.9" y="325" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="140.86" y="335.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="101.5" y="309" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="104.45" y="319.5" ></text>
</g>
</g>
</svg>
