<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1046.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1029" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1029" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="197" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.29%)</title><rect x="17.6" y="901" width="15.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.61" y="911.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="931.2" y="501" width="15.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="934.16" y="511.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="832.2" y="533" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.19" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="597" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="607.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.65%)</title><rect x="489.6" y="677" width="7.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="492.61" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="565" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="575.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="702.8" y="581" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.77" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="501" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="511.5" >[..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.65%)</title><rect x="367.8" y="757" width="7.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="370.81" y="767.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="40.5" y="805" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.45" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="693" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="626.6" y="645" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="629.65" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="245" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="255.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 1.94%)</title><rect x="786.5" y="581" width="22.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="789.52" y="591.5" >m..</text>
</g>
<g >
<title>YAML::Scanner::empty (90,909,090 samples, 5.81%)</title><rect x="482.0" y="725" width="68.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="485.00" y="735.5" >YAML::S..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 7.74%)</title><rect x="124.2" y="821" width="91.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="127.19" y="831.5" >[libstdc++..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="306.9" y="789" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="309.90" y="799.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="352.6" y="789" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="355.58" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="725" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.65%)</title><rect x="1174.8" y="853" width="7.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1177.77" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="489.6" y="629" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="492.61" y="639.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="489.6" y="661" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="492.61" y="671.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="588.6" y="677" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="591.58" y="687.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (20,202,020 samples, 1.29%)</title><rect x="322.1" y="837" width="15.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="325.13" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="853" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.94%)</title><rect x="86.1" y="805" width="22.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="89.13" y="815.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="645" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="733.2" y="565" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="736.23" y="575.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.65%)</title><rect x="109.0" y="837" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="111.97" y="847.5" ></text>
</g>
<g >
<title>YAML::Stream::GetNextByte (10,101,010 samples, 0.65%)</title><rect x="908.3" y="517" width="7.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="911.32" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="389" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="37" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="47.5" ></text>
</g>
<g >
<title>YAML::Stream::AdvanceCurrent (10,101,010 samples, 0.65%)</title><rect x="535.3" y="645" width="7.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="538.29" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.94%)</title><rect x="710.4" y="645" width="22.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="713.39" y="655.5" >Y..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.65%)</title><rect x="367.8" y="805" width="7.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="370.81" y="815.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (50,505,050 samples, 3.23%)</title><rect x="771.3" y="645" width="38.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="774.29" y="655.5" >YAM..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="702.8" y="565" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.77" y="575.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.65%)</title><rect x="1174.8" y="837" width="7.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1177.77" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="565" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="575.5" >[..</text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 7.74%)</title><rect x="124.2" y="805" width="91.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="127.19" y="815.5" >vsnprintf</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="645" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="655.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (50,505,050 samples, 3.23%)</title><rect x="771.3" y="629" width="38.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="774.29" y="639.5" >YAM..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.65%)</title><rect x="109.0" y="853" width="7.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="111.97" y="863.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="855.0" y="565" width="7.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="858.03" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="17.6" y="869" width="7.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="20.61" y="879.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="832.2" y="581" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.19" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.29%)</title><rect x="63.3" y="821" width="15.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="66.29" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="661" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="671.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 5.16%)</title><rect x="1045.4" y="757" width="60.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1048.35" y="767.5" >cfree</text>
</g>
<g >
<title>sim::Switch::process (60,606,060 samples, 3.87%)</title><rect x="299.3" y="853" width="45.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="302.29" y="863.5" >sim:..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.29%)</title><rect x="740.8" y="613" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="743.84" y="623.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (575,757,570 samples, 36.77%)</title><rect x="550.5" y="725" width="434.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="553.52" y="735.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="801.7" y="517" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="804.74" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.16%)</title><rect x="1045.4" y="741" width="60.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1048.35" y="751.5" >[libc...</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="702.8" y="613" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.77" y="623.5" ></text>
</g>
<g >
<title>writev (10,101,010 samples, 0.65%)</title><rect x="436.3" y="853" width="7.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="439.32" y="863.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (60,606,060 samples, 3.87%)</title><rect x="900.7" y="597" width="45.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="903.71" y="607.5" >YAML..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10,101,010 samples, 0.65%)</title><rect x="421.1" y="869" width="7.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="424.10" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="741" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="751.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.65%)</title><rect x="109.0" y="821" width="7.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="111.97" y="831.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (666,666,660 samples, 42.58%)</title><rect x="482.0" y="741" width="502.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="485.00" y="751.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.65%)</title><rect x="109.0" y="789" width="7.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="111.97" y="799.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (50,505,050 samples, 3.23%)</title><rect x="550.5" y="709" width="38.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="553.52" y="719.5" >YAM..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (10,101,010 samples, 0.65%)</title><rect x="466.8" y="693" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="469.77" y="703.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff (10,101,010 samples, 0.65%)</title><rect x="207.9" y="757" width="7.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="210.94" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (151,515,150 samples, 9.68%)</title><rect x="992.1" y="853" width="114.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="995.06" y="863.5" >std::_Sp_count..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (121,212,120 samples, 7.74%)</title><rect x="124.2" y="837" width="91.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="127.19" y="847.5" >std::ostre..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="984.5" y="805" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="987.45" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="801.7" y="501" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="804.74" y="511.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (10,101,010 samples, 0.65%)</title><rect x="48.1" y="869" width="7.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="51.06" y="879.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (20,202,020 samples, 1.29%)</title><rect x="390.6" y="869" width="15.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="393.65" y="879.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (10,101,010 samples, 0.65%)</title><rect x="1030.1" y="757" width="7.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1033.13" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="741" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="373" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="383.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (30,303,030 samples, 1.94%)</title><rect x="817.0" y="613" width="22.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="819.97" y="623.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="821" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="661" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="581.0" y="421" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.97" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.65%)</title><rect x="398.3" y="837" width="7.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="401.26" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="501" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="511.5" ></text>
</g>
<g >
<title>sim::FlowParser::parse_i_flow (10,101,010 samples, 0.65%)</title><rect x="1136.7" y="805" width="7.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1139.71" y="815.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="634.3" y="629" width="7.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="637.26" y="639.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (20,202,020 samples, 1.29%)</title><rect x="215.5" y="885" width="15.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="218.55" y="895.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (60,606,060 samples, 3.87%)</title><rect x="482.0" y="693" width="45.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="485.00" y="703.5" >YAML..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="805" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="855.0" y="581" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="858.03" y="591.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (50,505,050 samples, 3.23%)</title><rect x="352.6" y="853" width="38.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="355.58" y="863.5" >sim..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="213" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="581.0" y="437" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.97" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="801.7" y="533" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="804.74" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="645" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (10,101,010 samples, 0.65%)</title><rect x="984.5" y="853" width="7.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="987.45" y="863.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.65%)</title><rect x="337.4" y="821" width="7.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="340.35" y="831.5" ></text>
</g>
<g >
<title>sim::Link::transmit (40,404,040 samples, 2.58%)</title><rect x="261.2" y="853" width="30.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="264.23" y="863.5" >si..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="512.5" y="629" width="15.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="515.45" y="639.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="390.6" y="837" width="7.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="393.65" y="847.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.65%)</title><rect x="443.9" y="725" width="7.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="446.94" y="735.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_connection (90,909,090 samples, 5.81%)</title><rect x="1106.3" y="869" width="68.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1109.26" y="879.5" >sim::Ya..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (10,101,010 samples, 0.65%)</title><rect x="771.3" y="613" width="7.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="774.29" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.65%)</title><rect x="367.8" y="773" width="7.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="370.81" y="783.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (10,101,010 samples, 0.65%)</title><rect x="17.6" y="885" width="7.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="20.61" y="895.5" ></text>
</g>
<g >
<title>sim::Summary::write_to_csv (10,101,010 samples, 0.65%)</title><rect x="436.3" y="901" width="7.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="439.32" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="277" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="933" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="53" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="181" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="1030.1" y="805" width="7.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1033.13" y="815.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (40,404,040 samples, 2.58%)</title><rect x="603.8" y="677" width="30.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="606.81" y="687.5" >YA..</text>
</g>
<g >
<title>operator new (40,404,040 samples, 2.58%)</title><rect x="78.5" y="837" width="30.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="81.52" y="847.5" >op..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (20,202,020 samples, 1.29%)</title><rect x="961.6" y="597" width="15.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="964.61" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.94%)</title><rect x="786.5" y="565" width="22.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="789.52" y="575.5" >[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="917" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 2.58%)</title><rect x="702.8" y="677" width="30.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="705.77" y="687.5" >YA..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="634.3" y="645" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="637.26" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (70,707,070 samples, 4.52%)</title><rect x="649.5" y="629" width="53.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="652.48" y="639.5" >int Y..</text>
</g>
<g >
<title>sim::SendData::operator (50,505,050 samples, 3.23%)</title><rect x="352.6" y="869" width="38.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="355.58" y="879.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="801.7" y="549" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="804.74" y="559.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 1.29%)</title><rect x="611.4" y="629" width="15.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="614.42" y="639.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (20,202,020 samples, 1.29%)</title><rect x="611.4" y="661" width="15.2" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="614.42" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="390.6" y="821" width="7.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="393.65" y="831.5" ></text>
</g>
<g >
<title>YAML::Exp::PlainScalar (10,101,010 samples, 0.65%)</title><rect x="596.2" y="677" width="7.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="599.19" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="677" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 7.10%)</title><rect x="131.8" y="773" width="83.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="134.81" y="783.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::detail::node::equals (10,101,010 samples, 0.65%)</title><rect x="1121.5" y="789" width="7.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1124.48" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::pop (10,101,010 samples, 0.65%)</title><rect x="756.1" y="661" width="7.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="759.06" y="671.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (10,101,010 samples, 0.65%)</title><rect x="337.4" y="837" width="7.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="340.35" y="847.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (30,303,030 samples, 1.94%)</title><rect x="299.3" y="837" width="22.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="302.29" y="847.5" >s..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (40,404,040 samples, 2.58%)</title><rect x="778.9" y="613" width="30.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="781.90" y="623.5" >YA..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (242,424,240 samples, 15.48%)</title><rect x="32.8" y="885" width="182.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="35.84" y="895.5" >sim::LinksQueueSizeStor..</text>
</g>
<g >
<title>nons (1,565,656,550 samples, 100.00%)</title><rect x="10.0" y="981" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="991.5" >nons</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.65%)</title><rect x="984.5" y="869" width="7.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="987.45" y="879.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 2.58%)</title><rect x="702.8" y="661" width="30.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="705.77" y="671.5" >YA..</text>
</g>
<g >
<title>YAML::Scanner::empty (60,606,060 samples, 3.87%)</title><rect x="900.7" y="629" width="45.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="903.71" y="639.5" >YAML..</text>
</g>
<g >
<title>YAML::detail::node_data::begin (10,101,010 samples, 0.65%)</title><rect x="1106.3" y="821" width="7.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1109.26" y="831.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="832.2" y="597" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.19" y="607.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="748.5" y="549" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="751.45" y="559.5" ></text>
</g>
<g >
<title>YAML::Stream::get (20,202,020 samples, 1.29%)</title><rect x="900.7" y="565" width="15.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="903.71" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="661" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="671.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (50,505,050 samples, 3.23%)</title><rect x="390.6" y="885" width="38.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="393.65" y="895.5" >sim..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="512.5" y="613" width="15.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="515.45" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="629" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="639.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (363,636,360 samples, 23.23%)</title><rect x="702.8" y="693" width="274.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="705.77" y="703.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="25.2" y="853" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="28.23" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="133" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="223.2" y="773" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="226.16" y="783.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (20,202,020 samples, 1.29%)</title><rect x="375.4" y="837" width="15.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="378.42" y="847.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::~MetricsCollector (10,101,010 samples, 0.65%)</title><rect x="25.2" y="885" width="7.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="28.23" y="895.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 2.58%)</title><rect x="78.5" y="821" width="30.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="81.52" y="831.5" >ma..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; YAML::Node::as&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (40,404,040 samples, 2.58%)</title><rect x="1144.3" y="805" width="30.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1147.32" y="815.5" >st..</text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [10]&gt; (10,101,010 samples, 0.65%)</title><rect x="1113.9" y="805" width="7.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1116.87" y="815.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="984.5" y="821" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="987.45" y="831.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (101,010,100 samples, 6.45%)</title><rect x="900.7" y="645" width="76.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="903.71" y="655.5" >YAML::Si..</text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.29%)</title><rect x="32.8" y="869" width="15.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.84" y="879.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="613" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="623.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.65%)</title><rect x="855.0" y="549" width="7.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="858.03" y="559.5" ></text>
</g>
<g >
<title>sim::Switch::notify_about_arrival (20,202,020 samples, 1.29%)</title><rect x="246.0" y="837" width="15.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="249.00" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="693" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.58%)</title><rect x="497.2" y="677" width="30.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="500.23" y="687.5" >in..</text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.65%)</title><rect x="215.5" y="773" width="7.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="218.55" y="783.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.94%)</title><rect x="710.4" y="629" width="22.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="713.39" y="639.5" >Y..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.65%)</title><rect x="893.1" y="629" width="7.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="896.10" y="639.5" ></text>
</g>
<g >
<title>sim::ConnectionParser::parse_connection (80,808,080 samples, 5.16%)</title><rect x="1113.9" y="821" width="60.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1116.87" y="831.5" >sim::C..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (30,303,030 samples, 1.94%)</title><rect x="527.7" y="693" width="22.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="530.68" y="703.5" >Y..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="923.5" y="517" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="926.55" y="527.5" >i..</text>
</g>
<g >
<title>sim::Link::Arrive::Arrive (10,101,010 samples, 0.65%)</title><rect x="261.2" y="837" width="7.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="264.23" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="709" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="719.5" ></text>
</g>
<g >
<title>sim::Link::arrive (20,202,020 samples, 1.29%)</title><rect x="246.0" y="853" width="15.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="249.00" y="863.5" ></text>
</g>
<g >
<title>__libc_start_main (1,555,555,540 samples, 99.35%)</title><rect x="17.6" y="949" width="1172.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="20.61" y="959.5" >__libc_start_main</text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 1.94%)</title><rect x="185.1" y="741" width="22.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="188.10" y="751.5" >[..</text>
</g>
<g >
<title>sim::Scheduler::tick (202,020,200 samples, 12.90%)</title><rect x="238.4" y="885" width="152.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="241.39" y="895.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>YAML::detail::memory::create_node (10,101,010 samples, 0.65%)</title><rect x="443.9" y="709" width="7.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="446.94" y="719.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.65%)</title><rect x="778.9" y="597" width="7.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="781.90" y="607.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="733.2" y="597" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="736.23" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="229" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="725" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="735.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="877.9" y="533" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="880.87" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="581.0" y="405" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.97" y="415.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (10,101,010 samples, 0.65%)</title><rect x="367.8" y="821" width="7.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="370.81" y="831.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (989,898,980 samples, 63.23%)</title><rect x="443.9" y="901" width="746.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="446.94" y="911.5" >sim::YamlParser::build_simulator_from_config</text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.65%)</title><rect x="413.5" y="853" width="7.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="416.48" y="863.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 6.45%)</title><rect x="131.8" y="757" width="76.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="134.81" y="767.5" >[libc.so..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (50,505,050 samples, 3.23%)</title><rect x="664.7" y="613" width="38.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="667.71" y="623.5" >int..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.65%)</title><rect x="809.4" y="645" width="7.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="812.35" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::weak_ptr&lt;sim::ILink&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.65%)</title><rect x="390.6" y="853" width="7.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="393.65" y="863.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.65%)</title><rect x="345.0" y="853" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="347.97" y="863.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [5]&gt; (10,101,010 samples, 0.65%)</title><rect x="1136.7" y="757" width="7.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1139.71" y="767.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 1.29%)</title><rect x="299.3" y="805" width="15.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="302.29" y="815.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="756.1" y="629" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="759.06" y="639.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="626.6" y="629" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="629.65" y="639.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="512.5" y="645" width="15.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="515.45" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="725.6" y="613" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="728.61" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="877.9" y="517" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="880.87" y="527.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 1.29%)</title><rect x="961.6" y="581" width="15.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="964.61" y="591.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (50,505,050 samples, 3.23%)</title><rect x="847.4" y="597" width="38.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="850.42" y="607.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="885" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (20,202,020 samples, 1.29%)</title><rect x="322.1" y="821" width="15.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="325.13" y="831.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (262,626,260 samples, 16.77%)</title><rect x="32.8" y="901" width="198.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="35.84" y="911.5" >sim::MetricsCollector::ex..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="466.8" y="645" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="469.77" y="655.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.65%)</title><rect x="360.2" y="773" width="7.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="363.19" y="783.5" ></text>
</g>
<g >
<title>sim::Summary::Summary (10,101,010 samples, 0.65%)</title><rect x="428.7" y="901" width="7.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="431.71" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="405" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="415.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (40,404,040 samples, 2.58%)</title><rect x="261.2" y="869" width="30.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="264.23" y="879.5" >si..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (90,909,090 samples, 5.81%)</title><rect x="1037.7" y="789" width="68.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1040.74" y="799.5" >std::_S..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (20,202,020 samples, 1.29%)</title><rect x="900.7" y="549" width="15.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="903.71" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="740.8" y="597" width="15.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="743.84" y="607.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.65%)</title><rect x="885.5" y="613" width="7.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="888.48" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="949" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (717,171,710 samples, 45.81%)</title><rect x="443.9" y="773" width="540.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.94" y="783.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="261" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="271.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (30,303,030 samples, 1.94%)</title><rect x="733.2" y="645" width="22.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="736.23" y="655.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="565" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="48.1" y="821" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.06" y="831.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.29%)</title><rect x="17.6" y="917" width="15.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.61" y="927.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 7.74%)</title><rect x="124.2" y="789" width="91.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="127.19" y="799.5" >[libc.so.6]</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="466.8" y="661" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="469.77" y="671.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (80,808,080 samples, 5.16%)</title><rect x="641.9" y="645" width="60.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="644.87" y="655.5" >int YA..</text>
</g>
<g >
<title>YAML::Stream::AdvanceCurrent (10,101,010 samples, 0.65%)</title><rect x="611.4" y="613" width="7.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="614.42" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 1.29%)</title><rect x="352.6" y="805" width="15.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="355.58" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="773" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="309" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="319.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (282,828,280 samples, 18.06%)</title><rect x="763.7" y="661" width="213.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="766.68" y="671.5" >YAML::SingleDocParser::Handl..</text>
</g>
<g >
<title>YAML::LoadFile (727,272,720 samples, 46.45%)</title><rect x="443.9" y="885" width="548.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="446.94" y="895.5" >YAML::LoadFile</text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.65%)</title><rect x="893.1" y="645" width="7.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="896.10" y="655.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.65%)</title><rect x="223.2" y="853" width="7.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="226.16" y="863.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="805" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="923.5" y="533" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="926.55" y="543.5" >i..</text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.65%)</title><rect x="885.5" y="597" width="7.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="888.48" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="390.6" y="805" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="393.65" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="709" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (111,111,110 samples, 7.10%)</title><rect x="1106.3" y="885" width="83.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1109.26" y="895.5" >std::_Fun..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="757" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="679.9" y="597" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="682.94" y="607.5" >i..</text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (717,171,710 samples, 45.81%)</title><rect x="443.9" y="757" width="540.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.94" y="767.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="748.5" y="565" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="751.45" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="702.8" y="645" width="7.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="705.77" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="965" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.94%)</title><rect x="786.5" y="597" width="22.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="789.52" y="607.5" >o..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="533" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="543.5" >[..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 2.58%)</title><rect x="78.5" y="853" width="30.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="81.52" y="863.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="677" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="687.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.65%)</title><rect x="223.2" y="837" width="7.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="226.16" y="847.5" ></text>
</g>
<g >
<title>fopen (10,101,010 samples, 0.65%)</title><rect x="215.5" y="821" width="7.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="218.55" y="831.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (90,909,090 samples, 5.81%)</title><rect x="482.0" y="709" width="68.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="485.00" y="719.5" >YAML::S..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="969.2" y="549" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.23" y="559.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;char [6]&gt; (10,101,010 samples, 0.65%)</title><rect x="1129.1" y="805" width="7.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1132.10" y="815.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (90,909,090 samples, 5.81%)</title><rect x="1037.7" y="805" width="68.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1040.74" y="815.5" >std::_S..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="718.0" y="613" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="721.00" y="623.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="535.3" y="661" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="538.29" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="223.2" y="789" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="226.16" y="799.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.65%)</title><rect x="253.6" y="821" width="7.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="256.61" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="613" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="623.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="629" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_ref*,  (10,101,010 samples, 0.65%)</title><rect x="1030.1" y="773" width="7.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1033.13" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="613" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="223.2" y="757" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="226.16" y="767.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (30,303,030 samples, 1.94%)</title><rect x="733.2" y="661" width="22.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="736.23" y="671.5" >Y..</text>
</g>
<g >
<title>[libc.so.6] (1,555,555,540 samples, 99.35%)</title><rect x="17.6" y="933" width="1172.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.61" y="943.5" >[libc.so.6]</text>
</g>
<g >
<title>YAML::Stream::eat (20,202,020 samples, 1.29%)</title><rect x="611.4" y="645" width="15.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="614.42" y="655.5" ></text>
</g>
<g >
<title>sim::write_to_csv (212,121,210 samples, 13.55%)</title><rect x="55.7" y="869" width="159.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="58.68" y="879.5" >sim::write_to_csv</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="40.5" y="821" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.45" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="517" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="581.0" y="469" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.97" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="437" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="447.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (50,505,050 samples, 3.23%)</title><rect x="550.5" y="677" width="38.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="553.52" y="687.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="661" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="741" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (717,171,710 samples, 45.81%)</title><rect x="443.9" y="789" width="540.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.94" y="799.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="862.6" y="549" width="7.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="865.65" y="559.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="619.0" y="613" width="7.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="622.03" y="623.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 2.58%)</title><rect x="451.5" y="725" width="30.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="454.55" y="735.5" >YA..</text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (101,010,100 samples, 6.45%)</title><rect x="817.0" y="629" width="76.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="819.97" y="639.5" >YAML::Sc..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="709" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="719.5" ></text>
</g>
<g >
<title>YAML::Node const YAML::Node::operator[]&lt;char [12]&gt; (10,101,010 samples, 0.65%)</title><rect x="1121.5" y="805" width="7.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1124.48" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="533" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="543.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="466.8" y="613" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="469.77" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="969.2" y="533" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.23" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="597" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="607.5" ></text>
</g>
<g >
<title>sim::FlowParser::TcpCCParser::parse_i_tcp_cc (10,101,010 samples, 0.65%)</title><rect x="1136.7" y="773" width="7.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1139.71" y="783.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.65%)</title><rect x="1174.8" y="869" width="7.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1177.77" y="879.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.65%)</title><rect x="314.5" y="805" width="7.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="317.52" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="709" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="325" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="335.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="645" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="655.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="48.1" y="853" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="51.06" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="504.8" y="661" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="507.84" y="671.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="837" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="847.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="733.2" y="613" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="736.23" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="969.2" y="501" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.23" y="511.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (717,171,710 samples, 45.81%)</title><rect x="443.9" y="837" width="540.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="446.94" y="847.5" >YAML::SingleDocParser::HandleDocument</text>
</g>
<g >
<title>YAML::Stream::operator bool (10,101,010 samples, 0.65%)</title><rect x="459.2" y="693" width="7.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="462.16" y="703.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (717,171,710 samples, 45.81%)</title><rect x="443.9" y="821" width="540.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.94" y="831.5" >YAML::SingleDocParser::HandleNode</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="748.5" y="581" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="751.45" y="591.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="733.2" y="549" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="736.23" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="709" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="719.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="725.6" y="597" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="728.61" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="629" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="639.5" ></text>
</g>
<g >
<title>open64 (10,101,010 samples, 0.65%)</title><rect x="109.0" y="773" width="7.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="111.97" y="783.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="626.6" y="613" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="629.65" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (20,202,020 samples, 1.29%)</title><rect x="215.5" y="869" width="15.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="218.55" y="879.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.65%)</title><rect x="824.6" y="597" width="7.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="827.58" y="607.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="489.6" y="645" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="492.61" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="466.8" y="629" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="469.77" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="677" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="687.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.65%)</title><rect x="1174.8" y="821" width="7.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1177.77" y="831.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (20,202,020 samples, 1.29%)</title><rect x="961.6" y="565" width="15.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="964.61" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="693" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="357" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="367.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.58%)</title><rect x="915.9" y="565" width="30.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="918.94" y="575.5" >in..</text>
</g>
<g >
<title>std::_Rb_tree_decrement (10,101,010 samples, 0.65%)</title><rect x="428.7" y="885" width="7.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="431.71" y="895.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="613" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="581" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="591.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (131,313,130 samples, 8.39%)</title><rect x="116.6" y="853" width="98.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="119.58" y="863.5" >std::ostrea..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="741" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="751.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="757" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="693" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node_data*,  (80,808,080 samples, 5.16%)</title><rect x="1045.4" y="773" width="60.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1048.35" y="783.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.65%)</title><rect x="398.3" y="853" width="7.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="401.26" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="862.6" y="581" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="865.65" y="591.5" >i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="293" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 2.58%)</title><rect x="1075.8" y="709" width="30.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1078.81" y="719.5" >[l..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::less&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sim::LinkQueueType&gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.65%)</title><rect x="25.2" y="869" width="7.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="28.23" y="879.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 2.58%)</title><rect x="451.5" y="741" width="30.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="454.55" y="751.5" >YA..</text>
</g>
<g >
<title>sim::FlowParser::parse_tcp_flow (10,101,010 samples, 0.65%)</title><rect x="1136.7" y="789" width="7.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1139.71" y="799.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 2.58%)</title><rect x="946.4" y="629" width="30.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="949.39" y="639.5" >YA..</text>
</g>
<g >
<title>main (1,535,353,520 samples, 98.06%)</title><rect x="32.8" y="917" width="1157.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="35.84" y="927.5" >main</text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.65%)</title><rect x="718.0" y="581" width="7.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="721.00" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.29%)</title><rect x="32.8" y="837" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.84" y="847.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.65%)</title><rect x="1182.4" y="869" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1185.39" y="879.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (20,202,020 samples, 1.29%)</title><rect x="961.6" y="613" width="15.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="964.61" y="623.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="756.1" y="645" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="759.06" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (141,414,140 samples, 9.03%)</title><rect x="596.2" y="693" width="106.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="599.19" y="703.5" >YAML::Scanner..</text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (10,101,010 samples, 0.65%)</title><rect x="466.8" y="709" width="7.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="469.77" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="773" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="789" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.65%)</title><rect x="1030.1" y="789" width="7.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1033.13" y="799.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.65%)</title><rect x="367.8" y="789" width="7.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="370.81" y="799.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="517" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="527.5" >[..</text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="611.4" y="597" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="614.42" y="607.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="969.2" y="517" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="972.23" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="677" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="661" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::IConnection&gt;  (90,909,090 samples, 5.81%)</title><rect x="1106.3" y="853" width="68.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1109.26" y="863.5" >std::_F..</text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.29%)</title><rect x="63.3" y="837" width="15.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="66.29" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="517" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="527.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (30,303,030 samples, 1.94%)</title><rect x="238.4" y="869" width="22.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="241.39" y="879.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 1.94%)</title><rect x="862.6" y="565" width="22.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="865.65" y="575.5" >i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="725" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="735.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (60,606,060 samples, 3.87%)</title><rect x="900.7" y="613" width="45.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="903.71" y="623.5" >YAML..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="453" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="463.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="626.6" y="661" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="629.65" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 5.16%)</title><rect x="1045.4" y="725" width="60.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1048.35" y="735.5" >[libc...</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (10,101,010 samples, 0.65%)</title><rect x="215.5" y="837" width="7.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="218.55" y="847.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.65%)</title><rect x="223.2" y="805" width="7.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="226.16" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="677" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="533" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="543.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (10,101,010 samples, 0.65%)</title><rect x="215.5" y="853" width="7.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="218.55" y="863.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (90,909,090 samples, 5.81%)</title><rect x="634.3" y="677" width="68.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="637.26" y="687.5" >YAML::S..</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.65%)</title><rect x="360.2" y="789" width="7.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="363.19" y="799.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.65%)</title><rect x="733.2" y="629" width="7.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="736.23" y="639.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (151,515,150 samples, 9.68%)</title><rect x="992.1" y="885" width="114.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="995.06" y="895.5" >YAML::Node::~N..</text>
</g>
<g >
<title>sim::ConnectionParser::parse_i_connection (90,909,090 samples, 5.81%)</title><rect x="1106.3" y="837" width="68.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1109.26" y="847.5" >sim::Co..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="165" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="117" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="127.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (20,202,020 samples, 1.29%)</title><rect x="451.5" y="709" width="15.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="454.55" y="719.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (20,202,020 samples, 1.29%)</title><rect x="405.9" y="869" width="15.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="408.87" y="879.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (10,101,010 samples, 0.65%)</title><rect x="443.9" y="741" width="7.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="446.94" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="984.5" y="789" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="987.45" y="799.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="466.8" y="677" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="469.77" y="687.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.29%)</title><rect x="63.3" y="853" width="15.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="66.29" y="863.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (60,606,060 samples, 3.87%)</title><rect x="839.8" y="613" width="45.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="842.81" y="623.5" >YAML..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 1.29%)</title><rect x="946.4" y="597" width="15.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="949.39" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="693" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="703.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (30,303,030 samples, 1.94%)</title><rect x="527.7" y="677" width="22.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="530.68" y="687.5" >Y..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="821" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="645" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (151,515,150 samples, 9.68%)</title><rect x="992.1" y="837" width="114.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="995.06" y="847.5" >std::_Sp_count..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="837" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (323,232,320 samples, 20.65%)</title><rect x="733.2" y="677" width="243.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="736.23" y="687.5" >YAML::SingleDocParser::HandleBlo..</text>
</g>
<g >
<title>YAML::Scanner::empty (141,414,140 samples, 9.03%)</title><rect x="596.2" y="709" width="106.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="599.19" y="719.5" >YAML::Scanner..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="626.6" y="597" width="7.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="629.65" y="607.5" ></text>
</g>
<g >
<title>operator new (50,505,050 samples, 3.23%)</title><rect x="550.5" y="661" width="38.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="553.52" y="671.5" >ope..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="485" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="495.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanToNextToken (10,101,010 samples, 0.65%)</title><rect x="451.5" y="693" width="7.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="454.55" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="661" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="671.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.29%)</title><rect x="32.8" y="853" width="15.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="35.84" y="863.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (20,202,020 samples, 1.29%)</title><rect x="870.3" y="549" width="15.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="873.26" y="559.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.65%)</title><rect x="48.1" y="837" width="7.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="51.06" y="847.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.65%)</title><rect x="223.2" y="821" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="226.16" y="831.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="885.5" y="581" width="7.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="888.48" y="591.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.65%)</title><rect x="329.7" y="773" width="7.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="332.74" y="783.5" ></text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 5.16%)</title><rect x="291.7" y="869" width="60.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="294.68" y="879.5" >sim::P..</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (60,606,060 samples, 3.87%)</title><rect x="900.7" y="581" width="45.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="903.71" y="591.5" >YAML..</text>
</g>
<g >
<title>YAML::Token&amp; std::deque&lt;YAML::Token, std::allocator&lt;YAML::Token&gt; &gt;::emplace_back&lt;YAML::Token&gt; (10,101,010 samples, 0.65%)</title><rect x="474.4" y="693" width="7.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="477.39" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="549" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="549" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="559.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (717,171,710 samples, 45.81%)</title><rect x="443.9" y="853" width="540.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="446.94" y="863.5" >YAML::Parser::HandleNextDocument</text>
</g>
<g >
<title>YAML::Scanner::empty (101,010,100 samples, 6.45%)</title><rect x="817.0" y="645" width="76.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="819.97" y="655.5" >YAML::Sc..</text>
</g>
<g >
<title>YAML::SingleDocParser::ParseProperties (10,101,010 samples, 0.65%)</title><rect x="976.8" y="709" width="7.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="979.84" y="719.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (50,505,050 samples, 3.23%)</title><rect x="550.5" y="693" width="38.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="553.52" y="703.5" >YAM..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="436.3" y="757" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="439.32" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="832.2" y="565" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.19" y="575.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 1.94%)</title><rect x="268.8" y="821" width="22.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="271.84" y="831.5" >s..</text>
</g>
<g >
<title>YAML::Load (717,171,710 samples, 45.81%)</title><rect x="443.9" y="869" width="540.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="446.94" y="879.5" >YAML::Load</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="581.0" y="453" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="583.97" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="101" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="215.5" y="725" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="218.55" y="735.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (30,303,030 samples, 1.94%)</title><rect x="352.6" y="837" width="22.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="355.58" y="847.5" >s..</text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.65%)</title><rect x="451.5" y="661" width="7.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="454.55" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (20,202,020 samples, 1.29%)</title><rect x="740.8" y="629" width="15.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="743.84" y="639.5" ></text>
</g>
<g >
<title>YAML::Scanner::PopIndentToHere (10,101,010 samples, 0.65%)</title><rect x="603.8" y="661" width="7.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="606.81" y="671.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.65%)</title><rect x="109.0" y="805" width="7.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="111.97" y="815.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanValue (10,101,010 samples, 0.65%)</title><rect x="474.4" y="709" width="7.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="477.39" y="719.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.65%)</title><rect x="436.3" y="885" width="7.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="439.32" y="895.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.65%)</title><rect x="976.8" y="677" width="7.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="979.84" y="687.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="702.8" y="629" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.77" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="869" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 1.29%)</title><rect x="268.8" y="805" width="15.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="271.84" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="741" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="69" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="341" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 1.29%)</title><rect x="573.4" y="485" width="15.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="576.35" y="495.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="702.8" y="597" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="705.77" y="607.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (20,202,020 samples, 1.29%)</title><rect x="322.1" y="789" width="15.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="325.13" y="799.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 3.23%)</title><rect x="550.5" y="645" width="38.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="553.52" y="655.5" >mal..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (151,515,150 samples, 9.68%)</title><rect x="992.1" y="869" width="114.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="995.06" y="879.5" >std::_Sp_count..</text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (20,202,020 samples, 1.29%)</title><rect x="946.4" y="613" width="15.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="949.39" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.65%)</title><rect x="329.7" y="149" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="332.74" y="159.5" ></text>
</g>
<g >
<title>_start (1,555,555,540 samples, 99.35%)</title><rect x="17.6" y="965" width="1172.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="20.61" y="975.5" >_start</text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.65%)</title><rect x="284.1" y="805" width="7.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="287.06" y="815.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="1030.1" y="741" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1033.13" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="48.1" y="805" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="51.06" y="815.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::insert_map_pair (10,101,010 samples, 0.65%)</title><rect x="588.6" y="693" width="7.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="591.58" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="597" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 2.58%)</title><rect x="558.1" y="629" width="30.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="561.13" y="639.5" >[l..</text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="718.0" y="597" width="7.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="721.00" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="757" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="767.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="832.2" y="549" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.19" y="559.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (20,202,020 samples, 1.29%)</title><rect x="352.6" y="821" width="15.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="355.58" y="831.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="789" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="85" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="95.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.65%)</title><rect x="1022.5" y="805" width="7.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1025.52" y="815.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (30,303,030 samples, 1.94%)</title><rect x="268.8" y="837" width="22.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="271.84" y="847.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="597" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="607.5" >[..</text>
</g>
<g >
<title>sim::LinkQueue::pop (30,303,030 samples, 1.94%)</title><rect x="299.3" y="821" width="22.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="302.29" y="831.5" >s..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="733.2" y="581" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="736.23" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="581" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="591.5" >[..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 1.29%)</title><rect x="946.4" y="581" width="15.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="949.39" y="591.5" ></text>
</g>
<g >
<title>YAML::Stream::StreamInUtf8 (10,101,010 samples, 0.65%)</title><rect x="908.3" y="533" width="7.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="911.32" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.65%)</title><rect x="984.5" y="837" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="987.45" y="847.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="581" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="591.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (717,171,710 samples, 45.81%)</title><rect x="443.9" y="805" width="540.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.94" y="815.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="469" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="479.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 1.29%)</title><rect x="322.1" y="805" width="15.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="325.13" y="815.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 1.94%)</title><rect x="565.7" y="549" width="22.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="568.74" y="559.5" >[..</text>
</g>
<g >
<title>all (1,565,656,550 samples, 100%)</title><rect x="10.0" y="997" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (40,404,040 samples, 2.58%)</title><rect x="915.9" y="549" width="30.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="918.94" y="559.5" >in..</text>
</g>
<g >
<title>YAML::Scanner::peek (10,101,010 samples, 0.65%)</title><rect x="976.8" y="693" width="7.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="979.84" y="703.5" ></text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (90,909,090 samples, 5.81%)</title><rect x="634.3" y="661" width="68.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="637.26" y="671.5" >YAML::S..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.65%)</title><rect x="1174.8" y="805" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1177.77" y="815.5" ></text>
</g>
<g >
<title>_IO_file_fopen (10,101,010 samples, 0.65%)</title><rect x="215.5" y="805" width="7.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="218.55" y="815.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.65%)</title><rect x="542.9" y="581" width="7.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="545.90" y="591.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.65%)</title><rect x="451.5" y="645" width="7.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="454.55" y="655.5" ></text>
</g>
<g >
<title>_IO_file_open (10,101,010 samples, 0.65%)</title><rect x="215.5" y="789" width="7.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="218.55" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.65%)</title><rect x="329.7" y="421" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="332.74" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (151,515,150 samples, 9.68%)</title><rect x="992.1" y="821" width="114.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="995.06" y="831.5" >std::_Rb_tree&lt;..</text>
</g>
<g >
<title>YAML::Stream::eat (10,101,010 samples, 0.65%)</title><rect x="451.5" y="677" width="7.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="454.55" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="901" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.65%)</title><rect x="436.3" y="869" width="7.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="439.32" y="879.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="10.0" y="725" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.65%)</title><rect x="109.0" y="757" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="111.97" y="767.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Pop (10,101,010 samples, 0.65%)</title><rect x="588.6" y="709" width="7.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="591.58" y="719.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (363,636,360 samples, 23.23%)</title><rect x="702.8" y="709" width="274.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="705.77" y="719.5" >YAML::SingleDocParser::HandleBlockMap</text>
</g>
<g >
<title>sim::Simulator::start (262,626,260 samples, 16.77%)</title><rect x="230.8" y="901" width="197.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="233.77" y="911.5" >sim::Simulator::start</text>
</g>
</g>
</svg>
