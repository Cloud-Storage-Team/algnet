import argparse
import os
import tempfile
import subprocess

def process_simulation_generator(nons_path : str, simulation_generator_dir_path : str):
    python_generator_path = None
    default_config_path = None
    for item in sorted(os.listdir(simulation_generator_dir_path)):
        item_path = os.path.join(simulation_generator_dir_path, item)
        if os.path.isdir(item_path):
            continue
        if item.endswith(".py") and item != "__init__.py":
            if python_generator_path is None:
                print(f"Found python generator {item} in directory {simulation_generator_dir_path}")
                python_generator_path = item_path
            else:
                print(f"Found one more python script {item} in directory {simulation_generator_dir_path}; ignored")
        elif item.endswith('.yml') or item.endswith('.yaml'):
            if default_config_path is None:
                print(f"Found default config {item} in directory {simulation_generator_dir_path}")
                default_config_path = item_path
            else:
                print(f"Found one more yaml config {item} in directory {simulation_generator_dir_path}; ignored")
    if (python_generator_path is None):
        print(f"Can not find python script in {simulation_generator_dir_path}; ignored")
        return
    if (default_config_path is None):
        print(f"Error: can not find default config in {simulation_generator_dir_path}")
        exit(-1)
    
    with tempfile.NamedTemporaryFile(delete=True) as temp_file:
        generator_args = [
            "python3",
            python_generator_path,
            "-c",
            default_config_path,
            "-o",
            temp_file.name
        ]
        result = subprocess.run(generator_args, capture_output=True, text=True, check=True)
        print(result.stdout)
        with tempfile.TemporaryDirectory() as temp_dir:
            nons_args = [
                nons_path,
                "-c",
                temp_file.name,
                "--metrics-filter=", # run without metrics collection
                f"--output-dir={temp_dir}"
            ]
            result = subprocess.run(nons_args, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"Simulation with config generated by {python_generator_path} failed")
                print("Config content:")
                with open(temp_file.name, "r") as f:
                    print(f.read())
                print("=====================================")
                print("Nons stderr:")
                print(result.stderr)
                exit(-1)
            else:
                print(f"Simulation with config generated by {python_generator_path} succseed!")

def process_simulation_generators(nons_path : str, simulation_generators_dir : str):
    for item in sorted(os.listdir(simulation_generators_dir)):
        item_path = os.path.join(simulation_generators_dir, item)
        if not os.path.isdir(item_path):
            continue
        process_simulation_generator(nons_path, item_path)
    print("All simulation generators successefully checked!")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-e", "--executable", help="Path to the compiled project", required=True
    )
    parser.add_argument(
        "-g",
        "--generators",
        help="Path to the directory with generators",
        required=True,
    )
    args = parser.parse_args()

    nons_path = args.executable
    generators_path = args.generators

    simulation_generators_dir = os.path.join(generators_path, "simulation")

    process_simulation_generators(nons_path, simulation_generators_dir)

if __name__ == "__main__":
    main()