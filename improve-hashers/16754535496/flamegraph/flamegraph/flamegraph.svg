<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1163.8" y="661" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.84" y="671.5" ></text>
</g>
<g >
<title>cfree (323,232,320 samples, 0.97%)</title><rect x="854.2" y="661" width="11.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="857.24" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="10.7" y="693" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="703.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.09%)</title><rect x="346.5" y="661" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="349.48" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="565" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="575.5" ></text>
</g>
<g >
<title>YAML::Stream::get (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="501" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.42" y="511.5" ></text>
</g>
<g >
<title>Logger::info (2,313,131,290 samples, 6.95%)</title><rect x="759.6" y="661" width="82.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="762.64" y="671.5" >Logger::i..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.33%)</title><rect x="67.3" y="405" width="4.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.33" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="549" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="559.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="585.5" y="629" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="588.49" y="639.5" ></text>
</g>
<g >
<title>sim::Link::get_to_ingress_queue_size (90,909,090 samples, 0.27%)</title><rect x="598.7" y="693" width="3.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="601.75" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (131,313,130 samples, 0.39%)</title><rect x="729.2" y="661" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="732.18" y="671.5" ></text>
</g>
<g >
<title>cfree (80,808,080 samples, 0.24%)</title><rect x="15.0" y="661" width="2.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="18.02" y="671.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="645" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1163.5" y="693" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.48" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="71.6" y="629" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.63" y="639.5" ></text>
</g>
<g >
<title>_IO_file_open (60,606,060 samples, 0.18%)</title><rect x="33.7" y="629" width="2.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="36.65" y="639.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="74.5" y="709" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="77.50" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (80,808,080 samples, 0.24%)</title><rect x="1159.2" y="693" width="2.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1162.18" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.7" y="741" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="751.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (20,202,020 samples, 0.06%)</title><rect x="1139.8" y="645" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1142.83" y="655.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="1138.0" y="661" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1141.04" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (242,424,240 samples, 0.73%)</title><rect x="41.2" y="597" width="8.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="44.18" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="1144.8" y="565" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.85" y="575.5" ></text>
</g>
<g >
<title>sim::Host::send_packet (575,757,570 samples, 1.73%)</title><rect x="1130.2" y="693" width="20.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1133.16" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="437" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="469" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1148.8" y="629" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1151.79" y="639.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (10,101,010 samples, 0.03%)</title><rect x="1132.3" y="677" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1135.31" y="687.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (20,202,020 samples, 0.06%)</title><rect x="580.8" y="581" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="583.83" y="591.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="900.5" y="661" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="903.46" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="565" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="70.6" y="309" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="73.56" y="319.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="29.0" y="693" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="31.99" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="479.5" ></text>
</g>
<g >
<title>vsnprintf (262,626,260 samples, 0.79%)</title><rect x="52.6" y="645" width="9.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="55.64" y="655.5" ></text>
</g>
<g >
<title>sim::Event::Event (10,101,010 samples, 0.03%)</title><rect x="890.8" y="661" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="893.79" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="20.0" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="23.03" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="645" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.26" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="898.3" y="549" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="901.31" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="336.1" y="661" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="339.09" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="261" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="271.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="350.4" y="661" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="353.42" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (33,242,423,910 samples, 99.94%)</title><rect x="10.7" y="773" width="1179.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="783.5" >[libc.so.6]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="549" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="789" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>std::ostream::put (60,606,060 samples, 0.18%)</title><rect x="63.4" y="693" width="2.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="66.39" y="703.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="901.9" y="629" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="904.90" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="501" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="511.5" ></text>
</g>
<g >
<title>sim::IdentifierFactory::~IdentifierFactory (202,020,200 samples, 0.61%)</title><rect x="10.7" y="725" width="7.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="13.72" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1180.3" y="629" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1183.32" y="639.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.39%)</title><rect x="895.1" y="661" width="4.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="898.09" y="671.5" ></text>
</g>
<g >
<title>sim::EventComparator::operator (60,606,060 samples, 0.18%)</title><rect x="569.0" y="693" width="2.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="572.00" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_RTT (20,202,020 samples, 0.06%)</title><rect x="588.0" y="661" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="591.00" y="671.5" ></text>
</g>
<g >
<title>cfree (404,040,400 samples, 1.21%)</title><rect x="318.2" y="709" width="14.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="321.17" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="629" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="639.5" ></text>
</g>
<g >
<title>malloc (454,545,450 samples, 1.37%)</title><rect x="866.8" y="645" width="16.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="869.78" y="655.5" ></text>
</g>
<g >
<title>sim::is_valid_link (20,202,020 samples, 0.06%)</title><rect x="1158.5" y="693" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1161.47" y="703.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (1,060,606,050 samples, 3.19%)</title><rect x="902.3" y="677" width="37.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="905.26" y="687.5" >sim..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="805" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_outlinks (50,505,050 samples, 0.15%)</title><rect x="1168.9" y="693" width="1.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1171.86" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="421" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="629" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="639.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Host::process (10,101,010 samples, 0.03%)</title><rect x="1152.0" y="709" width="0.4" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1155.02" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="613" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="645" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="725" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="19.7" y="693" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="22.68" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="351.5" y="629" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="354.49" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="896.5" y="597" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="899.52" y="607.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (242,424,240 samples, 0.73%)</title><rect x="833.1" y="645" width="8.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="836.10" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="581" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="1140.2" y="629" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1143.19" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="661" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.28" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="613" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="332.9" y="693" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="335.86" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="517" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1180.7" y="613" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1183.68" y="623.5" ></text>
</g>
<g >
<title>__dynamic_cast (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="629" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1192.64" y="639.5" ></text>
</g>
<g >
<title>sim::bfs[abi:cxx11] (565,656,560 samples, 1.70%)</title><rect x="1162.0" y="709" width="20.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1165.05" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="661" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="565" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.42" y="575.5" ></text>
</g>
<g >
<title>Logger::get_instance (60,606,060 samples, 0.18%)</title><rect x="621.7" y="677" width="2.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="624.68" y="687.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (70,707,070 samples, 0.21%)</title><rect x="1133.0" y="629" width="2.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1136.02" y="639.5" ></text>
</g>
<g >
<title>malloc (202,020,200 samples, 0.61%)</title><rect x="1109.0" y="661" width="7.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1112.02" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="47.3" y="581" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.27" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="447.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.03%)</title><rect x="63.0" y="661" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="66.03" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="549" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1191.92" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="629" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.33%)</title><rect x="342.5" y="581" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="345.54" y="591.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::export_to_files (1,373,737,360 samples, 4.13%)</title><rect x="17.9" y="725" width="48.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="20.88" y="735.5" >sim:..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1173.9" y="693" width="0.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1176.87" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="533" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="543.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="30.4" y="677" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="33.43" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="437" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (212,121,210 samples, 0.64%)</title><rect x="54.4" y="613" width="7.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.43" y="623.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (30,303,030 samples, 0.09%)</title><rect x="1187.8" y="549" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1190.85" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="34.4" y="373" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.37" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (191,919,190 samples, 0.58%)</title><rect x="11.1" y="693" width="6.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.08" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="591.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.09%)</title><rect x="1186.8" y="485" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.77" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (30,303,030 samples, 0.09%)</title><rect x="1149.1" y="677" width="1.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1152.15" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="887.6" y="565" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="890.56" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="346.1" y="549" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="349.12" y="559.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="336.4" y="629" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="339.44" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="325" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="335.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1137.3" y="645" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.32" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="613" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="623.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packets (101,010,100 samples, 0.30%)</title><rect x="578.3" y="677" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="581.32" y="687.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_terminate_output (10,101,010 samples, 0.03%)</title><rect x="66.6" y="677" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="69.62" y="687.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1180.0" y="661" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.97" y="671.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (50,505,050 samples, 0.15%)</title><rect x="71.3" y="693" width="1.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="74.28" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="517" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="340.4" y="613" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="343.39" y="623.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (10,101,010 samples, 0.03%)</title><rect x="51.2" y="661" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="54.21" y="671.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (20,202,020 samples, 0.06%)</title><rect x="588.0" y="645" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="591.00" y="655.5" ></text>
</g>
<g >
<title>sim::Packet::Packet (10,101,010 samples, 0.03%)</title><rect x="1136.2" y="677" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1139.25" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="165" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="888.6" y="549" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="891.64" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="586.6" y="517" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="589.56" y="527.5" ></text>
</g>
<g >
<title>sim::ECMPHasher::get_hash (10,101,010 samples, 0.03%)</title><rect x="901.9" y="661" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="904.90" y="671.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="19.0" y="709" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="21.96" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="565" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (30,303,030 samples, 0.09%)</title><rect x="340.4" y="629" width="1.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="343.39" y="639.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (60,606,060 samples, 0.18%)</title><rect x="33.7" y="693" width="2.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="36.65" y="703.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1159.9" y="661" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1162.90" y="671.5" ></text>
</g>
<g >
<title>sim::Host::notify_about_arrival (10,101,010 samples, 0.03%)</title><rect x="335.4" y="677" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="338.37" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="53" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="63.5" ></text>
</g>
<g >
<title>sim::Link::transmit (60,606,060 samples, 0.18%)</title><rect x="350.1" y="693" width="2.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="353.06" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="896.9" y="565" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="899.88" y="575.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (101,010,100 samples, 0.30%)</title><rect x="584.1" y="645" width="3.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="587.05" y="655.5" ></text>
</g>
<g >
<title>sim::Host::~Host (10,101,010 samples, 0.03%)</title><rect x="10.7" y="661" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="13.72" y="671.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="574.0" y="661" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="577.02" y="671.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="901.9" y="645" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="904.90" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1148.4" y="629" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1151.43" y="639.5" ></text>
</g>
<g >
<title>sim::RoutingModule::update_routing_table (151,515,150 samples, 0.46%)</title><rect x="1156.7" y="709" width="5.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1159.67" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="341" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="597" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="607.5" ></text>
</g>
<g >
<title>std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;::size_type std::__detail::__erase_nodes_if&lt;std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, std::set&lt;std::weak_ptr&lt;sim::ILink&gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::weak_ptr&lt;sim::ILink&gt; &gt; &gt;, sim::RoutingModule::correctify_outlinks (10,101,010 samples, 0.03%)</title><rect x="1170.3" y="677" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1173.29" y="687.5" ></text>
</g>
<g >
<title>vsnprintf (121,212,120 samples, 0.36%)</title><rect x="342.2" y="613" width="4.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="345.18" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_delivery_rate (10,101,010 samples, 0.03%)</title><rect x="589.1" y="661" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="592.07" y="671.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (30,303,030 samples, 0.09%)</title><rect x="585.8" y="613" width="1.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="588.85" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="469" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="485" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="495.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (10,101,010 samples, 0.03%)</title><rect x="341.5" y="661" width="0.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="344.46" y="671.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.09%)</title><rect x="71.6" y="645" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="74.63" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (252,525,250 samples, 0.76%)</title><rect x="53.0" y="629" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="56.00" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1130.9" y="677" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1133.87" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1161.3" y="613" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1164.33" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="61.2" y="565" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="64.24" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.2" y="677" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.24" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1166.3" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.35" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="629" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="62.7" y="661" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="65.68" y="671.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="334.3" y="661" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="337.29" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="341.8" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="344.82" y="655.5" ></text>
</g>
<g >
<title>sim::Link::~Link (80,808,080 samples, 0.24%)</title><rect x="15.0" y="677" width="2.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="18.02" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="336.8" y="581" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="339.80" y="591.5" ></text>
</g>
<g >
<title>vsnprintf (343,434,340 samples, 1.03%)</title><rect x="37.6" y="645" width="12.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="40.59" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="341" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1148.4" y="645" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1151.43" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1143.8" y="629" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1146.77" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="591.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1185.0" y="693" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.98" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="585.8" y="533" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="588.85" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (60,606,060 samples, 0.18%)</title><rect x="1138.4" y="661" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1141.40" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="51.9" y="677" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="54.93" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="889.0" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="892.00" y="479.5" ></text>
</g>
<g >
<title>YAML::detail::memory::create_node (20,202,020 samples, 0.06%)</title><rect x="1187.8" y="517" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.85" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="309" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="319.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="421" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.49" y="431.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (50,505,050 samples, 0.15%)</title><rect x="71.3" y="677" width="1.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="74.28" y="687.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (111,111,110 samples, 0.33%)</title><rect x="886.5" y="629" width="3.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="889.49" y="639.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::pop (10,101,010 samples, 0.03%)</title><rect x="573.7" y="645" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="576.66" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="580.8" y="549" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.83" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="347.9" y="677" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="350.91" y="687.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="899.7" y="661" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="902.75" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="437" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="533" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="1141.3" y="629" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1144.27" y="639.5" ></text>
</g>
<g >
<title>void std::deque&lt;sim::Packet, std::allocator&lt;sim::Packet&gt; &gt;::_M_push_back_aux&lt;sim::Packet&gt; (10,101,010 samples, 0.03%)</title><rect x="890.4" y="645" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="893.43" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (50,505,050 samples, 0.15%)</title><rect x="1170.6" y="693" width="1.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1173.65" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="18.2" y="693" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.24" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="773" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="757" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>sim::Link::get_max_to_ingress_queue_size (121,212,120 samples, 0.36%)</title><rect x="590.5" y="693" width="4.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="593.50" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="37" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="591.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.06%)</title><rect x="1135.5" y="645" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1138.53" y="655.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.39%)</title><rect x="1143.1" y="661" width="4.6" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1146.06" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="485" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="575.5" ></text>
</g>
<g >
<title>sim::YamlParser::build_simulator_from_config (111,111,110 samples, 0.33%)</title><rect x="1186.1" y="741" width="3.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1189.06" y="751.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="589.1" y="629" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="592.07" y="639.5" ></text>
</g>
<g >
<title>sim::SendData::operator (10,101,010 samples, 0.03%)</title><rect x="1153.8" y="725" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1156.81" y="735.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="62.3" y="661" width="0.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="65.32" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="14.3" y="645" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.30" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (121,212,120 samples, 0.36%)</title><rect x="342.2" y="597" width="4.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="345.18" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="373" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="421" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="350.4" y="677" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="353.42" y="687.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (444,444,440 samples, 1.34%)</title><rect x="36.2" y="693" width="15.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="39.16" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (90,909,090 samples, 0.27%)</title><rect x="887.2" y="613" width="3.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="890.21" y="623.5" ></text>
</g>
<g >
<title>sim::Host::~Host (111,111,110 samples, 0.33%)</title><rect x="11.1" y="677" width="3.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="14.08" y="687.5" ></text>
</g>
<g >
<title>_IO_file_fopen (60,606,060 samples, 0.18%)</title><rect x="33.7" y="645" width="2.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="36.65" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (20,202,020 samples, 0.06%)</title><rect x="340.7" y="613" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="343.74" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="549" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.24%)</title><rect x="896.5" y="629" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="899.52" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="1144.8" y="581" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.85" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1166.3" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.35" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="373" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="383.5" ></text>
</g>
<g >
<title>sim::Link::arrive (414,141,410 samples, 1.25%)</title><rect x="333.6" y="693" width="14.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="336.58" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="469" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.27%)</title><rect x="68.1" y="373" width="3.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.05" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (10,101,010 samples, 0.03%)</title><rect x="584.8" y="613" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="587.77" y="623.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="583.7" y="629" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="586.70" y="639.5" ></text>
</g>
<g >
<title>vsnprintf (40,404,040 samples, 0.12%)</title><rect x="73.1" y="645" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="76.07" y="655.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="336.8" y="613" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="339.80" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="15.4" y="629" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.38" y="639.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="405" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="415.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="453" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.49" y="463.5" ></text>
</g>
<g >
<title>Logger::info (30,303,030 samples, 0.09%)</title><rect x="623.8" y="677" width="1.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="626.83" y="687.5" ></text>
</g>
<g >
<title>virtual thunk to sim::Switch::process (40,404,040 samples, 0.12%)</title><rect x="1152.4" y="709" width="1.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1155.37" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="18.6" y="661" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.60" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1164.6" y="693" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1167.56" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="101" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="111.5" ></text>
</g>
<g >
<title>sim::Scheduler::get_current_time (20,202,020 samples, 0.06%)</title><rect x="348.3" y="693" width="0.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="351.27" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="479.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="469" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.49" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="437" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,010,100 samples, 0.30%)</title><rect x="58.4" y="581" width="3.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="61.38" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="888.6" y="501" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="891.64" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="889.4" y="549" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="892.36" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (171,717,170 samples, 0.52%)</title><rect x="859.6" y="645" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="862.61" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="549" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="543.5" ></text>
</g>
<g >
<title>_start (33,242,423,910 samples, 99.94%)</title><rect x="10.7" y="805" width="1179.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.72" y="815.5" >_start</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="893.7" y="645" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="896.66" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="517" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1191.92" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="533" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::optional&lt;sim::MetricsStorage&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="588.4" y="629" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="591.35" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="645" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::node*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="597" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.28" y="607.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="346.8" y="645" width="0.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="349.84" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="597" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,111,110 samples, 0.33%)</title><rect x="879.0" y="629" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.96" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1166.7" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1169.71" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (30,303,030 samples, 0.09%)</title><rect x="1186.8" y="501" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.77" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="565" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="629" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1166.3" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1169.35" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="575.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="453" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="741" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.09%)</title><rect x="585.8" y="597" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="588.85" y="607.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.18%)</title><rect x="1133.4" y="597" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1136.38" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="709" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="485" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="495.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (80,808,080 samples, 0.24%)</title><rect x="1132.7" y="677" width="2.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1135.67" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="549" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="463.5" ></text>
</g>
<g >
<title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="886.8" y="613" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="889.85" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="879.7" y="613" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="882.68" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="629" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="33.3" y="629" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.29" y="639.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.12%)</title><rect x="350.8" y="661" width="1.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="353.78" y="671.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (40,404,040 samples, 0.12%)</title><rect x="1138.4" y="645" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1141.40" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.03%)</title><rect x="1182.1" y="709" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1185.12" y="719.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1181.4" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.40" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="559.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="584.4" y="629" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="587.41" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="527.5" ></text>
</g>
<g >
<title>malloc (80,808,080 samples, 0.24%)</title><rect x="887.6" y="581" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="890.56" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.12%)</title><rect x="1172.4" y="693" width="1.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1175.44" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="181" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="191.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.36%)</title><rect x="342.2" y="645" width="4.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="345.18" y="655.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1180.3" y="661" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1183.32" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="580.8" y="533" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.83" y="543.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="900.1" y="629" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="903.11" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1155.6" y="709" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1158.60" y="719.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="73.1" y="677" width="1.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="76.07" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="389" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="559.5" ></text>
</g>
<g >
<title>write (10,101,010 samples, 0.03%)</title><rect x="66.6" y="629" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="69.62" y="639.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="580.5" y="597" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="583.47" y="607.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="580.8" y="597" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="583.83" y="607.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::export_metrics_to_files (1,606,060,590 samples, 4.83%)</title><rect x="17.9" y="741" width="57.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="20.88" y="751.5" >sim::M..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="583.3" y="661" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="586.34" y="671.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.24%)</title><rect x="574.4" y="613" width="2.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="577.38" y="623.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.03%)</title><rect x="72.7" y="661" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="75.71" y="671.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="583.7" y="645" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="586.70" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="889.0" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="892.00" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="597" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="607.5" ></text>
</g>
<g >
<title>void sim::Scheduler::add&lt;sim::Process, Time&lt;Nanosecond&gt;, std::weak_ptr&lt;sim::IProcessingDevice&gt;&amp;&gt; (3,161,616,130 samples, 9.51%)</title><rect x="1013.7" y="693" width="112.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1016.70" y="703.5" >void sim::Sch..</text>
</g>
<g >
<title>writev (10,101,010 samples, 0.03%)</title><rect x="62.3" y="645" width="0.4" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="65.32" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="30.8" y="677" width="0.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="33.78" y="687.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="19.7" y="677" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="22.68" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.30%)</title><rect x="67.7" y="389" width="3.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="70.69" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1166.0" y="517" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.99" y="527.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="32.9" y="661" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="35.93" y="671.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_max_size (30,303,030 samples, 0.09%)</title><rect x="602.3" y="693" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="605.33" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="1163.8" y="677" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1166.84" y="687.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::push (10,101,010 samples, 0.03%)</title><rect x="347.6" y="677" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="350.55" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="517" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="527.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="589.1" y="645" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="592.07" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,202,020 samples, 0.06%)</title><rect x="1180.3" y="677" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.32" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="607.5" ></text>
</g>
<g >
<title>sim::TcpFlow::retransmit_packet (10,101,010 samples, 0.03%)</title><rect x="1151.7" y="693" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1154.66" y="703.5" ></text>
</g>
<g >
<title>YAML::LoadFile (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="725" width="3.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.06" y="735.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="343.3" y="565" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="346.25" y="575.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="613" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="623.5" ></text>
</g>
<g >
<title>pthread_once (10,101,010 samples, 0.03%)</title><rect x="899.4" y="629" width="0.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="902.39" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (90,909,090 samples, 0.27%)</title><rect x="1144.5" y="597" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1147.49" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="405" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="415.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="351.9" y="597" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="354.85" y="607.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (10,101,010 samples, 0.03%)</title><rect x="1151.7" y="661" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1154.66" y="671.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.03%)</title><rect x="1179.6" y="677" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1182.61" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="565" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="575.5" ></text>
</g>
<g >
<title>sim::SendData::~SendData (10,101,010 samples, 0.03%)</title><rect x="1154.2" y="725" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1157.17" y="735.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (131,313,130 samples, 0.39%)</title><rect x="341.8" y="661" width="4.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="344.82" y="671.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="1163.8" y="693" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1166.84" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="351.9" y="565" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.85" y="575.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (30,303,030 samples, 0.09%)</title><rect x="1131.2" y="677" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1134.23" y="687.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="581" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1189.06" y="591.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (80,808,080 samples, 0.24%)</title><rect x="574.4" y="645" width="2.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="577.38" y="655.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="32.9" y="677" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="35.93" y="687.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (60,606,060 samples, 0.18%)</title><rect x="33.7" y="677" width="2.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="36.65" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="581" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="882.9" y="629" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="885.91" y="639.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="709" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1159.32" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="117" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="580.8" y="517" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="583.83" y="527.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="572.6" y="661" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="575.59" y="671.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1186.4" y="485" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1189.42" y="495.5" ></text>
</g>
<g >
<title>sim::RoutingModule::get_link_to_destination (40,404,040 samples, 0.12%)</title><rect x="900.8" y="677" width="1.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="903.82" y="687.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1141.3" y="645" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1144.27" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1164.2" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1167.20" y="655.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1151.7" y="645" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1154.66" y="655.5" ></text>
</g>
<g >
<title>operator new (484,848,480 samples, 1.46%)</title><rect x="865.7" y="661" width="17.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="868.71" y="671.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1181.4" y="677" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.40" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1145.9" y="549" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1148.92" y="559.5" ></text>
</g>
<g >
<title>cfree (10,101,010 samples, 0.03%)</title><rect x="333.9" y="677" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="336.94" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="575.5" ></text>
</g>
<g >
<title>std::filesystem::status (10,101,010 samples, 0.03%)</title><rect x="35.8" y="693" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="38.80" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="886.8" y="597" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="889.85" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (60,606,060 samples, 0.18%)</title><rect x="1133.4" y="565" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1136.38" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="585.8" y="549" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="588.85" y="559.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1180.0" y="645" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1182.97" y="655.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (20,202,020 samples, 0.06%)</title><rect x="1135.5" y="661" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1138.53" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (353,535,350 samples, 1.06%)</title><rect x="841.7" y="661" width="12.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="844.70" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.06%)</title><rect x="1149.5" y="661" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1152.51" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="597" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="629" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="463.5" ></text>
</g>
<g >
<title>operator new (80,808,080 samples, 0.24%)</title><rect x="887.6" y="597" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="890.56" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;Time&lt;Nanosecond&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="32.2" y="693" width="1.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="35.22" y="703.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (121,212,120 samples, 0.36%)</title><rect x="583.7" y="661" width="4.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="586.70" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="613" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="437" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="447.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="579.0" y="629" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="582.04" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="629" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;Time&lt;Nanosecond&gt;, std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, std::less&lt;Time&lt;Nanosecond&gt; &gt;, std::allocator&lt;std::pair&lt;Time&lt;Nanosecond&gt; const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.12%)</title><rect x="30.1" y="693" width="1.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="33.07" y="703.5" ></text>
</g>
<g >
<title>sim::Simulator::recalculate_paths (878,787,870 samples, 2.64%)</title><rect x="1154.5" y="725" width="31.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1157.52" y="735.5" >si..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="431.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="597" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.64" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="533" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="347.2" y="629" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="350.19" y="639.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (30,303,030 samples, 0.09%)</title><rect x="74.9" y="741" width="1.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="77.86" y="751.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (434,343,430 samples, 1.31%)</title><rect x="36.5" y="677" width="15.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="39.52" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;YAML::detail::node&gt;, std::shared_ptr&lt;YAML::detail::node&gt;, std::_Identity&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::less&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;YAML::detail::node&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="645" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.28" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="591.5" ></text>
</g>
<g >
<title>sim::Simulator::start (31,292,928,980 samples, 94.08%)</title><rect x="75.9" y="741" width="1110.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="78.93" y="751.5" >sim::Simulator::start</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1173.5" y="661" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.52" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="19.7" y="661" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.68" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="485" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="73.1" y="613" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.07" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="629" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="629" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="639.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="340.7" y="581" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="343.74" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="677" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="687.5" ></text>
</g>
<g >
<title>all (33,262,625,930 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="72.0" y="597" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.99" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="501" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="511.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::export_to_files (232,323,230 samples, 0.70%)</title><rect x="66.6" y="725" width="8.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="69.62" y="735.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,595,959,550 samples, 13.82%)</title><rect x="82.0" y="725" width="163.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="85.03" y="735.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="575.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_cwnd (10,101,010 samples, 0.03%)</title><rect x="588.7" y="661" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="591.71" y="671.5" ></text>
</g>
<g >
<title>sim::Process::operator (80,808,080 samples, 0.24%)</title><rect x="245.8" y="725" width="2.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="248.78" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="549" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (30,303,030 samples, 0.09%)</title><rect x="71.6" y="661" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="74.63" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="501" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="511.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="533" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.92" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="73.1" y="597" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.07" y="607.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="709" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1188.34" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="357" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2,010,100,990 samples, 6.04%)</title><rect x="941.3" y="677" width="71.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="944.31" y="687.5" >std::_Rb..</text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="589.1" y="613" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="592.07" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="85" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="661" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="671.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="882.9" y="661" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="885.91" y="671.5" ></text>
</g>
<g >
<title>vsnprintf (30,303,030 samples, 0.09%)</title><rect x="585.8" y="581" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="588.85" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="645" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (60,606,060 samples, 0.18%)</title><rect x="1175.7" y="693" width="2.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1178.67" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="405" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="415.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::get_size (20,202,020 samples, 0.06%)</title><rect x="603.4" y="693" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="606.40" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="133" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="581" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="591.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (30,303,030 samples, 0.09%)</title><rect x="585.8" y="629" width="1.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="588.85" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="896.5" y="581" width="2.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="899.52" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="495.5" ></text>
</g>
<g >
<title>sim::Process::operator (21,808,080,590 samples, 65.56%)</title><rect x="352.2" y="709" width="773.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="355.21" y="719.5" >sim::Process::operator</text>
</g>
<g >
<title>std::_Rb_tree_increment (40,404,040 samples, 0.12%)</title><rect x="1174.2" y="693" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1177.23" y="703.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1180.0" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.97" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="70.9" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="73.92" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,505,050 samples, 0.15%)</title><rect x="1165.3" y="661" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.27" y="671.5" ></text>
</g>
<g >
<title>fopen (121,212,120 samples, 0.36%)</title><rect x="67.0" y="661" width="4.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="69.98" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="693" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;sim::IHost,  (10,101,010 samples, 0.03%)</title><rect x="589.8" y="677" width="0.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="592.79" y="687.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="1142.7" y="661" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1145.70" y="671.5" ></text>
</g>
<g >
<title>sim::Event::Event (161,616,160 samples, 0.49%)</title><rect x="386.3" y="693" width="5.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="389.25" y="703.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="30.4" y="661" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.43" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="607.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (50,505,050 samples, 0.15%)</title><rect x="572.2" y="677" width="1.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="575.23" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="431.5" ></text>
</g>
<g >
<title>fopen (60,606,060 samples, 0.18%)</title><rect x="33.7" y="661" width="2.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="36.65" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,909,090 samples, 0.27%)</title><rect x="1177.8" y="693" width="3.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1180.82" y="703.5" ></text>
</g>
<g >
<title>__libc_start_main (33,242,423,910 samples, 99.94%)</title><rect x="10.7" y="789" width="1179.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.72" y="799.5" >__libc_start_main</text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (30,303,030 samples, 0.09%)</title><rect x="336.4" y="661" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="339.44" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1168.9" y="645" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1171.86" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1166.0" y="533" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.99" y="543.5" ></text>
</g>
<g >
<title>sim::TcpFlow::update (212,121,210 samples, 0.64%)</title><rect x="581.9" y="677" width="7.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="584.90" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="517" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="245" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="501" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="501" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (70,707,070 samples, 0.21%)</title><rect x="1133.0" y="613" width="2.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1136.02" y="623.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1150.2" y="677" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1153.22" y="687.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="49.8" y="661" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="52.78" y="671.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="585.1" y="629" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="588.13" y="639.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="586.9" y="629" width="0.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="589.92" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (333,333,330 samples, 1.00%)</title><rect x="38.0" y="629" width="11.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.95" y="639.5" ></text>
</g>
<g >
<title>sim::LinkQueue::front (20,202,020 samples, 0.06%)</title><rect x="891.1" y="661" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="894.15" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="336.8" y="597" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="339.80" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="581" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="591.5" ></text>
</g>
<g >
<title>Logger::warn (2,363,636,340 samples, 7.11%)</title><rect x="624.9" y="677" width="83.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="627.90" y="687.5" >Logger::w..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (121,212,120 samples, 0.36%)</title><rect x="342.2" y="629" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="345.18" y="639.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (30,303,030 samples, 0.09%)</title><rect x="577.2" y="661" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="580.25" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="549" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="597" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="725" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1192.64" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="888.6" y="517" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="891.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="886.8" y="581" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="889.85" y="591.5" ></text>
</g>
<g >
<title>_IO_file_open (121,212,120 samples, 0.36%)</title><rect x="67.0" y="629" width="4.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="69.98" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="574.4" y="597" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.38" y="607.5" ></text>
</g>
<g >
<title>sim::Switch::process (11,545,454,430 samples, 34.71%)</title><rect x="604.1" y="693" width="409.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="607.12" y="703.5" >sim::Switch::process</text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="437" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="10.4" y="533" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.36" y="543.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_i_link (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="661" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1192.64" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 0.79%)</title><rect x="40.5" y="613" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="43.46" y="623.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::Push (20,202,020 samples, 0.06%)</title><rect x="1187.8" y="533" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1190.85" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.4" y="341" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.44" y="351.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="889.0" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="892.00" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="389" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="421" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="661" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="671.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (80,808,080 samples, 0.24%)</title><rect x="574.4" y="661" width="2.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="577.38" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="421" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;YAML::detail::memory_holder*,  (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="693" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1192.28" y="703.5" ></text>
</g>
<g >
<title>sim::LinkParser::parse_default_link (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="645" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1192.64" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="511.5" ></text>
</g>
<g >
<title>YAML::Stream::_ReadAheadTo (10,101,010 samples, 0.03%)</title><rect x="1187.1" y="469" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.13" y="479.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="597" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (3,868,686,830 samples, 11.63%)</title><rect x="747.5" y="677" width="137.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="750.46" y="687.5" >sim::Link::get_pa..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="894.4" y="661" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="897.37" y="671.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (141,414,140 samples, 0.43%)</title><rect x="885.4" y="645" width="5.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="888.41" y="655.5" ></text>
</g>
<g >
<title>operator new (242,424,240 samples, 0.73%)</title><rect x="738.9" y="677" width="8.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="741.86" y="687.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="1161.0" y="661" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.97" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="76.7" y="725" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="79.65" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="70.2" y="325" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="73.20" y="335.5" ></text>
</g>
<g >
<title>sim::Link::get_packet (111,111,110 samples, 0.33%)</title><rect x="594.8" y="693" width="3.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="597.80" y="703.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (70,707,070 samples, 0.21%)</title><rect x="1133.0" y="645" width="2.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1136.02" y="655.5" ></text>
</g>
<g >
<title>open64 (60,606,060 samples, 0.18%)</title><rect x="33.7" y="613" width="2.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="36.65" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="350.8" y="645" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.78" y="655.5" ></text>
</g>
<g >
<title>strlen@plt (30,303,030 samples, 0.09%)</title><rect x="1012.6" y="677" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1015.62" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="379.1" y="693" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="382.09" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="661" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="351.1" y="645" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="354.14" y="655.5" ></text>
</g>
<g >
<title>std::locale::operator= (10,101,010 samples, 0.03%)</title><rect x="584.8" y="597" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="587.77" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="543.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="661" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="671.5" ></text>
</g>
<g >
<title>sim::Host::enqueue_packet (80,808,080 samples, 0.24%)</title><rect x="579.0" y="645" width="2.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="582.04" y="655.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (40,404,040 samples, 0.12%)</title><rect x="1187.8" y="565" width="1.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.85" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="293" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="389" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="399.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.18%)</title><rect x="1164.9" y="677" width="2.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1167.92" y="687.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (313,131,310 samples, 0.94%)</title><rect x="52.3" y="677" width="11.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="55.28" y="687.5" ></text>
</g>
<g >
<title>vsnprintf (20,202,020 samples, 0.06%)</title><rect x="580.8" y="565" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="583.83" y="575.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="549" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1189.06" y="559.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="469" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="574.4" y="581" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.38" y="591.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (121,212,120 samples, 0.36%)</title><rect x="574.0" y="677" width="4.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="577.02" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="677" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>operator new (262,626,260 samples, 0.79%)</title><rect x="1106.9" y="677" width="9.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1109.87" y="687.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="884.0" y="629" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="886.98" y="639.5" ></text>
</g>
<g >
<title>sim::LinkQueue::empty (30,303,030 samples, 0.09%)</title><rect x="891.9" y="677" width="1.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="894.86" y="687.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="597" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="607.5" ></text>
</g>
<g >
<title>operator delete (50,505,050 samples, 0.15%)</title><rect x="737.1" y="677" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="740.06" y="687.5" ></text>
</g>
<g >
<title>sim::LinkQueue::pop (40,404,040 samples, 0.12%)</title><rect x="350.8" y="677" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="353.78" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="1169.9" y="677" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1172.93" y="687.5" ></text>
</g>
<g >
<title>sim::Host::process (545,454,540 samples, 1.64%)</title><rect x="571.2" y="693" width="19.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="574.15" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="623.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,808,080 samples, 0.24%)</title><rect x="574.4" y="629" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="577.38" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;* std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::weak_ptr&lt;sim::ILink&gt;, std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt;, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt;::_Alloc_node&gt; (10,101,010 samples, 0.03%)</title><rect x="1185.0" y="709" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1187.98" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="72.0" y="581" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.99" y="591.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="584.1" y="629" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="587.05" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="565" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="575.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="339.3" y="661" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="342.31" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1185.0" y="677" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.98" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="453" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="463.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (80,808,080 samples, 0.24%)</title><rect x="1186.4" y="581" width="2.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.42" y="591.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="340.7" y="597" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="343.74" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;sim::Identifiable&gt; &gt; &gt; &gt;::_M_erase (202,020,200 samples, 0.61%)</title><rect x="10.7" y="709" width="7.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.72" y="719.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (30,303,030 samples, 0.09%)</title><rect x="1141.6" y="645" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1144.62" y="655.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::front (20,202,020 samples, 0.06%)</title><rect x="891.1" y="645" width="0.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="894.15" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="888.6" y="485" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="891.64" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="34.4" y="405" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.37" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="447.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::export_to_file (222,222,220 samples, 0.67%)</title><rect x="66.6" y="709" width="7.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="69.62" y="719.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::set_mark (10,101,010 samples, 0.03%)</title><rect x="1188.6" y="533" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1191.57" y="543.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.21%)</title><rect x="68.8" y="357" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="71.77" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="277" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (10,101,010 samples, 0.03%)</title><rect x="899.7" y="645" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="902.75" y="655.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="549" width="1.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.42" y="559.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="453" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="463.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="14.3" y="661" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="17.30" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (262,626,260 samples, 0.79%)</title><rect x="323.2" y="693" width="9.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="326.19" y="703.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,404,040 samples, 0.12%)</title><rect x="73.1" y="661" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="76.07" y="671.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (70,707,070 samples, 0.21%)</title><rect x="1133.0" y="661" width="2.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1136.02" y="671.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (262,626,260 samples, 0.79%)</title><rect x="52.6" y="661" width="9.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="55.64" y="671.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (10,101,010 samples, 0.03%)</title><rect x="1186.1" y="565" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.06" y="575.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="579.4" y="613" width="1.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="582.40" y="623.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (323,232,320 samples, 0.97%)</title><rect x="51.9" y="693" width="11.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="54.93" y="703.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="19.0" y="693" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="21.96" y="703.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (101,010,100 samples, 0.30%)</title><rect x="1144.1" y="629" width="3.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1147.13" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="549" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="559.5" ></text>
</g>
<g >
<title>malloc (191,919,190 samples, 0.58%)</title><rect x="740.6" y="661" width="6.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="743.65" y="671.5" ></text>
</g>
<g >
<title>sim::MultiIdMetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="588.7" y="645" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="591.71" y="655.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.03%)</title><rect x="66.3" y="709" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="69.26" y="719.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (121,212,120 samples, 0.36%)</title><rect x="1143.4" y="645" width="4.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1146.42" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (20,202,020 samples, 0.06%)</title><rect x="31.5" y="693" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="34.50" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1187.5" y="437" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1190.49" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="693" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.88" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="469" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="479.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (60,606,060 samples, 0.18%)</title><rect x="579.4" y="629" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="582.40" y="639.5" ></text>
</g>
<g >
<title>_IO_file_fopen (121,212,120 samples, 0.36%)</title><rect x="67.0" y="645" width="4.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="69.98" y="655.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="590.1" y="677" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="593.15" y="687.5" ></text>
</g>
<g >
<title>sim::Link::get_to (30,303,030 samples, 0.09%)</title><rect x="1167.8" y="693" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1170.78" y="703.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (90,909,090 samples, 0.27%)</title><rect x="578.7" y="661" width="3.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="581.68" y="671.5" ></text>
</g>
<g >
<title>operator new (121,212,120 samples, 0.36%)</title><rect x="382.0" y="693" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="384.95" y="703.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="501" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="517" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="527.5" ></text>
</g>
<g >
<title>Logger::get_instance (40,404,040 samples, 0.12%)</title><rect x="377.3" y="693" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="380.29" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="421" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="431.5" ></text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.12%)</title><rect x="77.0" y="725" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="80.01" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,101,010 samples, 0.03%)</title><rect x="1141.3" y="613" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1144.27" y="623.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 0.09%)</title><rect x="334.3" y="677" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="337.29" y="687.5" ></text>
</g>
<g >
<title>sim::YamlParser::process_links (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="709" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.64" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="645" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="655.5" ></text>
</g>
<g >
<title>sim::TcpFlow::send_packet_now (10,101,010 samples, 0.03%)</title><rect x="1151.7" y="677" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1154.66" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="677" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.88" y="687.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (222,222,220 samples, 0.67%)</title><rect x="892.9" y="677" width="7.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="895.94" y="687.5" ></text>
</g>
<g >
<title>operator delete (60,606,060 samples, 0.18%)</title><rect x="379.8" y="693" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="382.80" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="469" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="479.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (10,101,010 samples, 0.03%)</title><rect x="66.6" y="693" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="69.62" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="677" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="687.5" ></text>
</g>
<g >
<title>nons (33,262,625,930 samples, 100.00%)</title><rect x="10.0" y="821" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >nons</text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="1143.1" y="645" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1146.06" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="469" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (70,707,070 samples, 0.21%)</title><rect x="1182.5" y="709" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1185.47" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="495.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (282,828,280 samples, 0.85%)</title><rect x="337.5" y="677" width="10.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="340.52" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="213" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="223.5" ></text>
</g>
<g >
<title>sim::write_to_csv (1,272,727,260 samples, 3.83%)</title><rect x="20.4" y="709" width="45.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="23.39" y="719.5" >sim:..</text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="485" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="693" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="703.5" ></text>
</g>
<g >
<title>YAML::Load (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="709" width="3.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.06" y="719.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (20,202,020 samples, 0.06%)</title><rect x="1135.5" y="677" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1138.53" y="687.5" ></text>
</g>
<g >
<title>sim::Link::Arrive::operator (464,646,460 samples, 1.40%)</title><rect x="332.5" y="709" width="16.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="335.50" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="1185.7" y="725" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1188.70" y="735.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (20,202,020 samples, 0.06%)</title><rect x="572.9" y="645" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="575.95" y="655.5" ></text>
</g>
<g >
<title>void spdlog::logger::log_&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (363,636,360 samples, 1.09%)</title><rect x="695.9" y="661" width="12.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="698.85" y="671.5" ></text>
</g>
<g >
<title>sim::Link::get_to (10,101,010 samples, 0.03%)</title><rect x="1158.1" y="693" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1161.11" y="703.5" ></text>
</g>
<g >
<title>sim::SendData::operator (585,858,580 samples, 1.76%)</title><rect x="1129.8" y="709" width="20.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1132.80" y="719.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1168.9" y="661" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.86" y="671.5" ></text>
</g>
<g >
<title>fstatat64 (10,101,010 samples, 0.03%)</title><rect x="35.8" y="677" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="38.80" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="10.0" y="565" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>sim::Scheduler::tick (25,414,141,160 samples, 76.40%)</title><rect x="252.2" y="725" width="901.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="255.24" y="735.5" >sim::Scheduler::tick</text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="597" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="533" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="543.5" ></text>
</g>
<g >
<title>sim::MetricsCollector::add_queue_size (40,404,040 samples, 0.12%)</title><rect x="882.9" y="645" width="1.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="885.91" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="357" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="367.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (60,606,060 samples, 0.18%)</title><rect x="1140.5" y="661" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1143.55" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60,606,060 samples, 0.18%)</title><rect x="33.7" y="517" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="36.65" y="527.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="338.6" y="661" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="341.59" y="671.5" ></text>
</g>
<g >
<title>open64 (121,212,120 samples, 0.36%)</title><rect x="67.0" y="613" width="4.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="69.98" y="623.5" ></text>
</g>
<g >
<title>sim::Link::schedule_arrival (171,717,170 samples, 0.52%)</title><rect x="884.7" y="677" width="6.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="887.70" y="687.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="900.1" y="645" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="903.11" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="888.6" y="533" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="891.64" y="543.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1168.9" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.86" y="687.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (353,535,350 samples, 1.06%)</title><rect x="37.2" y="661" width="12.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="40.23" y="671.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt; (111,111,110 samples, 0.33%)</title><rect x="895.8" y="645" width="3.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="898.81" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.12%)</title><rect x="34.4" y="389" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="37.37" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="69" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="79.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1137.3" y="661" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1140.32" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="511.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="351.9" y="613" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="354.85" y="623.5" ></text>
</g>
<g >
<title>sim::TcpFlow::Timeout::operator (40,404,040 samples, 0.12%)</title><rect x="1150.6" y="709" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1153.58" y="719.5" ></text>
</g>
<g >
<title>Logger::get_instance (111,111,110 samples, 0.33%)</title><rect x="755.7" y="661" width="3.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="758.70" y="671.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="50.5" y="661" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="53.49" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="889.0" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="892.00" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="10.7" y="757" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.72" y="767.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="527.5" ></text>
</g>
<g >
<title>cfree (30,303,030 samples, 0.09%)</title><rect x="1172.8" y="677" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1175.80" y="687.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (40,404,040 samples, 0.12%)</title><rect x="892.9" y="661" width="1.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="895.94" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="453" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="36.2" y="677" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.16" y="687.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (20,202,020 samples, 0.06%)</title><rect x="580.8" y="613" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="583.83" y="623.5" ></text>
</g>
<g >
<title>malloc (60,606,060 samples, 0.18%)</title><rect x="1133.4" y="581" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1136.38" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="10.7" y="677" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.72" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="19.0" y="677" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.96" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="1134.1" y="549" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1137.10" y="559.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (30,303,030 samples, 0.09%)</title><rect x="349.0" y="693" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="351.99" y="703.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.06%)</title><rect x="1159.9" y="677" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1162.90" y="687.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="573.3" y="629" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="576.30" y="639.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (121,212,120 samples, 0.36%)</title><rect x="67.0" y="677" width="4.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="69.98" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,404,040 samples, 0.12%)</title><rect x="73.1" y="629" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.07" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="527.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (50,505,050 samples, 0.15%)</title><rect x="335.7" y="677" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="338.73" y="687.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="579.0" y="613" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="582.04" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="405" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="415.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="72.0" y="613" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.99" y="623.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanPlainScalar (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="533" width="1.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.42" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="49.1" y="565" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="52.06" y="575.5" ></text>
</g>
<g >
<title>void sim::YamlParser::process_identifiables&lt;sim::ILink&gt; (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="693" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1192.64" y="703.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long double&gt; (40,404,040 samples, 0.12%)</title><rect x="73.1" y="693" width="1.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="76.07" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::shared_ptr&lt;sim::ILink&gt;, std::shared_ptr&lt;sim::ILink&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::ILink&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (20,202,020 samples, 0.06%)</title><rect x="1169.2" y="677" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1172.22" y="687.5" ></text>
</g>
<g >
<title>sim::Packet::to_string[abi:cxx11] (353,535,350 samples, 1.06%)</title><rect x="1136.6" y="677" width="12.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1139.61" y="687.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (10,101,010 samples, 0.03%)</title><rect x="339.0" y="645" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="341.95" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="149" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="159.5" ></text>
</g>
<g >
<title>sim::Event::Event (272,727,270 samples, 0.82%)</title><rect x="1116.2" y="677" width="9.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1119.18" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="581" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,020,200 samples, 0.61%)</title><rect x="54.8" y="597" width="7.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="57.79" y="607.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="337.2" y="629" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="340.16" y="639.5" ></text>
</g>
<g >
<title>main (33,040,403,710 samples, 99.33%)</title><rect x="17.9" y="757" width="1172.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="20.88" y="767.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="591.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (4,989,898,940 samples, 15.00%)</title><rect x="392.0" y="693" width="177.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="394.99" y="703.5" >sim::Event::operator&gt;</text>
</g>
<g >
<title>YAML::ScanScalar[abi:cxx11] (40,404,040 samples, 0.12%)</title><rect x="1186.4" y="517" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.42" y="527.5" ></text>
</g>
<g >
<title>cfree (20,202,020 samples, 0.06%)</title><rect x="18.2" y="709" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="21.24" y="719.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::add_record (30,303,030 samples, 0.09%)</title><rect x="336.4" y="645" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="339.44" y="655.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="613" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.64" y="623.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="677" width="3.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1189.06" y="687.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.03%)</title><rect x="1181.4" y="661" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1184.40" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="709" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="719.5" ></text>
</g>
<g >
<title>sim::Event::operator&gt; (10,101,010 samples, 0.03%)</title><rect x="1129.8" y="693" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1132.80" y="703.5" ></text>
</g>
<g >
<title>sim::Link::start_head_packet_sending (30,303,030 samples, 0.09%)</title><rect x="890.8" y="677" width="1.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="893.79" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="885.8" y="629" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="888.77" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (10,101,010 samples, 0.03%)</title><rect x="336.4" y="197" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.44" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="511.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::add_record (10,101,010 samples, 0.03%)</title><rect x="573.3" y="613" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="576.30" y="623.5" ></text>
</g>
<g >
<title>malloc (30,303,030 samples, 0.09%)</title><rect x="1161.0" y="645" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1163.97" y="655.5" ></text>
</g>
<g >
<title>vsnprintf (80,808,080 samples, 0.24%)</title><rect x="896.5" y="613" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="899.52" y="623.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="895.4" y="645" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="898.45" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1160.3" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1163.26" y="495.5" ></text>
</g>
<g >
<title>strlen@plt (10,101,010 samples, 0.03%)</title><rect x="884.3" y="661" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="887.34" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="591.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="613" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="677" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.4" y="357" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.44" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="571.5" y="677" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="574.51" y="687.5" ></text>
</g>
<g >
<title>Logger::warn (10,101,010 samples, 0.03%)</title><rect x="378.7" y="693" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="381.73" y="703.5" ></text>
</g>
<g >
<title>__default_morecore (10,101,010 samples, 0.03%)</title><rect x="19.3" y="661" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="22.32" y="671.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="66.6" y="661" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="69.62" y="671.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="693" width="3.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1189.06" y="703.5" ></text>
</g>
<g >
<title>malloc (90,909,090 samples, 0.27%)</title><rect x="733.8" y="677" width="3.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="736.84" y="687.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="1180.3" y="645" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1183.32" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="645" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="655.5" ></text>
</g>
<g >
<title>malloc (50,505,050 samples, 0.15%)</title><rect x="1105.1" y="677" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1108.07" y="687.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (90,909,090 samples, 0.27%)</title><rect x="1186.1" y="629" width="3.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1189.06" y="639.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="32.9" y="645" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="35.93" y="655.5" ></text>
</g>
<g >
<title>int YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (10,101,010 samples, 0.03%)</title><rect x="1188.9" y="421" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.92" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30,303,030 samples, 0.09%)</title><rect x="1165.6" y="581" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1168.63" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="65.5" y="709" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="68.54" y="719.5" ></text>
</g>
<g >
<title>vsnprintf (10,101,010 samples, 0.03%)</title><rect x="51.6" y="661" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="54.57" y="671.5" ></text>
</g>
<g >
<title>std::__num_base::_S_format_float (10,101,010 samples, 0.03%)</title><rect x="895.1" y="645" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="898.09" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="585.8" y="565" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="588.85" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::shared_ptr&lt;sim::IRoutingDevice&gt;, std::_Identity&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::less&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;sim::IRoutingDevice&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="1181.0" y="693" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.04" y="703.5" ></text>
</g>
<g >
<title>vsnprintf (90,909,090 samples, 0.27%)</title><rect x="1144.5" y="613" width="3.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1147.49" y="623.5" ></text>
</g>
<g >
<title>sim::Link::get_from (20,202,020 samples, 0.06%)</title><rect x="1167.1" y="693" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1170.07" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="613" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="623.5" ></text>
</g>
<g >
<title>sim::MetricsStorage::get_records (10,101,010 samples, 0.03%)</title><rect x="29.7" y="693" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="32.71" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="581" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (494,949,490 samples, 1.49%)</title><rect x="708.8" y="677" width="17.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="711.75" y="687.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,303,030 samples, 0.09%)</title><rect x="340.4" y="645" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="343.39" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="543.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="577.6" y="645" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="580.60" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,303,030 samples, 0.09%)</title><rect x="1161.0" y="629" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1163.97" y="639.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="586.9" y="613" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="589.92" y="623.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="568.6" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="571.65" y="495.5" ></text>
</g>
<g >
<title>brk (10,101,010 samples, 0.03%)</title><rect x="19.3" y="645" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="22.32" y="655.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.06%)</title><rect x="29.0" y="677" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="31.99" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.4" y="309" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.44" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="613" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.28" y="623.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="339.0" y="661" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="341.95" y="671.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (90,909,090 samples, 0.27%)</title><rect x="349.0" y="709" width="3.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="351.99" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="607.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="453" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="463.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="501" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="581" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="591.5" ></text>
</g>
<g >
<title>fmt::v11::basic_appender&lt;char&gt; fmt::v11::detail::copy_noinline&lt;char, char const*, fmt::v11::basic_appender&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1150.2" y="661" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1153.22" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1185.3" y="645" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1188.34" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="887.2" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="890.21" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="14.7" y="629" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.66" y="639.5" ></text>
</g>
<g >
<title>sim::LinkQueue::push (161,616,160 samples, 0.49%)</title><rect x="885.1" y="661" width="5.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="888.06" y="671.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="693" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1159.32" y="703.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.18%)</title><rect x="1164.9" y="693" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1167.92" y="703.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.03%)</title><rect x="50.1" y="661" width="0.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="53.13" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,101,010 samples, 0.03%)</title><rect x="336.4" y="229" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="339.44" y="239.5" ></text>
</g>
<g >
<title>sim::Link::Transmit::operator (20,202,020 samples, 0.06%)</title><rect x="245.1" y="725" width="0.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="248.07" y="735.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.7" y="485" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.68" y="495.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="351.9" y="581" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="354.85" y="591.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (121,212,120 samples, 0.36%)</title><rect x="67.0" y="693" width="4.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="69.98" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="17.9" y="709" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.88" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.06%)</title><rect x="1133.4" y="501" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.38" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="584.4" y="613" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="587.41" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="589.4" y="677" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="592.43" y="687.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="587.3" y="597" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="590.28" y="607.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,808,080 samples, 0.24%)</title><rect x="574.4" y="565" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="577.38" y="575.5" ></text>
</g>
<g >
<title>fmt::v11::vformat[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="336.8" y="629" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="339.80" y="639.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.8" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.80" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (70,707,070 samples, 0.21%)</title><rect x="15.4" y="645" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.38" y="655.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,202,020 samples, 0.06%)</title><rect x="576.5" y="549" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="579.53" y="559.5" ></text>
</g>
<g >
<title>Logger::info (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="677" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1133.52" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,101,010 samples, 0.03%)</title><rect x="1157.7" y="693" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1160.75" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (10,101,010 samples, 0.03%)</title><rect x="340.0" y="645" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="343.03" y="655.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (40,404,040 samples, 0.12%)</title><rect x="1147.7" y="661" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1150.72" y="671.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="1133.7" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1136.74" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="35.4" y="325" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="38.44" y="335.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_convert_to_external (10,101,010 samples, 0.03%)</title><rect x="66.6" y="645" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="69.62" y="655.5" ></text>
</g>
<g >
<title>sim::RoutingModule::next_inlink (10,101,010 samples, 0.03%)</title><rect x="602.0" y="693" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="604.97" y="703.5" ></text>
</g>
<g >
<title>sim::Process::~Process (111,111,110 samples, 0.33%)</title><rect x="1125.9" y="709" width="3.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1128.86" y="719.5" ></text>
</g>
<g >
<title>cfree (212,121,210 samples, 0.64%)</title><rect x="726.3" y="677" width="7.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="729.31" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="351.5" y="565" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.49" y="575.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (121,212,120 samples, 0.36%)</title><rect x="67.0" y="453" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="69.98" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::shared_ptr&lt;sim::ILink&gt;  (10,101,010 samples, 0.03%)</title><rect x="1189.6" y="677" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1192.64" y="687.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="587.6" y="645" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="590.64" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="19.3" y="597" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="22.32" y="607.5" ></text>
</g>
<g >
<title>sim::SimplePacketQueue::empty (40,404,040 samples, 0.12%)</title><rect x="939.9" y="677" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="942.88" y="687.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="62.3" y="533" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="65.32" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::map&lt;std::weak_ptr&lt;sim::ILink&gt;, int, std::owner_less&lt;std::weak_ptr&lt;sim::ILink&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;sim::ILink&gt; const, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.12%)</title><rect x="1160.6" y="677" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.62" y="687.5" ></text>
</g>
<g >
<title>void fmt::v11::detail::parse_format_string&lt;char, fmt::v11::detail::format_handler&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="581.5" y="629" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="584.55" y="639.5" ></text>
</g>
<g >
<title>sim::Process::~Process (101,010,100 samples, 0.30%)</title><rect x="248.7" y="725" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="251.65" y="735.5" ></text>
</g>
<g >
<title>YAML::Node::~Node (10,101,010 samples, 0.03%)</title><rect x="1189.3" y="725" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1192.28" y="735.5" ></text>
</g>
<g >
<title>sim::LinksQueueSizeStorage::data[abi:cxx11] (20,202,020 samples, 0.06%)</title><rect x="19.7" y="709" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="22.68" y="719.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.15%)</title><rect x="69.5" y="341" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="72.48" y="351.5" ></text>
</g>
<g >
<title>virtual thunk to sim::RoutingModule::get_id[abi:cxx11] (10,101,010 samples, 0.03%)</title><rect x="1181.8" y="693" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1184.76" y="703.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.03%)</title><rect x="889.0" y="437" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="892.00" y="447.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10,101,010 samples, 0.03%)</title><rect x="584.8" y="629" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="587.77" y="639.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="62.0" y="661" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="64.96" y="671.5" ></text>
</g>
<g >
<title>sim::Event::get_time (101,010,100 samples, 0.30%)</title><rect x="78.4" y="725" width="3.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="81.44" y="735.5" ></text>
</g>
</g>
</svg>
